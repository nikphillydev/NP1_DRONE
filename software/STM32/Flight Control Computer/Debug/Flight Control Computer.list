
Flight Control Computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026ca8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001490  08026e88  08026e88  00027e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028318  08028318  0002a370  2**0
                  CONTENTS
  4 .ARM          00000008  08028318  08028318  00029318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028320  08028320  0002a370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08028320  08028320  00029320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08028328  08028328  00029328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08028330  0002a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019558  20000370  080286a0  0002a370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200198c8  080286a0  0002a8c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002a370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00058f13  00000000  00000000  0002a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000adf5  00000000  00000000  000832b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000034d0  00000000  00000000  0008e0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000285a  00000000  00000000  00091578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000375a9  00000000  00000000  00093dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000445f0  00000000  00000000  000cb37b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e03d  00000000  00000000  0010f96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0023d9a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fb98  00000000  00000000  0023da30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0024d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08026e70 	.word	0x08026e70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08026e70 	.word	0x08026e70

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:

    public:
      template<bool _Dummy = true,
	       _ImplicitDefaultCtor<_Dummy, _T1, _T2> = true>
	constexpr
	tuple()
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	noexcept(__nothrow_default_constructible())
	: _Inherited() { }
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f805 	bl	8000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f809 	bl	8000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f81c 	bl	8000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEEC2Ev>:
      _Tuple_impl()
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f805 	bl	8000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EEC2Ev>:
      constexpr _Head_base()
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EEC2Ev>:
      constexpr _Head_base()
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <_ZN2np10lock_guardC1ERPv>:
{
	/*
	 * Class to implement mutex RAII for CMSIS-V2
	 */
public:
	lock_guard(osMutexId_t& mutex) : mutex(mutex) { osMutexAcquire(this->mutex, osWaitForever); }
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001026:	4618      	mov	r0, r3
 8001028:	f013 f891 	bl	801414e <osMutexAcquire>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <_ZN2np10lock_guardD1Ev>:
	~lock_guard() { osMutexRelease(mutex); }
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f013 f8cd 	bl	80141e4 <osMutexRelease>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZN6BMI088C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>:
#include "Drivers/usb.hpp"
#include "Utility/lock_guard.hpp"
#include <cstdio>
#include <cstring>

BMI088::BMI088(SPI_HandleTypeDef* spi_handle, osMutexId_t& spi_mutex, GPIO_TypeDef* acc_cs_port, GPIO_TypeDef* gyro_cs_port,
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
			uint16_t acc_cs_pin, uint16_t gyro_cs_pin, osMutexId_t& accel_data_mutex, osMutexId_t& gyro_data_mutex)
	: spi_handle(spi_handle),
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	601a      	str	r2, [r3, #0]
	  spi_mutex(spi_mutex),
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	605a      	str	r2, [r3, #4]
	  acc_cs_port(acc_cs_port),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	609a      	str	r2, [r3, #8]
	  gyro_cs_port(gyro_cs_port),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	60da      	str	r2, [r3, #12]
	  acc_cs_pin(acc_cs_pin),
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8bba      	ldrh	r2, [r7, #28]
 800107e:	821a      	strh	r2, [r3, #16]
	  gyro_cs_pin(gyro_cs_pin),
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c3a      	ldrh	r2, [r7, #32]
 8001084:	825a      	strh	r2, [r3, #18]
	  accel_data_mutex(accel_data_mutex),
	  gyro_data_mutex(gyro_data_mutex) {}
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4a14      	ldr	r2, [pc, #80]	@ (80010dc <_ZN6BMI088C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x88>)
 800108a:	619a      	str	r2, [r3, #24]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <_ZN6BMI088C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_+0x8c>)
 8001090:	61da      	str	r2, [r3, #28]
	  accel_data_mutex(accel_data_mutex),
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001096:	621a      	str	r2, [r3, #32]
	  gyro_data_mutex(gyro_data_mutex) {}
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	3328      	adds	r3, #40	@ 0x28
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3334      	adds	r3, #52	@ 0x34
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	3344      	adds	r3, #68	@ 0x44
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3350      	adds	r3, #80	@ 0x50
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	3aeb5c0f 	.word	0x3aeb5c0f
 80010e0:	398ba058 	.word	0x398ba058

080010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
	    bool = is_move_assignable<_Dp>::value>
    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>
    {
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
      __uniq_ptr_data(__uniq_ptr_data&&) = default;
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 ffaf 	bl	8002058 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:

      /** @brief Move assignment operator.
       *
       * Invokes the deleter if this object owns a pointer.
       */
      unique_ptr& operator=(unique_ptr&&) = default;
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ffe5 	bl	80010e4 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZN6BMI0884initEv>:

bool BMI088::init()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	bool status = false;
 800112c:	2300      	movs	r3, #0
 800112e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];
	memset(tx_data, 0, sizeof(tx_data));
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2204      	movs	r2, #4
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f023 fe4d 	bl	8024dda <memset>
	memset(rx_data, 0, sizeof(rx_data));
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2204      	movs	r2, #4
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f023 fe46 	bl	8024dda <memset>

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6898      	ldr	r0, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	8a1b      	ldrh	r3, [r3, #16]
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	f009 f865 	bl	800a228 <HAL_GPIO_WritePin>
	osDelay(10);
 800115e:	200a      	movs	r0, #10
 8001160:	f012 ff27 	bl	8013fb2 <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6898      	ldr	r0, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	8a1b      	ldrh	r3, [r3, #16]
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	f009 f85a 	bl	800a228 <HAL_GPIO_WritePin>
	osDelay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f012 ff1c 	bl	8013fb2 <osDelay>
	
	// Perform soft-reset of accelerometer
	tx_data[0] = 0xB6;
 800117a:	23b6      	movs	r3, #182	@ 0xb6
 800117c:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_SOFTRESET, tx_data, 1);
 8001180:	f107 0220 	add.w	r2, r7, #32
 8001184:	2301      	movs	r3, #1
 8001186:	217e      	movs	r1, #126	@ 0x7e
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fdcf 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001194:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001198:	f083 0301 	eor.w	r3, r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d002      	beq.n	80011a8 <_ZN6BMI0884initEv+0x84>
 80011a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011a6:	e20f      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80011a8:	200a      	movs	r0, #10
 80011aa:	f012 ff02 	bl	8013fb2 <osDelay>

	// Perform soft-reset of gyroscope
	tx_data[0] = 0xB6;
 80011ae:	23b6      	movs	r3, #182	@ 0xb6
 80011b0:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_SOFTRESET, tx_data, 1);
 80011b4:	f107 0220 	add.w	r2, r7, #32
 80011b8:	2301      	movs	r3, #1
 80011ba:	2114      	movs	r1, #20
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fe4d 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80011c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011cc:	f083 0301 	eor.w	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d002      	beq.n	80011dc <_ZN6BMI0884initEv+0xb8>
 80011d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011da:	e1f5      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f012 fee8 	bl	8013fb2 <osDelay>
	/*
	 * ACCELEROMETER SETUP
	 */

	// Accelerometer requires rising edge on CS pin to switch to SPI mode
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6898      	ldr	r0, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	8a1b      	ldrh	r3, [r3, #16]
 80011ea:	2200      	movs	r2, #0
 80011ec:	4619      	mov	r1, r3
 80011ee:	f009 f81b 	bl	800a228 <HAL_GPIO_WritePin>
	osDelay(10);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f012 fedd 	bl	8013fb2 <osDelay>
	HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6898      	ldr	r0, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	8a1b      	ldrh	r3, [r3, #16]
 8001200:	2201      	movs	r2, #1
 8001202:	4619      	mov	r1, r3
 8001204:	f009 f810 	bl	800a228 <HAL_GPIO_WritePin>
	osDelay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f012 fed2 	bl	8013fb2 <osDelay>

	// Check accelerometer chip ID
	rx_data[0] = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	773b      	strb	r3, [r7, #28]
	status = read_accel_register(REG_ACC_CHIP_ID, rx_data, 1);
 8001212:	f107 021c 	add.w	r2, r7, #28
 8001216:	2301      	movs	r3, #1
 8001218:	2100      	movs	r1, #0
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fbf2 	bl	8001a04 <_ZN6BMI08819read_accel_registerEhPht>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x1E)
 8001226:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800122a:	2b00      	cmp	r3, #0
 800122c:	d01e      	beq.n	800126c <_ZN6BMI0884initEv+0x148>
 800122e:	7f3b      	ldrb	r3, [r7, #28]
 8001230:	2b1e      	cmp	r3, #30
 8001232:	d11b      	bne.n	800126c <_ZN6BMI0884initEv+0x148>
	{
		USB_Log("Found BMI088 accelerometer, starting initialization.", CRITICAL);
 8001234:	2101      	movs	r1, #1
 8001236:	48c9      	ldr	r0, [pc, #804]	@ (800155c <_ZN6BMI0884initEv+0x438>)
 8001238:	f005 f88a 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f012 feb8 	bl	8013fb2 <osDelay>

	// Set 400Hz ODR, no over-sampling (145Hz BW)
	tx_data[0] = 0xAA;
 8001242:	23aa      	movs	r3, #170	@ 0xaa
 8001244:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_CONF, tx_data, 1);
 8001248:	f107 0220 	add.w	r2, r7, #32
 800124c:	2301      	movs	r3, #1
 800124e:	2140      	movs	r1, #64	@ 0x40
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fd6b 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 8001256:	4603      	mov	r3, r0
 8001258:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800125c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001260:	f083 0301 	eor.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <_ZN6BMI0884initEv+0x154>
 800126a:	e008      	b.n	800127e <_ZN6BMI0884initEv+0x15a>
		USB_Log("Failed to find BMI088 accelerometer. Initialization failed.", ERR);
 800126c:	2102      	movs	r1, #2
 800126e:	48bc      	ldr	r0, [pc, #752]	@ (8001560 <_ZN6BMI0884initEv+0x43c>)
 8001270:	f005 f86e 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		return false;
 8001274:	2300      	movs	r3, #0
 8001276:	e1a7      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	if (!status) return status;
 8001278:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127c:	e1a4      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 800127e:	200a      	movs	r0, #10
 8001280:	f012 fe97 	bl	8013fb2 <osDelay>

	// Initialize accelerometer IIR Filters
	float ACCEL_ODR = 400;				// Hz
 8001284:	4bb7      	ldr	r3, [pc, #732]	@ (8001564 <_ZN6BMI0884initEv+0x440>)
 8001286:	61bb      	str	r3, [r7, #24]
	float ACCEL_CUTOFF = 10;			// Hz
 8001288:	4bb7      	ldr	r3, [pc, #732]	@ (8001568 <_ZN6BMI0884initEv+0x444>)
 800128a:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < accel_filters.size(); i++)
 800128c:	2300      	movs	r3, #0
 800128e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001290:	e01d      	b.n	80012ce <_ZN6BMI0884initEv+0x1aa>
	{
		accel_filters[i] = std::make_unique<IIRFilter>(ACCEL_CUTOFF, ACCEL_ODR);
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	f107 0218 	add.w	r2, r7, #24
 800129a:	f107 0114 	add.w	r1, r7, #20
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 feb0 	bl	8002004 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3344      	adds	r3, #68	@ 0x44
 80012a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 fe9b 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f7ff ff23 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80012be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 fe62 	bl	8001f8c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < accel_filters.size(); i++)
 80012c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ca:	3301      	adds	r3, #1
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3344      	adds	r3, #68	@ 0x44
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fe7c 	bl	8001fd0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80012d8:	4602      	mov	r2, r0
 80012da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012dc:	4293      	cmp	r3, r2
 80012de:	d3d8      	bcc.n	8001292 <_ZN6BMI0884initEv+0x16e>
	}

	// Set +-6g range (5460 LSB/g)
	tx_data[0] = 0x01;
 80012e0:	2301      	movs	r3, #1
 80012e2:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_RANGE, tx_data, 1);
 80012e6:	f107 0220 	add.w	r2, r7, #32
 80012ea:	2301      	movs	r3, #1
 80012ec:	2141      	movs	r1, #65	@ 0x41
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fd1c 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80012fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <_ZN6BMI0884initEv+0x1ea>
 8001308:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130c:	e15c      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 800130e:	200a      	movs	r0, #10
 8001310:	f012 fe4f 	bl	8013fb2 <osDelay>

	// Configure INT1 (output, push-pull, active high)
	tx_data[0] = 0x0A;
 8001314:	230a      	movs	r3, #10
 8001316:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT1_IO_CTRL, tx_data, 1);
 800131a:	f107 0220 	add.w	r2, r7, #32
 800131e:	2301      	movs	r3, #1
 8001320:	2153      	movs	r1, #83	@ 0x53
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fd02 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800132e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001332:	f083 0301 	eor.w	r3, r3, #1
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <_ZN6BMI0884initEv+0x21e>
 800133c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001340:	e142      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 8001342:	200a      	movs	r0, #10
 8001344:	f012 fe35 	bl	8013fb2 <osDelay>

	// Map accelerometer data ready interrupt to INT1
	tx_data[0] = 0x04;
 8001348:	2304      	movs	r3, #4
 800134a:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_INT_MAP_DATA, tx_data, 1);
 800134e:	f107 0220 	add.w	r2, r7, #32
 8001352:	2301      	movs	r3, #1
 8001354:	2158      	movs	r1, #88	@ 0x58
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fce8 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 800135c:	4603      	mov	r3, r0
 800135e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001362:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d002      	beq.n	8001376 <_ZN6BMI0884initEv+0x252>
 8001370:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001374:	e128      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 8001376:	200a      	movs	r0, #10
 8001378:	f012 fe1b 	bl	8013fb2 <osDelay>

	// Switch accelerometer into active mode (enable data acquisition)
	tx_data[0] = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CONF, tx_data, 1);
 8001382:	f107 0220 	add.w	r2, r7, #32
 8001386:	2301      	movs	r3, #1
 8001388:	217c      	movs	r1, #124	@ 0x7c
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 fcce 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 8001390:	4603      	mov	r3, r0
 8001392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001396:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800139a:	f083 0301 	eor.w	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <_ZN6BMI0884initEv+0x286>
 80013a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013a8:	e10e      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80013aa:	200a      	movs	r0, #10
 80013ac:	f012 fe01 	bl	8013fb2 <osDelay>

	// Turn accelerometer ON
	tx_data[0] = 0x04;
 80013b0:	2304      	movs	r3, #4
 80013b2:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_accel_register(REG_ACC_PWR_CTRL, tx_data, 1);
 80013b6:	f107 0220 	add.w	r2, r7, #32
 80013ba:	2301      	movs	r3, #1
 80013bc:	217d      	movs	r1, #125	@ 0x7d
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fcb4 	bl	8001d2c <_ZN6BMI08820write_accel_registerEhPht>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80013ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013ce:	f083 0301 	eor.w	r3, r3, #1
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <_ZN6BMI0884initEv+0x2ba>
 80013d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80013dc:	e0f4      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80013de:	200a      	movs	r0, #10
 80013e0:	f012 fde7 	bl	8013fb2 <osDelay>

	USB_Log("BMI088 accelerometer initialized OK.", CRITICAL);
 80013e4:	2101      	movs	r1, #1
 80013e6:	4861      	ldr	r0, [pc, #388]	@ (800156c <_ZN6BMI0884initEv+0x448>)
 80013e8:	f004 ffb2 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f012 fde0 	bl	8013fb2 <osDelay>
	/*
	 * GYROSCOPE SETUP
	 */

	// Check gyroscope chip ID
	rx_data[0] = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	773b      	strb	r3, [r7, #28]
	status = read_gyro_register(REG_GYRO_CHIP_ID, rx_data, 1);
 80013f6:	f107 021c 	add.w	r2, r7, #28
 80013fa:	2301      	movs	r3, #1
 80013fc:	2100      	movs	r1, #0
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fbca 	bl	8001b98 <_ZN6BMI08818read_gyro_registerEhPht>
 8001404:	4603      	mov	r3, r0
 8001406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (status && rx_data[0] == 0x0F)
 800140a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800140e:	2b00      	cmp	r3, #0
 8001410:	d01e      	beq.n	8001450 <_ZN6BMI0884initEv+0x32c>
 8001412:	7f3b      	ldrb	r3, [r7, #28]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d11b      	bne.n	8001450 <_ZN6BMI0884initEv+0x32c>
	{
		USB_Log("Found BMI088 gyroscope, starting initialization.", CRITICAL);
 8001418:	2101      	movs	r1, #1
 800141a:	4855      	ldr	r0, [pc, #340]	@ (8001570 <_ZN6BMI0884initEv+0x44c>)
 800141c:	f004 ff98 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8001420:	200a      	movs	r0, #10
 8001422:	f012 fdc6 	bl	8013fb2 <osDelay>

	// Set 400Hz ODR (47Hz BW)
	tx_data[0] = 0x03;
 8001426:	2303      	movs	r3, #3
 8001428:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_BANDWIDTH, tx_data, 1);
 800142c:	f107 0220 	add.w	r2, r7, #32
 8001430:	2301      	movs	r3, #1
 8001432:	2110      	movs	r1, #16
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fd11 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 800143a:	4603      	mov	r3, r0
 800143c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001444:	f083 0301 	eor.w	r3, r3, #1
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <_ZN6BMI0884initEv+0x338>
 800144e:	e008      	b.n	8001462 <_ZN6BMI0884initEv+0x33e>
		USB_Log("Failed to find BMI088 gyroscope. Initialization failed.", ERR);
 8001450:	2102      	movs	r1, #2
 8001452:	4848      	ldr	r0, [pc, #288]	@ (8001574 <_ZN6BMI0884initEv+0x450>)
 8001454:	f004 ff7c 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		return false;
 8001458:	2300      	movs	r3, #0
 800145a:	e0b5      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	if (!status) return status;
 800145c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001460:	e0b2      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 8001462:	200a      	movs	r0, #10
 8001464:	f012 fda5 	bl	8013fb2 <osDelay>

	// Initialize gyroscope IIR Filters
	float GYRO_ODR = 400;		// Hz
 8001468:	4b3e      	ldr	r3, [pc, #248]	@ (8001564 <_ZN6BMI0884initEv+0x440>)
 800146a:	613b      	str	r3, [r7, #16]
	float GYRO_CUTOFF = 50;		// Hz
 800146c:	4b42      	ldr	r3, [pc, #264]	@ (8001578 <_ZN6BMI0884initEv+0x454>)
 800146e:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < gyro_filters.size(); i++)
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
 8001474:	e01d      	b.n	80014b2 <_ZN6BMI0884initEv+0x38e>
	{
		gyro_filters[i] = std::make_unique<IIRFilter>(GYRO_CUTOFF, GYRO_ODR);
 8001476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800147a:	f107 0210 	add.w	r2, r7, #16
 800147e:	f107 010c 	add.w	r1, r7, #12
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fdbe 	bl	8002004 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3350      	adds	r3, #80	@ 0x50
 800148c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800148e:	4618      	mov	r0, r3
 8001490:	f000 fda9 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001494:	4602      	mov	r2, r0
 8001496:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fe31 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 80014a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fd70 	bl	8001f8c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < gyro_filters.size(); i++)
 80014ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ae:	3301      	adds	r3, #1
 80014b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3350      	adds	r3, #80	@ 0x50
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fd8a 	bl	8001fd0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 80014bc:	4602      	mov	r2, r0
 80014be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d3d8      	bcc.n	8001476 <_ZN6BMI0884initEv+0x352>
	}

	// Set +-500 deg/s range (65.536 LSB/deg/s)
	tx_data[0] = 0x02;
 80014c4:	2302      	movs	r3, #2
 80014c6:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_RANGE, tx_data, 1);
 80014ca:	f107 0220 	add.w	r2, r7, #32
 80014ce:	2301      	movs	r3, #1
 80014d0:	210f      	movs	r1, #15
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fcc2 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 80014d8:	4603      	mov	r3, r0
 80014da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 80014de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <_ZN6BMI0884initEv+0x3ce>
 80014ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f0:	e06a      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80014f2:	200a      	movs	r0, #10
 80014f4:	f012 fd5d 	bl	8013fb2 <osDelay>

	// Configure INT3 (push-pull, active high)
	tx_data[0] = 0x01;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_CONF, tx_data, 1);
 80014fe:	f107 0220 	add.w	r2, r7, #32
 8001502:	2301      	movs	r3, #1
 8001504:	2116      	movs	r1, #22
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fca8 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 800150c:	4603      	mov	r3, r0
 800150e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001512:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <_ZN6BMI0884initEv+0x402>
 8001520:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001524:	e050      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 8001526:	200a      	movs	r0, #10
 8001528:	f012 fd43 	bl	8013fb2 <osDelay>

	// Map gyroscope data ready interrupt to INT3
	tx_data[0] = 0x01;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_INT3_INT4_IO_MAP, tx_data, 1);
 8001532:	f107 0220 	add.w	r2, r7, #32
 8001536:	2301      	movs	r3, #1
 8001538:	2118      	movs	r1, #24
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fc8e 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 8001540:	4603      	mov	r3, r0
 8001542:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 8001546:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800154a:	f083 0301 	eor.w	r3, r3, #1
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <_ZN6BMI0884initEv+0x458>
 8001554:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001558:	e036      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
 800155a:	bf00      	nop
 800155c:	08026e88 	.word	0x08026e88
 8001560:	08026ec0 	.word	0x08026ec0
 8001564:	43c80000 	.word	0x43c80000
 8001568:	41200000 	.word	0x41200000
 800156c:	08026efc 	.word	0x08026efc
 8001570:	08026f24 	.word	0x08026f24
 8001574:	08026f58 	.word	0x08026f58
 8001578:	42480000 	.word	0x42480000
	osDelay(10);
 800157c:	200a      	movs	r0, #10
 800157e:	f012 fd18 	bl	8013fb2 <osDelay>

	// Enable gyroscope new data interrupt
	tx_data[0] = 0x80;
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	f887 3020 	strb.w	r3, [r7, #32]
	status = write_gyro_register(REG_GYRO_INT_CTRL, tx_data, 1);
 8001588:	f107 0220 	add.w	r2, r7, #32
 800158c:	2301      	movs	r3, #1
 800158e:	2115      	movs	r1, #21
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fc63 	bl	8001e5c <_ZN6BMI08819write_gyro_registerEhPht>
 8001596:	4603      	mov	r3, r0
 8001598:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (!status) return status;
 800159c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a0:	f083 0301 	eor.w	r3, r3, #1
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d002      	beq.n	80015b0 <_ZN6BMI0884initEv+0x48c>
 80015aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015ae:	e00b      	b.n	80015c8 <_ZN6BMI0884initEv+0x4a4>
	osDelay(10);
 80015b0:	200a      	movs	r0, #10
 80015b2:	f012 fcfe 	bl	8013fb2 <osDelay>

	USB_Log("BMI088 gyroscope initialized OK.", CRITICAL);
 80015b6:	2101      	movs	r1, #1
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <_ZN6BMI0884initEv+0x4ac>)
 80015ba:	f004 fec9 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80015be:	2064      	movs	r0, #100	@ 0x64
 80015c0:	f012 fcf7 	bl	8013fb2 <osDelay>

	return status;
 80015c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3738      	adds	r7, #56	@ 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08026f90 	.word	0x08026f90

080015d4 <_ZN6BMI08825service_irq_accelerometerEv>:

bool BMI088::service_irq_accelerometer()
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b08b      	sub	sp, #44	@ 0x2c
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	// Read raw accelerometer data
	uint8_t rx_data[6];
	bool status = read_accel_register(REG_ACC_X_LSB, rx_data, sizeof(rx_data));
 80015dc:	f107 020c 	add.w	r2, r7, #12
 80015e0:	2306      	movs	r3, #6
 80015e2:	2112      	movs	r1, #18
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 fa0d 	bl	8001a04 <_ZN6BMI08819read_accel_registerEhPht>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 80015f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 809e 	beq.w	8001736 <_ZN6BMI08825service_irq_accelerometerEv+0x162>
	{
		// Convert raw data into engineering units
		int16_t accel_x_int16 = (rx_data[1] << 8) | rx_data[0];
 80015fa:	7b7b      	ldrb	r3, [r7, #13]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7b3b      	ldrb	r3, [r7, #12]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t accel_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b21a      	sxth	r2, r3
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t accel_z_int16 = (rx_data[5] << 8) | rx_data[4];
 8001616:	7c7b      	ldrb	r3, [r7, #17]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	b21a      	sxth	r2, r3
 800161c:	7c3b      	ldrb	r3, [r7, #16]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	843b      	strh	r3, [r7, #32]
		
		float bmi_x = accel_filters[0]->update(accel_x_int16 * acc_conversion);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3344      	adds	r3, #68	@ 0x44
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fcdb 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001630:	4603      	mov	r3, r0
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fd2c 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001638:	4602      	mov	r2, r0
 800163a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a06 	vldr	s15, [r3, #24]
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	eeb0 0a67 	vmov.f32	s0, s15
 8001654:	4610      	mov	r0, r2
 8001656:	f006 fb4d 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 800165a:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = accel_filters[1]->update(accel_y_int16 * acc_conversion);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3344      	adds	r3, #68	@ 0x44
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f000 fcbe 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f000 fd0f 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001672:	4602      	mov	r2, r0
 8001674:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	edd3 7a06 	vldr	s15, [r3, #24]
 8001686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	4610      	mov	r0, r2
 8001690:	f006 fb30 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 8001694:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = accel_filters[2]->update(accel_z_int16 * acc_conversion);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3344      	adds	r3, #68	@ 0x44
 800169c:	2102      	movs	r1, #2
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fca1 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fcf2 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	eeb0 0a67 	vmov.f32	s0, s15
 80016c8:	4610      	mov	r0, r2
 80016ca:	f006 fb13 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 80016ce:	ed87 0a05 	vstr	s0, [r7, #20]

		{
			np::lock_guard lock(accel_data_mutex);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	f107 0308 	add.w	r3, r7, #8
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fc95 	bl	800100c <_ZN2np10lock_guardC1ERPv>
			linear_accelerations[0] = bmi_x;
 80016e2:	69fc      	ldr	r4, [r7, #28]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3328      	adds	r3, #40	@ 0x28
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fcdc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80016f0:	4603      	mov	r3, r0
 80016f2:	601c      	str	r4, [r3, #0]
			linear_accelerations[1] = bmi_y;
 80016f4:	69bc      	ldr	r4, [r7, #24]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3328      	adds	r3, #40	@ 0x28
 80016fa:	2101      	movs	r1, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fcd3 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8001702:	4603      	mov	r3, r0
 8001704:	601c      	str	r4, [r3, #0]
			linear_accelerations[2] = bmi_z;
 8001706:	697c      	ldr	r4, [r7, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3328      	adds	r3, #40	@ 0x28
 800170c:	2102      	movs	r1, #2
 800170e:	4618      	mov	r0, r3
 8001710:	f000 fcca 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8001714:	4603      	mov	r3, r0
 8001716:	601c      	str	r4, [r3, #0]
		}
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc8a 	bl	8001036 <_ZN2np10lock_guardD1Ev>

		// Clear data ready interrupt
		bool temp = read_accel_register(REG_ACC_INT_STAT_1, rx_data, 1);
 8001722:	f107 020c 	add.w	r2, r7, #12
 8001726:	2301      	movs	r3, #1
 8001728:	211d      	movs	r1, #29
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f96a 	bl	8001a04 <_ZN6BMI08819read_accel_registerEhPht>
 8001730:	4603      	mov	r3, r0
 8001732:	74fb      	strb	r3, [r7, #19]
 8001734:	e003      	b.n	800173e <_ZN6BMI08825service_irq_accelerometerEv+0x16a>
		(void)temp;
	}
	else
	{
		USB_Log("ERROR reading BMI088 accelerometer data.", ERR);
 8001736:	2102      	movs	r1, #2
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <_ZN6BMI08825service_irq_accelerometerEv+0x178>)
 800173a:	f004 fe09 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800173e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001742:	4618      	mov	r0, r3
 8001744:	372c      	adds	r7, #44	@ 0x2c
 8001746:	46bd      	mov	sp, r7
 8001748:	bd90      	pop	{r4, r7, pc}
 800174a:	bf00      	nop
 800174c:	08026fb4 	.word	0x08026fb4

08001750 <_ZN6BMI08821service_irq_gyroscopeEv>:

bool BMI088::service_irq_gyroscope()
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b08b      	sub	sp, #44	@ 0x2c
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	// Read raw gyroscope data
	uint8_t rx_data[6];
	bool status = read_gyro_register(REG_RATE_X_LSB, rx_data, sizeof(rx_data));
 8001758:	f107 020c 	add.w	r2, r7, #12
 800175c:	2306      	movs	r3, #6
 800175e:	2102      	movs	r1, #2
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fa19 	bl	8001b98 <_ZN6BMI08818read_gyro_registerEhPht>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 800176c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8095 	beq.w	80018a0 <_ZN6BMI08821service_irq_gyroscopeEv+0x150>
	{
		// Convert raw data into engineering units
		int16_t rate_x_int16 = (rx_data[1] << 8) | rx_data[0];
 8001776:	7b7b      	ldrb	r3, [r7, #13]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	b21a      	sxth	r2, r3
 800177c:	7b3b      	ldrb	r3, [r7, #12]
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t rate_y_int16 = (rx_data[3] << 8) | rx_data[2];
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	021b      	lsls	r3, r3, #8
 8001788:	b21a      	sxth	r2, r3
 800178a:	7bbb      	ldrb	r3, [r7, #14]
 800178c:	b21b      	sxth	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t rate_z_int16 = (rx_data[5] << 8) | rx_data[4];
 8001792:	7c7b      	ldrb	r3, [r7, #17]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	b21a      	sxth	r2, r3
 8001798:	7c3b      	ldrb	r3, [r7, #16]
 800179a:	b21b      	sxth	r3, r3
 800179c:	4313      	orrs	r3, r2
 800179e:	843b      	strh	r3, [r7, #32]

		float bmi_x = gyro_filters[0]->update(rate_x_int16 * gyro_conversion);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3350      	adds	r3, #80	@ 0x50
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fc1d 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017ac:	4603      	mov	r3, r0
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 fc6e 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	4610      	mov	r0, r2
 80017d2:	f006 fa8f 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 80017d6:	ed87 0a07 	vstr	s0, [r7, #28]
		float bmi_y = gyro_filters[1]->update(rate_y_int16 * gyro_conversion);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3350      	adds	r3, #80	@ 0x50
 80017de:	2101      	movs	r1, #1
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fc00 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fc51 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80017f4:	ee07 3a90 	vmov	s15, r3
 80017f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8001802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	4610      	mov	r0, r2
 800180c:	f006 fa72 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 8001810:	ed87 0a06 	vstr	s0, [r7, #24]
		float bmi_z = gyro_filters[2]->update(rate_z_int16 * gyro_conversion);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3350      	adds	r3, #80	@ 0x50
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fbe3 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8001820:	4603      	mov	r3, r0
 8001822:	4618      	mov	r0, r3
 8001824:	f000 fc34 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8001828:	4602      	mov	r2, r0
 800182a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7a07 	vldr	s15, [r3, #28]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	eeb0 0a67 	vmov.f32	s0, s15
 8001844:	4610      	mov	r0, r2
 8001846:	f006 fa55 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 800184a:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(gyro_data_mutex);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001852:	f107 0308 	add.w	r3, r7, #8
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff fbd7 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		angular_velocities[0] = bmi_x;
 800185e:	69fc      	ldr	r4, [r7, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3334      	adds	r3, #52	@ 0x34
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f000 fc1e 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800186c:	4603      	mov	r3, r0
 800186e:	601c      	str	r4, [r3, #0]
		angular_velocities[1] = bmi_y;
 8001870:	69bc      	ldr	r4, [r7, #24]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3334      	adds	r3, #52	@ 0x34
 8001876:	2101      	movs	r1, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fc15 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800187e:	4603      	mov	r3, r0
 8001880:	601c      	str	r4, [r3, #0]
		angular_velocities[2] = bmi_z;
 8001882:	697c      	ldr	r4, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3334      	adds	r3, #52	@ 0x34
 8001888:	2102      	movs	r1, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fc0c 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8001890:	4603      	mov	r3, r0
 8001892:	601c      	str	r4, [r3, #0]

		// Interrupt cleared automatically after 280-400us
	}
 8001894:	f107 0308 	add.w	r3, r7, #8
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fbcc 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 800189e:	e003      	b.n	80018a8 <_ZN6BMI08821service_irq_gyroscopeEv+0x158>
	else
	{
		USB_Log("ERROR reading BMI088 gyroscope data.", ERR);
 80018a0:	2102      	movs	r1, #2
 80018a2:	4804      	ldr	r0, [pc, #16]	@ (80018b4 <_ZN6BMI08821service_irq_gyroscopeEv+0x164>)
 80018a4:	f004 fd54 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80018a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	372c      	adds	r7, #44	@ 0x2c
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	08026fe0 	.word	0x08026fe0

080018b8 <_ZN6BMI08823service_irq_temperatureEv>:

bool BMI088::service_irq_temperature()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	// Read raw temperature data
	uint8_t rx_data[2];
	bool status = read_accel_register(REG_TEMP_MSB, rx_data, sizeof(rx_data));
 80018c0:	f107 0210 	add.w	r2, r7, #16
 80018c4:	2302      	movs	r3, #2
 80018c6:	2122      	movs	r1, #34	@ 0x22
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f89b 	bl	8001a04 <_ZN6BMI08819read_accel_registerEhPht>
 80018ce:	4603      	mov	r3, r0
 80018d0:	757b      	strb	r3, [r7, #21]

	if (status)
 80018d2:	7d7b      	ldrb	r3, [r7, #21]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d036      	beq.n	8001946 <_ZN6BMI08823service_irq_temperatureEv+0x8e>
	{
		// Convert raw data into engineering units
		uint16_t temp_uint11 = (rx_data[0] << 3) | (rx_data[1] >> 5);
 80018d8:	7c3b      	ldrb	r3, [r7, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	7c7b      	ldrb	r3, [r7, #17]
 80018e0:	095b      	lsrs	r3, r3, #5
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	827b      	strh	r3, [r7, #18]
		int16_t temp_int11 = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	82fb      	strh	r3, [r7, #22]
		if (temp_uint11 > 1023)
 80018f0:	8a7b      	ldrh	r3, [r7, #18]
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018f6:	d305      	bcc.n	8001904 <_ZN6BMI08823service_irq_temperatureEv+0x4c>
		{
			temp_int11 = temp_uint11 - 2048;
 80018f8:	8a7b      	ldrh	r3, [r7, #18]
 80018fa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80018fe:	b29b      	uxth	r3, r3
 8001900:	82fb      	strh	r3, [r7, #22]
 8001902:	e001      	b.n	8001908 <_ZN6BMI08823service_irq_temperatureEv+0x50>
		}
		else
		{
			temp_int11 = temp_uint11;
 8001904:	8a7b      	ldrh	r3, [r7, #18]
 8001906:	82fb      	strh	r3, [r7, #22]
		}
		np::lock_guard lock(accel_data_mutex);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1a      	ldr	r2, [r3, #32]
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb7a 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_int11 * 0.125f + 23.0f;
 8001918:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001924:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001928:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001930:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	}
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fb79 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8001944:	e003      	b.n	800194e <_ZN6BMI08823service_irq_temperatureEv+0x96>
	else
	{
		USB_Log("ERROR reading BMI088 temperature data.", ERR);
 8001946:	2102      	movs	r1, #2
 8001948:	4803      	ldr	r0, [pc, #12]	@ (8001958 <_ZN6BMI08823service_irq_temperatureEv+0xa0>)
 800194a:	f004 fd01 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800194e:	7d7b      	ldrb	r3, [r7, #21]
}
 8001950:	4618      	mov	r0, r3
 8001952:	3718      	adds	r7, #24
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08027008 	.word	0x08027008

0800195c <_ZN6BMI08824get_linear_accelerationsEv>:
	}
	USB_Log(string, SENSOR);
}

std::array<float, 3> BMI088::get_linear_accelerations()
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(accel_data_mutex);
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	6a1a      	ldr	r2, [r3, #32]
 8001968:	f107 0318 	add.w	r3, r7, #24
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fb4c 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return linear_accelerations;
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	3228      	adds	r2, #40	@ 0x28
 800197c:	ca07      	ldmia	r2, {r0, r1, r2}
 800197e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fb55 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return linear_accelerations;
 800198c:	69f9      	ldr	r1, [r7, #28]
 800198e:	6a3a      	ldr	r2, [r7, #32]
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	ee06 1a90 	vmov	s13, r1
 8001996:	ee07 2a10 	vmov	s14, r2
 800199a:	ee07 3a90 	vmov	s15, r3
}
 800199e:	eeb0 0a66 	vmov.f32	s0, s13
 80019a2:	eef0 0a47 	vmov.f32	s1, s14
 80019a6:	eeb0 1a67 	vmov.f32	s2, s15
 80019aa:	3728      	adds	r7, #40	@ 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_ZN6BMI08822get_angular_velocitiesEv>:

std::array<float, 3> BMI088::get_angular_velocities()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	@ 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(gyro_data_mutex);
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fb22 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return angular_velocities;
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	3234      	adds	r2, #52	@ 0x34
 80019d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 80019d6:	f107 0318 	add.w	r3, r7, #24
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fb2b 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return angular_velocities;
 80019e0:	69f9      	ldr	r1, [r7, #28]
 80019e2:	6a3a      	ldr	r2, [r7, #32]
 80019e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e6:	ee06 1a90 	vmov	s13, r1
 80019ea:	ee07 2a10 	vmov	s14, r2
 80019ee:	ee07 3a90 	vmov	s15, r3
}
 80019f2:	eeb0 0a66 	vmov.f32	s0, s13
 80019f6:	eef0 0a47 	vmov.f32	s1, s14
 80019fa:	eeb0 1a67 	vmov.f32	s2, s15
 80019fe:	3728      	adds	r7, #40	@ 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_ZN6BMI08819read_accel_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMI088::read_accel_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a08:	b091      	sub	sp, #68	@ 0x44
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	6178      	str	r0, [r7, #20]
 8001a0e:	60fa      	str	r2, [r7, #12]
 8001a10:	461a      	mov	r2, r3
 8001a12:	460b      	mov	r3, r1
 8001a14:	74fb      	strb	r3, [r7, #19]
 8001a16:	4613      	mov	r3, r2
 8001a18:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
	}

	return status;
}
 8001a1a:	466b      	mov	r3, sp
 8001a1c:	461e      	mov	r6, r3
	bool status = false;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint16_t num_bytes = data_len + 2;
 8001a24:	8a3b      	ldrh	r3, [r7, #16]
 8001a26:	3302      	adds	r3, #2
 8001a28:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint8_t tx_buffer[num_bytes];
 8001a2a:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a32:	b28b      	uxth	r3, r1
 8001a34:	2200      	movs	r2, #0
 8001a36:	603b      	str	r3, [r7, #0]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	00c3      	lsls	r3, r0, #3
 8001a46:	6838      	ldr	r0, [r7, #0]
 8001a48:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a4c:	6838      	ldr	r0, [r7, #0]
 8001a4e:	00c2      	lsls	r2, r0, #3
 8001a50:	b28b      	uxth	r3, r1
 8001a52:	2200      	movs	r2, #0
 8001a54:	469a      	mov	sl, r3
 8001a56:	4693      	mov	fp, r2
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001a64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001a68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	3307      	adds	r3, #7
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	ebad 0d03 	sub.w	sp, sp, r3
 8001a78:	ab02      	add	r3, sp, #8
 8001a7a:	3300      	adds	r3, #0
 8001a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rx_buffer[num_bytes];
 8001a7e:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001a80:	460b      	mov	r3, r1
 8001a82:	3b01      	subs	r3, #1
 8001a84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a86:	b28b      	uxth	r3, r1
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4698      	mov	r8, r3
 8001a8c:	4691      	mov	r9, r2
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	f04f 0300 	mov.w	r3, #0
 8001a96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aa2:	b28b      	uxth	r3, r1
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	4615      	mov	r5, r2
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	00eb      	lsls	r3, r5, #3
 8001ab4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab8:	00e2      	lsls	r2, r4, #3
 8001aba:	460b      	mov	r3, r1
 8001abc:	3307      	adds	r3, #7
 8001abe:	08db      	lsrs	r3, r3, #3
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac6:	ab02      	add	r3, sp, #8
 8001ac8:	3300      	adds	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
	memset(tx_buffer, 0, num_bytes);
 8001acc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ad4:	f023 f981 	bl	8024dda <memset>
	memset(rx_buffer, 0, num_bytes);
 8001ad8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ada:	461a      	mov	r2, r3
 8001adc:	2100      	movs	r1, #0
 8001ade:	6a38      	ldr	r0, [r7, #32]
 8001ae0:	f023 f97b 	bl	8024dda <memset>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001ae4:	7cfb      	ldrb	r3, [r7, #19]
 8001ae6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fa86 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	6898      	ldr	r0, [r3, #8]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	8a1b      	ldrh	r3, [r3, #16]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f008 fb8c 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b1a:	9200      	str	r2, [sp, #0]
 8001b1c:	6a3a      	ldr	r2, [r7, #32]
 8001b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b20:	f00c f955 	bl	800ddce <HAL_SPI_TransmitReceive>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bf0c      	ite	eq
 8001b2a:	2301      	moveq	r3, #1
 8001b2c:	2300      	movne	r3, #0
 8001b2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	6898      	ldr	r0, [r3, #8]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	8a1b      	ldrh	r3, [r3, #16]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f008 fb73 	bl	800a228 <HAL_GPIO_WritePin>
	}
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fa75 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <_ZN6BMI08819read_accel_registerEhPht+0x178>
		for (int i = 2; i < num_bytes; i++)
 8001b54:	2302      	movs	r3, #2
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b58:	e00b      	b.n	8001b72 <_ZN6BMI08819read_accel_registerEhPht+0x16e>
			rx_data[i - 2] = rx_buffer[i];
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5c:	3b02      	subs	r3, #2
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	4413      	add	r3, r2
 8001b62:	6a39      	ldr	r1, [r7, #32]
 8001b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b66:	440a      	add	r2, r1
 8001b68:	7812      	ldrb	r2, [r2, #0]
 8001b6a:	701a      	strb	r2, [r3, #0]
		for (int i = 2; i < num_bytes; i++)
 8001b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b6e:	3301      	adds	r3, #1
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b72:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbef      	blt.n	8001b5a <_ZN6BMI08819read_accel_registerEhPht+0x156>
 8001b7a:	e003      	b.n	8001b84 <_ZN6BMI08819read_accel_registerEhPht+0x180>
		USB_Log("BMI088 accelerometer register read failed.\n", ERR);
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <_ZN6BMI08819read_accel_registerEhPht+0x190>)
 8001b80:	f004 fbe6 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001b84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b88:	46b5      	mov	sp, r6
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	373c      	adds	r7, #60	@ 0x3c
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b94:	0802705c 	.word	0x0802705c

08001b98 <_ZN6BMI08818read_gyro_registerEhPht>:

bool BMI088::read_gyro_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8001b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b9c:	b091      	sub	sp, #68	@ 0x44
 8001b9e:	af02      	add	r7, sp, #8
 8001ba0:	6178      	str	r0, [r7, #20]
 8001ba2:	60fa      	str	r2, [r7, #12]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	74fb      	strb	r3, [r7, #19]
 8001baa:	4613      	mov	r3, r2
 8001bac:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
	}

	return status;
}
 8001bae:	466b      	mov	r3, sp
 8001bb0:	461e      	mov	r6, r3
	bool status = false;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint16_t num_bytes = data_len + 1;
 8001bb8:	8a3b      	ldrh	r3, [r7, #16]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint8_t tx_buffer[num_bytes];
 8001bbe:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bc6:	b28b      	uxth	r3, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	00c3      	lsls	r3, r0, #3
 8001bda:	6838      	ldr	r0, [r7, #0]
 8001bdc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	00c2      	lsls	r2, r0, #3
 8001be4:	b28b      	uxth	r3, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	469a      	mov	sl, r3
 8001bea:	4693      	mov	fp, r2
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c00:	460b      	mov	r3, r1
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	ab02      	add	r3, sp, #8
 8001c0e:	3300      	adds	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rx_buffer[num_bytes];
 8001c12:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001c14:	460b      	mov	r3, r1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1a:	b28b      	uxth	r3, r1
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4698      	mov	r8, r3
 8001c20:	4691      	mov	r9, r2
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c36:	b28b      	uxth	r3, r1
 8001c38:	2200      	movs	r2, #0
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	4615      	mov	r5, r2
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	00eb      	lsls	r3, r5, #3
 8001c48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c4c:	00e2      	lsls	r2, r4, #3
 8001c4e:	460b      	mov	r3, r1
 8001c50:	3307      	adds	r3, #7
 8001c52:	08db      	lsrs	r3, r3, #3
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	ebad 0d03 	sub.w	sp, sp, r3
 8001c5a:	ab02      	add	r3, sp, #8
 8001c5c:	3300      	adds	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
	memset(tx_buffer, 0, num_bytes);
 8001c60:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c62:	461a      	mov	r2, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c68:	f023 f8b7 	bl	8024dda <memset>
	memset(rx_buffer, 0, num_bytes);
 8001c6c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2100      	movs	r1, #0
 8001c72:	6a38      	ldr	r0, [r7, #32]
 8001c74:	f023 f8b1 	bl	8024dda <memset>
	tx_buffer[0] = 0x80 | reg_addr;	// Read operation
 8001c78:	7cfb      	ldrb	r3, [r7, #19]
 8001c7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f9bc 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	68d8      	ldr	r0, [r3, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	8a5b      	ldrh	r3, [r3, #18]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f008 fac2 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cae:	9200      	str	r2, [sp, #0]
 8001cb0:	6a3a      	ldr	r2, [r7, #32]
 8001cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cb4:	f00c f88b 	bl	800ddce <HAL_SPI_TransmitReceive>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	bf0c      	ite	eq
 8001cbe:	2301      	moveq	r3, #1
 8001cc0:	2300      	movne	r3, #0
 8001cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	68d8      	ldr	r0, [r3, #12]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	8a5b      	ldrh	r3, [r3, #18]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f008 faa9 	bl	800a228 <HAL_GPIO_WritePin>
	}
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f9ab 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8001ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <_ZN6BMI08818read_gyro_registerEhPht+0x178>
		for (int i = 1; i < num_bytes; i++)
 8001ce8:	2301      	movs	r3, #1
 8001cea:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cec:	e00b      	b.n	8001d06 <_ZN6BMI08818read_gyro_registerEhPht+0x16e>
			rx_data[i - 1] = rx_buffer[i];
 8001cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	6a39      	ldr	r1, [r7, #32]
 8001cf8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cfa:	440a      	add	r2, r1
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 8001d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d02:	3301      	adds	r3, #1
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d06:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dbef      	blt.n	8001cee <_ZN6BMI08818read_gyro_registerEhPht+0x156>
 8001d0e:	e003      	b.n	8001d18 <_ZN6BMI08818read_gyro_registerEhPht+0x180>
		USB_Log("BMI088 gyroscope register read failed.\n", ERR);
 8001d10:	2102      	movs	r1, #2
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <_ZN6BMI08818read_gyro_registerEhPht+0x190>)
 8001d14:	f004 fb1c 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001d18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d1c:	46b5      	mov	sp, r6
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	373c      	adds	r7, #60	@ 0x3c
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d28:	08027088 	.word	0x08027088

08001d2c <_ZN6BMI08820write_accel_registerEhPht>:

bool BMI088::write_accel_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001d2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d30:	b08b      	sub	sp, #44	@ 0x2c
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	72fb      	strb	r3, [r7, #11]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
	}

	return status;
}
 8001d42:	466b      	mov	r3, sp
 8001d44:	461e      	mov	r6, r3
	bool status = false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001d4c:	893b      	ldrh	r3, [r7, #8]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001d52:	8c39      	ldrh	r1, [r7, #32]
 8001d54:	460b      	mov	r3, r1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	61fb      	str	r3, [r7, #28]
 8001d5a:	b28b      	uxth	r3, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4698      	mov	r8, r3
 8001d60:	4691      	mov	r9, r2
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d76:	b28b      	uxth	r3, r1
 8001d78:	2200      	movs	r2, #0
 8001d7a:	461c      	mov	r4, r3
 8001d7c:	4615      	mov	r5, r2
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	f04f 0300 	mov.w	r3, #0
 8001d86:	00eb      	lsls	r3, r5, #3
 8001d88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d8c:	00e2      	lsls	r2, r4, #3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	3307      	adds	r3, #7
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	ebad 0d03 	sub.w	sp, sp, r3
 8001d9a:	466b      	mov	r3, sp
 8001d9c:	3300      	adds	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
	memset(tx_buffer, 0, num_bytes);
 8001da0:	8c3b      	ldrh	r3, [r7, #32]
 8001da2:	461a      	mov	r2, r3
 8001da4:	2100      	movs	r1, #0
 8001da6:	69b8      	ldr	r0, [r7, #24]
 8001da8:	f023 f817 	bl	8024dda <memset>
	tx_buffer[0] = reg_addr;	// Write operation
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	7afa      	ldrb	r2, [r7, #11]
 8001db0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001db2:	2301      	movs	r3, #1
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db6:	e00c      	b.n	8001dd2 <_ZN6BMI08820write_accel_registerEhPht+0xa6>
		tx_buffer[i] = tx_data[i - 1];
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	7819      	ldrb	r1, [r3, #0]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	4413      	add	r3, r2
 8001dc8:	460a      	mov	r2, r1
 8001dca:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	3301      	adds	r3, #1
 8001dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd2:	8c3b      	ldrh	r3, [r7, #32]
 8001dd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbee      	blt.n	8001db8 <_ZN6BMI08820write_accel_registerEhPht+0x8c>
		np::lock_guard lock(spi_mutex);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff f911 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_RESET);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6898      	ldr	r0, [r3, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8a1b      	ldrh	r3, [r3, #16]
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	f008 fa17 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	8c3a      	ldrh	r2, [r7, #32]
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e04:	69b9      	ldr	r1, [r7, #24]
 8001e06:	f00b fe6c 	bl	800dae2 <HAL_SPI_Transmit>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(acc_cs_port, acc_cs_pin, GPIO_PIN_SET);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6898      	ldr	r0, [r3, #8]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8a1b      	ldrh	r3, [r3, #16]
 8001e20:	2201      	movs	r2, #1
 8001e22:	4619      	mov	r1, r3
 8001e24:	f008 fa00 	bl	800a228 <HAL_GPIO_WritePin>
	}
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff f902 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8001e32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e36:	f083 0301 	eor.w	r3, r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <_ZN6BMI08820write_accel_registerEhPht+0x11c>
		USB_Log("BMI088 accelerometer register write failed.\n", ERR);
 8001e40:	2102      	movs	r1, #2
 8001e42:	4805      	ldr	r0, [pc, #20]	@ (8001e58 <_ZN6BMI08820write_accel_registerEhPht+0x12c>)
 8001e44:	f004 fa84 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001e48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e4c:	46b5      	mov	sp, r6
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	372c      	adds	r7, #44	@ 0x2c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e58:	080270b0 	.word	0x080270b0

08001e5c <_ZN6BMI08819write_gyro_registerEhPht>:

bool BMI088::write_gyro_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8001e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e60:	b08b      	sub	sp, #44	@ 0x2c
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	72fb      	strb	r3, [r7, #11]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
	}

	return status;
}
 8001e72:	466b      	mov	r3, sp
 8001e74:	461e      	mov	r6, r3
	bool status = false;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8001e7c:	893b      	ldrh	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 8001e82:	8c39      	ldrh	r1, [r7, #32]
 8001e84:	460b      	mov	r3, r1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	b28b      	uxth	r3, r1
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	4698      	mov	r8, r3
 8001e90:	4691      	mov	r9, r2
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ea6:	b28b      	uxth	r3, r1
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	461c      	mov	r4, r3
 8001eac:	4615      	mov	r5, r2
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	00eb      	lsls	r3, r5, #3
 8001eb8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ebc:	00e2      	lsls	r2, r4, #3
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	3307      	adds	r3, #7
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	ebad 0d03 	sub.w	sp, sp, r3
 8001eca:	466b      	mov	r3, sp
 8001ecc:	3300      	adds	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
	memset(tx_buffer, 0, num_bytes);
 8001ed0:	8c3b      	ldrh	r3, [r7, #32]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	69b8      	ldr	r0, [r7, #24]
 8001ed8:	f022 ff7f 	bl	8024dda <memset>
	tx_buffer[0] = reg_addr;	// Write operation
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	7afa      	ldrb	r2, [r7, #11]
 8001ee0:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee6:	e00c      	b.n	8001f02 <_ZN6BMI08819write_gyro_registerEhPht+0xa6>
		tx_buffer[i] = tx_data[i - 1];
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	3b01      	subs	r3, #1
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	7819      	ldrb	r1, [r3, #0]
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	460a      	mov	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	3301      	adds	r3, #1
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f02:	8c3b      	ldrh	r3, [r7, #32]
 8001f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f06:	429a      	cmp	r2, r3
 8001f08:	dbee      	blt.n	8001ee8 <_ZN6BMI08819write_gyro_registerEhPht+0x8c>
		np::lock_guard lock(spi_mutex);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4611      	mov	r1, r2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f879 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_RESET);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68d8      	ldr	r0, [r3, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	8a5b      	ldrh	r3, [r3, #18]
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	f008 f97f 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	8c3a      	ldrh	r2, [r7, #32]
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f34:	69b9      	ldr	r1, [r7, #24]
 8001f36:	f00b fdd4 	bl	800dae2 <HAL_SPI_Transmit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf0c      	ite	eq
 8001f40:	2301      	moveq	r3, #1
 8001f42:	2300      	movne	r3, #0
 8001f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(gyro_cs_port, gyro_cs_pin, GPIO_PIN_SET);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68d8      	ldr	r0, [r3, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8a5b      	ldrh	r3, [r3, #18]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4619      	mov	r1, r3
 8001f54:	f008 f968 	bl	800a228 <HAL_GPIO_WritePin>
	}
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff f86a 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8001f62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f66:	f083 0301 	eor.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <_ZN6BMI08819write_gyro_registerEhPht+0x11c>
		USB_Log("BMI088 gyroscope register write failed.\n", ERR);
 8001f70:	2102      	movs	r1, #2
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <_ZN6BMI08819write_gyro_registerEhPht+0x12c>)
 8001f74:	f004 f9ec 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 8001f78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	372c      	adds	r7, #44	@ 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f88:	080270e0 	.word	0x080270e0

08001f8c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f000 f895 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 8001f9c:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00c      	beq.n	8001fc0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f89a 	bl	80020e0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>
 8001fac:	4604      	mov	r4, r0
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f8a3 	bl	80020fa <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4620      	mov	r0, r4
 8001fbc:	f000 f8a8 	bl	8002110 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
	__ptr = pointer();
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
      }
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd90      	pop	{r4, r7, pc}

08001fd0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>:
      { return const_reverse_iterator(begin()); }

      // Capacity.
      [[__gnu__::__const__, __nodiscard__]]
      constexpr size_type
      size() const noexcept { return _Nm; }
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	2303      	movs	r3, #3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>:
      empty() const noexcept { return size() == 0; }

      // Element access.
      [[__nodiscard__]]
      _GLIBCXX17_CONSTEXPR reference
      operator[](size_type __n) noexcept
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
 8001fee:	6039      	str	r1, [r7, #0]
      {
	__glibcxx_requires_subscript(__n);
	return _AT_Type::_S_ref(_M_elems, __n);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f89b 	bl	8002130 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>
 8001ffa:	4603      	mov	r3, r0
      }
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>:
   *  @relates unique_ptr
   */
  template<typename _Tp, typename... _Args>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_t<_Tp>
    make_unique(_Args&&... __args)
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	ed2d 8b02 	vpush	{d8}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8002014:	2034      	movs	r0, #52	@ 0x34
 8002016:	f01f fe07 	bl	8021c28 <_Znwj>
 800201a:	4603      	mov	r3, r0
 800201c:	461c      	mov	r4, r3
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f000 f895 	bl	800214e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002024:	4603      	mov	r3, r0
 8002026:	ed93 8a00 	vldr	s16, [r3]
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f88f 	bl	800214e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>
 8002030:	4603      	mov	r3, r0
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	eeb0 0a48 	vmov.f32	s0, s16
 800203e:	4620      	mov	r0, r4
 8002040:	f005 fd4e 	bl	8007ae0 <_ZN9IIRFilterC1Eff>
 8002044:	4621      	mov	r1, r4
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f89c 	bl	8002184 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	ecbd 8b02 	vpop	{d8}
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	f000 f8bd 	bl	80021e2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>
 8002068:	4603      	mov	r3, r0
 800206a:	4619      	mov	r1, r3
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f898 	bl	80021a2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f000 f8ca 	bl	800220c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 8002078:	4603      	mov	r3, r0
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f8d3 	bl	8002226 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8c3 	bl	800220c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8002086:	687b      	ldr	r3, [r7, #4]
      }
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	return get();
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8cf 	bl	800223c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>
 800209e:	4603      	mov	r3, r0
      }
 80020a0:	4618      	mov	r0, r3
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_ZNSt5arrayIfLj3EEixEj>:
      operator[](size_type __n) noexcept
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6839      	ldr	r1, [r7, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f8cd 	bl	8002256 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>
 80020bc:	4603      	mov	r3, r0
      }
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 f8cf 	bl	8002274 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f88e 	bl	800220c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <_ZSt4moveIRP9IIRFilterEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>:
      operator()(_Tp* __ptr) const
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_+0x18>
 8002120:	2134      	movs	r1, #52	@ 0x34
 8002122:	4618      	mov	r0, r3
 8002124:	f01f fd7e 	bl	8021c24 <_ZdlPvj>
      }
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZNSt14__array_traitsISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE6_S_refERA3_KS4_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_ZSt7forwardIRfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f88a 	bl	800228e <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffe6 	bl	8002164 <_ZNSt15__uniq_ptr_dataI9IIRFilterSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80021a2:	b590      	push	{r4, r7, lr}
 80021a4:	b085      	sub	sp, #20
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff ff8a 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80021b8:	683c      	ldr	r4, [r7, #0]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ff83 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80021c0:	4603      	mov	r3, r0
 80021c2:	601c      	str	r4, [r3, #0]
	if (__old_p)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d007      	beq.n	80021da <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f81e 	bl	800220c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>
 80021d0:	4603      	mov	r3, r0
 80021d2:	68f9      	ldr	r1, [r7, #12]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ff9b 	bl	8002110 <_ZNKSt14default_deleteI9IIRFilterEclEPS0_>
      }
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd90      	pop	{r4, r7, pc}

080021e2 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff6b 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80021f0:	4603      	mov	r3, r0
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff65 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
	return __p;
 8002202:	68fb      	ldr	r3, [r7, #12]
      }
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f84d 	bl	80022b6 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800221c:	4603      	mov	r3, r0
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_ZSt7forwardISt14default_deleteI9IIRFilterEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f841 	bl	80022ce <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <_ZNSt14__array_traitsIfLj3EE6_S_refERA3_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	4413      	add	r3, r2
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    __get_helper(const tuple<_Types...>&) = delete;

  /// Return a reference to the ith element of a tuple.
  template<size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f833 	bl	80022ea <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002284:	4603      	mov	r3, r0
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 800228e:	b590      	push	{r4, r7, lr}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fe74 	bl	8000f88 <_ZNSt5tupleIJP9IIRFilterSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80022a0:	683c      	ldr	r4, [r7, #0]
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ff0f 	bl	80020c6 <_ZNSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>
 80022a8:	4603      	mov	r3, r0
 80022aa:	601c      	str	r4, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}

080022b6 <_ZSt3getILj1EJP9IIRFilterSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f81f 	bl	8002302 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <_ZNKSt15__uniq_ptr_implI9IIRFilterSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 f81e 	bl	800231a <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80022de:	4603      	mov	r3, r0
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f81e 	bl	8002334 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZSt12__get_helperILj1ESt14default_deleteI9IIRFilterEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f81f 	bl	800234e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>
 8002310:	4603      	mov	r3, r0
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_ZSt3getILj0EJP9IIRFilterSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f81e 	bl	8002366 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800232a:	4603      	mov	r3, r0
 800232c:	4618      	mov	r0, r3
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 f81d 	bl	800237e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>
 8002344:	4603      	mov	r3, r0
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI9IIRFilterEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f81c 	bl	8002394 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>
 800235c:	4603      	mov	r3, r0
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <_ZSt12__get_helperILj0EP9IIRFilterJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f81b 	bl	80023aa <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002374:	4603      	mov	r3, r0
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_ZNSt10_Head_baseILj1ESt14default_deleteI9IIRFilterELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_ZNSt11_Tuple_implILj0EJP9IIRFilterSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f805 	bl	80023c4 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>
 80023ba:	4603      	mov	r3, r0
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZNSt10_Head_baseILj0EP9IIRFilterLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <_ZN6BMP388C1EP19__I2C_HandleTypeDefRPvS3_>:
#include <cmath>
#include <cstdio>
#include <cstring>


BMP388::BMP388(I2C_HandleTypeDef* i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& baro_data_mutex)
 80023da:	b480      	push	{r7}
 80023dc:	b085      	sub	sp, #20
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]
	 baro_data_mutex(baro_data_mutex) {}
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <_ZN6BMP3884initEv>:

bool BMP388::init()
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];
	memset(tx_data, 0, sizeof(tx_data));
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	2204      	movs	r2, #4
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f022 fcdc 	bl	8024dda <memset>
	memset(rx_data, 0, sizeof(rx_data));
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	2204      	movs	r2, #4
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f022 fcd5 	bl	8024dda <memset>

	// Check chip ID
	rx_data[0] = 0x00;
 8002430:	2300      	movs	r3, #0
 8002432:	733b      	strb	r3, [r7, #12]
	status = read_register(REG_CHIP_ID, rx_data, 1);
 8002434:	f107 020c 	add.w	r2, r7, #12
 8002438:	2301      	movs	r3, #1
 800243a:	2100      	movs	r1, #0
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fd0f 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002442:	4603      	mov	r3, r0
 8002444:	75fb      	strb	r3, [r7, #23]
	if (status && rx_data[0] == 0x50)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01b      	beq.n	8002484 <_ZN6BMP3884initEv+0x7c>
 800244c:	7b3b      	ldrb	r3, [r7, #12]
 800244e:	2b50      	cmp	r3, #80	@ 0x50
 8002450:	d118      	bne.n	8002484 <_ZN6BMP3884initEv+0x7c>
	{
		USB_Log("Found BMP388, starting initialization.", CRITICAL);
 8002452:	2101      	movs	r1, #1
 8002454:	485b      	ldr	r0, [pc, #364]	@ (80025c4 <_ZN6BMP3884initEv+0x1bc>)
 8002456:	f003 ff7b 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 800245a:	200a      	movs	r0, #10
 800245c:	f011 fda9 	bl	8013fb2 <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0xB6;
 8002460:	23b6      	movs	r3, #182	@ 0xb6
 8002462:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CMD, tx_data, 1);
 8002464:	f107 0210 	add.w	r2, r7, #16
 8002468:	2301      	movs	r3, #1
 800246a:	217e      	movs	r1, #126	@ 0x7e
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fd37 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 8002472:	4603      	mov	r3, r0
 8002474:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
 8002478:	f083 0301 	eor.w	r3, r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d106      	bne.n	8002490 <_ZN6BMP3884initEv+0x88>
 8002482:	e007      	b.n	8002494 <_ZN6BMP3884initEv+0x8c>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8002484:	2102      	movs	r1, #2
 8002486:	4850      	ldr	r0, [pc, #320]	@ (80025c8 <_ZN6BMP3884initEv+0x1c0>)
 8002488:	f003 ff62 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		return false;
 800248c:	2300      	movs	r3, #0
 800248e:	e094      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	if (!status) return status;
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	e092      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 8002494:	200a      	movs	r0, #10
 8002496:	f011 fd8c 	bl	8013fb2 <osDelay>

	// Read, calculate, and store calibration coefficients
	status = read_calibration_nvm();
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa40 	bl	8002920 <_ZN6BMP38820read_calibration_nvmEv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <_ZN6BMP3884initEv+0xac>
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	e082      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>

	// Set pressure measurement to ultra-high resolution (x16 over-sampling, 20 bit / 0.17 Pa),
	// set temperature measurement to low power (x2 over-sampling, 17 bit / 0.0025 degC)
	tx_data[0] = 0x0C;
 80024b4:	230c      	movs	r3, #12
 80024b6:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_OSR, tx_data, 1);
 80024b8:	f107 0210 	add.w	r2, r7, #16
 80024bc:	2301      	movs	r3, #1
 80024be:	211c      	movs	r1, #28
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fd0d 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <_ZN6BMP3884initEv+0xd2>
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
 80024d8:	e06f      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 80024da:	200a      	movs	r0, #10
 80024dc:	f011 fd69 	bl	8013fb2 <osDelay>

	// Set 25Hz ODR
	tx_data[0] = 0x03;
 80024e0:	2303      	movs	r3, #3
 80024e2:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_ODR, tx_data, 1);
 80024e4:	f107 0210 	add.w	r2, r7, #16
 80024e8:	2301      	movs	r3, #1
 80024ea:	211d      	movs	r1, #29
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fcf7 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <_ZN6BMP3884initEv+0xfe>
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	e059      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 8002506:	200a      	movs	r0, #10
 8002508:	f011 fd53 	bl	8013fb2 <osDelay>

	// Set IIR filter coefficient to 15
	tx_data[0] = 0x04;
 800250c:	2304      	movs	r3, #4
 800250e:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_CONFIG, tx_data, 1);
 8002510:	f107 0210 	add.w	r2, r7, #16
 8002514:	2301      	movs	r3, #1
 8002516:	211f      	movs	r1, #31
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fce1 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 800251e:	4603      	mov	r3, r0
 8002520:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002522:	7dfb      	ldrb	r3, [r7, #23]
 8002524:	f083 0301 	eor.w	r3, r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <_ZN6BMP3884initEv+0x12a>
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	e043      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 8002532:	200a      	movs	r0, #10
 8002534:	f011 fd3d 	bl	8013fb2 <osDelay>

	// Compute startup pressure for initial altitude reference
	status = compute_startup_pressure();
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fc2d 	bl	8002d98 <_ZN6BMP38824compute_startup_pressureEv>
 800253e:	4603      	mov	r3, r0
 8002540:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	f083 0301 	eor.w	r3, r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <_ZN6BMP3884initEv+0x14a>
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	e033      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>

	// Switch device into normal mode and enable pressure, temperature sensor
	tx_data[0] = 0x33;
 8002552:	2333      	movs	r3, #51	@ 0x33
 8002554:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002556:	f107 0210 	add.w	r2, r7, #16
 800255a:	2301      	movs	r3, #1
 800255c:	211b      	movs	r1, #27
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 fcbe 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 8002564:	4603      	mov	r3, r0
 8002566:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <_ZN6BMP3884initEv+0x170>
 8002574:	7dfb      	ldrb	r3, [r7, #23]
 8002576:	e020      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 8002578:	200a      	movs	r0, #10
 800257a:	f011 fd1a 	bl	8013fb2 <osDelay>

	// Enable data ready interrupt (temperature and pressure) and configure INT pin (active high, push-pull)
	tx_data[0] = 0x42;
 800257e:	2342      	movs	r3, #66	@ 0x42
 8002580:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_INT_CTRL, tx_data, 1);
 8002582:	f107 0210 	add.w	r2, r7, #16
 8002586:	2301      	movs	r3, #1
 8002588:	2119      	movs	r1, #25
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 fca8 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 8002590:	4603      	mov	r3, r0
 8002592:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	f083 0301 	eor.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <_ZN6BMP3884initEv+0x19c>
 80025a0:	7dfb      	ldrb	r3, [r7, #23]
 80025a2:	e00a      	b.n	80025ba <_ZN6BMP3884initEv+0x1b2>
	osDelay(10);
 80025a4:	200a      	movs	r0, #10
 80025a6:	f011 fd04 	bl	8013fb2 <osDelay>

	USB_Log("BMP388 initialized OK.", CRITICAL);
 80025aa:	2101      	movs	r1, #1
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <_ZN6BMP3884initEv+0x1c4>)
 80025ae:	f003 fecf 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80025b2:	2064      	movs	r0, #100	@ 0x64
 80025b4:	f011 fcfd 	bl	8013fb2 <osDelay>

	return status;
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	0802710c 	.word	0x0802710c
 80025c8:	08027134 	.word	0x08027134
 80025cc:	08027164 	.word	0x08027164

080025d0 <_ZN6BMP38811service_irqEv>:

bool BMP388::service_irq()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b092      	sub	sp, #72	@ 0x48
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	// Compute compensated temperature

	uint8_t rx_temp_data[3];
	bool status_temp = read_register(REG_DATA_3, rx_temp_data, sizeof(rx_temp_data));
 80025d8:	f107 0214 	add.w	r2, r7, #20
 80025dc:	2303      	movs	r3, #3
 80025de:	2107      	movs	r1, #7
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fc3d 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (status_temp)
 80025ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d039      	beq.n	8002668 <_ZN6BMP38811service_irqEv+0x98>
	{
		uint32_t temp_raw = (rx_temp_data[2] << 16) | (rx_temp_data[1] << 8) | rx_temp_data[0];
 80025f4:	7dbb      	ldrb	r3, [r7, #22]
 80025f6:	041a      	lsls	r2, r3, #16
 80025f8:	7d7b      	ldrb	r3, [r7, #21]
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	4313      	orrs	r3, r2
 80025fe:	7d3a      	ldrb	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	643b      	str	r3, [r7, #64]	@ 0x40

		float temp_partial_data1 = (float)temp_raw - calib_data.par_t1;
 8002604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	edd3 7a02 	vldr	s15, [r3, #8]
 8002614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002618:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		float temp_partial_data2 = temp_partial_data1 * calib_data.par_t2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002622:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		np::lock_guard lock(baro_data_mutex);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002632:	f107 030c 	add.w	r3, r7, #12
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fce7 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		temperature = temp_partial_data2 + (temp_partial_data1 * temp_partial_data1) * calib_data.par_t3;
 800263e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002642:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	edd3 7a04 	vldr	s15, [r3, #16]
 800264c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002650:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	}
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fce7 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	// Compute compensated pressure

	uint8_t rx_press_data[3];
	bool status_pressure = read_register(REG_DATA_0, rx_press_data, sizeof(rx_press_data));
 8002668:	f107 0210 	add.w	r2, r7, #16
 800266c:	2303      	movs	r3, #3
 800266e:	2104      	movs	r1, #4
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 fbf5 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002676:	4603      	mov	r3, r0
 8002678:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	
	if (status_temp && status_pressure)
 800267c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8119 	beq.w	80028b8 <_ZN6BMP38811service_irqEv+0x2e8>
 8002686:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 8114 	beq.w	80028b8 <_ZN6BMP38811service_irqEv+0x2e8>
	{
		uint32_t press_raw = (rx_press_data[2] << 16) | (rx_press_data[1] << 8) | rx_press_data[0];
 8002690:	7cbb      	ldrb	r3, [r7, #18]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	7c7b      	ldrb	r3, [r7, #17]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	4313      	orrs	r3, r2
 800269a:	7c3a      	ldrb	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	633b      	str	r3, [r7, #48]	@ 0x30

		np::lock_guard lock(baro_data_mutex);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026a4:	f107 0308 	add.w	r3, r7, #8
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fcae 	bl	800100c <_ZN2np10lock_guardC1ERPv>

		float press_partial_data1 = calib_data.par_p6 * temperature;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80026bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		float press_partial_data2 = calib_data.par_p7 * (temperature * temperature);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80026d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026de:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		float press_partial_data3 = calib_data.par_p8 * (temperature * temperature * temperature);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80026f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80026fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out1 = calib_data.par_p5 + press_partial_data1 + press_partial_data2 + press_partial_data3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002710:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002718:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800271c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002720:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002728:	edc7 7a08 	vstr	s15, [r7, #32]

		press_partial_data1 = calib_data.par_p2 * temperature;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p3 * (temperature * temperature);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	ed93 7a07 	vldr	s14, [r3, #28]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800275a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = calib_data.par_p4 * (temperature * temperature * temperature);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	ed93 7a08 	vldr	s14, [r3, #32]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	edd3 6a14 	vldr	s13, [r3, #80]	@ 0x50
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002770:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800277a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out2 = (float)press_raw * (calib_data.par_p1 + press_partial_data1 + press_partial_data2 + press_partial_data3);
 8002786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002788:	ee07 3a90 	vmov	s15, r3
 800278c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	edd3 6a05 	vldr	s13, [r3, #20]
 8002796:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800279a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800279e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027a6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80027aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	edc7 7a07 	vstr	s15, [r7, #28]

		press_partial_data1 = (float)press_raw * (float)press_raw;
 80027b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		press_partial_data2 = calib_data.par_p9 + calib_data.par_p10 * temperature;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80027e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ec:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		press_partial_data3 = press_partial_data1 *	press_partial_data2;
 80027f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80027f4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		float press_partial_out3 = press_partial_data3 + ((float)press_raw * (float)press_raw * (float)press_raw) * calib_data.par_p11;
 8002800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800280a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002814:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002822:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002838:	edc7 7a06 	vstr	s15, [r7, #24]

		pressure = press_partial_out1 + press_partial_out2 + press_partial_out3;
 800283c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002840:	edd7 7a07 	vldr	s15, [r7, #28]
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002848:	edd7 7a06 	vldr	s15, [r7, #24]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

		// Compute altitude

		if (pressure && startup_pressure)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800285c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002864:	d022      	beq.n	80028ac <_ZN6BMP38811service_irqEv+0x2dc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800286c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	d01a      	beq.n	80028ac <_ZN6BMP38811service_irqEv+0x2dc>
		{
			altitude = 44330 * (1 - powf(pressure / startup_pressure, 1.0 / 5.25579));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8002882:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002886:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80028e0 <_ZN6BMP38811service_irqEv+0x310>
 800288a:	eeb0 0a66 	vmov.f32	s0, s13
 800288e:	f01f fa79 	bl	8021d84 <powf>
 8002892:	eef0 7a40 	vmov.f32	s15, s0
 8002896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800289a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800289e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80028e4 <_ZN6BMP38811service_irqEv+0x314>
 80028a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		}

		// Data ready INT cleared automatically 2.5 ms after the interrupt assertion
	}
 80028ac:	f107 0308 	add.w	r3, r7, #8
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fbc0 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 80028b6:	e003      	b.n	80028c0 <_ZN6BMP38811service_irqEv+0x2f0>
	else
	{
		USB_Log("ERROR reading BMP388 data.", ERR);
 80028b8:	2102      	movs	r1, #2
 80028ba:	480b      	ldr	r0, [pc, #44]	@ (80028e8 <_ZN6BMP38811service_irqEv+0x318>)
 80028bc:	f003 fd48 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status_temp && status_pressure;
 80028c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <_ZN6BMP38811service_irqEv+0x304>
 80028c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <_ZN6BMP38811service_irqEv+0x304>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <_ZN6BMP38811service_irqEv+0x306>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3748      	adds	r7, #72	@ 0x48
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	3e42d52f 	.word	0x3e42d52f
 80028e4:	472d2a00 	.word	0x472d2a00
 80028e8:	0802717c 	.word	0x0802717c

080028ec <_ZN6BMP38812get_altitudeEv>:
	np::lock_guard lock(baro_data_mutex);
	return pressure;
}

float BMP388::get_altitude()
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	np::lock_guard lock(baro_data_mutex);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fb84 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return altitude;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
}
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fb92 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return altitude;
 8002912:	ee07 4a90 	vmov	s15, r4
}
 8002916:	eeb0 0a67 	vmov.f32	s0, s15
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}

08002920 <_ZN6BMP38820read_calibration_nvmEv>:
	np::lock_guard lock(baro_data_mutex);
	return temperature;
}

bool BMP388::read_calibration_nvm()
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002928:	2300      	movs	r3, #0
 800292a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t rx_data[2];

	// PAR T1
	status = read_register(REG_NVM_PAR_T1_LSB, rx_data, 2);
 800292e:	f107 020c 	add.w	r2, r7, #12
 8002932:	2302      	movs	r3, #2
 8002934:	2131      	movs	r1, #49	@ 0x31
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa92 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 800293c:	4603      	mov	r3, r0
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002942:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002946:	f083 0301 	eor.w	r3, r3, #1
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <_ZN6BMP38820read_calibration_nvmEv+0x36>
 8002950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002954:	e21b      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t1_raw = (rx_data[1] << 8) | rx_data[0];
 8002956:	7b7b      	ldrb	r3, [r7, #13]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	b21a      	sxth	r2, r3
 800295c:	7b3b      	ldrb	r3, [r7, #12]
 800295e:	b21b      	sxth	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b21b      	sxth	r3, r3
 8002964:	84bb      	strh	r3, [r7, #36]	@ 0x24
	calib_data.par_t1 = (float)par_t1_raw / powf(2, -8);
 8002966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002968:	ee07 3a90 	vmov	s15, r3
 800296c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002970:	eddf 6abb 	vldr	s13, [pc, #748]	@ 8002c60 <_ZN6BMP38820read_calibration_nvmEv+0x340>
 8002974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	edc3 7a02 	vstr	s15, [r3, #8]

	// PAR T2
	status = read_register(REG_NVM_PAR_T2_LSB, rx_data, 2);
 800297e:	f107 020c 	add.w	r2, r7, #12
 8002982:	2302      	movs	r3, #2
 8002984:	2133      	movs	r1, #51	@ 0x33
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa6a 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002992:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002996:	f083 0301 	eor.w	r3, r3, #1
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <_ZN6BMP38820read_calibration_nvmEv+0x86>
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029a4:	e1f3      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_t2_raw = (rx_data[1] << 8) | rx_data[0];
 80029a6:	7b7b      	ldrb	r3, [r7, #13]
 80029a8:	021b      	lsls	r3, r3, #8
 80029aa:	b21a      	sxth	r2, r3
 80029ac:	7b3b      	ldrb	r3, [r7, #12]
 80029ae:	b21b      	sxth	r3, r3
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b21b      	sxth	r3, r3
 80029b4:	847b      	strh	r3, [r7, #34]	@ 0x22
	calib_data.par_t2 = (float)par_t2_raw / powf(2, 30);
 80029b6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029c0:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002c64 <_ZN6BMP38820read_calibration_nvmEv+0x344>
 80029c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edc3 7a03 	vstr	s15, [r3, #12]

	// PAR T3
	status = read_register(REG_NVM_PAR_T3, rx_data, 1);
 80029ce:	f107 020c 	add.w	r2, r7, #12
 80029d2:	2301      	movs	r3, #1
 80029d4:	2135      	movs	r1, #53	@ 0x35
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fa42 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 80029e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029e6:	f083 0301 	eor.w	r3, r3, #1
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <_ZN6BMP38820read_calibration_nvmEv+0xd6>
 80029f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f4:	e1cb      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_t3_raw = rx_data[0];
 80029f6:	7b3b      	ldrb	r3, [r7, #12]
 80029f8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	calib_data.par_t3 = (float)par_t3_raw / powf(2, 48);
 80029fc:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a08:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8002c88 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002a0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edc3 7a04 	vstr	s15, [r3, #16]

	// PAR P1
	status = read_register(REG_NVM_PAR_P1_LSB, rx_data, 2);
 8002a16:	f107 020c 	add.w	r2, r7, #12
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	2136      	movs	r1, #54	@ 0x36
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa1e 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a2e:	f083 0301 	eor.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <_ZN6BMP38820read_calibration_nvmEv+0x11e>
 8002a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a3c:	e1a7      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p1_raw = (rx_data[1] << 8) | rx_data[0];
 8002a3e:	7b7b      	ldrb	r3, [r7, #13]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	b21a      	sxth	r2, r3
 8002a44:	7b3b      	ldrb	r3, [r7, #12]
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	83fb      	strh	r3, [r7, #30]
	calib_data.par_p1 = ((float)par_p1_raw - powf(2, 14)) / powf(2, 20);
 8002a4c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a58:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8002c68 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002a5c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a60:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8002c6c <_ZN6BMP38820read_calibration_nvmEv+0x34c>
 8002a64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	edc3 7a05 	vstr	s15, [r3, #20]

	// PAR P2
	status = read_register(REG_NVM_PAR_P2_LSB, rx_data, 2);
 8002a6e:	f107 020c 	add.w	r2, r7, #12
 8002a72:	2302      	movs	r3, #2
 8002a74:	2138      	movs	r1, #56	@ 0x38
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f9f2 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <_ZN6BMP38820read_calibration_nvmEv+0x176>
 8002a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a94:	e17b      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p2_raw = (rx_data[1] << 8) | rx_data[0];
 8002a96:	7b7b      	ldrb	r3, [r7, #13]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	b21a      	sxth	r2, r3
 8002a9c:	7b3b      	ldrb	r3, [r7, #12]
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	83bb      	strh	r3, [r7, #28]
	calib_data.par_p2 = ((float)par_p2_raw - powf(2, 14)) / powf(2, 29);
 8002aa4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab0:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8002c68 <_ZN6BMP38820read_calibration_nvmEv+0x348>
 8002ab4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002ab8:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002c70 <_ZN6BMP38820read_calibration_nvmEv+0x350>
 8002abc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	edc3 7a06 	vstr	s15, [r3, #24]

	// PAR P3
	status = read_register(REG_NVM_PAR_P3, rx_data, 1);
 8002ac6:	f107 020c 	add.w	r2, r7, #12
 8002aca:	2301      	movs	r3, #1
 8002acc:	213a      	movs	r1, #58	@ 0x3a
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9c6 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002ada:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ade:	f083 0301 	eor.w	r3, r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <_ZN6BMP38820read_calibration_nvmEv+0x1ce>
 8002ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002aec:	e14f      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p3_raw = rx_data[0];
 8002aee:	7b3b      	ldrb	r3, [r7, #12]
 8002af0:	76fb      	strb	r3, [r7, #27]
	calib_data.par_p3 = (float)par_p3_raw / powf(2, 32);
 8002af2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8002c74 <_ZN6BMP38820read_calibration_nvmEv+0x354>
 8002b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	edc3 7a07 	vstr	s15, [r3, #28]

	// PAR P4
	status = read_register(REG_NVM_PAR_P4, rx_data, 1);
 8002b0c:	f107 020c 	add.w	r2, r7, #12
 8002b10:	2301      	movs	r3, #1
 8002b12:	213b      	movs	r1, #59	@ 0x3b
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f9a3 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b24:	f083 0301 	eor.w	r3, r3, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <_ZN6BMP38820read_calibration_nvmEv+0x214>
 8002b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b32:	e12c      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p4_raw = rx_data[0];
 8002b34:	7b3b      	ldrb	r3, [r7, #12]
 8002b36:	76bb      	strb	r3, [r7, #26]
	calib_data.par_p4 = (float)par_p4_raw / powf(2, 37);
 8002b38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b44:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8002c78 <_ZN6BMP38820read_calibration_nvmEv+0x358>
 8002b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	edc3 7a08 	vstr	s15, [r3, #32]

	// PAR P5
	status = read_register(REG_NVM_PAR_P5_LSB, rx_data, 2);
 8002b52:	f107 020c 	add.w	r2, r7, #12
 8002b56:	2302      	movs	r3, #2
 8002b58:	213c      	movs	r1, #60	@ 0x3c
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f980 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <_ZN6BMP38820read_calibration_nvmEv+0x25a>
 8002b74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b78:	e109      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p5_raw = (rx_data[1] << 8) | rx_data[0];
 8002b7a:	7b7b      	ldrb	r3, [r7, #13]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b21a      	sxth	r2, r3
 8002b80:	7b3b      	ldrb	r3, [r7, #12]
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	833b      	strh	r3, [r7, #24]
	calib_data.par_p5 = (float)par_p5_raw / powf(2, -3);
 8002b8a:	8b3b      	ldrh	r3, [r7, #24]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b94:	eef4 6a00 	vmov.f32	s13, #64	@ 0x3e000000  0.125
 8002b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// PAR P6
	status = read_register(REG_NVM_PAR_P6_LSB, rx_data, 2);
 8002ba2:	f107 020c 	add.w	r2, r7, #12
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	213e      	movs	r1, #62	@ 0x3e
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f958 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <_ZN6BMP38820read_calibration_nvmEv+0x2aa>
 8002bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bc8:	e0e1      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	uint16_t par_p6_raw = (rx_data[1] << 8) | rx_data[0];
 8002bca:	7b7b      	ldrb	r3, [r7, #13]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	7b3b      	ldrb	r3, [r7, #12]
 8002bd2:	b21b      	sxth	r3, r3
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	b21b      	sxth	r3, r3
 8002bd8:	82fb      	strh	r3, [r7, #22]
	calib_data.par_p6 = (float)par_p6_raw / powf(2, 6);
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	ee07 3a90 	vmov	s15, r3
 8002be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002c7c <_ZN6BMP38820read_calibration_nvmEv+0x35c>
 8002be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// PAR P7
	status = read_register(REG_NVM_PAR_P7, rx_data, 1);
 8002bf2:	f107 020c 	add.w	r2, r7, #12
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	2140      	movs	r1, #64	@ 0x40
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f930 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c0a:	f083 0301 	eor.w	r3, r3, #1
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <_ZN6BMP38820read_calibration_nvmEv+0x2fa>
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c18:	e0b9      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p7_raw = rx_data[0];
 8002c1a:	7b3b      	ldrb	r3, [r7, #12]
 8002c1c:	757b      	strb	r3, [r7, #21]
	calib_data.par_p7 = (float)par_p7_raw / powf(2, 8);
 8002c1e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c2a:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002c80 <_ZN6BMP38820read_calibration_nvmEv+0x360>
 8002c2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// PAR P8
	status = read_register(REG_NVM_PAR_P8, rx_data, 1);
 8002c38:	f107 020c 	add.w	r2, r7, #12
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	2141      	movs	r1, #65	@ 0x41
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f90d 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <_ZN6BMP38820read_calibration_nvmEv+0x370>
 8002c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c5e:	e096      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
 8002c60:	3b800000 	.word	0x3b800000
 8002c64:	4e800000 	.word	0x4e800000
 8002c68:	46800000 	.word	0x46800000
 8002c6c:	49800000 	.word	0x49800000
 8002c70:	4e000000 	.word	0x4e000000
 8002c74:	4f800000 	.word	0x4f800000
 8002c78:	52000000 	.word	0x52000000
 8002c7c:	42800000 	.word	0x42800000
 8002c80:	43800000 	.word	0x43800000
 8002c84:	47000000 	.word	0x47000000
 8002c88:	57800000 	.word	0x57800000
 8002c8c:	60000000 	.word	0x60000000
	int8_t par_p8_raw = rx_data[0];
 8002c90:	7b3b      	ldrb	r3, [r7, #12]
 8002c92:	753b      	strb	r3, [r7, #20]
	calib_data.par_p8 = (float)par_p8_raw / powf(2, 15);
 8002c94:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8002c98:	ee07 3a90 	vmov	s15, r3
 8002c9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ca0:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8002c84 <_ZN6BMP38820read_calibration_nvmEv+0x364>
 8002ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// PAR P9
	status = read_register(REG_NVM_PAR_P9_LSB, rx_data, 2);
 8002cae:	f107 020c 	add.w	r2, r7, #12
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	2142      	movs	r1, #66	@ 0x42
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8d2 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002cc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cc6:	f083 0301 	eor.w	r3, r3, #1
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <_ZN6BMP38820read_calibration_nvmEv+0x3b6>
 8002cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002cd4:	e05b      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int16_t par_p9_raw = (rx_data[1] << 8) | rx_data[0];
 8002cd6:	7b7b      	ldrb	r3, [r7, #13]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	b21a      	sxth	r2, r3
 8002cdc:	7b3b      	ldrb	r3, [r7, #12]
 8002cde:	b21b      	sxth	r3, r3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	827b      	strh	r3, [r7, #18]
	calib_data.par_p9 = (float)par_p9_raw / powf(2, 48);
 8002ce4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cf0:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8002c88 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002cf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	// PAR P10
	status = read_register(REG_NVM_PAR_P10, rx_data, 1);
 8002cfe:	f107 020c 	add.w	r2, r7, #12
 8002d02:	2301      	movs	r3, #1
 8002d04:	2144      	movs	r1, #68	@ 0x44
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8aa 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d002      	beq.n	8002d26 <_ZN6BMP38820read_calibration_nvmEv+0x406>
 8002d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d24:	e033      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p10_raw = rx_data[0];
 8002d26:	7b3b      	ldrb	r3, [r7, #12]
 8002d28:	747b      	strb	r3, [r7, #17]
	calib_data.par_p10 = (float)par_p10_raw / powf(2, 48);
 8002d2a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d36:	ed5f 6a2c 	vldr	s13, [pc, #-176]	@ 8002c88 <_ZN6BMP38820read_calibration_nvmEv+0x368>
 8002d3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// PAR P11
	status = read_register(REG_NVM_PAR_P11, rx_data, 1);
 8002d44:	f107 020c 	add.w	r2, r7, #12
 8002d48:	2301      	movs	r3, #1
 8002d4a:	2145      	movs	r1, #69	@ 0x45
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f887 	bl	8002e60 <_ZN6BMP38813read_registerEhPht>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!status) return status;
 8002d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <_ZN6BMP38820read_calibration_nvmEv+0x44c>
 8002d66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d6a:	e010      	b.n	8002d8e <_ZN6BMP38820read_calibration_nvmEv+0x46e>
	int8_t par_p11_raw = rx_data[0];
 8002d6c:	7b3b      	ldrb	r3, [r7, #12]
 8002d6e:	743b      	strb	r3, [r7, #16]
	calib_data.par_p11 = (float)par_p11_raw / powf(2, 65);
 8002d70:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7c:	ed5f 6a3d 	vldr	s13, [pc, #-244]	@ 8002c8c <_ZN6BMP38820read_calibration_nvmEv+0x36c>
 8002d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	return status;
 8002d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3728      	adds	r7, #40	@ 0x28
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <_ZN6BMP38824compute_startup_pressureEv>:

bool BMP388::compute_startup_pressure()
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b089      	sub	sp, #36	@ 0x24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	/* Compute the average current pressure (for initial altitude reference) */
	bool status = false;
 8002da0:	2300      	movs	r3, #0
 8002da2:	77fb      	strb	r3, [r7, #31]
	uint8_t tx_data[2];
	uint8_t sample_num = 50;
 8002da4:	2332      	movs	r3, #50	@ 0x32
 8002da6:	74fb      	strb	r3, [r7, #19]
	float running_pressure = 0;
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]

	for (int i = 0; i < sample_num; i++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e031      	b.n	8002e18 <_ZN6BMP38824compute_startup_pressureEv+0x80>
	{
		// Switch sensor into forced mode (take one reading, return to sleep)
		tx_data[0] = 0x13;
 8002db4:	2313      	movs	r3, #19
 8002db6:	743b      	strb	r3, [r7, #16]
		status = write_register(REG_PWR_CTRL, tx_data, 1);
 8002db8:	f107 0210 	add.w	r2, r7, #16
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	211b      	movs	r1, #27
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f88d 	bl	8002ee0 <_ZN6BMP38814write_registerEhPht>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	77fb      	strb	r3, [r7, #31]
		if (!status) return status;
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	f083 0301 	eor.w	r3, r3, #1
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <_ZN6BMP38824compute_startup_pressureEv+0x42>
 8002dd6:	7ffc      	ldrb	r4, [r7, #31]
 8002dd8:	e03c      	b.n	8002e54 <_ZN6BMP38824compute_startup_pressureEv+0xbc>
		osDelay(40);
 8002dda:	2028      	movs	r0, #40	@ 0x28
 8002ddc:	f011 f8e9 	bl	8013fb2 <osDelay>
		service_irq();
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff fbf5 	bl	80025d0 <_ZN6BMP38811service_irqEv>
		np::lock_guard lock(baro_data_mutex);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dea:	f107 0308 	add.w	r3, r7, #8
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f90b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		running_pressure += pressure;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002dfc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	edc7 7a06 	vstr	s15, [r7, #24]
	}
 8002e08:	f107 0308 	add.w	r3, r7, #8
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe f912 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	for (int i = 0; i < sample_num; i++)
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3301      	adds	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	dbc9      	blt.n	8002db4 <_ZN6BMP38824compute_startup_pressureEv+0x1c>
	np::lock_guard lock(baro_data_mutex);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe f8ee 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	startup_pressure = running_pressure / sample_num;
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e3a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	return status;
 8002e48:	7ffc      	ldrb	r4, [r7, #31]
}
 8002e4a:	f107 030c 	add.w	r3, r7, #12
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe f8f1 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8002e54:	4623      	mov	r3, r4
 8002e56:	4618      	mov	r0, r3
 8002e58:	3724      	adds	r7, #36	@ 0x24
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd90      	pop	{r4, r7, pc}
	...

08002e60 <_ZN6BMP38813read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool BMP388::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af04      	add	r7, sp, #16
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	72fb      	strb	r3, [r7, #11]
 8002e70:	4613      	mov	r3, r2
 8002e72:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002e74:	2300      	movs	r3, #0
 8002e76:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe f8c2 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6818      	ldr	r0, [r3, #0]
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e94:	9302      	str	r3, [sp, #8]
 8002e96:	893b      	ldrh	r3, [r7, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	21ec      	movs	r1, #236	@ 0xec
 8002ea2:	f007 fba1 	bl	800a5e8 <HAL_I2C_Mem_Read>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
	}
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe f8bd 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
 8002ebe:	f083 0301 	eor.w	r3, r3, #1
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <_ZN6BMP38813read_registerEhPht+0x70>
	{
		USB_Log("BMP388 register read failed.\n", ERR);
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4804      	ldr	r0, [pc, #16]	@ (8002edc <_ZN6BMP38813read_registerEhPht+0x7c>)
 8002ecc:	f003 fa40 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8002ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	080271b0 	.word	0x080271b0

08002ee0 <_ZN6BMP38814write_registerEhPht>:

bool BMP388::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	@ 0x28
 8002ee4:	af04      	add	r7, sp, #16
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	461a      	mov	r2, r3
 8002eec:	460b      	mov	r3, r1
 8002eee:	72fb      	strb	r3, [r7, #11]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe f882 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(i2c_handle, (BMP388_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2301      	movs	r3, #1
 8002f20:	21ec      	movs	r1, #236	@ 0xec
 8002f22:	f007 fa4d 	bl	800a3c0 <HAL_I2C_Mem_Write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	75fb      	strb	r3, [r7, #23]
	}
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe f87d 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 8002f3c:	7dfb      	ldrb	r3, [r7, #23]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <_ZN6BMP38814write_registerEhPht+0x70>
	{
		USB_Log("BMP388 register write failed.\n", ERR);
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4804      	ldr	r0, [pc, #16]	@ (8002f5c <_ZN6BMP38814write_registerEhPht+0x7c>)
 8002f4c:	f003 fa00 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	080271d0 	.word	0x080271d0

08002f60 <_ZN23LIS3MDL_CalibrationDataC1Ev>:
#define REG_INT_THS_L				0x32
#define REG_INT_THS_H				0x33

#define LIS3MDL_ADDRESS				0x1C

struct LIS3MDL_CalibrationData
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	@ (8002f88 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x28>)
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a06      	ldr	r2, [pc, #24]	@ (8002f8c <_ZN23LIS3MDL_CalibrationDataC1Ev+0x2c>)
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a06      	ldr	r2, [pc, #24]	@ (8002f90 <_ZN23LIS3MDL_CalibrationDataC1Ev+0x30>)
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	be93a92a 	.word	0xbe93a92a
 8002f8c:	be9126e9 	.word	0xbe9126e9
 8002f90:	bde353f8 	.word	0xbde353f8

08002f94 <_ZN7LIS3MDLC1EP19__I2C_HandleTypeDefRPvS3_>:
#include <cmath>
#include <cstdio>
#include <cstring>


LIS3MDL::LIS3MDL(I2C_HandleTypeDef* i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& mag_data_mutex)
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
	:i2c_handle(i2c_handle),
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	601a      	str	r2, [r3, #0]
	 i2c_mutex(i2c_mutex),
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	605a      	str	r2, [r3, #4]
	 mag_data_mutex(mag_data_mutex) {}
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ffd4 	bl	8002f60 <_ZN23LIS3MDL_CalibrationDataC1Ev>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a0b      	ldr	r2, [pc, #44]	@ (8002fe8 <_ZN7LIS3MDLC1EP19__I2C_HandleTypeDefRPvS3_+0x54>)
 8002fbc:	615a      	str	r2, [r3, #20]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	619a      	str	r2, [r3, #24]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	331c      	adds	r3, #28
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3328      	adds	r3, #40	@ 0x28
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	45d5d000 	.word	0x45d5d000

08002fec <_ZN7LIS3MDL4initEv>:

bool LIS3MDL::init()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	bool status = false;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];
	memset(tx_data, 0, sizeof(tx_data));
 8002ffa:	f107 0318 	add.w	r3, r7, #24
 8002ffe:	2204      	movs	r2, #4
 8003000:	2100      	movs	r1, #0
 8003002:	4618      	mov	r0, r3
 8003004:	f021 fee9 	bl	8024dda <memset>
	memset(rx_data, 0, sizeof(rx_data));
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2204      	movs	r2, #4
 800300e:	2100      	movs	r1, #0
 8003010:	4618      	mov	r0, r3
 8003012:	f021 fee2 	bl	8024dda <memset>

	// Check chip ID
	rx_data[0] = 0x00;
 8003016:	2300      	movs	r3, #0
 8003018:	753b      	strb	r3, [r7, #20]
	status = read_register(REG_WHO_AM_I, rx_data, 1);
 800301a:	f107 0214 	add.w	r2, r7, #20
 800301e:	2301      	movs	r3, #1
 8003020:	210f      	movs	r1, #15
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f9cc 	bl	80033c0 <_ZN7LIS3MDL13read_registerEhPht>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (status && rx_data[0] == 0x3D)
 800302e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01d      	beq.n	8003072 <_ZN7LIS3MDL4initEv+0x86>
 8003036:	7d3b      	ldrb	r3, [r7, #20]
 8003038:	2b3d      	cmp	r3, #61	@ 0x3d
 800303a:	d11a      	bne.n	8003072 <_ZN7LIS3MDL4initEv+0x86>
	{
		USB_Log("Found LIS3MDL, starting initialization.", CRITICAL);
 800303c:	2101      	movs	r1, #1
 800303e:	4864      	ldr	r0, [pc, #400]	@ (80031d0 <_ZN7LIS3MDL4initEv+0x1e4>)
 8003040:	f003 f986 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8003044:	200a      	movs	r0, #10
 8003046:	f010 ffb4 	bl	8013fb2 <osDelay>

	// Perform soft-reset of device
	tx_data[0] = 0x04;
 800304a:	2304      	movs	r3, #4
 800304c:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 800304e:	f107 0218 	add.w	r2, r7, #24
 8003052:	2301      	movs	r3, #1
 8003054:	2121      	movs	r1, #33	@ 0x21
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9f8 	bl	800344c <_ZN7LIS3MDL14write_registerEhPht>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 8003062:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003066:	f083 0301 	eor.w	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <_ZN7LIS3MDL4initEv+0x92>
 8003070:	e008      	b.n	8003084 <_ZN7LIS3MDL4initEv+0x98>
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
 8003072:	2102      	movs	r1, #2
 8003074:	4857      	ldr	r0, [pc, #348]	@ (80031d4 <_ZN7LIS3MDL4initEv+0x1e8>)
 8003076:	f003 f96b 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		return false;
 800307a:	2300      	movs	r3, #0
 800307c:	e0a3      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	if (!status) return status;
 800307e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003082:	e0a0      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	osDelay(10);
 8003084:	200a      	movs	r0, #10
 8003086:	f010 ff94 	bl	8013fb2 <osDelay>

	// Set +-4G range
	tx_data[0] = 0x00;
 800308a:	2300      	movs	r3, #0
 800308c:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG2, tx_data, 1);
 800308e:	f107 0218 	add.w	r2, r7, #24
 8003092:	2301      	movs	r3, #1
 8003094:	2121      	movs	r1, #33	@ 0x21
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9d8 	bl	800344c <_ZN7LIS3MDL14write_registerEhPht>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80030a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <_ZN7LIS3MDL4initEv+0xca>
 80030b0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030b4:	e087      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	osDelay(10);
 80030b6:	200a      	movs	r0, #10
 80030b8:	f010 ff7b 	bl	8013fb2 <osDelay>

	// Set X,Y axes ultra-high performance mode, 40Hz ODR, enable temperature sensor
	tx_data[0] = 0xF8;
 80030bc:	23f8      	movs	r3, #248	@ 0xf8
 80030be:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG1, tx_data, 1);
 80030c0:	f107 0218 	add.w	r2, r7, #24
 80030c4:	2301      	movs	r3, #1
 80030c6:	2120      	movs	r1, #32
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9bf 	bl	800344c <_ZN7LIS3MDL14write_registerEhPht>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 80030d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030d8:	f083 0301 	eor.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d002      	beq.n	80030e8 <_ZN7LIS3MDL4initEv+0xfc>
 80030e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e06e      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	osDelay(10);
 80030e8:	200a      	movs	r0, #10
 80030ea:	f010 ff62 	bl	8013fb2 <osDelay>

	// Set Z axis ultra-high performance mode
	tx_data[0] = 0x0C;
 80030ee:	230c      	movs	r3, #12
 80030f0:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG4, tx_data, 1);
 80030f2:	f107 0218 	add.w	r2, r7, #24
 80030f6:	2301      	movs	r3, #1
 80030f8:	2123      	movs	r1, #35	@ 0x23
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9a6 	bl	800344c <_ZN7LIS3MDL14write_registerEhPht>
 8003100:	4603      	mov	r3, r0
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 8003106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <_ZN7LIS3MDL4initEv+0x12e>
 8003114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003118:	e055      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	osDelay(10);
 800311a:	200a      	movs	r0, #10
 800311c:	f010 ff49 	bl	8013fb2 <osDelay>

	// Initilize IIR Filters
	float ODR = 40;				// Hz
 8003120:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <_ZN7LIS3MDL4initEv+0x1ec>)
 8003122:	613b      	str	r3, [r7, #16]
	float CUTOFF = 10;			// Hz
 8003124:	4b2d      	ldr	r3, [pc, #180]	@ (80031dc <_ZN7LIS3MDL4initEv+0x1f0>)
 8003126:	60fb      	str	r3, [r7, #12]
	for (size_t i = 0; i < filters.size(); i++)
 8003128:	2300      	movs	r3, #0
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24
 800312c:	e01d      	b.n	800316a <_ZN7LIS3MDL4initEv+0x17e>
	{
		filters[i] = std::make_unique<IIRFilter>(CUTOFF, ODR);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	f107 0210 	add.w	r2, r7, #16
 8003136:	f107 010c 	add.w	r1, r7, #12
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe ff62 	bl	8002004 <_ZSt11make_uniqueI9IIRFilterJRfS1_EENSt8__detail9_MakeUniqIT_E15__single_objectEDpOT0_>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3328      	adds	r3, #40	@ 0x28
 8003144:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe ff4d 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 800314c:	4602      	mov	r2, r0
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4619      	mov	r1, r3
 8003154:	4610      	mov	r0, r2
 8003156:	f7fd ffd5 	bl	8001104 <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEaSEOS3_>
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe ff14 	bl	8001f8c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
	for (size_t i = 0; i < filters.size(); i++)
 8003164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003166:	3301      	adds	r3, #1
 8003168:	627b      	str	r3, [r7, #36]	@ 0x24
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3328      	adds	r3, #40	@ 0x28
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ff2e 	bl	8001fd0 <_ZNKSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EE4sizeEv>
 8003174:	4602      	mov	r2, r0
 8003176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003178:	4293      	cmp	r3, r2
 800317a:	d3d8      	bcc.n	800312e <_ZN7LIS3MDL4initEv+0x142>
	}

	// Switch to continuous-conversion mode
	tx_data[0] = 0x00;
 800317c:	2300      	movs	r3, #0
 800317e:	763b      	strb	r3, [r7, #24]
	status = write_register(REG_CTRL_REG3, tx_data, 1);
 8003180:	f107 0218 	add.w	r2, r7, #24
 8003184:	2301      	movs	r3, #1
 8003186:	2122      	movs	r1, #34	@ 0x22
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f95f 	bl	800344c <_ZN7LIS3MDL14write_registerEhPht>
 800318e:	4603      	mov	r3, r0
 8003190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	if (!status) return status;
 8003194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <_ZN7LIS3MDL4initEv+0x1bc>
 80031a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80031a6:	e00e      	b.n	80031c6 <_ZN7LIS3MDL4initEv+0x1da>
	osDelay(10);
 80031a8:	200a      	movs	r0, #10
 80031aa:	f010 ff02 	bl	8013fb2 <osDelay>

	// Read data to clear DRDY interrupt
	service_irq();
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f818 	bl	80031e4 <_ZN7LIS3MDL11service_irqEv>

	USB_Log("LIS3MDL initialized OK.", CRITICAL);
 80031b4:	2101      	movs	r1, #1
 80031b6:	480a      	ldr	r0, [pc, #40]	@ (80031e0 <_ZN7LIS3MDL4initEv+0x1f4>)
 80031b8:	f003 f8ca 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80031bc:	2064      	movs	r0, #100	@ 0x64
 80031be:	f010 fef8 	bl	8013fb2 <osDelay>

	return status;
 80031c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3728      	adds	r7, #40	@ 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	080271f0 	.word	0x080271f0
 80031d4:	08027218 	.word	0x08027218
 80031d8:	42200000 	.word	0x42200000
 80031dc:	41200000 	.word	0x41200000
 80031e0:	08027248 	.word	0x08027248

080031e4 <_ZN7LIS3MDL11service_irqEv>:

bool LIS3MDL::service_irq()
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08b      	sub	sp, #44	@ 0x2c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[6];
	bool status = read_register(REG_OUT_X_L, raw_data, sizeof(raw_data));
 80031ec:	f107 020c 	add.w	r2, r7, #12
 80031f0:	2306      	movs	r3, #6
 80031f2:	2128      	movs	r1, #40	@ 0x28
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f8e3 	bl	80033c0 <_ZN7LIS3MDL13read_registerEhPht>
 80031fa:	4603      	mov	r3, r0
 80031fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status)
 8003200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 80a4 	beq.w	8003352 <_ZN7LIS3MDL11service_irqEv+0x16e>
	{
		int16_t raw_x_int16 = (raw_data[1] << 8) | raw_data[0];
 800320a:	7b7b      	ldrb	r3, [r7, #13]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b21a      	sxth	r2, r3
 8003210:	7b3b      	ldrb	r3, [r7, #12]
 8003212:	b21b      	sxth	r3, r3
 8003214:	4313      	orrs	r3, r2
 8003216:	84bb      	strh	r3, [r7, #36]	@ 0x24
		int16_t raw_y_int16 = (raw_data[3] << 8) | raw_data[2];
 8003218:	7bfb      	ldrb	r3, [r7, #15]
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	b21a      	sxth	r2, r3
 800321e:	7bbb      	ldrb	r3, [r7, #14]
 8003220:	b21b      	sxth	r3, r3
 8003222:	4313      	orrs	r3, r2
 8003224:	847b      	strh	r3, [r7, #34]	@ 0x22
		int16_t raw_z_int16 = (raw_data[5] << 8) | raw_data[4];
 8003226:	7c7b      	ldrb	r3, [r7, #17]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	b21a      	sxth	r2, r3
 800322c:	7c3b      	ldrb	r3, [r7, #16]
 800322e:	b21b      	sxth	r3, r3
 8003230:	4313      	orrs	r3, r2
 8003232:	843b      	strh	r3, [r7, #32]

		float LIS3_x = filters[0]->update(raw_x_int16 / LSB_per_gauss - calib_data.x_offset);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3328      	adds	r3, #40	@ 0x28
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe fed3 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003240:	4603      	mov	r3, r0
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe ff24 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 8003248:	4602      	mov	r2, r0
 800324a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	edd3 7a05 	vldr	s15, [r3, #20]
 800325c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	edd3 7a02 	vldr	s15, [r3, #8]
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	eeb0 0a67 	vmov.f32	s0, s15
 800326e:	4610      	mov	r0, r2
 8003270:	f004 fd40 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 8003274:	ed87 0a07 	vstr	s0, [r7, #28]
		float LIS3_y = filters[1]->update(raw_y_int16 / LSB_per_gauss - calib_data.y_offset);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3328      	adds	r3, #40	@ 0x28
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe feb1 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 8003284:	4603      	mov	r3, r0
 8003286:	4618      	mov	r0, r3
 8003288:	f7fe ff02 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 800328c:	4602      	mov	r2, r0
 800328e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003292:	ee07 3a90 	vmov	s15, r3
 8003296:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	edd3 7a05 	vldr	s15, [r3, #20]
 80032a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80032aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ae:	eeb0 0a67 	vmov.f32	s0, s15
 80032b2:	4610      	mov	r0, r2
 80032b4:	f004 fd1e 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 80032b8:	ed87 0a06 	vstr	s0, [r7, #24]
		float LIS3_z = filters[2]->update(raw_z_int16 / LSB_per_gauss - calib_data.z_offset);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3328      	adds	r3, #40	@ 0x28
 80032c0:	2102      	movs	r1, #2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe fe8f 	bl	8001fe6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EEixEj>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fe fee0 	bl	8002090 <_ZNKSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EEptEv>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80032e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	4610      	mov	r0, r2
 80032f8:	f004 fcfc 	bl	8007cf4 <_ZN9IIRFilter6updateEf>
 80032fc:	ed87 0a05 	vstr	s0, [r7, #20]

		np::lock_guard lock(mag_data_mutex);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699a      	ldr	r2, [r3, #24]
 8003304:	f107 0308 	add.w	r3, r7, #8
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd fe7e 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		axis_intensities[0] = LIS3_x;
 8003310:	69fc      	ldr	r4, [r7, #28]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	331c      	adds	r3, #28
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe fec5 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800331e:	4603      	mov	r3, r0
 8003320:	601c      	str	r4, [r3, #0]
		axis_intensities[1] = LIS3_y;
 8003322:	69bc      	ldr	r4, [r7, #24]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	331c      	adds	r3, #28
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe febc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8003330:	4603      	mov	r3, r0
 8003332:	601c      	str	r4, [r3, #0]
		axis_intensities[2] = LIS3_z;
 8003334:	697c      	ldr	r4, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	331c      	adds	r3, #28
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe feb3 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8003342:	4603      	mov	r3, r0
 8003344:	601c      	str	r4, [r3, #0]

		// DRDY interrupt cleared automatically after read
	}
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fe73 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8003350:	e003      	b.n	800335a <_ZN7LIS3MDL11service_irqEv+0x176>
	else
	{
		USB_Log("ERR reading LIS3MDL data.", ERR);
 8003352:	2102      	movs	r1, #2
 8003354:	4804      	ldr	r0, [pc, #16]	@ (8003368 <_ZN7LIS3MDL11service_irqEv+0x184>)
 8003356:	f002 fffb 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800335a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800335e:	4618      	mov	r0, r3
 8003360:	372c      	adds	r7, #44	@ 0x2c
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop
 8003368:	08027260 	.word	0x08027260

0800336c <_ZN7LIS3MDL20get_axis_intensitiesEv>:
	}
	USB_Log(string, SENSOR);
}

std::array<float, 3> LIS3MDL::get_axis_intensities()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	@ 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6178      	str	r0, [r7, #20]
	np::lock_guard lock(mag_data_mutex);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	f107 0318 	add.w	r3, r7, #24
 800337c:	4611      	mov	r1, r2
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd fe44 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return axis_intensities;
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	f107 031c 	add.w	r3, r7, #28
 800338a:	321c      	adds	r2, #28
 800338c:	ca07      	ldmia	r2, {r0, r1, r2}
 800338e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8003392:	f107 0318 	add.w	r3, r7, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f7fd fe4d 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return axis_intensities;
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	ee06 1a90 	vmov	s13, r1
 80033a6:	ee07 2a10 	vmov	s14, r2
 80033aa:	ee07 3a90 	vmov	s15, r3
}
 80033ae:	eeb0 0a66 	vmov.f32	s0, s13
 80033b2:	eef0 0a47 	vmov.f32	s1, s14
 80033b6:	eeb0 1a67 	vmov.f32	s2, s15
 80033ba:	3728      	adds	r7, #40	@ 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <_ZN7LIS3MDL13read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool LIS3MDL::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af04      	add	r7, sp, #16
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	461a      	mov	r2, r3
 80033cc:	460b      	mov	r3, r1
 80033ce:	72fb      	strb	r3, [r7, #11]
 80033d0:	4613      	mov	r3, r2
 80033d2:	813b      	strh	r3, [r7, #8]
	bool status = false;
 80033d4:	2300      	movs	r3, #0
 80033d6:	75fb      	strb	r3, [r7, #23]

	if (data_len > 1)
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d903      	bls.n	80033e6 <_ZN7LIS3MDL13read_registerEhPht+0x26>
	{
		// In order to read multiple bytes, it is necessary to assert the most significant bit of the address field
		reg_addr |= 0x80;
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80033e4:	72fb      	strb	r3, [r7, #11]
	}

	{
		np::lock_guard lock(i2c_mutex);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	f107 0310 	add.w	r3, r7, #16
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fe0b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Read(i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	7afb      	ldrb	r3, [r7, #11]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	893b      	ldrh	r3, [r7, #8]
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	2138      	movs	r1, #56	@ 0x38
 8003410:	f007 f8ea 	bl	800a5e8 <HAL_I2C_Mem_Read>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]
	}
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd fe06 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 800342a:	7dfb      	ldrb	r3, [r7, #23]
 800342c:	f083 0301 	eor.w	r3, r3, #1
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <_ZN7LIS3MDL13read_registerEhPht+0x7e>
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
 8003436:	2102      	movs	r1, #2
 8003438:	4803      	ldr	r0, [pc, #12]	@ (8003448 <_ZN7LIS3MDL13read_registerEhPht+0x88>)
 800343a:	f002 ff89 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 800343e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	08027294 	.word	0x08027294

0800344c <_ZN7LIS3MDL14write_registerEhPht>:

bool LIS3MDL::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af04      	add	r7, sp, #16
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	461a      	mov	r2, r3
 8003458:	460b      	mov	r3, r1
 800345a:	72fb      	strb	r3, [r7, #11]
 800345c:	4613      	mov	r3, r2
 800345e:	813b      	strh	r3, [r7, #8]
	bool status = false;
 8003460:	2300      	movs	r3, #0
 8003462:	75fb      	strb	r3, [r7, #23]
	{
		np::lock_guard lock(i2c_mutex);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	f107 0310 	add.w	r3, r7, #16
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd fdcc 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		status = (HAL_I2C_Mem_Write(i2c_handle, (LIS3MDL_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	b29a      	uxth	r2, r3
 800347c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003480:	9302      	str	r3, [sp, #8]
 8003482:	893b      	ldrh	r3, [r7, #8]
 8003484:	9301      	str	r3, [sp, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	2301      	movs	r3, #1
 800348c:	2138      	movs	r1, #56	@ 0x38
 800348e:	f006 ff97 	bl	800a3c0 <HAL_I2C_Mem_Write>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	75fb      	strb	r3, [r7, #23]
	}
 800349e:	f107 0310 	add.w	r3, r7, #16
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fdc7 	bl	8001036 <_ZN2np10lock_guardD1Ev>

	if (!status)
 80034a8:	7dfb      	ldrb	r3, [r7, #23]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <_ZN7LIS3MDL14write_registerEhPht+0x70>
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
 80034b4:	2102      	movs	r1, #2
 80034b6:	4804      	ldr	r0, [pc, #16]	@ (80034c8 <_ZN7LIS3MDL14write_registerEhPht+0x7c>)
 80034b8:	f002 ff4a 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	}

	return status;
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	080272b4 	.word	0x080272b4

080034cc <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 80034d0:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_ZSt21is_constant_evaluatedv>:

  /// Returns true only when called during constant evaluation.
  /// @since C++20
  constexpr inline bool
  is_constant_evaluated() noexcept
  {
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
    if consteval { return true; } else { return false; }
#else
    return __builtin_is_constant_evaluated();
 80034e0:	2300      	movs	r3, #0
#endif
  }
 80034e2:	4618      	mov	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <_ZN7PMW3901C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDeftS3_>:
#include "Utility/lock_guard.hpp"
#include <cstring>
#include <cstdio>


PMW3901::PMW3901(SPI_HandleTypeDef* spi_handle, osMutexId_t& spi_mutex, GPIO_TypeDef* cs_port, uint16_t cs_pin, osMutexId_t& data_mutex)
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
	: spi_handle(spi_handle),
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	601a      	str	r2, [r3, #0]
	  spi_mutex(spi_mutex),
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	605a      	str	r2, [r3, #4]
	  cs_port(cs_port),
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	609a      	str	r2, [r3, #8]
	  cs_pin(cs_pin),
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8b3a      	ldrh	r2, [r7, #24]
 8003528:	819a      	strh	r2, [r3, #12]
	  data_mutex(data_mutex),
	  delta_x_filter(2),
	  delta_y_filter(2) {}
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a0d      	ldr	r2, [pc, #52]	@ (8003564 <_ZN7PMW3901C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDeftS3_+0x60>)
 800352e:	611a      	str	r2, [r3, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a0d      	ldr	r2, [pc, #52]	@ (8003568 <_ZN7PMW3901C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDeftS3_+0x64>)
 8003534:	615a      	str	r2, [r3, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	619a      	str	r2, [r3, #24]
	  data_mutex(data_mutex),
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	61da      	str	r2, [r3, #28]
	  delta_x_filter(2),
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	3320      	adds	r3, #32
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fac9 	bl	8004ae0 <_ZN19MovingAverageFilterIsEC1Ej>
	  delta_y_filter(2) {}
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3334      	adds	r3, #52	@ 0x34
 8003552:	2102      	movs	r1, #2
 8003554:	4618      	mov	r0, r3
 8003556:	f001 fac3 	bl	8004ae0 <_ZN19MovingAverageFilterIsEC1Ej>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	bc508df1 	.word	0xbc508df1
 8003568:	41a00000 	.word	0x41a00000

0800356c <_ZN7PMW39014initEv>:

bool PMW3901::init()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	osDelay(100);			// Testing found this delay required on start-up
 8003574:	2064      	movs	r0, #100	@ 0x64
 8003576:	f010 fd1c 	bl	8013fb2 <osDelay>
	bool status = false;
 800357a:	2300      	movs	r3, #0
 800357c:	75fb      	strb	r3, [r7, #23]

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];
	memset(tx_data, 0, sizeof(tx_data));
 800357e:	f107 0310 	add.w	r3, r7, #16
 8003582:	2204      	movs	r2, #4
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f021 fc27 	bl	8024dda <memset>
	memset(rx_data, 0, sizeof(rx_data));
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	2204      	movs	r2, #4
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f021 fc20 	bl	8024dda <memset>

	// Perform power up reset
	tx_data[0] = 0x5A;
 800359a:	235a      	movs	r3, #90	@ 0x5a
 800359c:	743b      	strb	r3, [r7, #16]
	status = write_register(REG_POWER_UP_RESET, tx_data, 1);
 800359e:	f107 0210 	add.w	r2, r7, #16
 80035a2:	2301      	movs	r3, #1
 80035a4:	213a      	movs	r1, #58	@ 0x3a
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 f9e4 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <_ZN7PMW39014initEv+0x54>
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	e0fd      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 80035c0:	200a      	movs	r0, #10
 80035c2:	f010 fcf6 	bl	8013fb2 <osDelay>

	// Check PMW3901 product ID and inverse product ID
	rx_data[0] = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	733b      	strb	r3, [r7, #12]
	status = read_register(REG_PRODUCT_ID, rx_data, 1);
 80035ca:	f107 020c 	add.w	r2, r7, #12
 80035ce:	2301      	movs	r3, #1
 80035d0:	2100      	movs	r1, #0
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 f906 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <_ZN7PMW39014initEv+0x80>
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	e0e7      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 80035ec:	200a      	movs	r0, #10
 80035ee:	f010 fce0 	bl	8013fb2 <osDelay>
	rx_data[1] = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	737b      	strb	r3, [r7, #13]
	status = read_register(REG_INVERSE_PRODUCT_ID, rx_data+1, 1);
 80035f6:	f107 020c 	add.w	r2, r7, #12
 80035fa:	3201      	adds	r2, #1
 80035fc:	2301      	movs	r3, #1
 80035fe:	215f      	movs	r1, #95	@ 0x5f
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f001 f8ef 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <_ZN7PMW39014initEv+0xae>
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	e0d0      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 800361a:	200a      	movs	r0, #10
 800361c:	f010 fcc9 	bl	8013fb2 <osDelay>
	if (rx_data[0] == 0x49 && rx_data[1] == 0xB6)
 8003620:	7b3b      	ldrb	r3, [r7, #12]
 8003622:	2b49      	cmp	r3, #73	@ 0x49
 8003624:	d119      	bne.n	800365a <_ZN7PMW39014initEv+0xee>
 8003626:	7b7b      	ldrb	r3, [r7, #13]
 8003628:	2bb6      	cmp	r3, #182	@ 0xb6
 800362a:	d116      	bne.n	800365a <_ZN7PMW39014initEv+0xee>
	{
		USB_Log("Found PMW3901 optical flow sensor, starting initialization.", CRITICAL);
 800362c:	2101      	movs	r1, #1
 800362e:	4865      	ldr	r0, [pc, #404]	@ (80037c4 <_ZN7PMW39014initEv+0x258>)
 8003630:	f002 fe8e 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	else
	{
		USB_Log("Failed to find PMW3901 optical flow sensor. Initialization failed.", ERR);
		return false;
	}
	osDelay(10);
 8003634:	200a      	movs	r0, #10
 8003636:	f010 fcbc 	bl	8013fb2 <osDelay>

	// Reading the motion registers one time
	status = read_register(REG_MOTION, rx_data, 1);
 800363a:	f107 020c 	add.w	r2, r7, #12
 800363e:	2301      	movs	r3, #1
 8003640:	2102      	movs	r1, #2
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f001 f8ce 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	f083 0301 	eor.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d106      	bne.n	8003666 <_ZN7PMW39014initEv+0xfa>
 8003658:	e007      	b.n	800366a <_ZN7PMW39014initEv+0xfe>
		USB_Log("Failed to find PMW3901 optical flow sensor. Initialization failed.", ERR);
 800365a:	2102      	movs	r1, #2
 800365c:	485a      	ldr	r0, [pc, #360]	@ (80037c8 <_ZN7PMW39014initEv+0x25c>)
 800365e:	f002 fe77 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		return false;
 8003662:	2300      	movs	r3, #0
 8003664:	e0aa      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	if (!status) return status;
 8003666:	7dfb      	ldrb	r3, [r7, #23]
 8003668:	e0a8      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 800366a:	200a      	movs	r0, #10
 800366c:	f010 fca1 	bl	8013fb2 <osDelay>
	status = read_register(REG_DELTA_X_L, rx_data, 1);
 8003670:	f107 020c 	add.w	r2, r7, #12
 8003674:	2301      	movs	r3, #1
 8003676:	2103      	movs	r1, #3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f001 f8b3 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 800367e:	4603      	mov	r3, r0
 8003680:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003682:	7dfb      	ldrb	r3, [r7, #23]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <_ZN7PMW39014initEv+0x126>
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	e094      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 8003692:	200a      	movs	r0, #10
 8003694:	f010 fc8d 	bl	8013fb2 <osDelay>
	status = read_register(REG_DELTA_X_H, rx_data, 1);
 8003698:	f107 020c 	add.w	r2, r7, #12
 800369c:	2301      	movs	r3, #1
 800369e:	2104      	movs	r1, #4
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 f89f 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 80036a6:	4603      	mov	r3, r0
 80036a8:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <_ZN7PMW39014initEv+0x14e>
 80036b6:	7dfb      	ldrb	r3, [r7, #23]
 80036b8:	e080      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 80036ba:	200a      	movs	r0, #10
 80036bc:	f010 fc79 	bl	8013fb2 <osDelay>
	status = read_register(REG_DELTA_Y_L, rx_data, 1);
 80036c0:	f107 020c 	add.w	r2, r7, #12
 80036c4:	2301      	movs	r3, #1
 80036c6:	2105      	movs	r1, #5
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f001 f88b 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 80036ce:	4603      	mov	r3, r0
 80036d0:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <_ZN7PMW39014initEv+0x176>
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	e06c      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 80036e2:	200a      	movs	r0, #10
 80036e4:	f010 fc65 	bl	8013fb2 <osDelay>
	status = read_register(REG_DELTA_Y_H, rx_data, 1);
 80036e8:	f107 020c 	add.w	r2, r7, #12
 80036ec:	2301      	movs	r3, #1
 80036ee:	2106      	movs	r1, #6
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f001 f877 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	f083 0301 	eor.w	r3, r3, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <_ZN7PMW39014initEv+0x19e>
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	e058      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(10);
 800370a:	200a      	movs	r0, #10
 800370c:	f010 fc51 	bl	8013fb2 <osDelay>

	// Initialize device registers on startup
	status = initialize_registers();
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f994 	bl	8003a3e <_ZN7PMW390120initialize_registersEv>
 8003716:	4603      	mov	r3, r0
 8003718:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	f083 0301 	eor.w	r3, r3, #1
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <_ZN7PMW39014initEv+0x1be>
 8003726:	7dfb      	ldrb	r3, [r7, #23]
 8003728:	e048      	b.n	80037bc <_ZN7PMW39014initEv+0x250>

	// LED startup sequence
	status = set_led(false);
 800372a:	2100      	movs	r1, #0
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fffb 	bl	8004728 <_ZN7PMW39017set_ledEb>
 8003732:	4603      	mov	r3, r0
 8003734:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <_ZN7PMW39014initEv+0x1da>
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	e03a      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(50);
 8003746:	2032      	movs	r0, #50	@ 0x32
 8003748:	f010 fc33 	bl	8013fb2 <osDelay>
	status = set_led(true);
 800374c:	2101      	movs	r1, #1
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 ffea 	bl	8004728 <_ZN7PMW39017set_ledEb>
 8003754:	4603      	mov	r3, r0
 8003756:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	f083 0301 	eor.w	r3, r3, #1
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <_ZN7PMW39014initEv+0x1fc>
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	e029      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(50);
 8003768:	2032      	movs	r0, #50	@ 0x32
 800376a:	f010 fc22 	bl	8013fb2 <osDelay>
	status = set_led(false);
 800376e:	2100      	movs	r1, #0
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 ffd9 	bl	8004728 <_ZN7PMW39017set_ledEb>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
 800377c:	f083 0301 	eor.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <_ZN7PMW39014initEv+0x21e>
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	e018      	b.n	80037bc <_ZN7PMW39014initEv+0x250>
	osDelay(50);
 800378a:	2032      	movs	r0, #50	@ 0x32
 800378c:	f010 fc11 	bl	8013fb2 <osDelay>
	status = set_led(true);
 8003790:	2101      	movs	r1, #1
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 ffc8 	bl	8004728 <_ZN7PMW39017set_ledEb>
 8003798:	4603      	mov	r3, r0
 800379a:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <_ZN7PMW39014initEv+0x240>
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	e007      	b.n	80037bc <_ZN7PMW39014initEv+0x250>

	USB_Log("PMW3901 optical flow sensor initialized OK.", CRITICAL);
 80037ac:	2101      	movs	r1, #1
 80037ae:	4807      	ldr	r0, [pc, #28]	@ (80037cc <_ZN7PMW39014initEv+0x260>)
 80037b0:	f002 fdce 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80037b4:	2064      	movs	r0, #100	@ 0x64
 80037b6:	f010 fbfc 	bl	8013fb2 <osDelay>

	return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	080272d4 	.word	0x080272d4
 80037c8:	08027310 	.word	0x08027310
 80037cc:	08027354 	.word	0x08027354

080037d0 <_ZN7PMW39016updateEv>:

bool PMW3901::update()
{
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
	bool status = false;
 80037d8:	2300      	movs	r3, #0
 80037da:	75fb      	strb	r3, [r7, #23]
	uint8_t rx_data[5];
	memset(rx_data, 0, sizeof(rx_data));
 80037dc:	f107 0310 	add.w	r3, r7, #16
 80037e0:	2205      	movs	r2, #5
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f021 faf8 	bl	8024dda <memset>

	// Read motion data
	status = read_register(REG_MOTION, rx_data, 1);
 80037ea:	f107 0210 	add.w	r2, r7, #16
 80037ee:	2301      	movs	r3, #1
 80037f0:	2102      	movs	r1, #2
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fff6 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	f083 0301 	eor.w	r3, r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <_ZN7PMW39016updateEv+0x3c>
 8003808:	7dfc      	ldrb	r4, [r7, #23]
 800380a:	e085      	b.n	8003918 <_ZN7PMW39016updateEv+0x148>
	status = read_register(REG_DELTA_X_H, rx_data+1, 1);
 800380c:	f107 0210 	add.w	r2, r7, #16
 8003810:	3201      	adds	r2, #1
 8003812:	2301      	movs	r3, #1
 8003814:	2104      	movs	r1, #4
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 ffe4 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 800381c:	4603      	mov	r3, r0
 800381e:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <_ZN7PMW39016updateEv+0x60>
 800382c:	7dfc      	ldrb	r4, [r7, #23]
 800382e:	e073      	b.n	8003918 <_ZN7PMW39016updateEv+0x148>
	status = read_register(REG_DELTA_X_L, rx_data+2, 1);
 8003830:	f107 0210 	add.w	r2, r7, #16
 8003834:	3202      	adds	r2, #2
 8003836:	2301      	movs	r3, #1
 8003838:	2103      	movs	r1, #3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 ffd2 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	f083 0301 	eor.w	r3, r3, #1
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <_ZN7PMW39016updateEv+0x84>
 8003850:	7dfc      	ldrb	r4, [r7, #23]
 8003852:	e061      	b.n	8003918 <_ZN7PMW39016updateEv+0x148>
	status = read_register(REG_DELTA_Y_H, rx_data+3, 1);
 8003854:	f107 0210 	add.w	r2, r7, #16
 8003858:	3203      	adds	r2, #3
 800385a:	2301      	movs	r3, #1
 800385c:	2106      	movs	r1, #6
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 ffc0 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 8003864:	4603      	mov	r3, r0
 8003866:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	f083 0301 	eor.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <_ZN7PMW39016updateEv+0xa8>
 8003874:	7dfc      	ldrb	r4, [r7, #23]
 8003876:	e04f      	b.n	8003918 <_ZN7PMW39016updateEv+0x148>
	status = read_register(REG_DELTA_Y_L, rx_data+4, 1);
 8003878:	f107 0210 	add.w	r2, r7, #16
 800387c:	3204      	adds	r2, #4
 800387e:	2301      	movs	r3, #1
 8003880:	2105      	movs	r1, #5
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ffae 	bl	80047e4 <_ZN7PMW390113read_registerEhPht>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]
	if (!status) return status;
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <_ZN7PMW39016updateEv+0xcc>
 8003898:	7dfc      	ldrb	r4, [r7, #23]
 800389a:	e03d      	b.n	8003918 <_ZN7PMW39016updateEv+0x148>

	np::lock_guard lock(data_mutex);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	f107 030c 	add.w	r3, r7, #12
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fd fbb0 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	delta_raw[0] = delta_x_filter.update((rx_data[1] << 8) | rx_data[2]);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0020 	add.w	r0, r3, #32
 80038b2:	7c7b      	ldrb	r3, [r7, #17]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	b21a      	sxth	r2, r3
 80038b8:	7cbb      	ldrb	r3, [r7, #18]
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	4313      	orrs	r3, r2
 80038be:	b21b      	sxth	r3, r3
 80038c0:	4619      	mov	r1, r3
 80038c2:	f001 f947 	bl	8004b54 <_ZN19MovingAverageFilterIsE6updateEs>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461c      	mov	r4, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3318      	adds	r3, #24
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f001 f924 	bl	8004b1e <_ZNSt5arrayIsLj2EEixEj>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4622      	mov	r2, r4
 80038da:	801a      	strh	r2, [r3, #0]
	delta_raw[1] = delta_y_filter.update((rx_data[3] << 8) | rx_data[4]);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	7d3b      	ldrb	r3, [r7, #20]
 80038ea:	b21b      	sxth	r3, r3
 80038ec:	4313      	orrs	r3, r2
 80038ee:	b21b      	sxth	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	f001 f92f 	bl	8004b54 <_ZN19MovingAverageFilterIsE6updateEs>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461c      	mov	r4, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3318      	adds	r3, #24
 80038fe:	2101      	movs	r1, #1
 8003900:	4618      	mov	r0, r3
 8003902:	f001 f90c 	bl	8004b1e <_ZNSt5arrayIsLj2EEixEj>
 8003906:	4603      	mov	r3, r0
 8003908:	4622      	mov	r2, r4
 800390a:	801a      	strh	r2, [r3, #0]
	return status;
 800390c:	7dfc      	ldrb	r4, [r7, #23]
}
 800390e:	f107 030c 	add.w	r3, r7, #12
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fb8f 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 8003918:	4623      	mov	r3, r4
 800391a:	4618      	mov	r0, r3
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <_ZN7PMW390111get_delta_mERKfS1_S1_>:
	np::lock_guard lock(data_mutex);
	return delta_raw;
}

std::array<float, 2> PMW3901::get_delta_m(const float& height_m, const float& pitch_change, const float& roll_change)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	ed2d 8b02 	vpush	{d8}
 8003928:	b08e      	sub	sp, #56	@ 0x38
 800392a:	af00      	add	r7, sp, #0
 800392c:	6178      	str	r0, [r7, #20]
 800392e:	6139      	str	r1, [r7, #16]
 8003930:	60fa      	str	r2, [r7, #12]
 8003932:	60bb      	str	r3, [r7, #8]
	std::array<float, 2> delta_m {};
 8003934:	f107 0320 	add.w	r3, r7, #32
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	605a      	str	r2, [r3, #4]

	float expected_X_change = pitch_change * expected_cf;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	ed93 7a00 	vldr	s14, [r3]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	edd3 7a05 	vldr	s15, [r3, #20]
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float expected_Y_change = roll_change * expected_cf;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	ed93 7a00 	vldr	s14, [r3]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	edd3 7a05 	vldr	s15, [r3, #20]
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	np::lock_guard lock(data_mutex);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	69da      	ldr	r2, [r3, #28]
 800396a:	f107 031c 	add.w	r3, r7, #28
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fb4b 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	delta_m[0] = (delta_raw[0] + expected_X_change) * height_m * conversion;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3318      	adds	r3, #24
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f001 f8ce 	bl	8004b1e <_ZNSt5arrayIsLj2EEixEj>
 8003982:	4603      	mov	r3, r0
 8003984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003990:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	edd3 7a00 	vldr	s15, [r3]
 800399e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80039a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80039ac:	f107 0320 	add.w	r3, r7, #32
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f93e 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 80039b8:	4603      	mov	r3, r0
 80039ba:	ed83 8a00 	vstr	s16, [r3]
	delta_m[1] = (delta_raw[1] - expected_Y_change) * height_m * conversion;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	3318      	adds	r3, #24
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 f8aa 	bl	8004b1e <_ZNSt5arrayIsLj2EEixEj>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80039dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80039f0:	ee27 8a27 	vmul.f32	s16, s14, s15
 80039f4:	f107 0320 	add.w	r3, r7, #32
 80039f8:	2101      	movs	r1, #1
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 f91a 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8003a00:	4603      	mov	r3, r0
 8003a02:	ed83 8a00 	vstr	s16, [r3]

	return delta_m;
 8003a06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a0a:	f107 0220 	add.w	r2, r7, #32
 8003a0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a12:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8003a16:	f107 031c 	add.w	r3, r7, #28
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fb0b 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return delta_m;
 8003a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	ee07 2a10 	vmov	s14, r2
 8003a28:	ee07 3a90 	vmov	s15, r3
}
 8003a2c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a30:	eef0 0a67 	vmov.f32	s1, s15
 8003a34:	3738      	adds	r7, #56	@ 0x38
 8003a36:	46bd      	mov	sp, r7
 8003a38:	ecbd 8b02 	vpop	{d8}
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <_ZN7PMW390120initialize_registersEv>:
	}
	USB_Log(string, SENSOR);
}

bool PMW3901::initialize_registers()
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
	// Set optimum performance (see datasheet - no further information given)

	bool status = false;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	memset(tx_data, 0, 4);
 8003a4a:	f107 0308 	add.w	r3, r7, #8
 8003a4e:	2204      	movs	r2, #4
 8003a50:	2100      	movs	r1, #0
 8003a52:	4618      	mov	r0, r3
 8003a54:	f021 f9c1 	bl	8024dda <memset>

    tx_data[0] = 0x00;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003a5c:	f107 0208 	add.w	r2, r7, #8
 8003a60:	2301      	movs	r3, #1
 8003a62:	217f      	movs	r1, #127	@ 0x7f
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 ff85 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	f083 0301 	eor.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <_ZN7PMW390120initialize_registersEv+0x42>
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	f000 be50 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003a80:	200a      	movs	r0, #10
 8003a82:	f010 fa96 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xAD;
 8003a86:	23ad      	movs	r3, #173	@ 0xad
 8003a88:	723b      	strb	r3, [r7, #8]
    status = write_register(0x61, tx_data, 1);
 8003a8a:	f107 0208 	add.w	r2, r7, #8
 8003a8e:	2301      	movs	r3, #1
 8003a90:	2161      	movs	r1, #97	@ 0x61
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 ff6e 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	f083 0301 	eor.w	r3, r3, #1
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <_ZN7PMW390120initialize_registersEv+0x70>
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	f000 be39 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003aae:	200a      	movs	r0, #10
 8003ab0:	f010 fa7f 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x03;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003ab8:	f107 0208 	add.w	r2, r7, #8
 8003abc:	2301      	movs	r3, #1
 8003abe:	217f      	movs	r1, #127	@ 0x7f
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 ff57 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	f083 0301 	eor.w	r3, r3, #1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <_ZN7PMW390120initialize_registersEv+0x9e>
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	f000 be22 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003adc:	200a      	movs	r0, #10
 8003ade:	f010 fa68 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x00;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	723b      	strb	r3, [r7, #8]
    status = write_register(0x40, tx_data, 1);
 8003ae6:	f107 0208 	add.w	r2, r7, #8
 8003aea:	2301      	movs	r3, #1
 8003aec:	2140      	movs	r1, #64	@ 0x40
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 ff40 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <_ZN7PMW390120initialize_registersEv+0xcc>
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	f000 be0b 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003b0a:	200a      	movs	r0, #10
 8003b0c:	f010 fa51 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x05;
 8003b10:	2305      	movs	r3, #5
 8003b12:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003b14:	f107 0208 	add.w	r2, r7, #8
 8003b18:	2301      	movs	r3, #1
 8003b1a:	217f      	movs	r1, #127	@ 0x7f
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 ff29 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003b22:	4603      	mov	r3, r0
 8003b24:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <_ZN7PMW390120initialize_registersEv+0xfa>
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	f000 bdf4 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003b38:	200a      	movs	r0, #10
 8003b3a:	f010 fa3a 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xB3;
 8003b3e:	23b3      	movs	r3, #179	@ 0xb3
 8003b40:	723b      	strb	r3, [r7, #8]
    status = write_register(0x41, tx_data, 1);
 8003b42:	f107 0208 	add.w	r2, r7, #8
 8003b46:	2301      	movs	r3, #1
 8003b48:	2141      	movs	r1, #65	@ 0x41
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 ff12 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003b50:	4603      	mov	r3, r0
 8003b52:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	f083 0301 	eor.w	r3, r3, #1
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <_ZN7PMW390120initialize_registersEv+0x128>
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	f000 bddd 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003b66:	200a      	movs	r0, #10
 8003b68:	f010 fa23 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xF1;
 8003b6c:	23f1      	movs	r3, #241	@ 0xf1
 8003b6e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x43, tx_data, 1);
 8003b70:	f107 0208 	add.w	r2, r7, #8
 8003b74:	2301      	movs	r3, #1
 8003b76:	2143      	movs	r1, #67	@ 0x43
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fefb 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	f083 0301 	eor.w	r3, r3, #1
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <_ZN7PMW390120initialize_registersEv+0x156>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	f000 bdc6 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003b94:	200a      	movs	r0, #10
 8003b96:	f010 fa0c 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x14;
 8003b9a:	2314      	movs	r3, #20
 8003b9c:	723b      	strb	r3, [r7, #8]
    status = write_register(0x45, tx_data, 1);
 8003b9e:	f107 0208 	add.w	r2, r7, #8
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	2145      	movs	r1, #69	@ 0x45
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fee4 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003bac:	4603      	mov	r3, r0
 8003bae:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <_ZN7PMW390120initialize_registersEv+0x184>
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	f000 bdaf 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003bc2:	200a      	movs	r0, #10
 8003bc4:	f010 f9f5 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x32;
 8003bc8:	2332      	movs	r3, #50	@ 0x32
 8003bca:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5B, tx_data, 1);
 8003bcc:	f107 0208 	add.w	r2, r7, #8
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	215b      	movs	r1, #91	@ 0x5b
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fecd 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d002      	beq.n	8003bf0 <_ZN7PMW390120initialize_registersEv+0x1b2>
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	f000 bd98 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003bf0:	200a      	movs	r0, #10
 8003bf2:	f010 f9de 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x34;
 8003bf6:	2334      	movs	r3, #52	@ 0x34
 8003bf8:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5F, tx_data, 1);
 8003bfa:	f107 0208 	add.w	r2, r7, #8
 8003bfe:	2301      	movs	r3, #1
 8003c00:	215f      	movs	r1, #95	@ 0x5f
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 feb6 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	f083 0301 	eor.w	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <_ZN7PMW390120initialize_registersEv+0x1e0>
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	f000 bd81 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003c1e:	200a      	movs	r0, #10
 8003c20:	f010 f9c7 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x08;
 8003c24:	2308      	movs	r3, #8
 8003c26:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7B, tx_data, 1);
 8003c28:	f107 0208 	add.w	r2, r7, #8
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	217b      	movs	r1, #123	@ 0x7b
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fe9f 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003c36:	4603      	mov	r3, r0
 8003c38:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <_ZN7PMW390120initialize_registersEv+0x20e>
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	f000 bd6a 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003c4c:	200a      	movs	r0, #10
 8003c4e:	f010 f9b0 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x06;
 8003c52:	2306      	movs	r3, #6
 8003c54:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003c56:	f107 0208 	add.w	r2, r7, #8
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	217f      	movs	r1, #127	@ 0x7f
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fe88 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003c64:	4603      	mov	r3, r0
 8003c66:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	f083 0301 	eor.w	r3, r3, #1
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <_ZN7PMW390120initialize_registersEv+0x23c>
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	f000 bd53 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003c7a:	200a      	movs	r0, #10
 8003c7c:	f010 f999 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x1B;
 8003c80:	231b      	movs	r3, #27
 8003c82:	723b      	strb	r3, [r7, #8]
    status = write_register(0x44, tx_data, 1);
 8003c84:	f107 0208 	add.w	r2, r7, #8
 8003c88:	2301      	movs	r3, #1
 8003c8a:	2144      	movs	r1, #68	@ 0x44
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 fe71 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003c92:	4603      	mov	r3, r0
 8003c94:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <_ZN7PMW390120initialize_registersEv+0x26a>
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	f000 bd3c 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003ca8:	200a      	movs	r0, #10
 8003caa:	f010 f982 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xBF;
 8003cae:	23bf      	movs	r3, #191	@ 0xbf
 8003cb0:	723b      	strb	r3, [r7, #8]
    status = write_register(0x40, tx_data, 1);
 8003cb2:	f107 0208 	add.w	r2, r7, #8
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	2140      	movs	r1, #64	@ 0x40
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fe5a 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	f083 0301 	eor.w	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <_ZN7PMW390120initialize_registersEv+0x298>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	f000 bd25 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003cd6:	200a      	movs	r0, #10
 8003cd8:	f010 f96b 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x3F;
 8003cdc:	233f      	movs	r3, #63	@ 0x3f
 8003cde:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4E, tx_data, 1);
 8003ce0:	f107 0208 	add.w	r2, r7, #8
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	214e      	movs	r1, #78	@ 0x4e
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fe43 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	f083 0301 	eor.w	r3, r3, #1
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <_ZN7PMW390120initialize_registersEv+0x2c6>
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f000 bd0e 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003d04:	200a      	movs	r0, #10
 8003d06:	f010 f954 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x08;
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003d0e:	f107 0208 	add.w	r2, r7, #8
 8003d12:	2301      	movs	r3, #1
 8003d14:	217f      	movs	r1, #127	@ 0x7f
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fe2c 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	f083 0301 	eor.w	r3, r3, #1
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d002      	beq.n	8003d32 <_ZN7PMW390120initialize_registersEv+0x2f4>
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	f000 bcf7 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003d32:	200a      	movs	r0, #10
 8003d34:	f010 f93d 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x20;
 8003d38:	2320      	movs	r3, #32
 8003d3a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x65, tx_data, 1);
 8003d3c:	f107 0208 	add.w	r2, r7, #8
 8003d40:	2301      	movs	r3, #1
 8003d42:	2165      	movs	r1, #101	@ 0x65
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fe15 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <_ZN7PMW390120initialize_registersEv+0x322>
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	f000 bce0 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003d60:	200a      	movs	r0, #10
 8003d62:	f010 f926 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x18;
 8003d66:	2318      	movs	r3, #24
 8003d68:	723b      	strb	r3, [r7, #8]
    status = write_register(0x6A, tx_data, 1);
 8003d6a:	f107 0208 	add.w	r2, r7, #8
 8003d6e:	2301      	movs	r3, #1
 8003d70:	216a      	movs	r1, #106	@ 0x6a
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fdfe 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
 8003d7e:	f083 0301 	eor.w	r3, r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <_ZN7PMW390120initialize_registersEv+0x350>
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	f000 bcc9 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003d8e:	200a      	movs	r0, #10
 8003d90:	f010 f90f 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x09;
 8003d94:	2309      	movs	r3, #9
 8003d96:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003d98:	f107 0208 	add.w	r2, r7, #8
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	217f      	movs	r1, #127	@ 0x7f
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fde7 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003da6:	4603      	mov	r3, r0
 8003da8:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	f083 0301 	eor.w	r3, r3, #1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <_ZN7PMW390120initialize_registersEv+0x37e>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	f000 bcb2 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003dbc:	200a      	movs	r0, #10
 8003dbe:	f010 f8f8 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xAF;
 8003dc2:	23af      	movs	r3, #175	@ 0xaf
 8003dc4:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4F, tx_data, 1);
 8003dc6:	f107 0208 	add.w	r2, r7, #8
 8003dca:	2301      	movs	r3, #1
 8003dcc:	214f      	movs	r1, #79	@ 0x4f
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fdd0 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
 8003dda:	f083 0301 	eor.w	r3, r3, #1
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <_ZN7PMW390120initialize_registersEv+0x3ac>
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	f000 bc9b 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003dea:	200a      	movs	r0, #10
 8003dec:	f010 f8e1 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x40;
 8003df0:	2340      	movs	r3, #64	@ 0x40
 8003df2:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5F, tx_data, 1);
 8003df4:	f107 0208 	add.w	r2, r7, #8
 8003df8:	2301      	movs	r3, #1
 8003dfa:	215f      	movs	r1, #95	@ 0x5f
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fdb9 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003e02:	4603      	mov	r3, r0
 8003e04:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	f083 0301 	eor.w	r3, r3, #1
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <_ZN7PMW390120initialize_registersEv+0x3da>
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
 8003e14:	f000 bc84 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003e18:	200a      	movs	r0, #10
 8003e1a:	f010 f8ca 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x80;
 8003e1e:	2380      	movs	r3, #128	@ 0x80
 8003e20:	723b      	strb	r3, [r7, #8]
    status = write_register(0x48, tx_data, 1);
 8003e22:	f107 0208 	add.w	r2, r7, #8
 8003e26:	2301      	movs	r3, #1
 8003e28:	2148      	movs	r1, #72	@ 0x48
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 fda2 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	f083 0301 	eor.w	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <_ZN7PMW390120initialize_registersEv+0x408>
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	f000 bc6d 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003e46:	200a      	movs	r0, #10
 8003e48:	f010 f8b3 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x80;
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x49, tx_data, 1);
 8003e50:	f107 0208 	add.w	r2, r7, #8
 8003e54:	2301      	movs	r3, #1
 8003e56:	2149      	movs	r1, #73	@ 0x49
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 fd8b 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
 8003e64:	f083 0301 	eor.w	r3, r3, #1
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <_ZN7PMW390120initialize_registersEv+0x436>
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	f000 bc56 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003e74:	200a      	movs	r0, #10
 8003e76:	f010 f89c 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x77;
 8003e7a:	2377      	movs	r3, #119	@ 0x77
 8003e7c:	723b      	strb	r3, [r7, #8]
    status = write_register(0x57, tx_data, 1);
 8003e7e:	f107 0208 	add.w	r2, r7, #8
 8003e82:	2301      	movs	r3, #1
 8003e84:	2157      	movs	r1, #87	@ 0x57
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fd74 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	f083 0301 	eor.w	r3, r3, #1
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <_ZN7PMW390120initialize_registersEv+0x464>
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	f000 bc3f 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003ea2:	200a      	movs	r0, #10
 8003ea4:	f010 f885 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x78;
 8003ea8:	2378      	movs	r3, #120	@ 0x78
 8003eaa:	723b      	strb	r3, [r7, #8]
    status = write_register(0x60, tx_data, 1);
 8003eac:	f107 0208 	add.w	r2, r7, #8
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	2160      	movs	r1, #96	@ 0x60
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fd5d 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	f083 0301 	eor.w	r3, r3, #1
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d002      	beq.n	8003ed0 <_ZN7PMW390120initialize_registersEv+0x492>
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
 8003ecc:	f000 bc28 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003ed0:	200a      	movs	r0, #10
 8003ed2:	f010 f86e 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x78;
 8003ed6:	2378      	movs	r3, #120	@ 0x78
 8003ed8:	723b      	strb	r3, [r7, #8]
    status = write_register(0x61, tx_data, 1);
 8003eda:	f107 0208 	add.w	r2, r7, #8
 8003ede:	2301      	movs	r3, #1
 8003ee0:	2161      	movs	r1, #97	@ 0x61
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fd46 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003eec:	7bfb      	ldrb	r3, [r7, #15]
 8003eee:	f083 0301 	eor.w	r3, r3, #1
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <_ZN7PMW390120initialize_registersEv+0x4c0>
 8003ef8:	7bfb      	ldrb	r3, [r7, #15]
 8003efa:	f000 bc11 	b.w	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003efe:	200a      	movs	r0, #10
 8003f00:	f010 f857 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x08;
 8003f04:	2308      	movs	r3, #8
 8003f06:	723b      	strb	r3, [r7, #8]
    status = write_register(0x62, tx_data, 1);
 8003f08:	f107 0208 	add.w	r2, r7, #8
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2162      	movs	r1, #98	@ 0x62
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fd2f 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003f16:	4603      	mov	r3, r0
 8003f18:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <_ZN7PMW390120initialize_registersEv+0x4ec>
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	e3fa      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003f2a:	200a      	movs	r0, #10
 8003f2c:	f010 f841 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x50;
 8003f30:	2350      	movs	r3, #80	@ 0x50
 8003f32:	723b      	strb	r3, [r7, #8]
    status = write_register(0x63, tx_data, 1);
 8003f34:	f107 0208 	add.w	r2, r7, #8
 8003f38:	2301      	movs	r3, #1
 8003f3a:	2163      	movs	r1, #99	@ 0x63
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fd19 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003f42:	4603      	mov	r3, r0
 8003f44:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003f46:	7bfb      	ldrb	r3, [r7, #15]
 8003f48:	f083 0301 	eor.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <_ZN7PMW390120initialize_registersEv+0x518>
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	e3e4      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003f56:	200a      	movs	r0, #10
 8003f58:	f010 f82b 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x0A;
 8003f5c:	230a      	movs	r3, #10
 8003f5e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003f60:	f107 0208 	add.w	r2, r7, #8
 8003f64:	2301      	movs	r3, #1
 8003f66:	217f      	movs	r1, #127	@ 0x7f
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fd03 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	f083 0301 	eor.w	r3, r3, #1
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <_ZN7PMW390120initialize_registersEv+0x544>
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	e3ce      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003f82:	200a      	movs	r0, #10
 8003f84:	f010 f815 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x60;
 8003f88:	2360      	movs	r3, #96	@ 0x60
 8003f8a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x45, tx_data, 1);
 8003f8c:	f107 0208 	add.w	r2, r7, #8
 8003f90:	2301      	movs	r3, #1
 8003f92:	2145      	movs	r1, #69	@ 0x45
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fced 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <_ZN7PMW390120initialize_registersEv+0x570>
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	e3b8      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003fae:	200a      	movs	r0, #10
 8003fb0:	f00f ffff 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x00;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8003fb8:	f107 0208 	add.w	r2, r7, #8
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	217f      	movs	r1, #127	@ 0x7f
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fcd7 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	f083 0301 	eor.w	r3, r3, #1
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <_ZN7PMW390120initialize_registersEv+0x59c>
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	e3a2      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8003fda:	200a      	movs	r0, #10
 8003fdc:	f00f ffe9 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x11;
 8003fe0:	2311      	movs	r3, #17
 8003fe2:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4D, tx_data, 1);
 8003fe4:	f107 0208 	add.w	r2, r7, #8
 8003fe8:	2301      	movs	r3, #1
 8003fea:	214d      	movs	r1, #77	@ 0x4d
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fcc1 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8003ff6:	7bfb      	ldrb	r3, [r7, #15]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <_ZN7PMW390120initialize_registersEv+0x5c8>
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	e38c      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004006:	200a      	movs	r0, #10
 8004008:	f00f ffd3 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x80;
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x55, tx_data, 1);
 8004010:	f107 0208 	add.w	r2, r7, #8
 8004014:	2301      	movs	r3, #1
 8004016:	2155      	movs	r1, #85	@ 0x55
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fcab 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800401e:	4603      	mov	r3, r0
 8004020:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <_ZN7PMW390120initialize_registersEv+0x5f4>
 800402e:	7bfb      	ldrb	r3, [r7, #15]
 8004030:	e376      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004032:	200a      	movs	r0, #10
 8004034:	f00f ffbd 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x1F;
 8004038:	231f      	movs	r3, #31
 800403a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x74, tx_data, 1);
 800403c:	f107 0208 	add.w	r2, r7, #8
 8004040:	2301      	movs	r3, #1
 8004042:	2174      	movs	r1, #116	@ 0x74
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fc95 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800404a:	4603      	mov	r3, r0
 800404c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <_ZN7PMW390120initialize_registersEv+0x620>
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	e360      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800405e:	200a      	movs	r0, #10
 8004060:	f00f ffa7 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x1F;
 8004064:	231f      	movs	r3, #31
 8004066:	723b      	strb	r3, [r7, #8]
    status = write_register(0x75, tx_data, 1);
 8004068:	f107 0208 	add.w	r2, r7, #8
 800406c:	2301      	movs	r3, #1
 800406e:	2175      	movs	r1, #117	@ 0x75
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fc7f 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004076:	4603      	mov	r3, r0
 8004078:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <_ZN7PMW390120initialize_registersEv+0x64c>
 8004086:	7bfb      	ldrb	r3, [r7, #15]
 8004088:	e34a      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800408a:	200a      	movs	r0, #10
 800408c:	f00f ff91 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x78;
 8004090:	2378      	movs	r3, #120	@ 0x78
 8004092:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4A, tx_data, 1);
 8004094:	f107 0208 	add.w	r2, r7, #8
 8004098:	2301      	movs	r3, #1
 800409a:	214a      	movs	r1, #74	@ 0x4a
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 fc69 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
 80040a8:	f083 0301 	eor.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <_ZN7PMW390120initialize_registersEv+0x678>
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	e334      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80040b6:	200a      	movs	r0, #10
 80040b8:	f00f ff7b 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x78;
 80040bc:	2378      	movs	r3, #120	@ 0x78
 80040be:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4B, tx_data, 1);
 80040c0:	f107 0208 	add.w	r2, r7, #8
 80040c4:	2301      	movs	r3, #1
 80040c6:	214b      	movs	r1, #75	@ 0x4b
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fc53 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80040ce:	4603      	mov	r3, r0
 80040d0:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	f083 0301 	eor.w	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <_ZN7PMW390120initialize_registersEv+0x6a4>
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	e31e      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80040e2:	200a      	movs	r0, #10
 80040e4:	f00f ff65 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x08;
 80040e8:	2308      	movs	r3, #8
 80040ea:	723b      	strb	r3, [r7, #8]
    status = write_register(0x44, tx_data, 1);
 80040ec:	f107 0208 	add.w	r2, r7, #8
 80040f0:	2301      	movs	r3, #1
 80040f2:	2144      	movs	r1, #68	@ 0x44
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fc3d 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	f083 0301 	eor.w	r3, r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <_ZN7PMW390120initialize_registersEv+0x6d0>
 800410a:	7bfb      	ldrb	r3, [r7, #15]
 800410c:	e308      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800410e:	200a      	movs	r0, #10
 8004110:	f00f ff4f 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x50;
 8004114:	2350      	movs	r3, #80	@ 0x50
 8004116:	723b      	strb	r3, [r7, #8]
    status = write_register(0x45, tx_data, 1);
 8004118:	f107 0208 	add.w	r2, r7, #8
 800411c:	2301      	movs	r3, #1
 800411e:	2145      	movs	r1, #69	@ 0x45
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fc27 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004126:	4603      	mov	r3, r0
 8004128:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	f083 0301 	eor.w	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <_ZN7PMW390120initialize_registersEv+0x6fc>
 8004136:	7bfb      	ldrb	r3, [r7, #15]
 8004138:	e2f2      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800413a:	200a      	movs	r0, #10
 800413c:	f00f ff39 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xFF;
 8004140:	23ff      	movs	r3, #255	@ 0xff
 8004142:	723b      	strb	r3, [r7, #8]
    status = write_register(0x64, tx_data, 1);
 8004144:	f107 0208 	add.w	r2, r7, #8
 8004148:	2301      	movs	r3, #1
 800414a:	2164      	movs	r1, #100	@ 0x64
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 fc11 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004152:	4603      	mov	r3, r0
 8004154:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <_ZN7PMW390120initialize_registersEv+0x728>
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	e2dc      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004166:	200a      	movs	r0, #10
 8004168:	f00f ff23 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x1F;
 800416c:	231f      	movs	r3, #31
 800416e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x65, tx_data, 1);
 8004170:	f107 0208 	add.w	r2, r7, #8
 8004174:	2301      	movs	r3, #1
 8004176:	2165      	movs	r1, #101	@ 0x65
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fbfb 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
 8004184:	f083 0301 	eor.w	r3, r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <_ZN7PMW390120initialize_registersEv+0x754>
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	e2c6      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004192:	200a      	movs	r0, #10
 8004194:	f00f ff0d 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x14;
 8004198:	2314      	movs	r3, #20
 800419a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 800419c:	f107 0208 	add.w	r2, r7, #8
 80041a0:	2301      	movs	r3, #1
 80041a2:	217f      	movs	r1, #127	@ 0x7f
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fbe5 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	f083 0301 	eor.w	r3, r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <_ZN7PMW390120initialize_registersEv+0x780>
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	e2b0      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80041be:	200a      	movs	r0, #10
 80041c0:	f00f fef7 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x60;
 80041c4:	2360      	movs	r3, #96	@ 0x60
 80041c6:	723b      	strb	r3, [r7, #8]
    status = write_register(0x65, tx_data, 1);
 80041c8:	f107 0208 	add.w	r2, r7, #8
 80041cc:	2301      	movs	r3, #1
 80041ce:	2165      	movs	r1, #101	@ 0x65
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fbcf 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80041d6:	4603      	mov	r3, r0
 80041d8:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	f083 0301 	eor.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <_ZN7PMW390120initialize_registersEv+0x7ac>
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	e29a      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80041ea:	200a      	movs	r0, #10
 80041ec:	f00f fee1 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x08;
 80041f0:	2308      	movs	r3, #8
 80041f2:	723b      	strb	r3, [r7, #8]
    status = write_register(0x66, tx_data, 1);
 80041f4:	f107 0208 	add.w	r2, r7, #8
 80041f8:	2301      	movs	r3, #1
 80041fa:	2166      	movs	r1, #102	@ 0x66
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fbb9 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <_ZN7PMW390120initialize_registersEv+0x7d8>
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	e284      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004216:	200a      	movs	r0, #10
 8004218:	f00f fecb 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x78;
 800421c:	2378      	movs	r3, #120	@ 0x78
 800421e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x63, tx_data, 1);
 8004220:	f107 0208 	add.w	r2, r7, #8
 8004224:	2301      	movs	r3, #1
 8004226:	2163      	movs	r1, #99	@ 0x63
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fba3 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800422e:	4603      	mov	r3, r0
 8004230:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004232:	7bfb      	ldrb	r3, [r7, #15]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <_ZN7PMW390120initialize_registersEv+0x804>
 800423e:	7bfb      	ldrb	r3, [r7, #15]
 8004240:	e26e      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004242:	200a      	movs	r0, #10
 8004244:	f00f feb5 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x15;
 8004248:	2315      	movs	r3, #21
 800424a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 800424c:	f107 0208 	add.w	r2, r7, #8
 8004250:	2301      	movs	r3, #1
 8004252:	217f      	movs	r1, #127	@ 0x7f
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 fb8d 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800425a:	4603      	mov	r3, r0
 800425c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	f083 0301 	eor.w	r3, r3, #1
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <_ZN7PMW390120initialize_registersEv+0x830>
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	e258      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800426e:	200a      	movs	r0, #10
 8004270:	f00f fe9f 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x58;
 8004274:	2358      	movs	r3, #88	@ 0x58
 8004276:	723b      	strb	r3, [r7, #8]
    status = write_register(0x48, tx_data, 1);
 8004278:	f107 0208 	add.w	r2, r7, #8
 800427c:	2301      	movs	r3, #1
 800427e:	2148      	movs	r1, #72	@ 0x48
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb77 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004286:	4603      	mov	r3, r0
 8004288:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	f083 0301 	eor.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <_ZN7PMW390120initialize_registersEv+0x85c>
 8004296:	7bfb      	ldrb	r3, [r7, #15]
 8004298:	e242      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800429a:	200a      	movs	r0, #10
 800429c:	f00f fe89 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x07;
 80042a0:	2307      	movs	r3, #7
 80042a2:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 80042a4:	f107 0208 	add.w	r2, r7, #8
 80042a8:	2301      	movs	r3, #1
 80042aa:	217f      	movs	r1, #127	@ 0x7f
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fb61 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80042b2:	4603      	mov	r3, r0
 80042b4:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	f083 0301 	eor.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <_ZN7PMW390120initialize_registersEv+0x888>
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
 80042c4:	e22c      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80042c6:	200a      	movs	r0, #10
 80042c8:	f00f fe73 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x0D;
 80042cc:	230d      	movs	r3, #13
 80042ce:	723b      	strb	r3, [r7, #8]
    status = write_register(0x41, tx_data, 1);
 80042d0:	f107 0208 	add.w	r2, r7, #8
 80042d4:	2301      	movs	r3, #1
 80042d6:	2141      	movs	r1, #65	@ 0x41
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 fb4b 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80042de:	4603      	mov	r3, r0
 80042e0:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <_ZN7PMW390120initialize_registersEv+0x8b4>
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	e216      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80042f2:	200a      	movs	r0, #10
 80042f4:	f00f fe5d 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x14;
 80042f8:	2314      	movs	r3, #20
 80042fa:	723b      	strb	r3, [r7, #8]
    status = write_register(0x43, tx_data, 1);
 80042fc:	f107 0208 	add.w	r2, r7, #8
 8004300:	2301      	movs	r3, #1
 8004302:	2143      	movs	r1, #67	@ 0x43
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fb35 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <_ZN7PMW390120initialize_registersEv+0x8e0>
 800431a:	7bfb      	ldrb	r3, [r7, #15]
 800431c:	e200      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800431e:	200a      	movs	r0, #10
 8004320:	f00f fe47 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x0E;
 8004324:	230e      	movs	r3, #14
 8004326:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4B, tx_data, 1);
 8004328:	f107 0208 	add.w	r2, r7, #8
 800432c:	2301      	movs	r3, #1
 800432e:	214b      	movs	r1, #75	@ 0x4b
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fb1f 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004336:	4603      	mov	r3, r0
 8004338:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	f083 0301 	eor.w	r3, r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <_ZN7PMW390120initialize_registersEv+0x90c>
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	e1ea      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800434a:	200a      	movs	r0, #10
 800434c:	f00f fe31 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x0F;
 8004350:	230f      	movs	r3, #15
 8004352:	723b      	strb	r3, [r7, #8]
    status = write_register(0x45, tx_data, 1);
 8004354:	f107 0208 	add.w	r2, r7, #8
 8004358:	2301      	movs	r3, #1
 800435a:	2145      	movs	r1, #69	@ 0x45
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fb09 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004362:	4603      	mov	r3, r0
 8004364:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <_ZN7PMW390120initialize_registersEv+0x938>
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	e1d4      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004376:	200a      	movs	r0, #10
 8004378:	f00f fe1b 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x42;
 800437c:	2342      	movs	r3, #66	@ 0x42
 800437e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x44, tx_data, 1);
 8004380:	f107 0208 	add.w	r2, r7, #8
 8004384:	2301      	movs	r3, #1
 8004386:	2144      	movs	r1, #68	@ 0x44
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 faf3 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <_ZN7PMW390120initialize_registersEv+0x964>
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	e1be      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80043a2:	200a      	movs	r0, #10
 80043a4:	f00f fe05 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x80;
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4C, tx_data, 1);
 80043ac:	f107 0208 	add.w	r2, r7, #8
 80043b0:	2301      	movs	r3, #1
 80043b2:	214c      	movs	r1, #76	@ 0x4c
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fadd 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80043ba:	4603      	mov	r3, r0
 80043bc:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	f083 0301 	eor.w	r3, r3, #1
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <_ZN7PMW390120initialize_registersEv+0x990>
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	e1a8      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80043ce:	200a      	movs	r0, #10
 80043d0:	f00f fdef 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x10;
 80043d4:	2310      	movs	r3, #16
 80043d6:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 80043d8:	f107 0208 	add.w	r2, r7, #8
 80043dc:	2301      	movs	r3, #1
 80043de:	217f      	movs	r1, #127	@ 0x7f
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fac7 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80043e6:	4603      	mov	r3, r0
 80043e8:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	f083 0301 	eor.w	r3, r3, #1
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <_ZN7PMW390120initialize_registersEv+0x9bc>
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	e192      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80043fa:	200a      	movs	r0, #10
 80043fc:	f00f fdd9 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x02;
 8004400:	2302      	movs	r3, #2
 8004402:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5B, tx_data, 1);
 8004404:	f107 0208 	add.w	r2, r7, #8
 8004408:	2301      	movs	r3, #1
 800440a:	215b      	movs	r1, #91	@ 0x5b
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fab1 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004412:	4603      	mov	r3, r0
 8004414:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	f083 0301 	eor.w	r3, r3, #1
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <_ZN7PMW390120initialize_registersEv+0x9e8>
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	e17c      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004426:	200a      	movs	r0, #10
 8004428:	f00f fdc3 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x07;
 800442c:	2307      	movs	r3, #7
 800442e:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8004430:	f107 0208 	add.w	r2, r7, #8
 8004434:	2301      	movs	r3, #1
 8004436:	217f      	movs	r1, #127	@ 0x7f
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 fa9b 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	f083 0301 	eor.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <_ZN7PMW390120initialize_registersEv+0xa14>
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	e166      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004452:	200a      	movs	r0, #10
 8004454:	f00f fdad 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x41;
 8004458:	2341      	movs	r3, #65	@ 0x41
 800445a:	723b      	strb	r3, [r7, #8]
    status = write_register(0x40, tx_data, 1);
 800445c:	f107 0208 	add.w	r2, r7, #8
 8004460:	2301      	movs	r3, #1
 8004462:	2140      	movs	r1, #64	@ 0x40
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa85 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800446a:	4603      	mov	r3, r0
 800446c:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	f083 0301 	eor.w	r3, r3, #1
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <_ZN7PMW390120initialize_registersEv+0xa40>
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	e150      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800447e:	200a      	movs	r0, #10
 8004480:	f00f fd97 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x00;
 8004484:	2300      	movs	r3, #0
 8004486:	723b      	strb	r3, [r7, #8]
    status = write_register(0x70, tx_data, 1);
 8004488:	f107 0208 	add.w	r2, r7, #8
 800448c:	2301      	movs	r3, #1
 800448e:	2170      	movs	r1, #112	@ 0x70
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fa6f 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004496:	4603      	mov	r3, r0
 8004498:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <_ZN7PMW390120initialize_registersEv+0xa6c>
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	e13a      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80044aa:	200a      	movs	r0, #10
 80044ac:	f00f fd81 	bl	8013fb2 <osDelay>

    osDelay(100);
 80044b0:	2064      	movs	r0, #100	@ 0x64
 80044b2:	f00f fd7e 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x44;
 80044b6:	2344      	movs	r3, #68	@ 0x44
 80044b8:	723b      	strb	r3, [r7, #8]
    status = write_register(0x32, tx_data, 1);
 80044ba:	f107 0208 	add.w	r2, r7, #8
 80044be:	2301      	movs	r3, #1
 80044c0:	2132      	movs	r1, #50	@ 0x32
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa56 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <_ZN7PMW390120initialize_registersEv+0xa9e>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	e121      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80044dc:	200a      	movs	r0, #10
 80044de:	f00f fd68 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x07;
 80044e2:	2307      	movs	r3, #7
 80044e4:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 80044e6:	f107 0208 	add.w	r2, r7, #8
 80044ea:	2301      	movs	r3, #1
 80044ec:	217f      	movs	r1, #127	@ 0x7f
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa40 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80044f4:	4603      	mov	r3, r0
 80044f6:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <_ZN7PMW390120initialize_registersEv+0xaca>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	e10b      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004508:	200a      	movs	r0, #10
 800450a:	f00f fd52 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x40;
 800450e:	2340      	movs	r3, #64	@ 0x40
 8004510:	723b      	strb	r3, [r7, #8]
    status = write_register(0x40, tx_data, 1);
 8004512:	f107 0208 	add.w	r2, r7, #8
 8004516:	2301      	movs	r3, #1
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fa2a 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004520:	4603      	mov	r3, r0
 8004522:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	f083 0301 	eor.w	r3, r3, #1
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d001      	beq.n	8004534 <_ZN7PMW390120initialize_registersEv+0xaf6>
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	e0f5      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004534:	200a      	movs	r0, #10
 8004536:	f00f fd3c 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x06;
 800453a:	2306      	movs	r3, #6
 800453c:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	2301      	movs	r3, #1
 8004544:	217f      	movs	r1, #127	@ 0x7f
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa14 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800454c:	4603      	mov	r3, r0
 800454e:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
 8004552:	f083 0301 	eor.w	r3, r3, #1
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d001      	beq.n	8004560 <_ZN7PMW390120initialize_registersEv+0xb22>
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	e0df      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004560:	200a      	movs	r0, #10
 8004562:	f00f fd26 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xF0;
 8004566:	23f0      	movs	r3, #240	@ 0xf0
 8004568:	723b      	strb	r3, [r7, #8]
    status = write_register(0x62, tx_data, 1);
 800456a:	f107 0208 	add.w	r2, r7, #8
 800456e:	2301      	movs	r3, #1
 8004570:	2162      	movs	r1, #98	@ 0x62
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9fe 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004578:	4603      	mov	r3, r0
 800457a:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	f083 0301 	eor.w	r3, r3, #1
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <_ZN7PMW390120initialize_registersEv+0xb4e>
 8004588:	7bfb      	ldrb	r3, [r7, #15]
 800458a:	e0c9      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800458c:	200a      	movs	r0, #10
 800458e:	f00f fd10 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x00;
 8004592:	2300      	movs	r3, #0
 8004594:	723b      	strb	r3, [r7, #8]
    status = write_register(0x63, tx_data, 1);
 8004596:	f107 0208 	add.w	r2, r7, #8
 800459a:	2301      	movs	r3, #1
 800459c:	2163      	movs	r1, #99	@ 0x63
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9e8 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80045a4:	4603      	mov	r3, r0
 80045a6:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <_ZN7PMW390120initialize_registersEv+0xb7a>
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	e0b3      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80045b8:	200a      	movs	r0, #10
 80045ba:	f00f fcfa 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x0D;
 80045be:	230d      	movs	r3, #13
 80045c0:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 80045c2:	f107 0208 	add.w	r2, r7, #8
 80045c6:	2301      	movs	r3, #1
 80045c8:	217f      	movs	r1, #127	@ 0x7f
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9d2 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80045d0:	4603      	mov	r3, r0
 80045d2:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	f083 0301 	eor.w	r3, r3, #1
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <_ZN7PMW390120initialize_registersEv+0xba6>
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	e09d      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80045e4:	200a      	movs	r0, #10
 80045e6:	f00f fce4 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xC0;
 80045ea:	23c0      	movs	r3, #192	@ 0xc0
 80045ec:	723b      	strb	r3, [r7, #8]
    status = write_register(0x48, tx_data, 1);
 80045ee:	f107 0208 	add.w	r2, r7, #8
 80045f2:	2301      	movs	r3, #1
 80045f4:	2148      	movs	r1, #72	@ 0x48
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f9bc 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80045fc:	4603      	mov	r3, r0
 80045fe:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	f083 0301 	eor.w	r3, r3, #1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <_ZN7PMW390120initialize_registersEv+0xbd2>
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	e087      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004610:	200a      	movs	r0, #10
 8004612:	f00f fcce 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xD5;
 8004616:	23d5      	movs	r3, #213	@ 0xd5
 8004618:	723b      	strb	r3, [r7, #8]
    status = write_register(0x6F, tx_data, 1);
 800461a:	f107 0208 	add.w	r2, r7, #8
 800461e:	2301      	movs	r3, #1
 8004620:	216f      	movs	r1, #111	@ 0x6f
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9a6 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	f083 0301 	eor.w	r3, r3, #1
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <_ZN7PMW390120initialize_registersEv+0xbfe>
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	e071      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 800463c:	200a      	movs	r0, #10
 800463e:	f00f fcb8 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x00;
 8004642:	2300      	movs	r3, #0
 8004644:	723b      	strb	r3, [r7, #8]
    status = write_register(0x7F, tx_data, 1);
 8004646:	f107 0208 	add.w	r2, r7, #8
 800464a:	2301      	movs	r3, #1
 800464c:	217f      	movs	r1, #127	@ 0x7f
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f990 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	f083 0301 	eor.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d001      	beq.n	8004668 <_ZN7PMW390120initialize_registersEv+0xc2a>
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	e05b      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004668:	200a      	movs	r0, #10
 800466a:	f00f fca2 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xA0;
 800466e:	23a0      	movs	r3, #160	@ 0xa0
 8004670:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5B, tx_data, 1);
 8004672:	f107 0208 	add.w	r2, r7, #8
 8004676:	2301      	movs	r3, #1
 8004678:	215b      	movs	r1, #91	@ 0x5b
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f97a 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	f083 0301 	eor.w	r3, r3, #1
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <_ZN7PMW390120initialize_registersEv+0xc56>
 8004690:	7bfb      	ldrb	r3, [r7, #15]
 8004692:	e045      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004694:	200a      	movs	r0, #10
 8004696:	f00f fc8c 	bl	8013fb2 <osDelay>

    tx_data[0] = 0xA8;
 800469a:	23a8      	movs	r3, #168	@ 0xa8
 800469c:	723b      	strb	r3, [r7, #8]
    status = write_register(0x4E, tx_data, 1);
 800469e:	f107 0208 	add.w	r2, r7, #8
 80046a2:	2301      	movs	r3, #1
 80046a4:	214e      	movs	r1, #78	@ 0x4e
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f964 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	f083 0301 	eor.w	r3, r3, #1
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <_ZN7PMW390120initialize_registersEv+0xc82>
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	e02f      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80046c0:	200a      	movs	r0, #10
 80046c2:	f00f fc76 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x50;
 80046c6:	2350      	movs	r3, #80	@ 0x50
 80046c8:	723b      	strb	r3, [r7, #8]
    status = write_register(0x5A, tx_data, 1);
 80046ca:	f107 0208 	add.w	r2, r7, #8
 80046ce:	2301      	movs	r3, #1
 80046d0:	215a      	movs	r1, #90	@ 0x5a
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f94e 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80046d8:	4603      	mov	r3, r0
 80046da:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	f083 0301 	eor.w	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <_ZN7PMW390120initialize_registersEv+0xcae>
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	e019      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 80046ec:	200a      	movs	r0, #10
 80046ee:	f00f fc60 	bl	8013fb2 <osDelay>

    tx_data[0] = 0x80;
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	723b      	strb	r3, [r7, #8]
    status = write_register(0x40, tx_data, 1);
 80046f6:	f107 0208 	add.w	r2, r7, #8
 80046fa:	2301      	movs	r3, #1
 80046fc:	2140      	movs	r1, #64	@ 0x40
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f938 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004704:	4603      	mov	r3, r0
 8004706:	73fb      	strb	r3, [r7, #15]
    if (!status) return status;
 8004708:	7bfb      	ldrb	r3, [r7, #15]
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <_ZN7PMW390120initialize_registersEv+0xcda>
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	e003      	b.n	8004720 <_ZN7PMW390120initialize_registersEv+0xce2>
    osDelay(10);
 8004718:	200a      	movs	r0, #10
 800471a:	f00f fc4a 	bl	8013fb2 <osDelay>

	return status;
 800471e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004720:	4618      	mov	r0, r3
 8004722:	3710      	adds	r7, #16
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <_ZN7PMW39017set_ledEb>:

bool PMW3901::set_led(bool on_flag)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
	// Turn the onboard led ON or OFF

	bool status = false;
 8004734:	2300      	movs	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
	uint8_t tx_data[4];
	memset(tx_data, 0, sizeof(tx_data));
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	2204      	movs	r2, #4
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f020 fb4a 	bl	8024dda <memset>

	osDelay(200);
 8004746:	20c8      	movs	r0, #200	@ 0xc8
 8004748:	f00f fc33 	bl	8013fb2 <osDelay>

	tx_data[0] = 0x14;
 800474c:	2314      	movs	r3, #20
 800474e:	723b      	strb	r3, [r7, #8]
	status = write_register(0x7F, tx_data, 1);
 8004750:	f107 0208 	add.w	r2, r7, #8
 8004754:	2301      	movs	r3, #1
 8004756:	217f      	movs	r1, #127	@ 0x7f
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f90b 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 800475e:	4603      	mov	r3, r0
 8004760:	73fb      	strb	r3, [r7, #15]
	if (!status) return status;
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	f083 0301 	eor.w	r3, r3, #1
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <_ZN7PMW39017set_ledEb+0x4a>
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	e034      	b.n	80047dc <_ZN7PMW39017set_ledEb+0xb4>
	osDelay(10);
 8004772:	200a      	movs	r0, #10
 8004774:	f00f fc1d 	bl	8013fb2 <osDelay>

	tx_data[0] = on_flag ? 0x1C : 0x00;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <_ZN7PMW39017set_ledEb+0x5a>
 800477e:	231c      	movs	r3, #28
 8004780:	e000      	b.n	8004784 <_ZN7PMW39017set_ledEb+0x5c>
 8004782:	2300      	movs	r3, #0
 8004784:	723b      	strb	r3, [r7, #8]
	status = write_register(0x6F, tx_data, 1);
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	2301      	movs	r3, #1
 800478c:	216f      	movs	r1, #111	@ 0x6f
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8f0 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 8004794:	4603      	mov	r3, r0
 8004796:	73fb      	strb	r3, [r7, #15]
	if (!status) return status;
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	f083 0301 	eor.w	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <_ZN7PMW39017set_ledEb+0x80>
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	e019      	b.n	80047dc <_ZN7PMW39017set_ledEb+0xb4>
	osDelay(10);
 80047a8:	200a      	movs	r0, #10
 80047aa:	f00f fc02 	bl	8013fb2 <osDelay>

	tx_data[0] = 0x00;
 80047ae:	2300      	movs	r3, #0
 80047b0:	723b      	strb	r3, [r7, #8]
	status = write_register(0x7F, tx_data, 1);
 80047b2:	f107 0208 	add.w	r2, r7, #8
 80047b6:	2301      	movs	r3, #1
 80047b8:	217f      	movs	r1, #127	@ 0x7f
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8da 	bl	8004974 <_ZN7PMW390114write_registerEhPht>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]
	if (!status) return status;
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	f083 0301 	eor.w	r3, r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <_ZN7PMW39017set_ledEb+0xac>
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	e003      	b.n	80047dc <_ZN7PMW39017set_ledEb+0xb4>
	osDelay(10);
 80047d4:	200a      	movs	r0, #10
 80047d6:	f00f fbec 	bl	8013fb2 <osDelay>

	return status;
 80047da:	7bfb      	ldrb	r3, [r7, #15]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3710      	adds	r7, #16
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <_ZN7PMW390113read_registerEhPht>:
 *
 *  Low-level register read / write
 *
 */
bool PMW3901::read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	b091      	sub	sp, #68	@ 0x44
 80047ea:	af02      	add	r7, sp, #8
 80047ec:	6178      	str	r0, [r7, #20]
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	461a      	mov	r2, r3
 80047f2:	460b      	mov	r3, r1
 80047f4:	74fb      	strb	r3, [r7, #19]
 80047f6:	4613      	mov	r3, r2
 80047f8:	823b      	strh	r3, [r7, #16]
	{
		USB_Log("PMW3901 register read failed.\n", ERR);
	}

	return status;
}
 80047fa:	466b      	mov	r3, sp
 80047fc:	461e      	mov	r6, r3
	bool status = false;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint16_t num_bytes = data_len + 1;
 8004804:	8a3b      	ldrh	r3, [r7, #16]
 8004806:	3301      	adds	r3, #1
 8004808:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint8_t tx_buffer[num_bytes];
 800480a:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800480c:	460b      	mov	r3, r1
 800480e:	3b01      	subs	r3, #1
 8004810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004812:	b28b      	uxth	r3, r1
 8004814:	2200      	movs	r2, #0
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	00c3      	lsls	r3, r0, #3
 8004826:	6838      	ldr	r0, [r7, #0]
 8004828:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	00c2      	lsls	r2, r0, #3
 8004830:	b28b      	uxth	r3, r1
 8004832:	2200      	movs	r2, #0
 8004834:	469a      	mov	sl, r3
 8004836:	4693      	mov	fp, r2
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004844:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004848:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800484c:	460b      	mov	r3, r1
 800484e:	3307      	adds	r3, #7
 8004850:	08db      	lsrs	r3, r3, #3
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	ebad 0d03 	sub.w	sp, sp, r3
 8004858:	ab02      	add	r3, sp, #8
 800485a:	3300      	adds	r3, #0
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t rx_buffer[num_bytes];
 800485e:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8004860:	460b      	mov	r3, r1
 8004862:	3b01      	subs	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
 8004866:	b28b      	uxth	r3, r1
 8004868:	2200      	movs	r2, #0
 800486a:	4698      	mov	r8, r3
 800486c:	4691      	mov	r9, r2
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004882:	b28b      	uxth	r3, r1
 8004884:	2200      	movs	r2, #0
 8004886:	461c      	mov	r4, r3
 8004888:	4615      	mov	r5, r2
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	00eb      	lsls	r3, r5, #3
 8004894:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004898:	00e2      	lsls	r2, r4, #3
 800489a:	460b      	mov	r3, r1
 800489c:	3307      	adds	r3, #7
 800489e:	08db      	lsrs	r3, r3, #3
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	ebad 0d03 	sub.w	sp, sp, r3
 80048a6:	ab02      	add	r3, sp, #8
 80048a8:	3300      	adds	r3, #0
 80048aa:	623b      	str	r3, [r7, #32]
	memset(tx_buffer, 0, num_bytes);
 80048ac:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048ae:	461a      	mov	r2, r3
 80048b0:	2100      	movs	r1, #0
 80048b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b4:	f020 fa91 	bl	8024dda <memset>
	memset(rx_buffer, 0, num_bytes);
 80048b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048ba:	461a      	mov	r2, r3
 80048bc:	2100      	movs	r1, #0
 80048be:	6a38      	ldr	r0, [r7, #32]
 80048c0:	f020 fa8b 	bl	8024dda <memset>
	tx_buffer[0] = reg_addr;	// Read operation
 80048c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c6:	7cfa      	ldrb	r2, [r7, #19]
 80048c8:	701a      	strb	r2, [r3, #0]
		np::lock_guard lock(spi_mutex);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	f107 031c 	add.w	r3, r7, #28
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7fc fb99 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6898      	ldr	r0, [r3, #8]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	899b      	ldrh	r3, [r3, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	4619      	mov	r1, r3
 80048e6:	f005 fc9f 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_TransmitReceive(spi_handle, tx_buffer, rx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048f4:	9200      	str	r2, [sp, #0]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048fa:	f009 fa68 	bl	800ddce <HAL_SPI_TransmitReceive>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	6898      	ldr	r0, [r3, #8]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	899b      	ldrh	r3, [r3, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	4619      	mov	r1, r3
 8004918:	f005 fc86 	bl	800a228 <HAL_GPIO_WritePin>
	}
 800491c:	f107 031c 	add.w	r3, r7, #28
 8004920:	4618      	mov	r0, r3
 8004922:	f7fc fb88 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (status)
 8004926:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800492a:	2b00      	cmp	r3, #0
 800492c:	d013      	beq.n	8004956 <_ZN7PMW390113read_registerEhPht+0x172>
		for (int i = 1; i < num_bytes; i++)
 800492e:	2301      	movs	r3, #1
 8004930:	637b      	str	r3, [r7, #52]	@ 0x34
 8004932:	e00b      	b.n	800494c <_ZN7PMW390113read_registerEhPht+0x168>
			rx_data[i - 1] = rx_buffer[i];
 8004934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004936:	3b01      	subs	r3, #1
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	6a39      	ldr	r1, [r7, #32]
 800493e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004940:	440a      	add	r2, r1
 8004942:	7812      	ldrb	r2, [r2, #0]
 8004944:	701a      	strb	r2, [r3, #0]
		for (int i = 1; i < num_bytes; i++)
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	3301      	adds	r3, #1
 800494a:	637b      	str	r3, [r7, #52]	@ 0x34
 800494c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800494e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004950:	429a      	cmp	r2, r3
 8004952:	dbef      	blt.n	8004934 <_ZN7PMW390113read_registerEhPht+0x150>
 8004954:	e003      	b.n	800495e <_ZN7PMW390113read_registerEhPht+0x17a>
		USB_Log("PMW3901 register read failed.\n", ERR);
 8004956:	2102      	movs	r1, #2
 8004958:	4805      	ldr	r0, [pc, #20]	@ (8004970 <_ZN7PMW390113read_registerEhPht+0x18c>)
 800495a:	f001 fcf9 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 800495e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004962:	46b5      	mov	sp, r6
}
 8004964:	4618      	mov	r0, r3
 8004966:	373c      	adds	r7, #60	@ 0x3c
 8004968:	46bd      	mov	sp, r7
 800496a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496e:	bf00      	nop
 8004970:	08027390 	.word	0x08027390

08004974 <_ZN7PMW390114write_registerEhPht>:

bool PMW3901::write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
 8004974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004978:	b08b      	sub	sp, #44	@ 0x2c
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	607a      	str	r2, [r7, #4]
 8004980:	461a      	mov	r2, r3
 8004982:	460b      	mov	r3, r1
 8004984:	72fb      	strb	r3, [r7, #11]
 8004986:	4613      	mov	r3, r2
 8004988:	813b      	strh	r3, [r7, #8]
	{
		USB_Log("PMW3901 register write failed.\n", ERR);
	}

	return status;
}
 800498a:	466b      	mov	r3, sp
 800498c:	461e      	mov	r6, r3
	bool status = false;
 800498e:	2300      	movs	r3, #0
 8004990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint16_t num_bytes = data_len + 1;
 8004994:	893b      	ldrh	r3, [r7, #8]
 8004996:	3301      	adds	r3, #1
 8004998:	843b      	strh	r3, [r7, #32]
	uint8_t tx_buffer[num_bytes];
 800499a:	8c39      	ldrh	r1, [r7, #32]
 800499c:	460b      	mov	r3, r1
 800499e:	3b01      	subs	r3, #1
 80049a0:	61fb      	str	r3, [r7, #28]
 80049a2:	b28b      	uxth	r3, r1
 80049a4:	2200      	movs	r2, #0
 80049a6:	4698      	mov	r8, r3
 80049a8:	4691      	mov	r9, r2
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049be:	b28b      	uxth	r3, r1
 80049c0:	2200      	movs	r2, #0
 80049c2:	461c      	mov	r4, r3
 80049c4:	4615      	mov	r5, r2
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	00eb      	lsls	r3, r5, #3
 80049d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049d4:	00e2      	lsls	r2, r4, #3
 80049d6:	460b      	mov	r3, r1
 80049d8:	3307      	adds	r3, #7
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	ebad 0d03 	sub.w	sp, sp, r3
 80049e2:	466b      	mov	r3, sp
 80049e4:	3300      	adds	r3, #0
 80049e6:	61bb      	str	r3, [r7, #24]
	memset(tx_buffer, 0, num_bytes);
 80049e8:	8c3b      	ldrh	r3, [r7, #32]
 80049ea:	461a      	mov	r2, r3
 80049ec:	2100      	movs	r1, #0
 80049ee:	69b8      	ldr	r0, [r7, #24]
 80049f0:	f020 f9f3 	bl	8024dda <memset>
	tx_buffer[0] = 0x80 | reg_addr;		// Write operation
 80049f4:	7afb      	ldrb	r3, [r7, #11]
 80049f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8004a00:	2301      	movs	r3, #1
 8004a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a04:	e00c      	b.n	8004a20 <_ZN7PMW390114write_registerEhPht+0xac>
		tx_buffer[i] = tx_data[i - 1];
 8004a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	7819      	ldrb	r1, [r3, #0]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	4413      	add	r3, r2
 8004a16:	460a      	mov	r2, r1
 8004a18:	701a      	strb	r2, [r3, #0]
	for (int i = 1; i < num_bytes; i++)
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a20:	8c3b      	ldrh	r3, [r7, #32]
 8004a22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a24:	429a      	cmp	r2, r3
 8004a26:	dbee      	blt.n	8004a06 <_ZN7PMW390114write_registerEhPht+0x92>
		np::lock_guard lock(spi_mutex);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fc faea 	bl	800100c <_ZN2np10lock_guardC1ERPv>
		HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_RESET);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6898      	ldr	r0, [r3, #8]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	899b      	ldrh	r3, [r3, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	4619      	mov	r1, r3
 8004a44:	f005 fbf0 	bl	800a228 <HAL_GPIO_WritePin>
		status = (HAL_SPI_Transmit(spi_handle, tx_buffer, num_bytes, HAL_MAX_DELAY) == HAL_OK);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6818      	ldr	r0, [r3, #0]
 8004a4c:	8c3a      	ldrh	r2, [r7, #32]
 8004a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a52:	69b9      	ldr	r1, [r7, #24]
 8004a54:	f009 f845 	bl	800dae2 <HAL_SPI_Transmit>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf0c      	ite	eq
 8004a5e:	2301      	moveq	r3, #1
 8004a60:	2300      	movne	r3, #0
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6898      	ldr	r0, [r3, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	899b      	ldrh	r3, [r3, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	4619      	mov	r1, r3
 8004a72:	f005 fbd9 	bl	800a228 <HAL_GPIO_WritePin>
	}
 8004a76:	f107 0314 	add.w	r3, r7, #20
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fadb 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	if (!status)
 8004a80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a84:	f083 0301 	eor.w	r3, r3, #1
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <_ZN7PMW390114write_registerEhPht+0x122>
		USB_Log("PMW3901 register write failed.\n", ERR);
 8004a8e:	2102      	movs	r1, #2
 8004a90:	4805      	ldr	r0, [pc, #20]	@ (8004aa8 <_ZN7PMW390114write_registerEhPht+0x134>)
 8004a92:	f001 fc5d 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	return status;
 8004a96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a9a:	46b5      	mov	sp, r6
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	372c      	adds	r7, #44	@ 0x2c
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aa6:	bf00      	nop
 8004aa8:	080273b0 	.word	0x080273b0

08004aac <_ZNSt12_Vector_baseIsSaIsEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f8cb 	bl	8004c52 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <_ZNSt6vectorIsSaIsEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff ffeb 	bl	8004aac <_ZNSt12_Vector_baseIsSaIsEEC1Ev>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <_ZN19MovingAverageFilterIsEC1Ej>:

/*
 * Definitions
 */
template <typename T>
MovingAverageFilter<T>::MovingAverageFilter(unsigned max_size)
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	: MAX_SIZE(max_size),
	  index(0)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	461a      	mov	r2, r3
 8004aee:	2300      	movs	r3, #0
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	6093      	str	r3, [r2, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffe4 	bl	8004ac6 <_ZNSt6vectorIsSaIsEEC1Ev>
	: MAX_SIZE(max_size),
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	60da      	str	r2, [r3, #12]
	  index(0)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
{
	buffer.reserve(max_size);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6839      	ldr	r1, [r7, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f8c0 	bl	8004c94 <_ZNSt6vectorIsSaIsEE7reserveEj>
}
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZNSt5arrayIsLj2EEixEj>:
      operator[](size_type __n) noexcept
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 f916 	bl	8004d5e <_ZNSt14__array_traitsIsLj2EE6_S_refERA2_Ksj>
 8004b32:	4603      	mov	r3, r0
      }
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>:
        : _M_current(__i.base()) { }

      // Forward iterator requirements
      _GLIBCXX20_CONSTEXPR
      reference
      operator*() const _GLIBCXX_NOEXCEPT
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <_ZN19MovingAverageFilterIsE6updateEs>:

template <typename T>
T MovingAverageFilter<T>::update(T input)
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	807b      	strh	r3, [r7, #2]
{
	if (buffer.size() < MAX_SIZE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f885 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	bf34      	ite	cc
 8004b72:	2301      	movcc	r3, #1
 8004b74:	2300      	movcs	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <_ZN19MovingAverageFilterIsE6updateEs+0x36>
	{
		// Buffer not full, add input element to back
		buffer.push_back(input);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	1cba      	adds	r2, r7, #2
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f8fa 	bl	8004d7c <_ZNSt6vectorIsSaIsEE9push_backERKs>
 8004b88:	e016      	b.n	8004bb8 <_ZN19MovingAverageFilterIsE6updateEs+0x64>
	}
	else
	{
		// Replace oldest element in buffer with input,
		// 		rolling buffer topology...
		buffer.at(index++) = input;
 8004b8a:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	1c59      	adds	r1, r3, #1
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6111      	str	r1, [r2, #16]
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f000 f913 	bl	8004dc6 <_ZNSt6vectorIsSaIsEE2atEj>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4622      	mov	r2, r4
 8004ba4:	801a      	strh	r2, [r3, #0]
		if (index >= MAX_SIZE) index = 0;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691a      	ldr	r2, [r3, #16]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d302      	bcc.n	8004bb8 <_ZN19MovingAverageFilterIsE6updateEs+0x64>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	611a      	str	r2, [r3, #16]
	}

	// Compute average
	T sum = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	83fb      	strh	r3, [r7, #30]
	for (const T& value : buffer)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	69b8      	ldr	r0, [r7, #24]
 8004bc2:	f000 f912 	bl	8004dea <_ZNSt6vectorIsSaIsEE5beginEv>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	613b      	str	r3, [r7, #16]
 8004bca:	69b8      	ldr	r0, [r7, #24]
 8004bcc:	f000 f91d 	bl	8004e0a <_ZNSt6vectorIsSaIsEE3endEv>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e012      	b.n	8004bfc <_ZN19MovingAverageFilterIsE6updateEs+0xa8>
 8004bd6:	f107 0310 	add.w	r3, r7, #16
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ffae 	bl	8004b3c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEdeEv>
 8004be0:	6178      	str	r0, [r7, #20]
	{
		sum += value;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	8bfb      	ldrh	r3, [r7, #30]
 8004bec:	4413      	add	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	83fb      	strh	r3, [r7, #30]
	for (const T& value : buffer)
 8004bf2:	f107 0310 	add.w	r3, r7, #16
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 f930 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>
 8004bfc:	f107 020c 	add.w	r2, r7, #12
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f910 	bl	8004e2c <_ZN9__gnu_cxxeqIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	f083 0301 	eor.w	r3, r3, #1
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1de      	bne.n	8004bd6 <_ZN19MovingAverageFilterIsE6updateEs+0x82>
	}
	return sum / buffer.size();
 8004c18:	f9b7 401e 	ldrsh.w	r4, [r7, #30]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f827 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8004c24:	4603      	mov	r3, r0
 8004c26:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c2a:	b21b      	sxth	r3, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3724      	adds	r7, #36	@ 0x24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}

08004c34 <_ZNSt5arrayIfLj2EEixEj>:
      operator[](size_type __n) noexcept
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f91a 	bl	8004e7c <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>
 8004c48:	4603      	mov	r3, r0
      }
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f91d 	bl	8004e9a <_ZNSaIsEC1Ev>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f925 	bl	8004eb2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>
	{ }
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>:

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	105b      	asrs	r3, r3, #1
 8004c86:	4618      	mov	r0, r3
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
	...

08004c94 <_ZNSt6vectorIsSaIsEE7reserveEj>:
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    void
    vector<_Tp, _Alloc>::
 8004c94:	b5b0      	push	{r4, r5, r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f92e 	bl	8004f00 <_ZNKSt6vectorIsSaIsEE8max_sizeEv>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf8c      	ite	hi
 8004cac:	2301      	movhi	r3, #1
 8004cae:	2300      	movls	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <_ZNSt6vectorIsSaIsEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8004cb6:	4823      	ldr	r0, [pc, #140]	@ (8004d44 <_ZNSt6vectorIsSaIsEE7reserveEj+0xb0>)
 8004cb8:	f01c ffcd 	bl	8021c56 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f930 	bl	8004f22 <_ZNKSt6vectorIsSaIsEE8capacityEv>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bf8c      	ite	hi
 8004cca:	2301      	movhi	r3, #1
 8004ccc:	2300      	movls	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d033      	beq.n	8004d3c <_ZNSt6vectorIsSaIsEE7reserveEj+0xa8>
	{
	  const size_type __old_size = size();
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ffcc 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8004cda:	60f8      	str	r0, [r7, #12]
	  pointer __tmp;
#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __tmp = this->_M_allocate(__n);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f92e 	bl	8004f42 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 8004ce6:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681c      	ldr	r4, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 f828 	bl	8004d48 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8004cf8:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 f933 	bl	8004f6a <_ZNSt6vectorIsSaIsEE11_S_relocateEPsS2_S2_RS0_>
		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
			    _M_get_Tp_allocator());
	    }
	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
	  _M_deallocate(this->_M_impl._M_start,
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 8004d16:	461a      	mov	r2, r3
 8004d18:	f000 f8df 	bl	8004eda <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
	  this->_M_impl._M_start = __tmp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	441a      	add	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
	}
    }
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bdb0      	pop	{r4, r5, r7, pc}
 8004d44:	080273d0 	.word	0x080273d0

08004d48 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr

08004d5e <_ZNSt14__array_traitsIsLj2EE6_S_refERA2_Ksj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <_ZNSt6vectorIsSaIsEE9push_backERKs>:
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      _GLIBCXX20_CONSTEXPR
      void
      push_back(const value_type& __x)
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d00c      	beq.n	8004dac <_ZNSt6vectorIsSaIsEE9push_backERKs+0x30>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f000 f8f7 	bl	8004f8e <_ZNSt16allocator_traitsISaIsEE9constructIsJRKsEEEvRS0_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	1c9a      	adds	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004daa:	e008      	b.n	8004dbe <_ZNSt6vectorIsSaIsEE9push_backERKs+0x42>
	  _M_realloc_insert(end(), __x);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 f82c 	bl	8004e0a <_ZNSt6vectorIsSaIsEE3endEv>
 8004db2:	4603      	mov	r3, r0
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f96b 	bl	8005094 <_ZNSt6vectorIsSaIsEE17_M_realloc_insertIJRKsEEEvN9__gnu_cxx17__normal_iteratorIPsS1_EEDpOT_>
      }
 8004dbe:	bf00      	nop
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <_ZNSt6vectorIsSaIsEE2atEj>:
      at(size_type __n)
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9da 	bl	800518c <_ZNKSt6vectorIsSaIsEE14_M_range_checkEj>
	return (*this)[__n];
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9f6 	bl	80051cc <_ZNSt6vectorIsSaIsEEixEj>
 8004de0:	4603      	mov	r3, r0
      }
 8004de2:	4618      	mov	r0, r3
 8004de4:	3708      	adds	r7, #8
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_ZNSt6vectorIsSaIsEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b084      	sub	sp, #16
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	f107 030c 	add.w	r3, r7, #12
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f9f6 	bl	80051ec <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_ZNSt6vectorIsSaIsEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	1d1a      	adds	r2, r3, #4
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f9e5 	bl	80051ec <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <_ZN9__gnu_cxxeqIPsSt6vectorIsSaIsEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }

  template<typename _Iterator, typename _Container>
    [[nodiscard]]
    constexpr bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    requires requires {
      { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
    }
    { return __lhs.base() == __rhs.base(); }
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9e8 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	681c      	ldr	r4, [r3, #0]
 8004e40:	6838      	ldr	r0, [r7, #0]
 8004e42:	f000 f9e3 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8004e46:	4603      	mov	r3, r0
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	429c      	cmp	r4, r3
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4618      	mov	r0, r3
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd90      	pop	{r4, r7, pc}

08004e5c <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	1c9a      	adds	r2, r3, #2
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
	return *this;
 8004e6e:	687b      	ldr	r3, [r7, #4]
      }
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_ZNSt14__array_traitsIfLj2EE6_S_refERA2_Kfj>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <_ZNSaIsEC1Ev>:
#endif

      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3035. std::allocator's constructors should be constexpr
      _GLIBCXX20_CONSTEXPR
      allocator() _GLIBCXX_NOTHROW { }
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9bd 	bl	8005222 <_ZNSt15__new_allocatorIsEC1Ev>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_ZNSt12_Vector_baseIsSaIsEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	605a      	str	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]
	{ }
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>:
      _M_deallocate(pointer __p, size_t __n)
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b084      	sub	sp, #16
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
	if (__p)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f9a0 	bl	8005238 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>
      }
 8004ef8:	bf00      	nop
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZNKSt6vectorIsSaIsEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f9d9 	bl	80052c2 <_ZNKSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 f9bb 	bl	800528e <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <_ZNKSt6vectorIsSaIsEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	105b      	asrs	r3, r3, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x1e>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6839      	ldr	r1, [r7, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f9be 	bl	80052d8 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	e000      	b.n	8004f62 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj+0x20>
 8004f60:	2300      	movs	r3, #0
      }
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_ZNSt6vectorIsSaIsEE11_S_relocateEPsS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b084      	sub	sp, #16
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
 8004f76:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f9db 	bl	800533a <_ZSt12__relocate_aIPsS0_SaIsEET0_T_S3_S2_RT1_>
 8004f84:	4603      	mov	r3, r0
      }
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_ZNSt16allocator_traitsISaIsEE9constructIsJRKsEEEvRS0_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f9ea 	bl	8005374 <_ZSt7forwardIRKsEOT_RNSt16remove_referenceIS2_E4typeE>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	68b8      	ldr	r0, [r7, #8]
 8004fa6:	f000 f9f0 	bl	800538a <_ZSt12construct_atIsJRKsEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d201      	bcs.n	8004fcc <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	e000      	b.n	8004fce <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8004fcc:	687b      	ldr	r3, [r7, #4]
    }
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8004fda:	b590      	push	{r4, r7, lr}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f7ff ff8a 	bl	8004f00 <_ZNKSt6vectorIsSaIsEE8max_sizeEv>
 8004fec:	4604      	mov	r4, r0
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fe3f 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	1ae2      	subs	r2, r4, r3
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bf34      	ite	cc
 8004ffe:	2301      	movcc	r3, #1
 8005000:	2300      	movcs	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f01c fe24 	bl	8021c56 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff fe2f 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 8005014:	4604      	mov	r4, r0
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f7ff fe2b 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 800501c:	4603      	mov	r3, r0
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	f107 0208 	add.w	r2, r7, #8
 8005024:	f107 0310 	add.w	r3, r7, #16
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ffc1 	bl	8004fb2 <_ZSt3maxIjERKT_S2_S2_>
 8005030:	4603      	mov	r3, r0
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4423      	add	r3, r4
 8005036:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff fe1a 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 800503e:	4602      	mov	r2, r0
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4293      	cmp	r3, r2
 8005044:	d306      	bcc.n	8005054 <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc+0x7a>
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f7ff ff5a 	bl	8004f00 <_ZNKSt6vectorIsSaIsEE8max_sizeEv>
 800504c:	4602      	mov	r2, r0
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	4293      	cmp	r3, r2
 8005052:	d904      	bls.n	800505e <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc+0x84>
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7ff ff53 	bl	8004f00 <_ZNKSt6vectorIsSaIsEE8max_sizeEv>
 800505a:	4603      	mov	r3, r0
 800505c:	e000      	b.n	8005060 <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc+0x86>
 800505e:	697b      	ldr	r3, [r7, #20]
      }
 8005060:	4618      	mov	r0, r3
 8005062:	371c      	adds	r7, #28
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}

08005068 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f8ca 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8005078:	4603      	mov	r3, r0
 800507a:	681c      	ldr	r4, [r3, #0]
 800507c:	6838      	ldr	r0, [r7, #0]
 800507e:	f000 f8c5 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8005082:	4603      	mov	r3, r0
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	1ae3      	subs	r3, r4, r3
 8005088:	105b      	asrs	r3, r3, #1
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bd90      	pop	{r4, r7, pc}
	...

08005094 <_ZNSt6vectorIsSaIsEE17_M_realloc_insertIJRKsEEEvN9__gnu_cxx17__normal_iteratorIPsS1_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8005094:	b5b0      	push	{r4, r5, r7, lr}
 8005096:	b08c      	sub	sp, #48	@ 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80050a0:	4a39      	ldr	r2, [pc, #228]	@ (8005188 <_ZNSt6vectorIsSaIsEE17_M_realloc_insertIJRKsEEEvN9__gnu_cxx17__normal_iteratorIPsS1_EEDpOT_+0xf4>)
 80050a2:	2101      	movs	r1, #1
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	f7ff ff98 	bl	8004fda <_ZNKSt6vectorIsSaIsEE12_M_check_lenEjPKc>
 80050aa:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff fe96 	bl	8004dea <_ZNSt6vectorIsSaIsEE5beginEv>
 80050be:	4603      	mov	r3, r0
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	f107 0214 	add.w	r2, r7, #20
 80050c6:	f107 0308 	add.w	r3, r7, #8
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff ffcb 	bl	8005068 <_ZN9__gnu_cxxmiIPsSt6vectorIsSaIsEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80050d2:	4603      	mov	r3, r0
 80050d4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff ff31 	bl	8004f42 <_ZNSt12_Vector_baseIsSaIsEE11_M_allocateEj>
 80050e0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80050e6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	18d5      	adds	r5, r2, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f93f 	bl	8005374 <_ZSt7forwardIRKsEOT_RNSt16remove_referenceIS2_E4typeE>
 80050f6:	4603      	mov	r3, r0
 80050f8:	461a      	mov	r2, r3
 80050fa:	4629      	mov	r1, r5
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7ff ff46 	bl	8004f8e <_ZNSt16allocator_traitsISaIsEE9constructIsJRKsEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	4618      	mov	r0, r3
 800510c:	f000 f87e 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 8005110:	4603      	mov	r3, r0
 8005112:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fe16 	bl	8004d48 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800511c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	4621      	mov	r1, r4
 8005122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005124:	f7ff ff21 	bl	8004f6a <_ZNSt6vectorIsSaIsEE11_S_relocateEPsS2_S2_RS0_>
 8005128:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	3302      	adds	r3, #2
 800512e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005130:	f107 0308 	add.w	r3, r7, #8
 8005134:	4618      	mov	r0, r3
 8005136:	f000 f869 	bl	800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>
 800513a:	4603      	mov	r3, r0
 800513c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff fe01 	bl	8004d48 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 8005146:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800514c:	4620      	mov	r0, r4
 800514e:	f7ff ff0c 	bl	8004f6a <_ZNSt6vectorIsSaIsEE11_S_relocateEPsS2_S2_RS0_>
 8005152:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8005154:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8005160:	461a      	mov	r2, r3
 8005162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005164:	f7ff feb9 	bl	8004eda <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
      this->_M_impl._M_start = __new_start;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	441a      	add	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	609a      	str	r2, [r3, #8]
    }
 8005180:	bf00      	nop
 8005182:	3730      	adds	r7, #48	@ 0x30
 8005184:	46bd      	mov	sp, r7
 8005186:	bdb0      	pop	{r4, r5, r7, pc}
 8005188:	080273e0 	.word	0x080273e0

0800518c <_ZNKSt6vectorIsSaIsEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7ff fd6b 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 800519c:	4602      	mov	r2, r0
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	bf2c      	ite	cs
 80051a4:	2301      	movcs	r3, #1
 80051a6:	2300      	movcc	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d008      	beq.n	80051c0 <_ZNKSt6vectorIsSaIsEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fd5f 	bl	8004c72 <_ZNKSt6vectorIsSaIsEE4sizeEv>
 80051b4:	4603      	mov	r3, r0
 80051b6:	461a      	mov	r2, r3
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4803      	ldr	r0, [pc, #12]	@ (80051c8 <_ZNKSt6vectorIsSaIsEE14_M_range_checkEj+0x3c>)
 80051bc:	f01c fd4e 	bl	8021c5c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 80051c0:	bf00      	nop
 80051c2:	3708      	adds	r7, #8
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	080273fc 	.word	0x080273fc

080051cc <_ZNSt6vectorIsSaIsEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
      }
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <_ZN9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <_ZNK9__gnu_cxx17__normal_iteratorIPsSt6vectorIsSaIsEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <_ZNSt15__new_allocatorIsEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	617b      	str	r3, [r7, #20]

      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
	if (std::__is_constant_evaluated())
 8005250:	f7fe f93c 	bl	80034cc <_ZSt23__is_constant_evaluatedv>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj+0x2a>
	  {
	    ::operator delete(__p);
 800525a:	69b8      	ldr	r0, [r7, #24]
 800525c:	f01c fce0 	bl	8021c20 <_ZdlPv>
	    return;
 8005260:	e005      	b.n	800526e <_ZNSt16allocator_traitsISaIsEE10deallocateERS0_Psj+0x36>
	  }
	__allocator_base<_Tp>::deallocate(__p, __n);
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	69b9      	ldr	r1, [r7, #24]
 8005266:	69f8      	ldr	r0, [r7, #28]
 8005268:	f000 f930 	bl	80054cc <_ZNSt15__new_allocatorIsE10deallocateEPsj>
      { __a.deallocate(__p, __n); }
 800526c:	bf00      	nop
 800526e:	bf00      	nop
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static _GLIBCXX20_CONSTEXPR size_type
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus <= 201703L
	return __a.max_size();
#else
	return size_t(-1) / sizeof(value_type);
 800527e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
#endif
      }
 8005282:	4618      	mov	r0, r3
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <_ZNSt6vectorIsSaIsEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8005296:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800529a:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ffea 	bl	8005276 <_ZNSt16allocator_traitsISaIsEE8max_sizeERKS0_>
 80052a2:	4603      	mov	r3, r0
 80052a4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80052a6:	f107 0208 	add.w	r2, r7, #8
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	4611      	mov	r1, r2
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 f88d 	bl	80053d0 <_ZSt3minIjERKT_S2_S2_>
 80052b6:	4603      	mov	r3, r0
 80052b8:	681b      	ldr	r3, [r3, #0]
      }
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <_ZNKSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 80052ea:	f7fe f8ef 	bl	80034cc <_ZSt23__is_constant_evaluatedv>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d016      	beq.n	8005322 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	0059      	lsls	r1, r3, #1
 80052fa:	0fdb      	lsrs	r3, r3, #31
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d000      	beq.n	8005302 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j+0x2a>
 8005300:	2201      	movs	r2, #1
 8005302:	460b      	mov	r3, r1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	4613      	mov	r3, r2
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 8005312:	f01c fc9d 	bl	8021c50 <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f01c fc85 	bl	8021c28 <_Znwj>
 800531e:	4603      	mov	r3, r0
 8005320:	e007      	b.n	8005332 <_ZNSt16allocator_traitsISaIsEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f8de 	bl	80054ea <_ZNSt15__new_allocatorIsE8allocateEjPKv>
 800532e:	4603      	mov	r3, r0
 8005330:	bf00      	nop
      { return __a.allocate(__n); }
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZSt12__relocate_aIPsS0_SaIsEET0_T_S3_S2_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800533a:	b5b0      	push	{r4, r5, r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
 8005346:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f855 	bl	80053f8 <_ZSt12__niter_baseIPsET_S1_>
 800534e:	4604      	mov	r4, r0
 8005350:	68b8      	ldr	r0, [r7, #8]
 8005352:	f000 f851 	bl	80053f8 <_ZSt12__niter_baseIPsET_S1_>
 8005356:	4605      	mov	r5, r0
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f84d 	bl	80053f8 <_ZSt12__niter_baseIPsET_S1_>
 800535e:	4602      	mov	r2, r0
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4629      	mov	r1, r5
 8005364:	4620      	mov	r0, r4
 8005366:	f000 f862 	bl	800542e <_ZSt14__relocate_a_1IssENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 800536a:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bdb0      	pop	{r4, r5, r7, pc}

08005374 <_ZSt7forwardIRKsEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <_ZSt12construct_atIsJRKsEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus >= 202002L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 800538a:	b590      	push	{r4, r7, lr}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4619      	mov	r1, r3
 8005398:	2002      	movs	r0, #2
 800539a:	f7fe f8a7 	bl	80034ec <_ZnwjPv>
 800539e:	4604      	mov	r4, r0
 80053a0:	6838      	ldr	r0, [r7, #0]
 80053a2:	f7ff ffe7 	bl	8005374 <_ZSt7forwardIRKsEOT_RNSt16remove_referenceIS2_E4typeE>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053ac:	8023      	strh	r3, [r4, #0]
 80053ae:	4623      	mov	r3, r4
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd90      	pop	{r4, r7, pc}

080053b8 <_ZNSt16allocator_traitsISaIsEE7destroyIsEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80053c2:	6838      	ldr	r0, [r7, #0]
 80053c4:	f000 f878 	bl	80054b8 <_ZSt10destroy_atIsEvPT_>
	}
 80053c8:	bf00      	nop
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d201      	bcs.n	80053ea <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	e000      	b.n	80053ec <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80053ea:	687b      	ldr	r3, [r7, #4]
    }
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <_ZSt12__niter_baseIPsET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <_ZN9__gnu_cxx17__normal_iteratorIPsvEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
 8005416:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <_ZSt14__relocate_a_1IssENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800542e:	b580      	push	{r7, lr}
 8005430:	b086      	sub	sp, #24
 8005432:	af00      	add	r7, sp, #0
 8005434:	60f8      	str	r0, [r7, #12]
 8005436:	60b9      	str	r1, [r7, #8]
 8005438:	607a      	str	r2, [r7, #4]
 800543a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	105b      	asrs	r3, r3, #1
 8005444:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	dd22      	ble.n	8005492 <_ZSt14__relocate_a_1IssENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 800544c:	f7fe f846 	bl	80034dc <_ZSt21is_constant_evaluatedv>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <_ZSt14__relocate_a_1IssENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 8005456:	1d3a      	adds	r2, r7, #4
 8005458:	f107 0310 	add.w	r3, r7, #16
 800545c:	4611      	mov	r1, r2
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ffd5 	bl	800540e <_ZN9__gnu_cxx17__normal_iteratorIPsvEC1ERKS1_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	f000 f866 	bl	800553c <_ZSt14__relocate_a_1IPsN9__gnu_cxx17__normal_iteratorIS0_vEESaIsEET0_T_S6_S5_RT1_>
 8005470:	4603      	mov	r3, r0
 8005472:	613b      	str	r3, [r7, #16]
	      return __out.base();
 8005474:	f107 0310 	add.w	r3, r7, #16
 8005478:	4618      	mov	r0, r3
 800547a:	f000 f88d 	bl	8005598 <_ZNK9__gnu_cxx17__normal_iteratorIPsvE4baseEv>
 800547e:	4603      	mov	r3, r0
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	e00a      	b.n	800549a <_ZSt14__relocate_a_1IssENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	461a      	mov	r2, r3
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	f01f fc8a 	bl	8024da6 <memmove>
      return __result + __count;
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
    }
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZSt11__addressofIsEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <_ZSt10destroy_atIsEvPT_>:
    destroy_at(_Tp* __location)
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
    }
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <_ZNSt15__new_allocatorIsE10deallocateEPsj>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	4619      	mov	r1, r3
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f01c fba0 	bl	8021c24 <_ZdlPvj>
      }
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_ZNSt15__new_allocatorIsE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b084      	sub	sp, #16
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	60f8      	str	r0, [r7, #12]
 80054f2:	60b9      	str	r1, [r7, #8]
 80054f4:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f859 	bl	80055ae <_ZNKSt15__new_allocatorIsE11_M_max_sizeEv>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4293      	cmp	r3, r2
 8005502:	bf8c      	ite	hi
 8005504:	2301      	movhi	r3, #1
 8005506:	2300      	movls	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	bf14      	ite	ne
 800550e:	2301      	movne	r3, #1
 8005510:	2300      	moveq	r3, #0
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <_ZNSt15__new_allocatorIsE8allocateEjPKv+0x3c>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	da01      	bge.n	8005522 <_ZNSt15__new_allocatorIsE8allocateEjPKv+0x38>
	      std::__throw_bad_array_new_length();
 800551e:	f01c fb97 	bl	8021c50 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 8005522:	f01c fb92 	bl	8021c4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	4618      	mov	r0, r3
 800552c:	f01c fb7c 	bl	8021c28 <_Znwj>
 8005530:	4603      	mov	r3, r0
 8005532:	bf00      	nop
      }
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <_ZSt14__relocate_a_1IPsN9__gnu_cxx17__normal_iteratorIS0_vEESaIsEET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800554e:	e01a      	b.n	8005586 <_ZSt14__relocate_a_1IPsN9__gnu_cxx17__normal_iteratorIS0_vEESaIsEET0_T_S6_S5_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 8005550:	f107 0314 	add.w	r3, r7, #20
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f846 	bl	80055e6 <_ZNK9__gnu_cxx17__normal_iteratorIPsvEdeEv>
 800555a:	4603      	mov	r3, r0
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff ffa0 	bl	80054a2 <_ZSt11__addressofIsEPT_RS0_>
 8005562:	4604      	mov	r4, r0
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff ff9c 	bl	80054a2 <_ZSt11__addressofIsEPT_RS0_>
 800556a:	4603      	mov	r3, r0
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	4619      	mov	r1, r3
 8005570:	4620      	mov	r0, r4
 8005572:	f000 f844 	bl	80055fe <_ZSt19__relocate_object_aIssSaIsEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3302      	adds	r3, #2
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	f107 0314 	add.w	r3, r7, #20
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f820 	bl	80055c6 <_ZN9__gnu_cxx17__normal_iteratorIPsvEppEv>
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	429a      	cmp	r2, r3
 800558c:	d1e0      	bne.n	8005550 <_ZSt14__relocate_a_1IPsN9__gnu_cxx17__normal_iteratorIS0_vEESaIsEET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800558e:	697b      	ldr	r3, [r7, #20]
    }
 8005590:	4618      	mov	r0, r3
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	bd90      	pop	{r4, r7, pc}

08005598 <_ZNK9__gnu_cxx17__normal_iteratorIPsvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <_ZNKSt15__new_allocatorIsE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80055b6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <_ZN9__gnu_cxx17__normal_iteratorIPsvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
	++_M_current;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	601a      	str	r2, [r3, #0]
	return *this;
 80055d8:	687b      	ldr	r3, [r7, #4]
      }
 80055da:	4618      	mov	r0, r3
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <_ZNK9__gnu_cxx17__normal_iteratorIPsvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <_ZSt19__relocate_object_aIssSaIsEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 800560a:	68b8      	ldr	r0, [r7, #8]
 800560c:	f000 f812 	bl	8005634 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>
 8005610:	4603      	mov	r3, r0
 8005612:	461a      	mov	r2, r3
 8005614:	68f9      	ldr	r1, [r7, #12]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f817 	bl	800564a <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 800561c:	68b8      	ldr	r0, [r7, #8]
 800561e:	f7ff ff40 	bl	80054a2 <_ZSt11__addressofIsEPT_RS0_>
 8005622:	4603      	mov	r3, r0
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fec6 	bl	80053b8 <_ZNSt16allocator_traitsISaIsEE7destroyIsEEvRS0_PT_>
    }
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <_ZSt4moveIRsEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <_ZNSt16allocator_traitsISaIsEE9constructIsJsEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800564a:	b580      	push	{r7, lr}
 800564c:	b084      	sub	sp, #16
 800564e:	af00      	add	r7, sp, #0
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f809 	bl	800566e <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 800565c:	4603      	mov	r3, r0
 800565e:	4619      	mov	r1, r3
 8005660:	68b8      	ldr	r0, [r7, #8]
 8005662:	f000 f80f 	bl	8005684 <_ZSt12construct_atIsJsEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 8005666:	bf00      	nop
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <_ZSt12construct_atIsJsEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8005684:	b590      	push	{r4, r7, lr}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4619      	mov	r1, r3
 8005692:	2002      	movs	r0, #2
 8005694:	f7fd ff2a 	bl	80034ec <_ZnwjPv>
 8005698:	4604      	mov	r4, r0
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f7ff ffe7 	bl	800566e <_ZSt7forwardIsEOT_RNSt16remove_referenceIS0_E4typeE>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056a6:	8023      	strh	r3, [r4, #0]
 80056a8:	4623      	mov	r3, r4
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}

080056b2 <_ZN16US100_UltrasonicC1EP20__UART_HandleTypeDefRPvS3_>:
#include "Utility/lock_guard.hpp"
#include "Drivers/usb.hpp"
#include <cstdio>


US100_Ultrasonic::US100_Ultrasonic(UART_HandleTypeDef* uart_handle, osMutexId_t& uart_mutex, osMutexId_t& data_mutex)
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
 80056be:	603b      	str	r3, [r7, #0]
	: uart_handle(uart_handle),
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	601a      	str	r2, [r3, #0]
	  uart_mutex(uart_mutex),
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	605a      	str	r2, [r3, #4]
	  data_mutex(data_mutex),
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	615a      	str	r2, [r3, #20]
	  distance_filter(4) {}
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3318      	adds	r3, #24
 80056d6:	2104      	movs	r1, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f8b1 	bl	8005840 <_ZN19MovingAverageFilterIfEC1Ej>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <_ZN16US100_Ultrasonic23start_distance_transferEv>:

void US100_Ultrasonic::start_distance_transfer()
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
	uint8_t tx_buffer[1] = { 0x55 };	// Request distance
 80056f0:	2355      	movs	r3, #85	@ 0x55
 80056f2:	733b      	strb	r3, [r7, #12]
	np::lock_guard lock(uart_mutex);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fb fc84 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	HAL_UART_Receive_DMA(uart_handle, rx_buffer_DMA, 2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6818      	ldr	r0, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	3308      	adds	r3, #8
 800570c:	2202      	movs	r2, #2
 800570e:	4619      	mov	r1, r3
 8005710:	f009 faf2 	bl	800ecf8 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(uart_handle, tx_buffer, 1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f107 010c 	add.w	r1, r7, #12
 800571c:	2201      	movs	r2, #1
 800571e:	4618      	mov	r0, r3
 8005720:	f009 fa6a 	bl	800ebf8 <HAL_UART_Transmit_DMA>
}
 8005724:	f107 0308 	add.w	r3, r7, #8
 8005728:	4618      	mov	r0, r3
 800572a:	f7fb fc84 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_ZN16US100_Ultrasonic24finish_distance_transferEv>:

void US100_Ultrasonic::finish_distance_transfer()
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	uint16_t distance_mm = (rx_buffer_DMA[0] << 8) | rx_buffer_DMA[1];
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	7a1b      	ldrb	r3, [r3, #8]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	b21a      	sxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7a5b      	ldrb	r3, [r3, #9]
 8005748:	b21b      	sxth	r3, r3
 800574a:	4313      	orrs	r3, r2
 800574c:	b21b      	sxth	r3, r3
 800574e:	81fb      	strh	r3, [r7, #14]

	np::lock_guard lock(data_mutex);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	f107 0308 	add.w	r3, r7, #8
 8005758:	4611      	mov	r1, r2
 800575a:	4618      	mov	r0, r3
 800575c:	f7fb fc56 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	distance = distance_filter.update(distance_mm / 1000.0f);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3318      	adds	r3, #24
 8005764:	89fa      	ldrh	r2, [r7, #14]
 8005766:	ee07 2a90 	vmov	s15, r2
 800576a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800576e:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80057d0 <_ZN16US100_Ultrasonic24finish_distance_transferEv+0x9c>
 8005772:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005776:	eeb0 0a47 	vmov.f32	s0, s14
 800577a:	4618      	mov	r0, r3
 800577c:	f000 f88b 	bl	8005896 <_ZN19MovingAverageFilterIfE6updateEf>
 8005780:	eef0 7a40 	vmov.f32	s15, s0
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	edc3 7a03 	vstr	s15, [r3, #12]
	if (distance > MAX_DISTANCE_M)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005790:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8005794:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579c:	dd03      	ble.n	80057a6 <_ZN16US100_Ultrasonic24finish_distance_transferEv+0x72>
	{
		distance = MAX_DISTANCE_M;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a0c      	ldr	r2, [pc, #48]	@ (80057d4 <_ZN16US100_Ultrasonic24finish_distance_transferEv+0xa0>)
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e00b      	b.n	80057be <_ZN16US100_Ultrasonic24finish_distance_transferEv+0x8a>
	}
	else if (distance < 0)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80057ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b4:	d503      	bpl.n	80057be <_ZN16US100_Ultrasonic24finish_distance_transferEv+0x8a>
	{
		distance = 0;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f04f 0200 	mov.w	r2, #0
 80057bc:	60da      	str	r2, [r3, #12]
	}
}
 80057be:	f107 0308 	add.w	r3, r7, #8
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fb fc37 	bl	8001036 <_ZN2np10lock_guardD1Ev>
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	447a0000 	.word	0x447a0000
 80057d4:	40900000 	.word	0x40900000

080057d8 <_ZN16US100_Ultrasonic12get_distanceEv>:
	}
	USB_Log(string, SENSOR);
}

float US100_Ultrasonic::get_distance()
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	np::lock_guard lock(data_mutex);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695a      	ldr	r2, [r3, #20]
 80057e4:	f107 030c 	add.w	r3, r7, #12
 80057e8:	4611      	mov	r1, r2
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fb fc0e 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	return distance;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68dc      	ldr	r4, [r3, #12]
}
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fb fc1c 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	return distance;
 80057fe:	ee07 4a90 	vmov	s15, r4
}
 8005802:	eeb0 0a67 	vmov.f32	s0, s15
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bd90      	pop	{r4, r7, pc}

0800580c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>:
      _Vector_base() = default;
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 f8b2 	bl	8005980 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <_ZNSt6vectorIfSaIfEEC1Ev>:
      vector() = default;
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff ffeb 	bl	800580c <_ZNSt12_Vector_baseIfSaIfEEC1Ev>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZN19MovingAverageFilterIfEC1Ej>:
MovingAverageFilter<T>::MovingAverageFilter(unsigned max_size)
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
	  index(0)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	6053      	str	r3, [r2, #4]
 8005854:	6093      	str	r3, [r2, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ffe4 	bl	8005826 <_ZNSt6vectorIfSaIfEEC1Ev>
	: MAX_SIZE(max_size),
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	60da      	str	r2, [r3, #12]
	  index(0)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	611a      	str	r2, [r3, #16]
	buffer.reserve(max_size);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f8a6 	bl	80059c0 <_ZNSt6vectorIfSaIfEE7reserveEj>
}
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}

0800587e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr

08005896 <_ZN19MovingAverageFilterIfE6updateEf>:
T MovingAverageFilter<T>::update(T input)
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b089      	sub	sp, #36	@ 0x24
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
 800589e:	ed87 0a00 	vstr	s0, [r7]
	if (buffer.size() < MAX_SIZE)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f87b 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 80058aa:	4602      	mov	r2, r0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	bf34      	ite	cc
 80058b4:	2301      	movcc	r3, #1
 80058b6:	2300      	movcs	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <_ZN19MovingAverageFilterIfE6updateEf+0x36>
		buffer.push_back(input);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	463a      	mov	r2, r7
 80058c2:	4611      	mov	r1, r2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 f8e0 	bl	8005a8a <_ZNSt6vectorIfSaIfEE9push_backERKf>
 80058ca:	e014      	b.n	80058f6 <_ZN19MovingAverageFilterIfE6updateEf+0x60>
		buffer.at(index++) = input;
 80058cc:	683c      	ldr	r4, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	1c59      	adds	r1, r3, #1
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	6111      	str	r1, [r2, #16]
 80058da:	4619      	mov	r1, r3
 80058dc:	f000 f8fa 	bl	8005ad4 <_ZNSt6vectorIfSaIfEE2atEj>
 80058e0:	4603      	mov	r3, r0
 80058e2:	601c      	str	r4, [r3, #0]
		if (index >= MAX_SIZE) index = 0;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d302      	bcc.n	80058f6 <_ZN19MovingAverageFilterIfE6updateEf+0x60>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]
	T sum = 0;
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	61fb      	str	r3, [r7, #28]
	for (const T& value : buffer)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	69b8      	ldr	r0, [r7, #24]
 8005902:	f000 f8f9 	bl	8005af8 <_ZNSt6vectorIfSaIfEE5beginEv>
 8005906:	4603      	mov	r3, r0
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	69b8      	ldr	r0, [r7, #24]
 800590c:	f000 f904 	bl	8005b18 <_ZNSt6vectorIfSaIfEE3endEv>
 8005910:	4603      	mov	r3, r0
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e013      	b.n	800593e <_ZN19MovingAverageFilterIfE6updateEf+0xa8>
 8005916:	f107 0310 	add.w	r3, r7, #16
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff ffaf 	bl	800587e <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEdeEv>
 8005920:	6178      	str	r0, [r7, #20]
		sum += value;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	edd3 7a00 	vldr	s15, [r3]
 8005928:	ed97 7a07 	vldr	s14, [r7, #28]
 800592c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005930:	edc7 7a07 	vstr	s15, [r7, #28]
	for (const T& value : buffer)
 8005934:	f107 0310 	add.w	r3, r7, #16
 8005938:	4618      	mov	r0, r3
 800593a:	f000 f916 	bl	8005b6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>
 800593e:	f107 020c 	add.w	r2, r7, #12
 8005942:	f107 0310 	add.w	r3, r7, #16
 8005946:	4611      	mov	r1, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f000 f8f6 	bl	8005b3a <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 800594e:	4603      	mov	r3, r0
 8005950:	f083 0301 	eor.w	r3, r3, #1
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1dd      	bne.n	8005916 <_ZN19MovingAverageFilterIfE6updateEf+0x80>
	return sum / buffer.size();
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f81f 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005962:	ee07 0a90 	vmov	s15, r0
 8005966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596a:	ed97 7a07 	vldr	s14, [r7, #28]
 800596e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005972:	eef0 7a66 	vmov.f32	s15, s13
}
 8005976:	eeb0 0a67 	vmov.f32	s0, s15
 800597a:	3724      	adds	r7, #36	@ 0x24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd90      	pop	{r4, r7, pc}

08005980 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8fe 	bl	8005b8a <_ZNSaIfEC1Ev>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f906 	bl	8005ba2 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>
	{ }
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	3708      	adds	r7, #8
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	109b      	asrs	r3, r3, #2
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <_ZNSt6vectorIfSaIfEE7reserveEj>:
    vector<_Tp, _Alloc>::
 80059c0:	b5b0      	push	{r4, r5, r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f910 	bl	8005bf0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 80059d0:	4602      	mov	r2, r0
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4293      	cmp	r3, r2
 80059d6:	bf8c      	ite	hi
 80059d8:	2301      	movhi	r3, #1
 80059da:	2300      	movls	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <_ZNSt6vectorIfSaIfEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 80059e2:	4823      	ldr	r0, [pc, #140]	@ (8005a70 <_ZNSt6vectorIfSaIfEE7reserveEj+0xb0>)
 80059e4:	f01c f937 	bl	8021c56 <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f912 	bl	8005c12 <_ZNKSt6vectorIfSaIfEE8capacityEv>
 80059ee:	4602      	mov	r2, r0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	bf8c      	ite	hi
 80059f6:	2301      	movhi	r3, #1
 80059f8:	2300      	movls	r3, #0
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d033      	beq.n	8005a68 <_ZNSt6vectorIfSaIfEE7reserveEj+0xa8>
	  const size_type __old_size = size();
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ffcd 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005a06:	60f8      	str	r0, [r7, #12]
	      __tmp = this->_M_allocate(__n);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f910 	bl	8005c32 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8005a12:	60b8      	str	r0, [r7, #8]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681c      	ldr	r4, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f828 	bl	8005a74 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005a24:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005a26:	68ba      	ldr	r2, [r7, #8]
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f915 	bl	8005c5a <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
	  _M_deallocate(this->_M_impl._M_start,
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	109b      	asrs	r3, r3, #2
	  _M_deallocate(this->_M_impl._M_start,
 8005a42:	461a      	mov	r2, r3
 8005a44:	f000 f8c1 	bl	8005bca <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
	  this->_M_impl._M_start = __tmp;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	441a      	add	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
    }
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a70:	08027454 	.word	0x08027454

08005a74 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <_ZNSt6vectorIfSaIfEE9push_backERKf>:
      push_back(const value_type& __x)
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d00c      	beq.n	8005aba <_ZNSt6vectorIfSaIfEE9push_backERKf+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	f000 f8e8 	bl	8005c7e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	1d1a      	adds	r2, r3, #4
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	605a      	str	r2, [r3, #4]
      }
 8005ab8:	e008      	b.n	8005acc <_ZNSt6vectorIfSaIfEE9push_backERKf+0x42>
	  _M_realloc_insert(end(), __x);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f82c 	bl	8005b18 <_ZNSt6vectorIfSaIfEE3endEv>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f948 	bl	8005d5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>
      }
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <_ZNSt6vectorIfSaIfEE2atEj>:
      at(size_type __n)
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 f9b7 	bl	8005e54 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>
	return (*this)[__n];
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9d3 	bl	8005e94 <_ZNSt6vectorIfSaIfEEixEj>
 8005aee:	4603      	mov	r3, r0
      }
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <_ZNSt6vectorIfSaIfEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	f107 030c 	add.w	r3, r7, #12
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 f9d3 	bl	8005eb4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <_ZNSt6vectorIfSaIfEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	f107 030c 	add.w	r3, r7, #12
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f9c2 	bl	8005eb4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <_ZN9__gnu_cxxeqIPfSt6vectorIfSaIfEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005b3a:	b590      	push	{r4, r7, lr}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f9c5 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	681c      	ldr	r4, [r3, #0]
 8005b4e:	6838      	ldr	r0, [r7, #0]
 8005b50:	f000 f9c0 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005b54:	4603      	mov	r3, r0
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	429c      	cmp	r4, r3
 8005b5a:	bf0c      	ite	eq
 8005b5c:	2301      	moveq	r3, #1
 8005b5e:	2300      	movne	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	4618      	mov	r0, r3
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd90      	pop	{r4, r7, pc}

08005b6a <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	601a      	str	r2, [r3, #0]
	return *this;
 8005b7c:	687b      	ldr	r3, [r7, #4]
      }
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <_ZNSaIfEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f9a9 	bl	8005eea <_ZNSt15__new_allocatorIfEC1Ev>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <_ZNSt12_Vector_baseIfSaIfEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	609a      	str	r2, [r3, #8]
	{ }
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>:
      _M_deallocate(pointer __p, size_t __n)
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	60f8      	str	r0, [r7, #12]
 8005bd2:	60b9      	str	r1, [r7, #8]
 8005bd4:	607a      	str	r2, [r7, #4]
	if (__p)
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f98c 	bl	8005f00 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>
      }
 8005be8:	bf00      	nop
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f9c5 	bl	8005f8a <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005c00:	4603      	mov	r3, r0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f9a7 	bl	8005f56 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <_ZNKSt6vectorIfSaIfEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	109b      	asrs	r3, r3, #2
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr

08005c32 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d006      	beq.n	8005c50 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x1e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f9aa 	bl	8005fa0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	e000      	b.n	8005c52 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj+0x20>
 8005c50:	2300      	movs	r3, #0
      }
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
 8005c62:	60b9      	str	r1, [r7, #8]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f9c7 	bl	8006002 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>
 8005c74:	4603      	mov	r3, r0
      }
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	60f8      	str	r0, [r7, #12]
 8005c86:	60b9      	str	r1, [r7, #8]
 8005c88:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9d6 	bl	800603c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8005c90:	4603      	mov	r3, r0
 8005c92:	4619      	mov	r1, r3
 8005c94:	68b8      	ldr	r0, [r7, #8]
 8005c96:	f000 f9dc 	bl	8006052 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ca2:	b590      	push	{r4, r7, lr}
 8005ca4:	b087      	sub	sp, #28
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	60f8      	str	r0, [r7, #12]
 8005caa:	60b9      	str	r1, [r7, #8]
 8005cac:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff ff9e 	bl	8005bf0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f7ff fe72 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	1ae2      	subs	r2, r4, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	bf34      	ite	cc
 8005cc6:	2301      	movcc	r3, #1
 8005cc8:	2300      	movcs	r3, #0
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f01b ffc0 	bl	8021c56 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff fe62 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005cdc:	4604      	mov	r4, r0
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fe5e 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	f107 0310 	add.w	r3, r7, #16
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f95d 	bl	8004fb2 <_ZSt3maxIjERKT_S2_S2_>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4423      	add	r3, r4
 8005cfe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f7ff fe4d 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005d06:	4602      	mov	r2, r0
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d306      	bcc.n	8005d1c <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x7a>
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f7ff ff6e 	bl	8005bf0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005d14:	4602      	mov	r2, r0
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d904      	bls.n	8005d26 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x84>
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff67 	bl	8005bf0 <_ZNKSt6vectorIfSaIfEE8max_sizeEv>
 8005d22:	4603      	mov	r3, r0
 8005d24:	e000      	b.n	8005d28 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc+0x86>
 8005d26:	697b      	ldr	r3, [r7, #20]
      }
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd90      	pop	{r4, r7, pc}

08005d30 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005d30:	b590      	push	{r4, r7, lr}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8ca 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005d40:	4603      	mov	r3, r0
 8005d42:	681c      	ldr	r4, [r3, #0]
 8005d44:	6838      	ldr	r0, [r7, #0]
 8005d46:	f000 f8c5 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	1ae3      	subs	r3, r4, r3
 8005d50:	109b      	asrs	r3, r3, #2
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}
	...

08005d5c <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005d5c:	b5b0      	push	{r4, r5, r7, lr}
 8005d5e:	b08c      	sub	sp, #48	@ 0x30
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005d68:	4a39      	ldr	r2, [pc, #228]	@ (8005e50 <_ZNSt6vectorIfSaIfEE17_M_realloc_insertIJRKfEEEvN9__gnu_cxx17__normal_iteratorIPfS1_EEDpOT_+0xf4>)
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f7ff ff98 	bl	8005ca2 <_ZNKSt6vectorIfSaIfEE12_M_check_lenEjPKc>
 8005d72:	62f8      	str	r0, [r7, #44]	@ 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
      const size_type __elems_before = __position - begin();
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7ff feb9 	bl	8005af8 <_ZNSt6vectorIfSaIfEE5beginEv>
 8005d86:	4603      	mov	r3, r0
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	f107 0214 	add.w	r2, r7, #20
 8005d8e:	f107 0308 	add.w	r3, r7, #8
 8005d92:	4611      	mov	r1, r2
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff ffcb 	bl	8005d30 <_ZN9__gnu_cxxmiIPfSt6vectorIfSaIfEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ff45 	bl	8005c32 <_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEj>
 8005da8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005dae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005db0:	6a3b      	ldr	r3, [r7, #32]
 8005db2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	18d5      	adds	r5, r2, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f93f 	bl	800603c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f7ff ff5a 	bl	8005c7e <_ZNSt16allocator_traitsISaIfEE9constructIfJRKfEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005dce:	f107 0308 	add.w	r3, r7, #8
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 f87e 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f7ff fe48 	bl	8005a74 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005de4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	4621      	mov	r1, r4
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f7ff ff35 	bl	8005c5a <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8005df0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	3304      	adds	r3, #4
 8005df6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005df8:	f107 0308 	add.w	r3, r7, #8
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 f869 	bl	8005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>
 8005e02:	4603      	mov	r3, r0
 8005e04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fe33 	bl	8005a74 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8005e0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff ff20 	bl	8005c5a <_ZNSt6vectorIfSaIfEE11_S_relocateEPfS2_S2_RS0_>
 8005e1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005e1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8005e28:	461a      	mov	r2, r3
 8005e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2c:	f7ff fecd 	bl	8005bca <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      this->_M_impl._M_start = __new_start;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	441a      	add	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	609a      	str	r2, [r3, #8]
    }
 8005e48:	bf00      	nop
 8005e4a:	3730      	adds	r7, #48	@ 0x30
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e50:	08027464 	.word	0x08027464

08005e54 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fd9e 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005e64:	4602      	mov	r2, r0
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bf2c      	ite	cs
 8005e6c:	2301      	movcs	r3, #1
 8005e6e:	2300      	movcc	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d008      	beq.n	8005e88 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fd92 	bl	80059a0 <_ZNKSt6vectorIfSaIfEE4sizeEv>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4803      	ldr	r0, [pc, #12]	@ (8005e90 <_ZNKSt6vectorIfSaIfEE14_M_range_checkEj+0x3c>)
 8005e84:	f01b feea 	bl	8021c5c <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	08027480 	.word	0x08027480

08005e94 <_ZNSt6vectorIfSaIfEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
      }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <_ZN9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <_ZNK9__gnu_cxx17__normal_iteratorIPfSt6vectorIfSaIfEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <_ZNSt15__new_allocatorIfEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005eea:	b480      	push	{r7}
 8005eec:	b083      	sub	sp, #12
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b088      	sub	sp, #32
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	617b      	str	r3, [r7, #20]
	if (std::__is_constant_evaluated())
 8005f18:	f7fd fad8 	bl	80034cc <_ZSt23__is_constant_evaluatedv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x2a>
	    ::operator delete(__p);
 8005f22:	69b8      	ldr	r0, [r7, #24]
 8005f24:	f01b fe7c 	bl	8021c20 <_ZdlPv>
	    return;
 8005f28:	e005      	b.n	8005f36 <_ZNSt16allocator_traitsISaIfEE10deallocateERS0_Pfj+0x36>
	__allocator_base<_Tp>::deallocate(__p, __n);
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	69f8      	ldr	r0, [r7, #28]
 8005f30:	f000 f91b 	bl	800616a <_ZNSt15__new_allocatorIfE10deallocateEPfj>
      { __a.deallocate(__p, __n); }
 8005f34:	bf00      	nop
 8005f36:	bf00      	nop
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005f46:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
      }
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <_ZNSt6vectorIfSaIfEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005f5e:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8005f62:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff ffea 	bl	8005f3e <_ZNSt16allocator_traitsISaIfEE8max_sizeERKS0_>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005f6e:	f107 0208 	add.w	r2, r7, #8
 8005f72:	f107 030c 	add.w	r3, r7, #12
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fa29 	bl	80053d0 <_ZSt3minIjERKT_S2_S2_>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	681b      	ldr	r3, [r3, #0]
      }
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <_ZNKSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	60bb      	str	r3, [r7, #8]
	if (std::__is_constant_evaluated())
 8005fb2:	f7fd fa8b 	bl	80034cc <_ZSt23__is_constant_evaluatedv>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d016      	beq.n	8005fea <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x4a>
	    if (__builtin_mul_overflow(__n, sizeof(_Tp), &__n))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	0099      	lsls	r1, r3, #2
 8005fc2:	0f9b      	lsrs	r3, r3, #30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d000      	beq.n	8005fca <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x2a>
 8005fc8:	2201      	movs	r2, #1
 8005fca:	460b      	mov	r3, r1
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x3e>
	      std::__throw_bad_array_new_length();
 8005fda:	f01b fe39 	bl	8021c50 <_ZSt28__throw_bad_array_new_lengthv>
	    return static_cast<_Tp*>(::operator new(__n));
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f01b fe21 	bl	8021c28 <_Znwj>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	e007      	b.n	8005ffa <_ZNSt16allocator_traitsISaIfEE8allocateERS0_j+0x5a>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	4619      	mov	r1, r3
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 f8c9 	bl	8006188 <_ZNSt15__new_allocatorIfE8allocateEjPKv>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	bf00      	nop
      { return __a.allocate(__n); }
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <_ZSt12__relocate_aIPfS0_SaIfEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006002:	b5b0      	push	{r4, r5, r7, lr}
 8006004:	b084      	sub	sp, #16
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
      return std::__relocate_a_1(std::__niter_base(__first),
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 f840 	bl	8006096 <_ZSt12__niter_baseIPfET_S1_>
 8006016:	4604      	mov	r4, r0
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f83c 	bl	8006096 <_ZSt12__niter_baseIPfET_S1_>
 800601e:	4605      	mov	r5, r0
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f838 	bl	8006096 <_ZSt12__niter_baseIPfET_S1_>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	4629      	mov	r1, r5
 800602c:	4620      	mov	r0, r4
 800602e:	f000 f84d 	bl	80060cc <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006032:	4603      	mov	r3, r0
    }
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bdb0      	pop	{r4, r5, r7, pc}

0800603c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4618      	mov	r0, r3
 8006048:	370c      	adds	r7, #12
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <_ZSt12construct_atIfJRKfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006052:	b590      	push	{r4, r7, lr}
 8006054:	b083      	sub	sp, #12
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4619      	mov	r1, r3
 8006060:	2004      	movs	r0, #4
 8006062:	f7fd fa43 	bl	80034ec <_ZnwjPv>
 8006066:	4604      	mov	r4, r0
 8006068:	6838      	ldr	r0, [r7, #0]
 800606a:	f7ff ffe7 	bl	800603c <_ZSt7forwardIRKfEOT_RNSt16remove_referenceIS2_E4typeE>
 800606e:	4603      	mov	r3, r0
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	4623      	mov	r3, r4
 8006076:	4618      	mov	r0, r3
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	bd90      	pop	{r4, r7, pc}

0800607e <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8006088:	6838      	ldr	r0, [r7, #0]
 800608a:	f000 f864 	bl	8006156 <_ZSt10destroy_atIfEvPT_>
	}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <_ZSt12__niter_baseIPfET_S1_>:
    __niter_base(_Iterator __it)
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	109b      	asrs	r3, r3, #2
 80060e2:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	dd22      	ble.n	8006130 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x64>
	  if (std::is_constant_evaluated())
 80060ea:	f7fd f9f7 	bl	80034dc <_ZSt21is_constant_evaluatedv>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d016      	beq.n	8006122 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x56>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
 80060f4:	1d3a      	adds	r2, r7, #4
 80060f6:	f107 0310 	add.w	r3, r7, #16
 80060fa:	4611      	mov	r1, r2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7ff ffd5 	bl	80060ac <_ZN9__gnu_cxx17__normal_iteratorIPfvEC1ERKS1_>
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f867 	bl	80061dc <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>
 800610e:	4603      	mov	r3, r0
 8006110:	613b      	str	r3, [r7, #16]
	      return __out.base();
 8006112:	f107 0310 	add.w	r3, r7, #16
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f88e 	bl	8006238 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>
 800611c:	4603      	mov	r3, r0
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	e00a      	b.n	8006138 <_ZSt14__relocate_a_1IffENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x6c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	461a      	mov	r2, r3
 800612a:	68f9      	ldr	r1, [r7, #12]
 800612c:	f01e fe3b 	bl	8024da6 <memmove>
      return __result + __count;
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
    }
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <_ZSt11__addressofIfEPT_RS0_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <_ZSt10destroy_atIfEvPT_>:
    destroy_at(_Tp* __location)
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
    }
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <_ZNSt15__new_allocatorIfE10deallocateEPfj>:
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800616a:	b580      	push	{r7, lr}
 800616c:	b084      	sub	sp, #16
 800616e:	af00      	add	r7, sp, #0
 8006170:	60f8      	str	r0, [r7, #12]
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	607a      	str	r2, [r7, #4]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4619      	mov	r1, r3
 800617c:	68b8      	ldr	r0, [r7, #8]
 800617e:	f01b fd51 	bl	8021c24 <_ZdlPvj>
      }
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <_ZNSt15__new_allocatorIfE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f85a 	bl	800624e <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>
 800619a:	4602      	mov	r2, r0
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	4293      	cmp	r3, r2
 80061a0:	bf8c      	ite	hi
 80061a2:	2301      	movhi	r3, #1
 80061a4:	2300      	movls	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bf14      	ite	ne
 80061ac:	2301      	movne	r3, #1
 80061ae:	2300      	moveq	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061bc:	d301      	bcc.n	80061c2 <_ZNSt15__new_allocatorIfE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80061be:	f01b fd47 	bl	8021c50 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80061c2:	f01b fd42 	bl	8021c4a <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f01b fd2c 	bl	8021c28 <_Znwj>
 80061d0:	4603      	mov	r3, r0
 80061d2:	bf00      	nop
      }
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
 80061e8:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 80061ee:	e01a      	b.n	8006226 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x4a>
	std::__relocate_object_a(std::__addressof(*__cur),
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f846 	bl	8006286 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>
 80061fa:	4603      	mov	r3, r0
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff ff9f 	bl	8006140 <_ZSt11__addressofIfEPT_RS0_>
 8006202:	4604      	mov	r4, r0
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff9b 	bl	8006140 <_ZSt11__addressofIfEPT_RS0_>
 800620a:	4603      	mov	r3, r0
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	4619      	mov	r1, r3
 8006210:	4620      	mov	r0, r4
 8006212:	f000 f844 	bl	800629e <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	f107 0314 	add.w	r3, r7, #20
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f820 	bl	8006266 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	d1e0      	bne.n	80061f0 <_ZSt14__relocate_a_1IPfN9__gnu_cxx17__normal_iteratorIS0_vEESaIfEET0_T_S6_S5_RT1_+0x14>
      return __cur;
 800622e:	697b      	ldr	r3, [r7, #20]
    }
 8006230:	4618      	mov	r0, r3
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bd90      	pop	{r4, r7, pc}

08006238 <_ZNK9__gnu_cxx17__normal_iteratorIPfvE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4618      	mov	r0, r3
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <_ZNKSt15__new_allocatorIfE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006256:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
      }
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <_ZN9__gnu_cxx17__normal_iteratorIPfvEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006266:	b480      	push	{r7}
 8006268:	b083      	sub	sp, #12
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
	++_M_current;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	1d1a      	adds	r2, r3, #4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	601a      	str	r2, [r3, #0]
	return *this;
 8006278:	687b      	ldr	r3, [r7, #4]
      }
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <_ZNK9__gnu_cxx17__normal_iteratorIPfvEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <_ZSt19__relocate_object_aIffSaIfEEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f000 f812 	bl	80062d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>
 80062b0:	4603      	mov	r3, r0
 80062b2:	461a      	mov	r2, r3
 80062b4:	68f9      	ldr	r1, [r7, #12]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f817 	bl	80062ea <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80062bc:	68b8      	ldr	r0, [r7, #8]
 80062be:	f7ff ff3f 	bl	8006140 <_ZSt11__addressofIfEPT_RS0_>
 80062c2:	4603      	mov	r3, r0
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7ff fed9 	bl	800607e <_ZNSt16allocator_traitsISaIfEE7destroyIfEEvRS0_PT_>
    }
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <_ZSt4moveIRfEONSt16remove_referenceIT_E4typeEOS2_>:
    move(_Tp&& __t) noexcept
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4618      	mov	r0, r3
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <_ZNSt16allocator_traitsISaIfEE9constructIfJfEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	60b9      	str	r1, [r7, #8]
 80062f4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f809 	bl	800630e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 80062fc:	4603      	mov	r3, r0
 80062fe:	4619      	mov	r1, r3
 8006300:	68b8      	ldr	r0, [r7, #8]
 8006302:	f000 f80f 	bl	8006324 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>
	}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <_ZSt12construct_atIfJfEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS1_DpOS2_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4619      	mov	r1, r3
 8006332:	2004      	movs	r0, #4
 8006334:	f7fd f8da 	bl	80034ec <_ZnwjPv>
 8006338:	4604      	mov	r4, r0
 800633a:	6838      	ldr	r0, [r7, #0]
 800633c:	f7ff ffe7 	bl	800630e <_ZSt7forwardIfEOT_RNSt16remove_referenceIS0_E4typeE>
 8006340:	4603      	mov	r3, r0
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	4623      	mov	r3, r4
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	bd90      	pop	{r4, r7, pc}

08006350 <_Z7USB_LogPKc9Log_Level>:
#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

void USB_Log(const char* string, Log_Level level)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	ed2d 8b02 	vpush	{d8}
 8006356:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800635a:	af04      	add	r7, sp, #16
 800635c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006360:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8006364:	6018      	str	r0, [r3, #0]
 8006366:	460a      	mov	r2, r1
 8006368:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800636c:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8006370:	701a      	strb	r2, [r3, #0]
	char str[512];
	float seconds = (float)osKernelGetTickCount() / (float)osKernelGetTickFreq();
 8006372:	f00d fc9d 	bl	8013cb0 <osKernelGetTickCount>
 8006376:	ee07 0a90 	vmov	s15, r0
 800637a:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800637e:	f00d fcac 	bl	8013cda <osKernelGetTickFreq>
 8006382:	ee07 0a90 	vmov	s15, r0
 8006386:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800638a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800638e:	edc7 7a84 	vstr	s15, [r7, #528]	@ 0x210

	switch (level) {
 8006392:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8006396:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b05      	cmp	r3, #5
 800639e:	f200 808a 	bhi.w	80064b6 <_Z7USB_LogPKc9Log_Level+0x166>
 80063a2:	a201      	add	r2, pc, #4	@ (adr r2, 80063a8 <_Z7USB_LogPKc9Log_Level+0x58>)
 80063a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a8:	080063c1 	.word	0x080063c1
 80063ac:	080063ed 	.word	0x080063ed
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006445 	.word	0x08006445
 80063b8:	08006471 	.word	0x08006471
 80063bc:	0800649d 	.word	0x0800649d
		case INFO:
			snprintf(str, 512, "LOG %.2f INFO %s\n", seconds, string);
 80063c0:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80063c4:	f7fa f8e8 	bl	8000598 <__aeabi_f2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	f107 0010 	add.w	r0, r7, #16
 80063d0:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80063d4:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80063d8:	6809      	ldr	r1, [r1, #0]
 80063da:	9102      	str	r1, [sp, #8]
 80063dc:	e9cd 2300 	strd	r2, r3, [sp]
 80063e0:	4a5d      	ldr	r2, [pc, #372]	@ (8006558 <_Z7USB_LogPKc9Log_Level+0x208>)
 80063e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80063e6:	f01e fc67 	bl	8024cb8 <sniprintf>
			break;
 80063ea:	e07a      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		case CRITICAL:
			snprintf(str, 512, "LOG %.2f CRIT %s\n", seconds, string);
 80063ec:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80063f0:	f7fa f8d2 	bl	8000598 <__aeabi_f2d>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	f107 0010 	add.w	r0, r7, #16
 80063fc:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8006400:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8006404:	6809      	ldr	r1, [r1, #0]
 8006406:	9102      	str	r1, [sp, #8]
 8006408:	e9cd 2300 	strd	r2, r3, [sp]
 800640c:	4a53      	ldr	r2, [pc, #332]	@ (800655c <_Z7USB_LogPKc9Log_Level+0x20c>)
 800640e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006412:	f01e fc51 	bl	8024cb8 <sniprintf>
			break;
 8006416:	e064      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		case ERR:
			snprintf(str, 512, "LOG %.2f ERR %s\n", seconds, string);
 8006418:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 800641c:	f7fa f8bc 	bl	8000598 <__aeabi_f2d>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	f107 0010 	add.w	r0, r7, #16
 8006428:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 800642c:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8006430:	6809      	ldr	r1, [r1, #0]
 8006432:	9102      	str	r1, [sp, #8]
 8006434:	e9cd 2300 	strd	r2, r3, [sp]
 8006438:	4a49      	ldr	r2, [pc, #292]	@ (8006560 <_Z7USB_LogPKc9Log_Level+0x210>)
 800643a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800643e:	f01e fc3b 	bl	8024cb8 <sniprintf>
			break;
 8006442:	e04e      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		case SENSOR:
			snprintf(str, 512, "SENSOR %.2f %s\n", seconds, string);
 8006444:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8006448:	f7fa f8a6 	bl	8000598 <__aeabi_f2d>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	f107 0010 	add.w	r0, r7, #16
 8006454:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8006458:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 800645c:	6809      	ldr	r1, [r1, #0]
 800645e:	9102      	str	r1, [sp, #8]
 8006460:	e9cd 2300 	strd	r2, r3, [sp]
 8006464:	4a3f      	ldr	r2, [pc, #252]	@ (8006564 <_Z7USB_LogPKc9Log_Level+0x214>)
 8006466:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800646a:	f01e fc25 	bl	8024cb8 <sniprintf>
			break;
 800646e:	e038      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		case STATE:
			snprintf(str, 512, "STATE %.2f %s\n", seconds, string);
 8006470:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 8006474:	f7fa f890 	bl	8000598 <__aeabi_f2d>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	f107 0010 	add.w	r0, r7, #16
 8006480:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 8006484:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 8006488:	6809      	ldr	r1, [r1, #0]
 800648a:	9102      	str	r1, [sp, #8]
 800648c:	e9cd 2300 	strd	r2, r3, [sp]
 8006490:	4a35      	ldr	r2, [pc, #212]	@ (8006568 <_Z7USB_LogPKc9Log_Level+0x218>)
 8006492:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006496:	f01e fc0f 	bl	8024cb8 <sniprintf>
			break;
 800649a:	e022      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		case RAW:
			snprintf(str, 512, "%s\n", string);
 800649c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80064a0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 80064a4:	f107 0010 	add.w	r0, r7, #16
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a30      	ldr	r2, [pc, #192]	@ (800656c <_Z7USB_LogPKc9Log_Level+0x21c>)
 80064ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064b0:	f01e fc02 	bl	8024cb8 <sniprintf>
			break;
 80064b4:	e015      	b.n	80064e2 <_Z7USB_LogPKc9Log_Level+0x192>
		default:
			snprintf(str, 512, "LOG %.2f ERR INVALID LOG FORMATTING: %s\n", seconds, string);
 80064b6:	f8d7 0210 	ldr.w	r0, [r7, #528]	@ 0x210
 80064ba:	f7fa f86d 	bl	8000598 <__aeabi_f2d>
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	f107 0010 	add.w	r0, r7, #16
 80064c6:	f507 7106 	add.w	r1, r7, #536	@ 0x218
 80064ca:	f5a1 7105 	sub.w	r1, r1, #532	@ 0x214
 80064ce:	6809      	ldr	r1, [r1, #0]
 80064d0:	9102      	str	r1, [sp, #8]
 80064d2:	e9cd 2300 	strd	r2, r3, [sp]
 80064d6:	4a26      	ldr	r2, [pc, #152]	@ (8006570 <_Z7USB_LogPKc9Log_Level+0x220>)
 80064d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80064dc:	f01e fbec 	bl	8024cb8 <sniprintf>
			break;
 80064e0:	bf00      	nop
	}


	np::lock_guard lock(usbMutexHandle);
 80064e2:	f107 030c 	add.w	r3, r7, #12
 80064e6:	4923      	ldr	r1, [pc, #140]	@ (8006574 <_Z7USB_LogPKc9Log_Level+0x224>)
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fa fd8f 	bl	800100c <_ZN2np10lock_guardC1ERPv>
	uint8_t status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 80064ee:	f107 0310 	add.w	r3, r7, #16
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7f9 fee4 	bl	80002c0 <strlen>
 80064f8:	4603      	mov	r3, r0
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	4611      	mov	r1, r2
 8006502:	4618      	mov	r0, r3
 8006504:	f011 fa76 	bl	80179f4 <CDC_Transmit_FS>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 800650e:	e012      	b.n	8006536 <_Z7USB_LogPKc9Log_Level+0x1e6>
	{
		osDelay(1);
 8006510:	2001      	movs	r0, #1
 8006512:	f00d fd4e 	bl	8013fb2 <osDelay>
		status = CDC_Transmit_FS((uint8_t*)str, strlen(str));
 8006516:	f107 0310 	add.w	r3, r7, #16
 800651a:	4618      	mov	r0, r3
 800651c:	f7f9 fed0 	bl	80002c0 <strlen>
 8006520:	4603      	mov	r3, r0
 8006522:	b29a      	uxth	r2, r3
 8006524:	f107 0310 	add.w	r3, r7, #16
 8006528:	4611      	mov	r1, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f011 fa62 	bl	80179f4 <CDC_Transmit_FS>
 8006530:	4603      	mov	r3, r0
 8006532:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	while (status == USBD_BUSY)
 8006536:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800653a:	2b01      	cmp	r3, #1
 800653c:	d0e8      	beq.n	8006510 <_Z7USB_LogPKc9Log_Level+0x1c0>
	np::lock_guard lock(usbMutexHandle);
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	4618      	mov	r0, r3
 8006544:	f7fa fd77 	bl	8001036 <_ZN2np10lock_guardD1Ev>
	}
}
 8006548:	bf00      	nop
 800654a:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800654e:	46bd      	mov	sp, r7
 8006550:	ecbd 8b02 	vpop	{d8}
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	080274cc 	.word	0x080274cc
 800655c:	080274e0 	.word	0x080274e0
 8006560:	080274f4 	.word	0x080274f4
 8006564:	08027508 	.word	0x08027508
 8006568:	08027518 	.word	0x08027518
 800656c:	08027528 	.word	0x08027528
 8006570:	0802752c 	.word	0x0802752c
 8006574:	200062a8 	.word	0x200062a8

08006578 <__is_constant_evaluated>:
  {
 8006578:	b480      	push	{r7}
 800657a:	af00      	add	r7, sp, #0
    return __builtin_is_constant_evaluated();
 800657c:	2300      	movs	r3, #0
  }
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>:
      operator[](size_type __n) noexcept
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
	return _AT_Type::_S_ref(_M_elems, __n);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6839      	ldr	r1, [r7, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f805 	bl	80065a6 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>
 800659c:	4603      	mov	r3, r0
      }
 800659e:	4618      	mov	r0, r3
 80065a0:	3708      	adds	r7, #8
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <_ZNSt14__array_traitsISt5arrayIfLj3EELj3EE6_S_refERA3_KS1_j>:
      _S_ref(const _Type& __t, std::size_t __n) noexcept
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]
      { return const_cast<_Tp&>(__t[__n]); }
 80065b0:	683a      	ldr	r2, [r7, #0]
 80065b2:	4613      	mov	r3, r2
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	0000      	movs	r0, r0
 80065cc:	0000      	movs	r0, r0
	...

080065d0 <sensor_fusion_thread>:
 *
 * THREADS
 *
 */
void sensor_fusion_thread()
{
 80065d0:	b5b0      	push	{r4, r5, r7, lr}
 80065d2:	ed2d 8b02 	vpush	{d8}
 80065d6:	b08e      	sub	sp, #56	@ 0x38
 80065d8:	af02      	add	r7, sp, #8
	osDelay(400);
 80065da:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80065de:	f00d fce8 	bl	8013fb2 <osDelay>
	USB_Log("--- SENSOR FUSION THREAD STARTING ---", CRITICAL);
 80065e2:	2101      	movs	r1, #1
 80065e4:	4890      	ldr	r0, [pc, #576]	@ (8006828 <sensor_fusion_thread+0x258>)
 80065e6:	f7ff feb3 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80065ea:	2064      	movs	r0, #100	@ 0x64
 80065ec:	f00d fce1 	bl	8013fb2 <osDelay>

	// Initialize state
	memset(&drone_state, 0, sizeof(state));
 80065f0:	2228      	movs	r2, #40	@ 0x28
 80065f2:	2100      	movs	r1, #0
 80065f4:	488d      	ldr	r0, [pc, #564]	@ (800682c <sensor_fusion_thread+0x25c>)
 80065f6:	f01e fbf0 	bl	8024dda <memset>

	// Initialize sensors
	bool imu_init = imu.init();
 80065fa:	488d      	ldr	r0, [pc, #564]	@ (8006830 <sensor_fusion_thread+0x260>)
 80065fc:	f7fa fd92 	bl	8001124 <_ZN6BMI0884initEv>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bool baro_init = barometer.init();
 8006606:	488b      	ldr	r0, [pc, #556]	@ (8006834 <sensor_fusion_thread+0x264>)
 8006608:	f7fb fefe 	bl	8002408 <_ZN6BMP3884initEv>
 800660c:	4603      	mov	r3, r0
 800660e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	bool mag_init = magnetometer.init();
 8006612:	4889      	ldr	r0, [pc, #548]	@ (8006838 <sensor_fusion_thread+0x268>)
 8006614:	f7fc fcea 	bl	8002fec <_ZN7LIS3MDL4initEv>
 8006618:	4603      	mov	r3, r0
 800661a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	bool flow_init = optical_flow.init();
 800661e:	4887      	ldr	r0, [pc, #540]	@ (800683c <sensor_fusion_thread+0x26c>)
 8006620:	f7fc ffa4 	bl	800356c <_ZN7PMW39014initEv>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	if (imu_init && baro_init && mag_init && flow_init)
 800662a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 86a4 	beq.w	800737c <sensor_fusion_thread+0xdac>
 8006634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 869f 	beq.w	800737c <sensor_fusion_thread+0xdac>
 800663e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006642:	2b00      	cmp	r3, #0
 8006644:	f000 869a 	beq.w	800737c <sensor_fusion_thread+0xdac>
 8006648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 8695 	beq.w	800737c <sensor_fusion_thread+0xdac>
	{
		USB_Log("All sensors initialized successfully.", CRITICAL);
 8006652:	2101      	movs	r1, #1
 8006654:	487a      	ldr	r0, [pc, #488]	@ (8006840 <sensor_fusion_thread+0x270>)
 8006656:	f7ff fe7b 	bl	8006350 <_Z7USB_LogPKc9Log_Level>

		// Initialize MotionFX Sensor Fusion library
		initialize_sensor_fusion();
 800665a:	f000 ff4f 	bl	80074fc <initialize_sensor_fusion>

		// Setup magnetometer calibration if necessary
		if (calibrate_mag)
 800665e:	4b79      	ldr	r3, [pc, #484]	@ (8006844 <sensor_fusion_thread+0x274>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <sensor_fusion_thread+0xac>
		{
			USB_Log("Please, slowly rotate the device in a figure 8 pattern in space to calibrate the magnetometer...", INFO);
 8006666:	2100      	movs	r1, #0
 8006668:	4877      	ldr	r0, [pc, #476]	@ (8006848 <sensor_fusion_thread+0x278>)
 800666a:	f7ff fe71 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
			MotionFX_MagCal_init(mag_calib_period_ms, 1);
 800666e:	4b77      	ldr	r3, [pc, #476]	@ (800684c <sensor_fusion_thread+0x27c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2101      	movs	r1, #1
 8006674:	4618      	mov	r0, r3
 8006676:	f01a ffcb 	bl	8021610 <MotionFX_MagCal_init>
 800667a:	e009      	b.n	8006690 <sensor_fusion_thread+0xc0>
		}
		else
		{
			mag_calibrated = true;
 800667c:	4b74      	ldr	r3, [pc, #464]	@ (8006850 <sensor_fusion_thread+0x280>)
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
			USB_Log("Starting sensor fusion.", CRITICAL);
 8006682:	2101      	movs	r1, #1
 8006684:	4873      	ldr	r0, [pc, #460]	@ (8006854 <sensor_fusion_thread+0x284>)
 8006686:	f7ff fe63 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
			osDelay(10);
 800668a:	200a      	movs	r0, #10
 800668c:	f00d fc91 	bl	8013fb2 <osDelay>
		}

		// Initialize last_wake_time variable with the current time
		uint32_t last_wake_time = osKernelGetTickCount();
 8006690:	f00d fb0e 	bl	8013cb0 <osKernelGetTickCount>
 8006694:	62f8      	str	r0, [r7, #44]	@ 0x2c

		// Counter to reset integrated XY velocity drift (resets to absolute optical flow value)
		uint32_t reset_xy_counter = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	62bb      	str	r3, [r7, #40]	@ 0x28
		uint32_t reset_xy_period_multiple = FUSION_FREQ / XY_VEL_RESET_FREQ;
 800669a:	23a6      	movs	r3, #166	@ 0xa6
 800669c:	623b      	str	r3, [r7, #32]

		while (1)
		{
			if (!mag_calibrated)
 800669e:	4b6c      	ldr	r3, [pc, #432]	@ (8006850 <sensor_fusion_thread+0x280>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f083 0301 	eor.w	r3, r3, #1
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80e5 	beq.w	8006878 <sensor_fusion_thread+0x2a8>
			{
				/*
				 * Perform magnetometer calibration
				 */
				last_wake_time += mag_calib_period_ms;
 80066ae:	4b67      	ldr	r3, [pc, #412]	@ (800684c <sensor_fusion_thread+0x27c>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066b4:	4413      	add	r3, r2
 80066b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				osDelayUntil(last_wake_time);
 80066b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066ba:	f00d fc95 	bl	8013fe8 <osDelayUntil>

				// Get magnetometer data
				mag_intensity_BODY = magnetometer.get_axis_intensities();
 80066be:	485e      	ldr	r0, [pc, #376]	@ (8006838 <sensor_fusion_thread+0x268>)
 80066c0:	f7fc fe54 	bl	800336c <_ZN7LIS3MDL20get_axis_intensitiesEv>
 80066c4:	eef0 6a40 	vmov.f32	s13, s0
 80066c8:	eeb0 7a60 	vmov.f32	s14, s1
 80066cc:	eef0 7a41 	vmov.f32	s15, s2
 80066d0:	4b61      	ldr	r3, [pc, #388]	@ (8006858 <sensor_fusion_thread+0x288>)
 80066d2:	edc3 6a00 	vstr	s13, [r3]
 80066d6:	ed83 7a01 	vstr	s14, [r3, #4]
 80066da:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_data_in.mag[0] = mag_intensity_BODY[0] * GAUSS_TO_uTESLA / 50;		// in uT/50
 80066de:	2100      	movs	r1, #0
 80066e0:	485d      	ldr	r0, [pc, #372]	@ (8006858 <sensor_fusion_thread+0x288>)
 80066e2:	f7fb fce1 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80066e6:	4603      	mov	r3, r0
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7f9 ff54 	bl	8000598 <__aeabi_f2d>
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	4b59      	ldr	r3, [pc, #356]	@ (800685c <sensor_fusion_thread+0x28c>)
 80066f6:	f7f9 ffa7 	bl	8000648 <__aeabi_dmul>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f04f 0200 	mov.w	r2, #0
 8006706:	4b56      	ldr	r3, [pc, #344]	@ (8006860 <sensor_fusion_thread+0x290>)
 8006708:	f7fa f8c8 	bl	800089c <__aeabi_ddiv>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4610      	mov	r0, r2
 8006712:	4619      	mov	r1, r3
 8006714:	f7fa fa70 	bl	8000bf8 <__aeabi_d2f>
 8006718:	4603      	mov	r3, r0
 800671a:	4a52      	ldr	r2, [pc, #328]	@ (8006864 <sensor_fusion_thread+0x294>)
 800671c:	6013      	str	r3, [r2, #0]
				mag_data_in.mag[1] = mag_intensity_BODY[1] * GAUSS_TO_uTESLA / 50;
 800671e:	2101      	movs	r1, #1
 8006720:	484d      	ldr	r0, [pc, #308]	@ (8006858 <sensor_fusion_thread+0x288>)
 8006722:	f7fb fcc1 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006726:	4603      	mov	r3, r0
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f7f9 ff34 	bl	8000598 <__aeabi_f2d>
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	4b49      	ldr	r3, [pc, #292]	@ (800685c <sensor_fusion_thread+0x28c>)
 8006736:	f7f9 ff87 	bl	8000648 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	4b46      	ldr	r3, [pc, #280]	@ (8006860 <sensor_fusion_thread+0x290>)
 8006748:	f7fa f8a8 	bl	800089c <__aeabi_ddiv>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4610      	mov	r0, r2
 8006752:	4619      	mov	r1, r3
 8006754:	f7fa fa50 	bl	8000bf8 <__aeabi_d2f>
 8006758:	4603      	mov	r3, r0
 800675a:	4a42      	ldr	r2, [pc, #264]	@ (8006864 <sensor_fusion_thread+0x294>)
 800675c:	6053      	str	r3, [r2, #4]
				mag_data_in.mag[2] = mag_intensity_BODY[2] * GAUSS_TO_uTESLA / 50;
 800675e:	2102      	movs	r1, #2
 8006760:	483d      	ldr	r0, [pc, #244]	@ (8006858 <sensor_fusion_thread+0x288>)
 8006762:	f7fb fca1 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006766:	4603      	mov	r3, r0
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f7f9 ff14 	bl	8000598 <__aeabi_f2d>
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	4b39      	ldr	r3, [pc, #228]	@ (800685c <sensor_fusion_thread+0x28c>)
 8006776:	f7f9 ff67 	bl	8000648 <__aeabi_dmul>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4610      	mov	r0, r2
 8006780:	4619      	mov	r1, r3
 8006782:	f04f 0200 	mov.w	r2, #0
 8006786:	4b36      	ldr	r3, [pc, #216]	@ (8006860 <sensor_fusion_thread+0x290>)
 8006788:	f7fa f888 	bl	800089c <__aeabi_ddiv>
 800678c:	4602      	mov	r2, r0
 800678e:	460b      	mov	r3, r1
 8006790:	4610      	mov	r0, r2
 8006792:	4619      	mov	r1, r3
 8006794:	f7fa fa30 	bl	8000bf8 <__aeabi_d2f>
 8006798:	4603      	mov	r3, r0
 800679a:	4a32      	ldr	r2, [pc, #200]	@ (8006864 <sensor_fusion_thread+0x294>)
 800679c:	6093      	str	r3, [r2, #8]

				// Apply timestamp to data
				mag_data_in.time_stamp = mag_calib_timestamp;	// in ms
 800679e:	4b32      	ldr	r3, [pc, #200]	@ (8006868 <sensor_fusion_thread+0x298>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	461a      	mov	r2, r3
 80067a4:	4b2f      	ldr	r3, [pc, #188]	@ (8006864 <sensor_fusion_thread+0x294>)
 80067a6:	60da      	str	r2, [r3, #12]
				mag_calib_timestamp += mag_calib_period_ms;
 80067a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006868 <sensor_fusion_thread+0x298>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b27      	ldr	r3, [pc, #156]	@ (800684c <sensor_fusion_thread+0x27c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4413      	add	r3, r2
 80067b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006868 <sensor_fusion_thread+0x298>)
 80067b4:	6013      	str	r3, [r2, #0]

				// Run calibration
				MotionFX_MagCal_run(&mag_data_in);
 80067b6:	482b      	ldr	r0, [pc, #172]	@ (8006864 <sensor_fusion_thread+0x294>)
 80067b8:	f01a ffba 	bl	8021730 <MotionFX_MagCal_run>
				MotionFX_MagCal_getParams(&mag_data_out);
 80067bc:	482b      	ldr	r0, [pc, #172]	@ (800686c <sensor_fusion_thread+0x29c>)
 80067be:	f01b f9e9 	bl	8021b94 <MotionFX_MagCal_getParams>

				if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80067c2:	4b2a      	ldr	r3, [pc, #168]	@ (800686c <sensor_fusion_thread+0x29c>)
 80067c4:	7b1b      	ldrb	r3, [r3, #12]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	f47f af69 	bne.w	800669e <sensor_fusion_thread+0xce>
				{
					hard_iron[0] = mag_data_out.hi_bias[0];		// in uT/50
 80067cc:	4b27      	ldr	r3, [pc, #156]	@ (800686c <sensor_fusion_thread+0x29c>)
 80067ce:	681c      	ldr	r4, [r3, #0]
 80067d0:	2100      	movs	r1, #0
 80067d2:	4827      	ldr	r0, [pc, #156]	@ (8006870 <sensor_fusion_thread+0x2a0>)
 80067d4:	f7fb fc68 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80067d8:	4603      	mov	r3, r0
 80067da:	601c      	str	r4, [r3, #0]
					hard_iron[1] = mag_data_out.hi_bias[1];
 80067dc:	4b23      	ldr	r3, [pc, #140]	@ (800686c <sensor_fusion_thread+0x29c>)
 80067de:	685c      	ldr	r4, [r3, #4]
 80067e0:	2101      	movs	r1, #1
 80067e2:	4823      	ldr	r0, [pc, #140]	@ (8006870 <sensor_fusion_thread+0x2a0>)
 80067e4:	f7fb fc60 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80067e8:	4603      	mov	r3, r0
 80067ea:	601c      	str	r4, [r3, #0]
					hard_iron[2] = mag_data_out.hi_bias[2];
 80067ec:	4b1f      	ldr	r3, [pc, #124]	@ (800686c <sensor_fusion_thread+0x29c>)
 80067ee:	689c      	ldr	r4, [r3, #8]
 80067f0:	2102      	movs	r1, #2
 80067f2:	481f      	ldr	r0, [pc, #124]	@ (8006870 <sensor_fusion_thread+0x2a0>)
 80067f4:	f7fb fc58 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80067f8:	4603      	mov	r3, r0
 80067fa:	601c      	str	r4, [r3, #0]

					// Disable magnetometer calibration
					mag_calibrated = true;
 80067fc:	4b14      	ldr	r3, [pc, #80]	@ (8006850 <sensor_fusion_thread+0x280>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
					USB_Log("Magnetomer calibration complete.", INFO);
 8006802:	2100      	movs	r1, #0
 8006804:	481b      	ldr	r0, [pc, #108]	@ (8006874 <sensor_fusion_thread+0x2a4>)
 8006806:	f7ff fda3 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
					MotionFX_MagCal_init(mag_calib_period_ms, 0);
 800680a:	4b10      	ldr	r3, [pc, #64]	@ (800684c <sensor_fusion_thread+0x27c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f01a fefd 	bl	8021610 <MotionFX_MagCal_init>

					USB_Log("Starting sensor fusion.", CRITICAL);
 8006816:	2101      	movs	r1, #1
 8006818:	480e      	ldr	r0, [pc, #56]	@ (8006854 <sensor_fusion_thread+0x284>)
 800681a:	f7ff fd99 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
					osDelay(10);
 800681e:	200a      	movs	r0, #10
 8006820:	f00d fbc7 	bl	8013fb2 <osDelay>
 8006824:	e73b      	b.n	800669e <sensor_fusion_thread+0xce>
 8006826:	bf00      	nop
 8006828:	08027558 	.word	0x08027558
 800682c:	200017c4 	.word	0x200017c4
 8006830:	20000be8 	.word	0x20000be8
 8006834:	20000c78 	.word	0x20000c78
 8006838:	20000c44 	.word	0x20000c44
 800683c:	20000cf8 	.word	0x20000cf8
 8006840:	08027580 	.word	0x08027580
 8006844:	20000d74 	.word	0x20000d74
 8006848:	080275a8 	.word	0x080275a8
 800684c:	20000004 	.word	0x20000004
 8006850:	20000d75 	.word	0x20000d75
 8006854:	0802760c 	.word	0x0802760c
 8006858:	20000d58 	.word	0x20000d58
 800685c:	40590000 	.word	0x40590000
 8006860:	40490000 	.word	0x40490000
 8006864:	20001798 	.word	0x20001798
 8006868:	20000d78 	.word	0x20000d78
 800686c:	200017a8 	.word	0x200017a8
 8006870:	20000d7c 	.word	0x20000d7c
 8006874:	08027624 	.word	0x08027624
			else
			{
				/*
				 * Run Sensor Fusion algorithm
				 */
				last_wake_time += fusion_period_ms;
 8006878:	4bcd      	ldr	r3, [pc, #820]	@ (8006bb0 <sensor_fusion_thread+0x5e0>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800687e:	4413      	add	r3, r2
 8006880:	62fb      	str	r3, [r7, #44]	@ 0x2c
				osDelayUntil(last_wake_time);
 8006882:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006884:	f00d fbb0 	bl	8013fe8 <osDelayUntil>
				reset_xy_counter++;
 8006888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688a:	3301      	adds	r3, #1
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28

				// Get accelerometer, gyroscope, and magnetometer data for Orientation Kalman Filter
				linear_acceleration_BODY = imu.get_linear_accelerations();
 800688e:	48c9      	ldr	r0, [pc, #804]	@ (8006bb4 <sensor_fusion_thread+0x5e4>)
 8006890:	f7fb f864 	bl	800195c <_ZN6BMI08824get_linear_accelerationsEv>
 8006894:	eef0 6a40 	vmov.f32	s13, s0
 8006898:	eeb0 7a60 	vmov.f32	s14, s1
 800689c:	eef0 7a41 	vmov.f32	s15, s2
 80068a0:	4bc5      	ldr	r3, [pc, #788]	@ (8006bb8 <sensor_fusion_thread+0x5e8>)
 80068a2:	edc3 6a00 	vstr	s13, [r3]
 80068a6:	ed83 7a01 	vstr	s14, [r3, #4]
 80068aa:	edc3 7a02 	vstr	s15, [r3, #8]
				angular_velocity_BODY = imu.get_angular_velocities();
 80068ae:	48c1      	ldr	r0, [pc, #772]	@ (8006bb4 <sensor_fusion_thread+0x5e4>)
 80068b0:	f7fb f87e 	bl	80019b0 <_ZN6BMI08822get_angular_velocitiesEv>
 80068b4:	eef0 6a40 	vmov.f32	s13, s0
 80068b8:	eeb0 7a60 	vmov.f32	s14, s1
 80068bc:	eef0 7a41 	vmov.f32	s15, s2
 80068c0:	4bbe      	ldr	r3, [pc, #760]	@ (8006bbc <sensor_fusion_thread+0x5ec>)
 80068c2:	edc3 6a00 	vstr	s13, [r3]
 80068c6:	ed83 7a01 	vstr	s14, [r3, #4]
 80068ca:	edc3 7a02 	vstr	s15, [r3, #8]
				mag_intensity_BODY = magnetometer.get_axis_intensities();
 80068ce:	48bc      	ldr	r0, [pc, #752]	@ (8006bc0 <sensor_fusion_thread+0x5f0>)
 80068d0:	f7fc fd4c 	bl	800336c <_ZN7LIS3MDL20get_axis_intensitiesEv>
 80068d4:	eef0 6a40 	vmov.f32	s13, s0
 80068d8:	eeb0 7a60 	vmov.f32	s14, s1
 80068dc:	eef0 7a41 	vmov.f32	s15, s2
 80068e0:	4bb8      	ldr	r3, [pc, #736]	@ (8006bc4 <sensor_fusion_thread+0x5f4>)
 80068e2:	edc3 6a00 	vstr	s13, [r3]
 80068e6:	ed83 7a01 	vstr	s14, [r3, #4]
 80068ea:	edc3 7a02 	vstr	s15, [r3, #8]

				// Compute delta time since last update
				current_time = ulHighFrequencyTimerCounts * COUNTS_TO_SECONDS;
 80068ee:	4bb6      	ldr	r3, [pc, #728]	@ (8006bc8 <sensor_fusion_thread+0x5f8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068fa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006bcc <sensor_fusion_thread+0x5fc>
 80068fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006902:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8006bd0 <sensor_fusion_thread+0x600>
 8006906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800690a:	4bb2      	ldr	r3, [pc, #712]	@ (8006bd4 <sensor_fusion_thread+0x604>)
 800690c:	edc3 7a00 	vstr	s15, [r3]
				dT = current_time - last_time;
 8006910:	4bb0      	ldr	r3, [pc, #704]	@ (8006bd4 <sensor_fusion_thread+0x604>)
 8006912:	ed93 7a00 	vldr	s14, [r3]
 8006916:	4bb0      	ldr	r3, [pc, #704]	@ (8006bd8 <sensor_fusion_thread+0x608>)
 8006918:	edd3 7a00 	vldr	s15, [r3]
 800691c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006920:	4bae      	ldr	r3, [pc, #696]	@ (8006bdc <sensor_fusion_thread+0x60c>)
 8006922:	edc3 7a00 	vstr	s15, [r3]
				last_time = current_time;
 8006926:	4bab      	ldr	r3, [pc, #684]	@ (8006bd4 <sensor_fusion_thread+0x604>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4aab      	ldr	r2, [pc, #684]	@ (8006bd8 <sensor_fusion_thread+0x608>)
 800692c:	6013      	str	r3, [r2, #0]

				// Apply sensor data to MotionFX input struct
				data_in.acc[0] = linear_acceleration_BODY[0] * MS2_TO_G;				// in g
 800692e:	2100      	movs	r1, #0
 8006930:	48a1      	ldr	r0, [pc, #644]	@ (8006bb8 <sensor_fusion_thread+0x5e8>)
 8006932:	f7fb fbb9 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006936:	4603      	mov	r3, r0
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7f9 fe2c 	bl	8000598 <__aeabi_f2d>
 8006940:	a397      	add	r3, pc, #604	@ (adr r3, 8006ba0 <sensor_fusion_thread+0x5d0>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 ffa9 	bl	800089c <__aeabi_ddiv>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4610      	mov	r0, r2
 8006950:	4619      	mov	r1, r3
 8006952:	f7fa f951 	bl	8000bf8 <__aeabi_d2f>
 8006956:	4603      	mov	r3, r0
 8006958:	4aa1      	ldr	r2, [pc, #644]	@ (8006be0 <sensor_fusion_thread+0x610>)
 800695a:	60d3      	str	r3, [r2, #12]
				data_in.acc[1] = linear_acceleration_BODY[1] * MS2_TO_G;
 800695c:	2101      	movs	r1, #1
 800695e:	4896      	ldr	r0, [pc, #600]	@ (8006bb8 <sensor_fusion_thread+0x5e8>)
 8006960:	f7fb fba2 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006964:	4603      	mov	r3, r0
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7f9 fe15 	bl	8000598 <__aeabi_f2d>
 800696e:	a38c      	add	r3, pc, #560	@ (adr r3, 8006ba0 <sensor_fusion_thread+0x5d0>)
 8006970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006974:	f7f9 ff92 	bl	800089c <__aeabi_ddiv>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4610      	mov	r0, r2
 800697e:	4619      	mov	r1, r3
 8006980:	f7fa f93a 	bl	8000bf8 <__aeabi_d2f>
 8006984:	4603      	mov	r3, r0
 8006986:	4a96      	ldr	r2, [pc, #600]	@ (8006be0 <sensor_fusion_thread+0x610>)
 8006988:	6113      	str	r3, [r2, #16]
				data_in.acc[2] = linear_acceleration_BODY[2] * MS2_TO_G;
 800698a:	2102      	movs	r1, #2
 800698c:	488a      	ldr	r0, [pc, #552]	@ (8006bb8 <sensor_fusion_thread+0x5e8>)
 800698e:	f7fb fb8b 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006992:	4603      	mov	r3, r0
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f7f9 fdfe 	bl	8000598 <__aeabi_f2d>
 800699c:	a380      	add	r3, pc, #512	@ (adr r3, 8006ba0 <sensor_fusion_thread+0x5d0>)
 800699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a2:	f7f9 ff7b 	bl	800089c <__aeabi_ddiv>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4610      	mov	r0, r2
 80069ac:	4619      	mov	r1, r3
 80069ae:	f7fa f923 	bl	8000bf8 <__aeabi_d2f>
 80069b2:	4603      	mov	r3, r0
 80069b4:	4a8a      	ldr	r2, [pc, #552]	@ (8006be0 <sensor_fusion_thread+0x610>)
 80069b6:	6153      	str	r3, [r2, #20]
				data_in.gyro[0] = angular_velocity_BODY[0] * RADIANS_TO_DEGREES;		// in dps
 80069b8:	2100      	movs	r1, #0
 80069ba:	4880      	ldr	r0, [pc, #512]	@ (8006bbc <sensor_fusion_thread+0x5ec>)
 80069bc:	f7fb fb74 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80069c0:	4603      	mov	r3, r0
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7f9 fde7 	bl	8000598 <__aeabi_f2d>
 80069ca:	f04f 0200 	mov.w	r2, #0
 80069ce:	4b85      	ldr	r3, [pc, #532]	@ (8006be4 <sensor_fusion_thread+0x614>)
 80069d0:	f7f9 fe3a 	bl	8000648 <__aeabi_dmul>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4610      	mov	r0, r2
 80069da:	4619      	mov	r1, r3
 80069dc:	a372      	add	r3, pc, #456	@ (adr r3, 8006ba8 <sensor_fusion_thread+0x5d8>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 ff5b 	bl	800089c <__aeabi_ddiv>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	f7fa f903 	bl	8000bf8 <__aeabi_d2f>
 80069f2:	4603      	mov	r3, r0
 80069f4:	4a7a      	ldr	r2, [pc, #488]	@ (8006be0 <sensor_fusion_thread+0x610>)
 80069f6:	6193      	str	r3, [r2, #24]
				data_in.gyro[1] = angular_velocity_BODY[1] * RADIANS_TO_DEGREES;
 80069f8:	2101      	movs	r1, #1
 80069fa:	4870      	ldr	r0, [pc, #448]	@ (8006bbc <sensor_fusion_thread+0x5ec>)
 80069fc:	f7fb fb54 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006a00:	4603      	mov	r3, r0
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7f9 fdc7 	bl	8000598 <__aeabi_f2d>
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	4b75      	ldr	r3, [pc, #468]	@ (8006be4 <sensor_fusion_thread+0x614>)
 8006a10:	f7f9 fe1a 	bl	8000648 <__aeabi_dmul>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	a362      	add	r3, pc, #392	@ (adr r3, 8006ba8 <sensor_fusion_thread+0x5d8>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	f7f9 ff3b 	bl	800089c <__aeabi_ddiv>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	f7fa f8e3 	bl	8000bf8 <__aeabi_d2f>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4a6a      	ldr	r2, [pc, #424]	@ (8006be0 <sensor_fusion_thread+0x610>)
 8006a36:	61d3      	str	r3, [r2, #28]
				data_in.gyro[2] = angular_velocity_BODY[2] * RADIANS_TO_DEGREES;
 8006a38:	2102      	movs	r1, #2
 8006a3a:	4860      	ldr	r0, [pc, #384]	@ (8006bbc <sensor_fusion_thread+0x5ec>)
 8006a3c:	f7fb fb34 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006a40:	4603      	mov	r3, r0
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7f9 fda7 	bl	8000598 <__aeabi_f2d>
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	4b65      	ldr	r3, [pc, #404]	@ (8006be4 <sensor_fusion_thread+0x614>)
 8006a50:	f7f9 fdfa 	bl	8000648 <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4610      	mov	r0, r2
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	a352      	add	r3, pc, #328	@ (adr r3, 8006ba8 <sensor_fusion_thread+0x5d8>)
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	f7f9 ff1b 	bl	800089c <__aeabi_ddiv>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f7fa f8c3 	bl	8000bf8 <__aeabi_d2f>
 8006a72:	4603      	mov	r3, r0
 8006a74:	4a5a      	ldr	r2, [pc, #360]	@ (8006be0 <sensor_fusion_thread+0x610>)
 8006a76:	6213      	str	r3, [r2, #32]
				data_in.mag[0] = mag_intensity_BODY[0] * GAUSS_TO_uTESLA / 50 - hard_iron[0];		// in uT/50
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4852      	ldr	r0, [pc, #328]	@ (8006bc4 <sensor_fusion_thread+0x5f4>)
 8006a7c:	f7fb fb14 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006a80:	4603      	mov	r3, r0
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7f9 fd87 	bl	8000598 <__aeabi_f2d>
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	4b56      	ldr	r3, [pc, #344]	@ (8006be8 <sensor_fusion_thread+0x618>)
 8006a90:	f7f9 fdda 	bl	8000648 <__aeabi_dmul>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4610      	mov	r0, r2
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	4b52      	ldr	r3, [pc, #328]	@ (8006bec <sensor_fusion_thread+0x61c>)
 8006aa2:	f7f9 fefb 	bl	800089c <__aeabi_ddiv>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4614      	mov	r4, r2
 8006aac:	461d      	mov	r5, r3
 8006aae:	2100      	movs	r1, #0
 8006ab0:	484f      	ldr	r0, [pc, #316]	@ (8006bf0 <sensor_fusion_thread+0x620>)
 8006ab2:	f7fb faf9 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7f9 fd6c 	bl	8000598 <__aeabi_f2d>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4620      	mov	r0, r4
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	f7f9 fc06 	bl	80002d8 <__aeabi_dsub>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f7fa f890 	bl	8000bf8 <__aeabi_d2f>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	4a41      	ldr	r2, [pc, #260]	@ (8006be0 <sensor_fusion_thread+0x610>)
 8006adc:	6013      	str	r3, [r2, #0]
				data_in.mag[1] = mag_intensity_BODY[1] * GAUSS_TO_uTESLA / 50 - hard_iron[1];
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4838      	ldr	r0, [pc, #224]	@ (8006bc4 <sensor_fusion_thread+0x5f4>)
 8006ae2:	f7fb fae1 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7f9 fd54 	bl	8000598 <__aeabi_f2d>
 8006af0:	f04f 0200 	mov.w	r2, #0
 8006af4:	4b3c      	ldr	r3, [pc, #240]	@ (8006be8 <sensor_fusion_thread+0x618>)
 8006af6:	f7f9 fda7 	bl	8000648 <__aeabi_dmul>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4610      	mov	r0, r2
 8006b00:	4619      	mov	r1, r3
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	4b39      	ldr	r3, [pc, #228]	@ (8006bec <sensor_fusion_thread+0x61c>)
 8006b08:	f7f9 fec8 	bl	800089c <__aeabi_ddiv>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4614      	mov	r4, r2
 8006b12:	461d      	mov	r5, r3
 8006b14:	2101      	movs	r1, #1
 8006b16:	4836      	ldr	r0, [pc, #216]	@ (8006bf0 <sensor_fusion_thread+0x620>)
 8006b18:	f7fb fac6 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7f9 fd39 	bl	8000598 <__aeabi_f2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fbd3 	bl	80002d8 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4610      	mov	r0, r2
 8006b38:	4619      	mov	r1, r3
 8006b3a:	f7fa f85d 	bl	8000bf8 <__aeabi_d2f>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4a27      	ldr	r2, [pc, #156]	@ (8006be0 <sensor_fusion_thread+0x610>)
 8006b42:	6053      	str	r3, [r2, #4]
				data_in.mag[2] = mag_intensity_BODY[2] * GAUSS_TO_uTESLA / 50 - hard_iron[2];
 8006b44:	2102      	movs	r1, #2
 8006b46:	481f      	ldr	r0, [pc, #124]	@ (8006bc4 <sensor_fusion_thread+0x5f4>)
 8006b48:	f7fb faae 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7f9 fd21 	bl	8000598 <__aeabi_f2d>
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	4b23      	ldr	r3, [pc, #140]	@ (8006be8 <sensor_fusion_thread+0x618>)
 8006b5c:	f7f9 fd74 	bl	8000648 <__aeabi_dmul>
 8006b60:	4602      	mov	r2, r0
 8006b62:	460b      	mov	r3, r1
 8006b64:	4610      	mov	r0, r2
 8006b66:	4619      	mov	r1, r3
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006bec <sensor_fusion_thread+0x61c>)
 8006b6e:	f7f9 fe95 	bl	800089c <__aeabi_ddiv>
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4614      	mov	r4, r2
 8006b78:	461d      	mov	r5, r3
 8006b7a:	2102      	movs	r1, #2
 8006b7c:	481c      	ldr	r0, [pc, #112]	@ (8006bf0 <sensor_fusion_thread+0x620>)
 8006b7e:	f7fb fa93 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006b82:	4603      	mov	r3, r0
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7f9 fd06 	bl	8000598 <__aeabi_f2d>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	460b      	mov	r3, r1
 8006b90:	4620      	mov	r0, r4
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7f9 fba0 	bl	80002d8 <__aeabi_dsub>
 8006b98:	e02c      	b.n	8006bf4 <sensor_fusion_thread+0x624>
 8006b9a:	bf00      	nop
 8006b9c:	f3af 8000 	nop.w
 8006ba0:	3a92a305 	.word	0x3a92a305
 8006ba4:	40239d01 	.word	0x40239d01
 8006ba8:	54442d18 	.word	0x54442d18
 8006bac:	400921fb 	.word	0x400921fb
 8006bb0:	20000008 	.word	0x20000008
 8006bb4:	20000be8 	.word	0x20000be8
 8006bb8:	20000d40 	.word	0x20000d40
 8006bbc:	20000d4c 	.word	0x20000d4c
 8006bc0:	20000c44 	.word	0x20000c44
 8006bc4:	20000d58 	.word	0x20000d58
 8006bc8:	20006734 	.word	0x20006734
 8006bcc:	44d48000 	.word	0x44d48000
 8006bd0:	4d221fe8 	.word	0x4d221fe8
 8006bd4:	200017b8 	.word	0x200017b8
 8006bd8:	200017bc 	.word	0x200017bc
 8006bdc:	200017c0 	.word	0x200017c0
 8006be0:	20001738 	.word	0x20001738
 8006be4:	40668000 	.word	0x40668000
 8006be8:	40590000 	.word	0x40590000
 8006bec:	40490000 	.word	0x40490000
 8006bf0:	20000d7c 	.word	0x20000d7c
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f7f9 fffc 	bl	8000bf8 <__aeabi_d2f>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4ae1      	ldr	r2, [pc, #900]	@ (8006f88 <sensor_fusion_thread+0x9b8>)
 8006c04:	6093      	str	r3, [r2, #8]

				// Kalman filter predict and update orientation
				MotionFX_propagate(mfxstate, &data_out, &data_in, &dT);
 8006c06:	4be1      	ldr	r3, [pc, #900]	@ (8006f8c <sensor_fusion_thread+0x9bc>)
 8006c08:	4adf      	ldr	r2, [pc, #892]	@ (8006f88 <sensor_fusion_thread+0x9b8>)
 8006c0a:	49e1      	ldr	r1, [pc, #900]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c0c:	48e1      	ldr	r0, [pc, #900]	@ (8006f94 <sensor_fusion_thread+0x9c4>)
 8006c0e:	f01a fc03 	bl	8021418 <MotionFX_propagate>
				MotionFX_update(mfxstate, &data_out, &data_in, &dT, NULL);
 8006c12:	2300      	movs	r3, #0
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4bdd      	ldr	r3, [pc, #884]	@ (8006f8c <sensor_fusion_thread+0x9bc>)
 8006c18:	4adb      	ldr	r2, [pc, #876]	@ (8006f88 <sensor_fusion_thread+0x9b8>)
 8006c1a:	49dd      	ldr	r1, [pc, #884]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c1c:	48dd      	ldr	r0, [pc, #884]	@ (8006f94 <sensor_fusion_thread+0x9c4>)
 8006c1e:	f01a fbeb 	bl	80213f8 <MotionFX_update>

				// Extract and normalize rotation quaternion
				float qx = data_out.quaternion[0], qy = data_out.quaternion[1], qz = data_out.quaternion[2], qw = data_out.quaternion[3];
 8006c22:	4bdb      	ldr	r3, [pc, #876]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	4bd9      	ldr	r3, [pc, #868]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	4bd8      	ldr	r3, [pc, #864]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	617b      	str	r3, [r7, #20]
 8006c34:	4bd6      	ldr	r3, [pc, #856]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	613b      	str	r3, [r7, #16]
				float n = 1.0f / sqrtf(qx*qx + qy*qy + qz*qz + qw*qw);
 8006c3a:	edd7 7a07 	vldr	s15, [r7, #28]
 8006c3e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006c42:	edd7 7a06 	vldr	s15, [r7, #24]
 8006c46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c66:	eeb0 0a67 	vmov.f32	s0, s15
 8006c6a:	f01b f8e3 	bl	8021e34 <sqrtf>
 8006c6e:	eeb0 7a40 	vmov.f32	s14, s0
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7a:	edc7 7a03 	vstr	s15, [r7, #12]
				qx *= n; qy *= n; qz *= n; qw *= n;
 8006c7e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c8a:	edc7 7a07 	vstr	s15, [r7, #28]
 8006c8e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006c92:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9a:	edc7 7a06 	vstr	s15, [r7, #24]
 8006c9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a05 	vstr	s15, [r7, #20]
 8006cae:	ed97 7a04 	vldr	s14, [r7, #16]
 8006cb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cba:	edc7 7a04 	vstr	s15, [r7, #16]

				// Update BODY -> WORLD rotation matrix using current orientation
				R[0][0] = 1.0f - 2.0f * (qy*qy + qz*qz);		// Row 1
 8006cbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8006cc2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006cd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cda:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006cde:	2100      	movs	r1, #0
 8006ce0:	48ad      	ldr	r0, [pc, #692]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006ce2:	f7ff fc51 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fb f9dc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	ed83 8a00 	vstr	s16, [r3]
			    R[0][1] = 2.0f * (qx*qy - qw*qz);
 8006cf6:	ed97 7a07 	vldr	s14, [r7, #28]
 8006cfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8006cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d02:	edd7 6a04 	vldr	s13, [r7, #16]
 8006d06:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d12:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006d16:	2100      	movs	r1, #0
 8006d18:	489f      	ldr	r0, [pc, #636]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006d1a:	f7ff fc35 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2101      	movs	r1, #1
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fb f9c0 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	ed83 8a00 	vstr	s16, [r3]
			    R[0][2] = 2.0f * (qx*qz + qw*qy);
 8006d2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8006d3e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d4a:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4891      	ldr	r0, [pc, #580]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006d52:	f7ff fc19 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2102      	movs	r1, #2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fb f9a4 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006d60:	4603      	mov	r3, r0
 8006d62:	ed83 8a00 	vstr	s16, [r3]
			    R[1][0] = 2.0f * (qx*qy + qw*qz);				// Row 2
 8006d66:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8006d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d72:	edd7 6a04 	vldr	s13, [r7, #16]
 8006d76:	edd7 7a05 	vldr	s15, [r7, #20]
 8006d7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d82:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006d86:	2101      	movs	r1, #1
 8006d88:	4883      	ldr	r0, [pc, #524]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006d8a:	f7ff fbfd 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2100      	movs	r1, #0
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fb f988 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	ed83 8a00 	vstr	s16, [r3]
			    R[1][1] = 1.0f - 2.0f * (qx*qx + qz*qz);
 8006d9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006da2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006da6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006daa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006db2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dba:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	4875      	ldr	r0, [pc, #468]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006dc2:	f7ff fbe1 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2101      	movs	r1, #1
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fb f96c 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	ed83 8a00 	vstr	s16, [r3]
			    R[1][2] = 2.0f * (qy*qz - qw*qx);
 8006dd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8006dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006de2:	edd7 6a04 	vldr	s13, [r7, #16]
 8006de6:	edd7 7a07 	vldr	s15, [r7, #28]
 8006dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006df2:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006df6:	2101      	movs	r1, #1
 8006df8:	4867      	ldr	r0, [pc, #412]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006dfa:	f7ff fbc5 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2102      	movs	r1, #2
 8006e02:	4618      	mov	r0, r3
 8006e04:	f7fb f950 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	ed83 8a00 	vstr	s16, [r3]
			    R[2][0] = 2.0f * (qx*qz - qw*qy);				// Row 3
 8006e0e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006e12:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e1a:	edd7 6a04 	vldr	s13, [r7, #16]
 8006e1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e2a:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006e2e:	2102      	movs	r1, #2
 8006e30:	4859      	ldr	r0, [pc, #356]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006e32:	f7ff fba9 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2100      	movs	r1, #0
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb f934 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006e40:	4603      	mov	r3, r0
 8006e42:	ed83 8a00 	vstr	s16, [r3]
			    R[2][1] = 2.0f * (qy*qz + qw*qx);
 8006e46:	ed97 7a06 	vldr	s14, [r7, #24]
 8006e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e52:	edd7 6a04 	vldr	s13, [r7, #16]
 8006e56:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e62:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8006e66:	2102      	movs	r1, #2
 8006e68:	484b      	ldr	r0, [pc, #300]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006e6a:	f7ff fb8d 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2101      	movs	r1, #1
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fb f918 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	ed83 8a00 	vstr	s16, [r3]
			    R[2][2] = 1.0f - 2.0f * (qx*qx + qy*qy);
 8006e7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e82:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e8a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e9a:	ee37 8a67 	vsub.f32	s16, s14, s15
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	483d      	ldr	r0, [pc, #244]	@ (8006f98 <sensor_fusion_thread+0x9c8>)
 8006ea2:	f7ff fb71 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2102      	movs	r1, #2
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fb f8fc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	ed83 8a00 	vstr	s16, [r3]

			    // Extract BODY acceleration
			    acceleration_BODY[0] = data_out.linear_acceleration[0];
 8006eb6:	4b36      	ldr	r3, [pc, #216]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006eb8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4837      	ldr	r0, [pc, #220]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006ebe:	f7fb f8f3 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	601c      	str	r4, [r3, #0]
			    acceleration_BODY[1] = data_out.linear_acceleration[1];
 8006ec6:	4b32      	ldr	r3, [pc, #200]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006ec8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4833      	ldr	r0, [pc, #204]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006ece:	f7fb f8eb 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	601c      	str	r4, [r3, #0]
			    acceleration_BODY[2] = data_out.linear_acceleration[2];
 8006ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8006f90 <sensor_fusion_thread+0x9c0>)
 8006ed8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8006eda:	2102      	movs	r1, #2
 8006edc:	482f      	ldr	r0, [pc, #188]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006ede:	f7fb f8e3 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	601c      	str	r4, [r3, #0]

			    // Integrate BODY acceleration to get velocity (trapezoidal rule)
				vel_integrated_BODY[0] += 0.5f * (acceleration_BODY[0] + prev_acceleration_BODY[0]) * dT;
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	482c      	ldr	r0, [pc, #176]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006eea:	f7fb f8dd 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	ed93 8a00 	vldr	s16, [r3]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	482a      	ldr	r0, [pc, #168]	@ (8006fa0 <sensor_fusion_thread+0x9d0>)
 8006ef8:	f7fb f8d6 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006efc:	4603      	mov	r3, r0
 8006efe:	edd3 7a00 	vldr	s15, [r3]
 8006f02:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006f06:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8006f8c <sensor_fusion_thread+0x9bc>)
 8006f10:	edd3 7a00 	vldr	s15, [r3]
 8006f14:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4822      	ldr	r0, [pc, #136]	@ (8006fa4 <sensor_fusion_thread+0x9d4>)
 8006f1c:	f7fb f8c4 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006f20:	4603      	mov	r3, r0
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006f2a:	edc3 7a00 	vstr	s15, [r3]
				vel_integrated_BODY[1] += 0.5f * (acceleration_BODY[1] + prev_acceleration_BODY[1]) * dT;
 8006f2e:	2101      	movs	r1, #1
 8006f30:	481a      	ldr	r0, [pc, #104]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006f32:	f7fb f8b9 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006f36:	4603      	mov	r3, r0
 8006f38:	ed93 8a00 	vldr	s16, [r3]
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4818      	ldr	r0, [pc, #96]	@ (8006fa0 <sensor_fusion_thread+0x9d0>)
 8006f40:	f7fb f8b2 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006f44:	4603      	mov	r3, r0
 8006f46:	edd3 7a00 	vldr	s15, [r3]
 8006f4a:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006f4e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006f52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006f56:	4b0d      	ldr	r3, [pc, #52]	@ (8006f8c <sensor_fusion_thread+0x9bc>)
 8006f58:	edd3 7a00 	vldr	s15, [r3]
 8006f5c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006f60:	2101      	movs	r1, #1
 8006f62:	4810      	ldr	r0, [pc, #64]	@ (8006fa4 <sensor_fusion_thread+0x9d4>)
 8006f64:	f7fb f8a0 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	edd3 7a00 	vldr	s15, [r3]
 8006f6e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006f72:	edc3 7a00 	vstr	s15, [r3]
				vel_integrated_BODY[2] += 0.5f * (acceleration_BODY[2] + prev_acceleration_BODY[2]) * dT;
 8006f76:	2102      	movs	r1, #2
 8006f78:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <sensor_fusion_thread+0x9cc>)
 8006f7a:	f7fb f895 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	ed93 8a00 	vldr	s16, [r3]
 8006f84:	2102      	movs	r1, #2
 8006f86:	e00f      	b.n	8006fa8 <sensor_fusion_thread+0x9d8>
 8006f88:	20001738 	.word	0x20001738
 8006f8c:	200017c0 	.word	0x200017c0
 8006f90:	2000175c 	.word	0x2000175c
 8006f94:	20000d88 	.word	0x20000d88
 8006f98:	200017ec 	.word	0x200017ec
 8006f9c:	20001810 	.word	0x20001810
 8006fa0:	2000181c 	.word	0x2000181c
 8006fa4:	20001828 	.word	0x20001828
 8006fa8:	48cb      	ldr	r0, [pc, #812]	@ (80072d8 <sensor_fusion_thread+0xd08>)
 8006faa:	f7fb f87d 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	edd3 7a00 	vldr	s15, [r3]
 8006fb4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006fb8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006fbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006fc0:	4bc6      	ldr	r3, [pc, #792]	@ (80072dc <sensor_fusion_thread+0xd0c>)
 8006fc2:	edd3 7a00 	vldr	s15, [r3]
 8006fc6:	ee27 8a27 	vmul.f32	s16, s14, s15
 8006fca:	2102      	movs	r1, #2
 8006fcc:	48c4      	ldr	r0, [pc, #784]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 8006fce:	f7fb f86b 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	edd3 7a00 	vldr	s15, [r3]
 8006fd8:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006fdc:	edc3 7a00 	vstr	s15, [r3]

				// Update previous for next iteration
				prev_acceleration_BODY[0] = acceleration_BODY[0];
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	48c0      	ldr	r0, [pc, #768]	@ (80072e4 <sensor_fusion_thread+0xd14>)
 8006fe4:	f7fb f860 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	681c      	ldr	r4, [r3, #0]
 8006fec:	2100      	movs	r1, #0
 8006fee:	48ba      	ldr	r0, [pc, #744]	@ (80072d8 <sensor_fusion_thread+0xd08>)
 8006ff0:	f7fb f85a 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	601c      	str	r4, [r3, #0]
				prev_acceleration_BODY[1] = acceleration_BODY[1];
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	48ba      	ldr	r0, [pc, #744]	@ (80072e4 <sensor_fusion_thread+0xd14>)
 8006ffc:	f7fb f854 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007000:	4603      	mov	r3, r0
 8007002:	681c      	ldr	r4, [r3, #0]
 8007004:	2101      	movs	r1, #1
 8007006:	48b4      	ldr	r0, [pc, #720]	@ (80072d8 <sensor_fusion_thread+0xd08>)
 8007008:	f7fb f84e 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800700c:	4603      	mov	r3, r0
 800700e:	601c      	str	r4, [r3, #0]
				prev_acceleration_BODY[2] = acceleration_BODY[2];
 8007010:	2102      	movs	r1, #2
 8007012:	48b4      	ldr	r0, [pc, #720]	@ (80072e4 <sensor_fusion_thread+0xd14>)
 8007014:	f7fb f848 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007018:	4603      	mov	r3, r0
 800701a:	681c      	ldr	r4, [r3, #0]
 800701c:	2102      	movs	r1, #2
 800701e:	48ae      	ldr	r0, [pc, #696]	@ (80072d8 <sensor_fusion_thread+0xd08>)
 8007020:	f7fb f842 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007024:	4603      	mov	r3, r0
 8007026:	601c      	str	r4, [r3, #0]

				// Get range finder distance and transform to WORLD frame
				rf_distance_BODY = range_finder.get_distance();
 8007028:	48af      	ldr	r0, [pc, #700]	@ (80072e8 <sensor_fusion_thread+0xd18>)
 800702a:	f7fe fbd5 	bl	80057d8 <_ZN16US100_Ultrasonic12get_distanceEv>
 800702e:	eef0 7a40 	vmov.f32	s15, s0
 8007032:	4bae      	ldr	r3, [pc, #696]	@ (80072ec <sensor_fusion_thread+0xd1c>)
 8007034:	edc3 7a00 	vstr	s15, [r3]
				rf_distance_WORLD =	R[2][0] * rf_distance_BODY +
 8007038:	2102      	movs	r1, #2
 800703a:	48ad      	ldr	r0, [pc, #692]	@ (80072f0 <sensor_fusion_thread+0xd20>)
 800703c:	f7ff faa4 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8007040:	4603      	mov	r3, r0
 8007042:	2100      	movs	r1, #0
 8007044:	4618      	mov	r0, r3
 8007046:	f7fb f82f 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800704a:	4603      	mov	r3, r0
 800704c:	ed93 7a00 	vldr	s14, [r3]
 8007050:	4ba6      	ldr	r3, [pc, #664]	@ (80072ec <sensor_fusion_thread+0xd1c>)
 8007052:	edd3 7a00 	vldr	s15, [r3]
 8007056:	ee27 8a27 	vmul.f32	s16, s14, s15
									R[2][1] * rf_distance_BODY +
 800705a:	2102      	movs	r1, #2
 800705c:	48a4      	ldr	r0, [pc, #656]	@ (80072f0 <sensor_fusion_thread+0xd20>)
 800705e:	f7ff fa93 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8007062:	4603      	mov	r3, r0
 8007064:	2101      	movs	r1, #1
 8007066:	4618      	mov	r0, r3
 8007068:	f7fb f81e 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800706c:	4603      	mov	r3, r0
 800706e:	ed93 7a00 	vldr	s14, [r3]
 8007072:	4b9e      	ldr	r3, [pc, #632]	@ (80072ec <sensor_fusion_thread+0xd1c>)
 8007074:	edd3 7a00 	vldr	s15, [r3]
 8007078:	ee67 7a27 	vmul.f32	s15, s14, s15
				rf_distance_WORLD =	R[2][0] * rf_distance_BODY +
 800707c:	ee38 8a27 	vadd.f32	s16, s16, s15
									R[2][2] * rf_distance_BODY;
 8007080:	2102      	movs	r1, #2
 8007082:	489b      	ldr	r0, [pc, #620]	@ (80072f0 <sensor_fusion_thread+0xd20>)
 8007084:	f7ff fa80 	bl	8006588 <_ZNSt5arrayIS_IfLj3EELj3EEixEj>
 8007088:	4603      	mov	r3, r0
 800708a:	2102      	movs	r1, #2
 800708c:	4618      	mov	r0, r3
 800708e:	f7fb f80b 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007092:	4603      	mov	r3, r0
 8007094:	ed93 7a00 	vldr	s14, [r3]
 8007098:	4b94      	ldr	r3, [pc, #592]	@ (80072ec <sensor_fusion_thread+0xd1c>)
 800709a:	edd3 7a00 	vldr	s15, [r3]
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
									R[2][1] * rf_distance_BODY +
 80070a2:	ee78 7a27 	vadd.f32	s15, s16, s15
				rf_distance_WORLD =	R[2][0] * rf_distance_BODY +
 80070a6:	4b93      	ldr	r3, [pc, #588]	@ (80072f4 <sensor_fusion_thread+0xd24>)
 80070a8:	edc3 7a00 	vstr	s15, [r3]

				// Get optical flow data for Velocity Complimentary Filter
				float delta_roll = data_out.rotation[2] - prev_roll_pitch[0];		// Roll change
 80070ac:	4b92      	ldr	r3, [pc, #584]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 80070ae:	ed93 8a02 	vldr	s16, [r3, #8]
 80070b2:	2100      	movs	r1, #0
 80070b4:	4891      	ldr	r0, [pc, #580]	@ (80072fc <sensor_fusion_thread+0xd2c>)
 80070b6:	f7fa fff7 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80070ba:	4603      	mov	r3, r0
 80070bc:	edd3 7a00 	vldr	s15, [r3]
 80070c0:	ee78 7a67 	vsub.f32	s15, s16, s15
 80070c4:	edc7 7a02 	vstr	s15, [r7, #8]
				float delta_pitch = data_out.rotation[1] - prev_roll_pitch[1];		// Pitch change
 80070c8:	4b8b      	ldr	r3, [pc, #556]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 80070ca:	ed93 8a01 	vldr	s16, [r3, #4]
 80070ce:	2101      	movs	r1, #1
 80070d0:	488a      	ldr	r0, [pc, #552]	@ (80072fc <sensor_fusion_thread+0xd2c>)
 80070d2:	f7fa ffe9 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80070d6:	4603      	mov	r3, r0
 80070d8:	edd3 7a00 	vldr	s15, [r3]
 80070dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80070e0:	edc7 7a01 	vstr	s15, [r7, #4]
				vel_camera_BODY = optical_flow.get_delta_m(rf_distance_WORLD, delta_pitch, delta_roll);
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	1d3a      	adds	r2, r7, #4
 80070ea:	4982      	ldr	r1, [pc, #520]	@ (80072f4 <sensor_fusion_thread+0xd24>)
 80070ec:	4884      	ldr	r0, [pc, #528]	@ (8007300 <sensor_fusion_thread+0xd30>)
 80070ee:	f7fc fc18 	bl	8003922 <_ZN7PMW390111get_delta_mERKfS1_S1_>
 80070f2:	eeb0 7a40 	vmov.f32	s14, s0
 80070f6:	eef0 7a60 	vmov.f32	s15, s1
 80070fa:	4b82      	ldr	r3, [pc, #520]	@ (8007304 <sensor_fusion_thread+0xd34>)
 80070fc:	ed83 7a00 	vstr	s14, [r3]
 8007100:	edc3 7a01 	vstr	s15, [r3, #4]

				// Update previous for next iteration
				prev_roll_pitch[0] = data_out.rotation[2];		// Roll
 8007104:	4b7c      	ldr	r3, [pc, #496]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 8007106:	689c      	ldr	r4, [r3, #8]
 8007108:	2100      	movs	r1, #0
 800710a:	487c      	ldr	r0, [pc, #496]	@ (80072fc <sensor_fusion_thread+0xd2c>)
 800710c:	f7fa ffcc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007110:	4603      	mov	r3, r0
 8007112:	601c      	str	r4, [r3, #0]
				prev_roll_pitch[1] = data_out.rotation[1];		// Pitch
 8007114:	4b78      	ldr	r3, [pc, #480]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 8007116:	685c      	ldr	r4, [r3, #4]
 8007118:	2101      	movs	r1, #1
 800711a:	4878      	ldr	r0, [pc, #480]	@ (80072fc <sensor_fusion_thread+0xd2c>)
 800711c:	f7fa ffc4 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007120:	4603      	mov	r3, r0
 8007122:	601c      	str	r4, [r3, #0]

				// Reset integrated XY velocity drift if necessary
				if (reset_xy_counter % reset_xy_period_multiple == 0) {
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	6a3a      	ldr	r2, [r7, #32]
 8007128:	fbb3 f2f2 	udiv	r2, r3, r2
 800712c:	6a39      	ldr	r1, [r7, #32]
 800712e:	fb01 f202 	mul.w	r2, r1, r2
 8007132:	1a9b      	subs	r3, r3, r2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d117      	bne.n	8007168 <sensor_fusion_thread+0xb98>
					vel_integrated_BODY[0] = vel_camera_BODY[0];
 8007138:	2100      	movs	r1, #0
 800713a:	4872      	ldr	r0, [pc, #456]	@ (8007304 <sensor_fusion_thread+0xd34>)
 800713c:	f7fd fd7a 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007140:	4603      	mov	r3, r0
 8007142:	681c      	ldr	r4, [r3, #0]
 8007144:	2100      	movs	r1, #0
 8007146:	4866      	ldr	r0, [pc, #408]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 8007148:	f7fa ffae 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800714c:	4603      	mov	r3, r0
 800714e:	601c      	str	r4, [r3, #0]
					vel_integrated_BODY[1] = vel_camera_BODY[1];
 8007150:	2101      	movs	r1, #1
 8007152:	486c      	ldr	r0, [pc, #432]	@ (8007304 <sensor_fusion_thread+0xd34>)
 8007154:	f7fd fd6e 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007158:	4603      	mov	r3, r0
 800715a:	681c      	ldr	r4, [r3, #0]
 800715c:	2101      	movs	r1, #1
 800715e:	4860      	ldr	r0, [pc, #384]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 8007160:	f7fa ffa2 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007164:	4603      	mov	r3, r0
 8007166:	601c      	str	r4, [r3, #0]
				}

				// Fuse XY velocity via complimentary filter
				velocity_BODY[0] = XY_VELOCITY_ALPHA * vel_integrated_BODY[0] + (1.0f - XY_VELOCITY_ALPHA) * vel_camera_BODY[0];
 8007168:	2100      	movs	r1, #0
 800716a:	485d      	ldr	r0, [pc, #372]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 800716c:	f7fa ff9c 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007170:	4603      	mov	r3, r0
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 fa0f 	bl	8000598 <__aeabi_f2d>
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	4b62      	ldr	r3, [pc, #392]	@ (8007308 <sensor_fusion_thread+0xd38>)
 8007180:	f7f9 fa62 	bl	8000648 <__aeabi_dmul>
 8007184:	4602      	mov	r2, r0
 8007186:	460b      	mov	r3, r1
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	2100      	movs	r1, #0
 800718e:	485d      	ldr	r0, [pc, #372]	@ (8007304 <sensor_fusion_thread+0xd34>)
 8007190:	f7fd fd50 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007194:	4603      	mov	r3, r0
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f9fd 	bl	8000598 <__aeabi_f2d>
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	4b5a      	ldr	r3, [pc, #360]	@ (800730c <sensor_fusion_thread+0xd3c>)
 80071a4:	f7f9 fa50 	bl	8000648 <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	f7f9 f894 	bl	80002dc <__adddf3>
 80071b4:	4602      	mov	r2, r0
 80071b6:	460b      	mov	r3, r1
 80071b8:	4610      	mov	r0, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	f7f9 fd1c 	bl	8000bf8 <__aeabi_d2f>
 80071c0:	4604      	mov	r4, r0
 80071c2:	2100      	movs	r1, #0
 80071c4:	4852      	ldr	r0, [pc, #328]	@ (8007310 <sensor_fusion_thread+0xd40>)
 80071c6:	f7fa ff6f 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80071ca:	4603      	mov	r3, r0
 80071cc:	601c      	str	r4, [r3, #0]
				velocity_BODY[1] = XY_VELOCITY_ALPHA * vel_integrated_BODY[1] + (1.0f - XY_VELOCITY_ALPHA) * vel_camera_BODY[1];
 80071ce:	2101      	movs	r1, #1
 80071d0:	4843      	ldr	r0, [pc, #268]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 80071d2:	f7fa ff69 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 80071d6:	4603      	mov	r3, r0
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 f9dc 	bl	8000598 <__aeabi_f2d>
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	4b48      	ldr	r3, [pc, #288]	@ (8007308 <sensor_fusion_thread+0xd38>)
 80071e6:	f7f9 fa2f 	bl	8000648 <__aeabi_dmul>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	4614      	mov	r4, r2
 80071f0:	461d      	mov	r5, r3
 80071f2:	2101      	movs	r1, #1
 80071f4:	4843      	ldr	r0, [pc, #268]	@ (8007304 <sensor_fusion_thread+0xd34>)
 80071f6:	f7fd fd1d 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 80071fa:	4603      	mov	r3, r0
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7f9 f9ca 	bl	8000598 <__aeabi_f2d>
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	4b40      	ldr	r3, [pc, #256]	@ (800730c <sensor_fusion_thread+0xd3c>)
 800720a:	f7f9 fa1d 	bl	8000648 <__aeabi_dmul>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f861 	bl	80002dc <__adddf3>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f7f9 fce9 	bl	8000bf8 <__aeabi_d2f>
 8007226:	4604      	mov	r4, r0
 8007228:	2101      	movs	r1, #1
 800722a:	4839      	ldr	r0, [pc, #228]	@ (8007310 <sensor_fusion_thread+0xd40>)
 800722c:	f7fa ff3c 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007230:	4603      	mov	r3, r0
 8007232:	601c      	str	r4, [r3, #0]
				velocity_BODY[2] = vel_integrated_BODY[2];
 8007234:	2102      	movs	r1, #2
 8007236:	482a      	ldr	r0, [pc, #168]	@ (80072e0 <sensor_fusion_thread+0xd10>)
 8007238:	f7fa ff36 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 800723c:	4603      	mov	r3, r0
 800723e:	681c      	ldr	r4, [r3, #0]
 8007240:	2102      	movs	r1, #2
 8007242:	4833      	ldr	r0, [pc, #204]	@ (8007310 <sensor_fusion_thread+0xd40>)
 8007244:	f7fa ff30 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007248:	4603      	mov	r3, r0
 800724a:	601c      	str	r4, [r3, #0]

				// Get barometer altitude
				barometer_altitude = barometer.get_altitude();
 800724c:	4831      	ldr	r0, [pc, #196]	@ (8007314 <sensor_fusion_thread+0xd44>)
 800724e:	f7fb fb4d 	bl	80028ec <_ZN6BMP38812get_altitudeEv>
 8007252:	eef0 7a40 	vmov.f32	s15, s0
 8007256:	4b30      	ldr	r3, [pc, #192]	@ (8007318 <sensor_fusion_thread+0xd48>)
 8007258:	edc3 7a00 	vstr	s15, [r3]

				// Fuse altitude via complimentary filter
				altitude = ALTITUDE_ALPHA * barometer_altitude + (1.0f - ALTITUDE_ALPHA) * rf_distance_WORLD;
 800725c:	4b2e      	ldr	r3, [pc, #184]	@ (8007318 <sensor_fusion_thread+0xd48>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7f9 f999 	bl	8000598 <__aeabi_f2d>
 8007266:	a318      	add	r3, pc, #96	@ (adr r3, 80072c8 <sensor_fusion_thread+0xcf8>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f9ec 	bl	8000648 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	4b1e      	ldr	r3, [pc, #120]	@ (80072f4 <sensor_fusion_thread+0xd24>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f7f9 f98b 	bl	8000598 <__aeabi_f2d>
 8007282:	a313      	add	r3, pc, #76	@ (adr r3, 80072d0 <sensor_fusion_thread+0xd00>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 f9de 	bl	8000648 <__aeabi_dmul>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f9 f822 	bl	80002dc <__adddf3>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4610      	mov	r0, r2
 800729e:	4619      	mov	r1, r3
 80072a0:	f7f9 fcaa 	bl	8000bf8 <__aeabi_d2f>
 80072a4:	4603      	mov	r3, r0
 80072a6:	4a1d      	ldr	r2, [pc, #116]	@ (800731c <sensor_fusion_thread+0xd4c>)
 80072a8:	6013      	str	r3, [r2, #0]

				// Update drone state variable
				{
					np::lock_guard lock(stateMutexHandle);
 80072aa:	463b      	mov	r3, r7
 80072ac:	491c      	ldr	r1, [pc, #112]	@ (8007320 <sensor_fusion_thread+0xd50>)
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7f9 feac 	bl	800100c <_ZN2np10lock_guardC1ERPv>
					drone_state.rotation[0] = data_out.rotation[2];		// Roll
 80072b4:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	4a1a      	ldr	r2, [pc, #104]	@ (8007324 <sensor_fusion_thread+0xd54>)
 80072ba:	6013      	str	r3, [r2, #0]
					drone_state.rotation[1] = data_out.rotation[1];		// Pitch
 80072bc:	4b0e      	ldr	r3, [pc, #56]	@ (80072f8 <sensor_fusion_thread+0xd28>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <sensor_fusion_thread+0xd54>)
 80072c2:	6053      	str	r3, [r2, #4]
 80072c4:	e030      	b.n	8007328 <sensor_fusion_thread+0xd58>
 80072c6:	bf00      	nop
 80072c8:	47ae147b 	.word	0x47ae147b
 80072cc:	3f747ae1 	.word	0x3f747ae1
 80072d0:	3d70a3d7 	.word	0x3d70a3d7
 80072d4:	3fefd70a 	.word	0x3fefd70a
 80072d8:	2000181c 	.word	0x2000181c
 80072dc:	200017c0 	.word	0x200017c0
 80072e0:	20001828 	.word	0x20001828
 80072e4:	20001810 	.word	0x20001810
 80072e8:	20000ccc 	.word	0x20000ccc
 80072ec:	20000d68 	.word	0x20000d68
 80072f0:	200017ec 	.word	0x200017ec
 80072f4:	20001840 	.word	0x20001840
 80072f8:	2000175c 	.word	0x2000175c
 80072fc:	20001848 	.word	0x20001848
 8007300:	20000cf8 	.word	0x20000cf8
 8007304:	20000d6c 	.word	0x20000d6c
 8007308:	3fd00000 	.word	0x3fd00000
 800730c:	3fe80000 	.word	0x3fe80000
 8007310:	20001834 	.word	0x20001834
 8007314:	20000c78 	.word	0x20000c78
 8007318:	20000d64 	.word	0x20000d64
 800731c:	20001844 	.word	0x20001844
 8007320:	200064a0 	.word	0x200064a0
 8007324:	200017c4 	.word	0x200017c4
					drone_state.rotation[2] = data_out.rotation[0];		// Yaw
 8007328:	4b1c      	ldr	r3, [pc, #112]	@ (800739c <sensor_fusion_thread+0xdcc>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1c      	ldr	r2, [pc, #112]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 800732e:	6093      	str	r3, [r2, #8]
					drone_state.quaternion[0] = qx;
 8007330:	4a1b      	ldr	r2, [pc, #108]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	60d3      	str	r3, [r2, #12]
					drone_state.quaternion[1] = qy;
 8007336:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	6113      	str	r3, [r2, #16]
					drone_state.quaternion[2] = qz;
 800733c:	4a18      	ldr	r2, [pc, #96]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6153      	str	r3, [r2, #20]
					drone_state.quaternion[3] = qw;
 8007342:	4a17      	ldr	r2, [pc, #92]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6193      	str	r3, [r2, #24]
					drone_state.xy_velocity[0] = velocity_BODY[0];		// X velocity
 8007348:	2100      	movs	r1, #0
 800734a:	4816      	ldr	r0, [pc, #88]	@ (80073a4 <sensor_fusion_thread+0xdd4>)
 800734c:	f7fa feac 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007350:	4603      	mov	r3, r0
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 8007356:	61d3      	str	r3, [r2, #28]
					drone_state.xy_velocity[1] = velocity_BODY[1];		// Y velocity
 8007358:	2101      	movs	r1, #1
 800735a:	4812      	ldr	r0, [pc, #72]	@ (80073a4 <sensor_fusion_thread+0xdd4>)
 800735c:	f7fa fea4 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007360:	4603      	mov	r3, r0
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a0e      	ldr	r2, [pc, #56]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 8007366:	6213      	str	r3, [r2, #32]
					drone_state.altitude = altitude;					// Z position
 8007368:	4b0f      	ldr	r3, [pc, #60]	@ (80073a8 <sensor_fusion_thread+0xdd8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a0c      	ldr	r2, [pc, #48]	@ (80073a0 <sensor_fusion_thread+0xdd0>)
 800736e:	6253      	str	r3, [r2, #36]	@ 0x24
				}
 8007370:	463b      	mov	r3, r7
 8007372:	4618      	mov	r0, r3
 8007374:	f7f9 fe5f 	bl	8001036 <_ZN2np10lock_guardD1Ev>

				// TODO: send to control system queue!
			}
		}
 8007378:	f7ff b991 	b.w	800669e <sensor_fusion_thread+0xce>
	}
	else
	{
		USB_Log("Failed to initialize sensors.", ERR);
 800737c:	2102      	movs	r1, #2
 800737e:	480b      	ldr	r0, [pc, #44]	@ (80073ac <sensor_fusion_thread+0xddc>)
 8007380:	f7fe ffe6 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		osDelay(10);
 8007384:	200a      	movs	r0, #10
 8007386:	f00c fe14 	bl	8013fb2 <osDelay>
		vTaskDelete( NULL );
 800738a:	2000      	movs	r0, #0
 800738c:	f00e f926 	bl	80155dc <vTaskDelete>
	}
}
 8007390:	bf00      	nop
 8007392:	3730      	adds	r7, #48	@ 0x30
 8007394:	46bd      	mov	sp, r7
 8007396:	ecbd 8b02 	vpop	{d8}
 800739a:	bdb0      	pop	{r4, r5, r7, pc}
 800739c:	2000175c 	.word	0x2000175c
 80073a0:	200017c4 	.word	0x200017c4
 80073a4:	20001834 	.word	0x20001834
 80073a8:	20001844 	.word	0x20001844
 80073ac:	08027648 	.word	0x08027648

080073b0 <fusion_logging_thread>:

void fusion_logging_thread()
{
 80073b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073b4:	b0c2      	sub	sp, #264	@ 0x108
 80073b6:	af14      	add	r7, sp, #80	@ 0x50
	osDelay(400);
 80073b8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80073bc:	f00c fdf9 	bl	8013fb2 <osDelay>
	USB_Log("--- FUSION LOGGING THREAD STARTING ---", CRITICAL);
 80073c0:	2101      	movs	r1, #1
 80073c2:	4849      	ldr	r0, [pc, #292]	@ (80074e8 <fusion_logging_thread+0x138>)
 80073c4:	f7fe ffc4 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
	osDelay(100);
 80073c8:	2064      	movs	r0, #100	@ 0x64
 80073ca:	f00c fdf2 	bl	8013fb2 <osDelay>

	char state_log[128];
	while (1)
	{
		if (!mag_calibrated) { osDelay(500); continue; }
 80073ce:	4b47      	ldr	r3, [pc, #284]	@ (80074ec <fusion_logging_thread+0x13c>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	f083 0301 	eor.w	r3, r3, #1
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <fusion_logging_thread+0x36>
 80073dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80073e0:	f00c fde7 	bl	8013fb2 <osDelay>
 80073e4:	e07f      	b.n	80074e6 <fusion_logging_thread+0x136>
		{
			np::lock_guard lock(stateMutexHandle);
 80073e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80073ea:	4941      	ldr	r1, [pc, #260]	@ (80074f0 <fusion_logging_thread+0x140>)
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7f9 fe0d 	bl	800100c <_ZN2np10lock_guardC1ERPv>
			snprintf(state_log, sizeof(state_log),
					"%.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f %.4f",
					drone_state.rotation[0], drone_state.rotation[1], drone_state.rotation[2],
 80073f2:	4b40      	ldr	r3, [pc, #256]	@ (80074f4 <fusion_logging_thread+0x144>)
 80073f4:	681b      	ldr	r3, [r3, #0]
			snprintf(state_log, sizeof(state_log),
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7f9 f8ce 	bl	8000598 <__aeabi_f2d>
 80073fc:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
					drone_state.rotation[0], drone_state.rotation[1], drone_state.rotation[2],
 8007400:	4b3c      	ldr	r3, [pc, #240]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007402:	685b      	ldr	r3, [r3, #4]
			snprintf(state_log, sizeof(state_log),
 8007404:	4618      	mov	r0, r3
 8007406:	f7f9 f8c7 	bl	8000598 <__aeabi_f2d>
 800740a:	e9c7 0108 	strd	r0, r1, [r7, #32]
					drone_state.rotation[0], drone_state.rotation[1], drone_state.rotation[2],
 800740e:	4b39      	ldr	r3, [pc, #228]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007410:	689b      	ldr	r3, [r3, #8]
			snprintf(state_log, sizeof(state_log),
 8007412:	4618      	mov	r0, r3
 8007414:	f7f9 f8c0 	bl	8000598 <__aeabi_f2d>
 8007418:	e9c7 0106 	strd	r0, r1, [r7, #24]
					drone_state.quaternion[0], drone_state.quaternion[1], drone_state.quaternion[2], drone_state.quaternion[3],
 800741c:	4b35      	ldr	r3, [pc, #212]	@ (80074f4 <fusion_logging_thread+0x144>)
 800741e:	68db      	ldr	r3, [r3, #12]
			snprintf(state_log, sizeof(state_log),
 8007420:	4618      	mov	r0, r3
 8007422:	f7f9 f8b9 	bl	8000598 <__aeabi_f2d>
 8007426:	e9c7 0104 	strd	r0, r1, [r7, #16]
					drone_state.quaternion[0], drone_state.quaternion[1], drone_state.quaternion[2], drone_state.quaternion[3],
 800742a:	4b32      	ldr	r3, [pc, #200]	@ (80074f4 <fusion_logging_thread+0x144>)
 800742c:	691b      	ldr	r3, [r3, #16]
			snprintf(state_log, sizeof(state_log),
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 f8b2 	bl	8000598 <__aeabi_f2d>
 8007434:	e9c7 0102 	strd	r0, r1, [r7, #8]
					drone_state.quaternion[0], drone_state.quaternion[1], drone_state.quaternion[2], drone_state.quaternion[3],
 8007438:	4b2e      	ldr	r3, [pc, #184]	@ (80074f4 <fusion_logging_thread+0x144>)
 800743a:	695b      	ldr	r3, [r3, #20]
			snprintf(state_log, sizeof(state_log),
 800743c:	4618      	mov	r0, r3
 800743e:	f7f9 f8ab 	bl	8000598 <__aeabi_f2d>
 8007442:	e9c7 0100 	strd	r0, r1, [r7]
					drone_state.quaternion[0], drone_state.quaternion[1], drone_state.quaternion[2], drone_state.quaternion[3],
 8007446:	4b2b      	ldr	r3, [pc, #172]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007448:	699b      	ldr	r3, [r3, #24]
			snprintf(state_log, sizeof(state_log),
 800744a:	4618      	mov	r0, r3
 800744c:	f7f9 f8a4 	bl	8000598 <__aeabi_f2d>
 8007450:	4682      	mov	sl, r0
 8007452:	468b      	mov	fp, r1
					drone_state.xy_velocity[0], drone_state.xy_velocity[1],
 8007454:	4b27      	ldr	r3, [pc, #156]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007456:	69db      	ldr	r3, [r3, #28]
			snprintf(state_log, sizeof(state_log),
 8007458:	4618      	mov	r0, r3
 800745a:	f7f9 f89d 	bl	8000598 <__aeabi_f2d>
 800745e:	4680      	mov	r8, r0
 8007460:	4689      	mov	r9, r1
					drone_state.xy_velocity[0], drone_state.xy_velocity[1],
 8007462:	4b24      	ldr	r3, [pc, #144]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007464:	6a1b      	ldr	r3, [r3, #32]
			snprintf(state_log, sizeof(state_log),
 8007466:	4618      	mov	r0, r3
 8007468:	f7f9 f896 	bl	8000598 <__aeabi_f2d>
 800746c:	4604      	mov	r4, r0
 800746e:	460d      	mov	r5, r1
					drone_state.altitude);
 8007470:	4b20      	ldr	r3, [pc, #128]	@ (80074f4 <fusion_logging_thread+0x144>)
 8007472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
			snprintf(state_log, sizeof(state_log),
 8007474:	4618      	mov	r0, r3
 8007476:	f7f9 f88f 	bl	8000598 <__aeabi_f2d>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8007482:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8007486:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 800748a:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 800748e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007492:	ed97 7b00 	vldr	d7, [r7]
 8007496:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800749a:	ed97 7b02 	vldr	d7, [r7, #8]
 800749e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80074a2:	ed97 7b04 	vldr	d7, [r7, #16]
 80074a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80074ae:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074b2:	ed97 7b08 	vldr	d7, [r7, #32]
 80074b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80074ba:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 80074be:	ed8d 7b00 	vstr	d7, [sp]
 80074c2:	4a0d      	ldr	r2, [pc, #52]	@ (80074f8 <fusion_logging_thread+0x148>)
 80074c4:	2180      	movs	r1, #128	@ 0x80
 80074c6:	f01d fbf7 	bl	8024cb8 <sniprintf>
		}
 80074ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 fdb1 	bl	8001036 <_ZN2np10lock_guardD1Ev>
		USB_Log(state_log, STATE);		// Log drone state data
 80074d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80074d8:	2104      	movs	r1, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe ff38 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		osDelay(50);
 80074e0:	2032      	movs	r0, #50	@ 0x32
 80074e2:	f00c fd66 	bl	8013fb2 <osDelay>
	}
 80074e6:	e772      	b.n	80073ce <fusion_logging_thread+0x1e>
 80074e8:	08027668 	.word	0x08027668
 80074ec:	20000d75 	.word	0x20000d75
 80074f0:	200064a0 	.word	0x200064a0
 80074f4:	200017c4 	.word	0x200017c4
 80074f8:	08027690 	.word	0x08027690

080074fc <initialize_sensor_fusion>:
 *
 * FUNCTIONS
 *
 */
void initialize_sensor_fusion()
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	af00      	add	r7, sp, #0
	// Check MotionFX state size
	if (STATE_SIZE < MotionFX_GetStateSize())
 8007500:	f019 fdf4 	bl	80210ec <MotionFX_GetStateSize>
 8007504:	4603      	mov	r3, r0
 8007506:	f5b3 6f18 	cmp.w	r3, #2432	@ 0x980
 800750a:	bf8c      	ite	hi
 800750c:	2301      	movhi	r3, #1
 800750e:	2300      	movls	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	2b00      	cmp	r3, #0
 8007514:	d009      	beq.n	800752a <initialize_sensor_fusion+0x2e>
	{
		USB_Log("MotionFX algorithm state not enough memory", ERR);
 8007516:	2102      	movs	r1, #2
 8007518:	4828      	ldr	r0, [pc, #160]	@ (80075bc <initialize_sensor_fusion+0xc0>)
 800751a:	f7fe ff19 	bl	8006350 <_Z7USB_LogPKc9Log_Level>
		osDelay(500);
 800751e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007522:	f00c fd46 	bl	8013fb2 <osDelay>
		Error_Handler();
 8007526:	f001 fa17 	bl	8008958 <Error_Handler>
	}
	MotionFX_initialize((MFXState_t *)mfxstate);
 800752a:	4825      	ldr	r0, [pc, #148]	@ (80075c0 <initialize_sensor_fusion+0xc4>)
 800752c:	f019 fde2 	bl	80210f4 <MotionFX_initialize>

	// Turn library knobs...
	MotionFX_getKnobs(mfxstate, &iKnobs);
 8007530:	4924      	ldr	r1, [pc, #144]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007532:	4823      	ldr	r0, [pc, #140]	@ (80075c0 <initialize_sensor_fusion+0xc4>)
 8007534:	f019 fee2 	bl	80212fc <MotionFX_getKnobs>

	iKnobs.acc_orientation[0] = 'w';	// positive orientation to the
 8007538:	4b22      	ldr	r3, [pc, #136]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800753a:	2277      	movs	r2, #119	@ 0x77
 800753c:	775a      	strb	r2, [r3, #29]
	iKnobs.acc_orientation[1] = 's';	// 	   board's reference frame
 800753e:	4b21      	ldr	r3, [pc, #132]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007540:	2273      	movs	r2, #115	@ 0x73
 8007542:	779a      	strb	r2, [r3, #30]
	iKnobs.acc_orientation[2] = 'u';
 8007544:	4b1f      	ldr	r3, [pc, #124]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007546:	2275      	movs	r2, #117	@ 0x75
 8007548:	77da      	strb	r2, [r3, #31]
	iKnobs.gyro_orientation[0] = 'w';
 800754a:	4b1e      	ldr	r3, [pc, #120]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800754c:	2277      	movs	r2, #119	@ 0x77
 800754e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	iKnobs.gyro_orientation[1] = 's';
 8007552:	4b1c      	ldr	r3, [pc, #112]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007554:	2273      	movs	r2, #115	@ 0x73
 8007556:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	iKnobs.gyro_orientation[2] = 'u';
 800755a:	4b1a      	ldr	r3, [pc, #104]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800755c:	2275      	movs	r2, #117	@ 0x75
 800755e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	iKnobs.mag_orientation[0] = 'n';
 8007562:	4b18      	ldr	r3, [pc, #96]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007564:	226e      	movs	r2, #110	@ 0x6e
 8007566:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	iKnobs.mag_orientation[1] = 'w';
 800756a:	4b16      	ldr	r3, [pc, #88]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800756c:	2277      	movs	r2, #119	@ 0x77
 800756e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	iKnobs.mag_orientation[2] = 'u';
 8007572:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007574:	2275      	movs	r2, #117	@ 0x75
 8007576:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

	iKnobs.gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 800757a:	4b12      	ldr	r3, [pc, #72]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800757c:	4a12      	ldr	r2, [pc, #72]	@ (80075c8 <initialize_sensor_fusion+0xcc>)
 800757e:	615a      	str	r2, [r3, #20]
	iKnobs.gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8007580:	4b10      	ldr	r3, [pc, #64]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007582:	4a12      	ldr	r2, [pc, #72]	@ (80075cc <initialize_sensor_fusion+0xd0>)
 8007584:	619a      	str	r2, [r3, #24]
	iKnobs.gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8007586:	4b0f      	ldr	r3, [pc, #60]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007588:	4a11      	ldr	r2, [pc, #68]	@ (80075d0 <initialize_sensor_fusion+0xd4>)
 800758a:	611a      	str	r2, [r3, #16]

	iKnobs.output_type = MFX_ENGINE_OUTPUT_NED;	// NED output orientation
 800758c:	4b0d      	ldr	r3, [pc, #52]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	iKnobs.LMode = 1;							// static learning
 8007594:	4b0b      	ldr	r3, [pc, #44]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 8007596:	2201      	movs	r2, #1
 8007598:	731a      	strb	r2, [r3, #12]
	iKnobs.modx = 1;							// decimation of MotionFX_update call frequency
 800759a:	4b0a      	ldr	r3, [pc, #40]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 800759c:	2201      	movs	r2, #1
 800759e:	771a      	strb	r2, [r3, #28]

	MotionFX_setKnobs(mfxstate, &iKnobs);
 80075a0:	4908      	ldr	r1, [pc, #32]	@ (80075c4 <initialize_sensor_fusion+0xc8>)
 80075a2:	4807      	ldr	r0, [pc, #28]	@ (80075c0 <initialize_sensor_fusion+0xc4>)
 80075a4:	f019 fe5e 	bl	8021264 <MotionFX_setKnobs>

	// Enable 9-axis sensor fusion
	MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80075a8:	2100      	movs	r1, #0
 80075aa:	4805      	ldr	r0, [pc, #20]	@ (80075c0 <initialize_sensor_fusion+0xc4>)
 80075ac:	f019 fee4 	bl	8021378 <MotionFX_enable_6X>
	MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80075b0:	2101      	movs	r1, #1
 80075b2:	4803      	ldr	r0, [pc, #12]	@ (80075c0 <initialize_sensor_fusion+0xc4>)
 80075b4:	f019 ff00 	bl	80213b8 <MotionFX_enable_9X>
}
 80075b8:	bf00      	nop
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	080276c4 	.word	0x080276c4
 80075c0:	20000d88 	.word	0x20000d88
 80075c4:	20001708 	.word	0x20001708
 80075c8:	3ac88a48 	.word	0x3ac88a48
 80075cc:	3b83126f 	.word	0x3b83126f
 80075d0:	3b449ba6 	.word	0x3b449ba6

080075d4 <service_BMI088_Accel>:

void service_BMI088_Accel(){ imu.service_irq_accelerometer(); }
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	4802      	ldr	r0, [pc, #8]	@ (80075e4 <service_BMI088_Accel+0x10>)
 80075da:	f7f9 fffb 	bl	80015d4 <_ZN6BMI08825service_irq_accelerometerEv>
 80075de:	bf00      	nop
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	20000be8 	.word	0x20000be8

080075e8 <service_BMI088_Gyro>:
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
 80075e8:	b580      	push	{r7, lr}
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	4802      	ldr	r0, [pc, #8]	@ (80075f8 <service_BMI088_Gyro+0x10>)
 80075ee:	f7fa f8af 	bl	8001750 <_ZN6BMI08821service_irq_gyroscopeEv>
 80075f2:	bf00      	nop
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	20000be8 	.word	0x20000be8

080075fc <service_BMP388>:
void service_BMP388() { barometer.service_irq(); }
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
 8007600:	4802      	ldr	r0, [pc, #8]	@ (800760c <service_BMP388+0x10>)
 8007602:	f7fa ffe5 	bl	80025d0 <_ZN6BMP38811service_irqEv>
 8007606:	bf00      	nop
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000c78 	.word	0x20000c78

08007610 <service_LIS3MDL>:
void service_LIS3MDL() {
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
	magnetometer.service_irq();
 8007614:	4803      	ldr	r0, [pc, #12]	@ (8007624 <service_LIS3MDL+0x14>)
 8007616:	f7fb fde5 	bl	80031e4 <_ZN7LIS3MDL11service_irqEv>
	imu.service_irq_temperature();	// Magnetometer low output data rate, so include IMU temperature read here
 800761a:	4803      	ldr	r0, [pc, #12]	@ (8007628 <service_LIS3MDL+0x18>)
 800761c:	f7fa f94c 	bl	80018b8 <_ZN6BMI08823service_irq_temperatureEv>
}
 8007620:	bf00      	nop
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000c44 	.word	0x20000c44
 8007628:	20000be8 	.word	0x20000be8

0800762c <poll_US100_Ultrasonic>:
void poll_US100_Ultrasonic(uint8_t start_transfer)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	71fb      	strb	r3, [r7, #7]
	if (start_transfer) {
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <poll_US100_Ultrasonic+0x18>
		range_finder.start_distance_transfer();
 800763c:	4805      	ldr	r0, [pc, #20]	@ (8007654 <poll_US100_Ultrasonic+0x28>)
 800763e:	f7fe f853 	bl	80056e8 <_ZN16US100_Ultrasonic23start_distance_transferEv>
	} else {
		range_finder.finish_distance_transfer();
	}
}
 8007642:	e002      	b.n	800764a <poll_US100_Ultrasonic+0x1e>
		range_finder.finish_distance_transfer();
 8007644:	4803      	ldr	r0, [pc, #12]	@ (8007654 <poll_US100_Ultrasonic+0x28>)
 8007646:	f7fe f875 	bl	8005734 <_ZN16US100_Ultrasonic24finish_distance_transferEv>
}
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20000ccc 	.word	0x20000ccc

08007658 <poll_PMW3901>:
void poll_PMW3901() { optical_flow.update(); }
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
 800765c:	4802      	ldr	r0, [pc, #8]	@ (8007668 <poll_PMW3901+0x10>)
 800765e:	f7fc f8b7 	bl	80037d0 <_ZN7PMW39016updateEv>
 8007662:	bf00      	nop
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000cf8 	.word	0x20000cf8

0800766c <_ZN19MovingAverageFilterIsED1Ev>:
class MovingAverageFilter
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4618      	mov	r0, r3
 8007678:	f000 f8e4 	bl	8007844 <_ZNSt6vectorIsSaIsEED1Ev>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <_ZN7PMW3901D1Ev>:
#define RES_PIX							30
#define MOTION_SCALER					8		// Determined experimentally
#define CORRECTION_SCALER				29		// Determined experimentally


class PMW3901
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3334      	adds	r3, #52	@ 0x34
 8007692:	4618      	mov	r0, r3
 8007694:	f7ff ffea 	bl	800766c <_ZN19MovingAverageFilterIsED1Ev>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3320      	adds	r3, #32
 800769c:	4618      	mov	r0, r3
 800769e:	f7ff ffe5 	bl	800766c <_ZN19MovingAverageFilterIsED1Ev>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <_ZN19MovingAverageFilterIfED1Ev>:
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f000 f8df 	bl	800787a <_ZNSt6vectorIfSaIfEED1Ev>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZN16US100_UltrasonicD1Ev>:
#include <cstdint>

#define MAX_DISTANCE_M			(float)4.5


class US100_Ultrasonic
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3318      	adds	r3, #24
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7ff ffea 	bl	80076ac <_ZN19MovingAverageFilterIfED1Ev>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>:
    struct array
 80076e2:	b590      	push	{r4, r7, lr}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00a      	beq.n	8007706 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f103 040c 	add.w	r4, r3, #12
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d004      	beq.n	8007706 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x24>
 80076fc:	3c04      	subs	r4, #4
 80076fe:	4620      	mov	r0, r4
 8007700:	f7fa fc44 	bl	8001f8c <_ZNSt10unique_ptrI9IIRFilterSt14default_deleteIS0_EED1Ev>
 8007704:	e7f7      	b.n	80076f6 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev+0x14>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	bd90      	pop	{r4, r7, pc}

08007710 <_ZN7LIS3MDLD1Ev>:
	const float y_offset = -0.2835;
	const float z_offset = -0.1110;
};


class LIS3MDL
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3328      	adds	r3, #40	@ 0x28
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff ffe0 	bl	80076e2 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <_ZN6BMI088D1Ev>:
#define REG_GYRO_FIFO_CONFIG_0	0x3D
#define	REG_GYRO_FIFO_CONFIG_1  0x3E
#define	REG_GYRO_FIFO_DATA		0x3F


class BMI088
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3350      	adds	r3, #80	@ 0x50
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff ffd2 	bl	80076e2 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	3344      	adds	r3, #68	@ 0x44
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ffcd 	bl	80076e2 <_ZNSt5arrayISt10unique_ptrI9IIRFilterSt14default_deleteIS1_EELj3EED1Ev>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4618      	mov	r0, r3
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <_Z41__static_initialization_and_destruction_0ii>:
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af06      	add	r7, sp, #24
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d133      	bne.n	80077cc <_Z41__static_initialization_and_destruction_0ii+0x78>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800776a:	4293      	cmp	r3, r2
 800776c:	d12e      	bne.n	80077cc <_Z41__static_initialization_and_destruction_0ii+0x78>
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
 800776e:	4b23      	ldr	r3, [pc, #140]	@ (80077fc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007770:	9304      	str	r3, [sp, #16]
 8007772:	4b23      	ldr	r3, [pc, #140]	@ (8007800 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007774:	9303      	str	r3, [sp, #12]
 8007776:	2301      	movs	r3, #1
 8007778:	9302      	str	r3, [sp, #8]
 800777a:	2310      	movs	r3, #16
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007788:	4a1e      	ldr	r2, [pc, #120]	@ (8007804 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800778a:	491f      	ldr	r1, [pc, #124]	@ (8007808 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800778c:	481f      	ldr	r0, [pc, #124]	@ (800780c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800778e:	f7f9 fc61 	bl	8001054 <_ZN6BMI088C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDefS5_ttS3_S3_>
LIS3MDL magnetometer(&hi2c2, i2c2MutexHandle, magDataMutexHandle);
 8007792:	4b1f      	ldr	r3, [pc, #124]	@ (8007810 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007794:	4a1f      	ldr	r2, [pc, #124]	@ (8007814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007796:	4920      	ldr	r1, [pc, #128]	@ (8007818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007798:	4820      	ldr	r0, [pc, #128]	@ (800781c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800779a:	f7fb fbfb 	bl	8002f94 <_ZN7LIS3MDLC1EP19__I2C_HandleTypeDefRPvS3_>
BMP388 barometer(&hi2c2, i2c2MutexHandle, baroDataMutexHandle);
 800779e:	4b20      	ldr	r3, [pc, #128]	@ (8007820 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80077a0:	4a1c      	ldr	r2, [pc, #112]	@ (8007814 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80077a2:	491d      	ldr	r1, [pc, #116]	@ (8007818 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80077a4:	481f      	ldr	r0, [pc, #124]	@ (8007824 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80077a6:	f7fa fe18 	bl	80023da <_ZN6BMP388C1EP19__I2C_HandleTypeDefRPvS3_>
US100_Ultrasonic range_finder(&huart2, uart2MutexHandle, ultrasonicDataMutexHandle);
 80077aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007828 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80077ac:	4a1f      	ldr	r2, [pc, #124]	@ (800782c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80077ae:	4920      	ldr	r1, [pc, #128]	@ (8007830 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80077b0:	4820      	ldr	r0, [pc, #128]	@ (8007834 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80077b2:	f7fd ff7e 	bl	80056b2 <_ZN16US100_UltrasonicC1EP20__UART_HandleTypeDefRPvS3_>
PMW3901 optical_flow(&hspi1, spi1MutexHandle, FLOW_CS_GPIO_Port, FLOW_CS_Pin, flowDataMutexHandle);
 80077b6:	4b20      	ldr	r3, [pc, #128]	@ (8007838 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80077b8:	9301      	str	r3, [sp, #4]
 80077ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	4b1e      	ldr	r3, [pc, #120]	@ (800783c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80077c2:	4a10      	ldr	r2, [pc, #64]	@ (8007804 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80077c4:	4910      	ldr	r1, [pc, #64]	@ (8007808 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80077c6:	481e      	ldr	r0, [pc, #120]	@ (8007840 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80077c8:	f7fb fe9c 	bl	8003504 <_ZN7PMW3901C1EP19__SPI_HandleTypeDefRPvP12GPIO_TypeDeftS3_>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d110      	bne.n	80077f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077d8:	4293      	cmp	r3, r2
 80077da:	d10b      	bne.n	80077f4 <_Z41__static_initialization_and_destruction_0ii+0xa0>
 80077dc:	4818      	ldr	r0, [pc, #96]	@ (8007840 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80077de:	f7ff ff52 	bl	8007686 <_ZN7PMW3901D1Ev>
US100_Ultrasonic range_finder(&huart2, uart2MutexHandle, ultrasonicDataMutexHandle);
 80077e2:	4814      	ldr	r0, [pc, #80]	@ (8007834 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80077e4:	f7ff ff6f 	bl	80076c6 <_ZN16US100_UltrasonicD1Ev>
LIS3MDL magnetometer(&hi2c2, i2c2MutexHandle, magDataMutexHandle);
 80077e8:	480c      	ldr	r0, [pc, #48]	@ (800781c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80077ea:	f7ff ff91 	bl	8007710 <_ZN7LIS3MDLD1Ev>
BMI088 imu(&hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
 80077ee:	4807      	ldr	r0, [pc, #28]	@ (800780c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80077f0:	f7ff ff9c 	bl	800772c <_ZN6BMI088D1Ev>
void poll_PMW3901() { optical_flow.update(); }
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	200063a4 	.word	0x200063a4
 8007800:	20006350 	.word	0x20006350
 8007804:	20006254 	.word	0x20006254
 8007808:	20006738 	.word	0x20006738
 800780c:	20000be8 	.word	0x20000be8
 8007810:	2000644c 	.word	0x2000644c
 8007814:	200062fc 	.word	0x200062fc
 8007818:	200066e0 	.word	0x200066e0
 800781c:	20000c44 	.word	0x20000c44
 8007820:	200063f8 	.word	0x200063f8
 8007824:	20000c78 	.word	0x20000c78
 8007828:	20006548 	.word	0x20006548
 800782c:	200064f4 	.word	0x200064f4
 8007830:	20006838 	.word	0x20006838
 8007834:	20000ccc 	.word	0x20000ccc
 8007838:	2000659c 	.word	0x2000659c
 800783c:	48000800 	.word	0x48000800
 8007840:	20000cf8 	.word	0x20000cf8

08007844 <_ZNSt6vectorIsSaIsEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681c      	ldr	r4, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd fa76 	bl	8004d48 <_ZNSt12_Vector_baseIsSaIsEE19_M_get_Tp_allocatorEv>
 800785c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800785e:	461a      	mov	r2, r3
 8007860:	4629      	mov	r1, r5
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f849 	bl	80078fa <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>
      }
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f82c 	bl	80078c8 <_ZNSt12_Vector_baseIsSaIsEED1Ev>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bdb0      	pop	{r4, r5, r7, pc}

0800787a <_ZNSt6vectorIfSaIfEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800787a:	b5b0      	push	{r4, r5, r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681c      	ldr	r4, [r3, #0]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe f8f1 	bl	8005a74 <_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv>
 8007892:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007894:	461a      	mov	r2, r3
 8007896:	4629      	mov	r1, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f000 f861 	bl	8007960 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>
      }
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 f844 	bl	800792e <_ZNSt12_Vector_baseIfSaIfEED1Ev>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4618      	mov	r0, r3
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bdb0      	pop	{r4, r5, r7, pc}

080078b0 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>:
      struct _Vector_impl
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f85f 	bl	800797c <_ZNSaIsED1Ev>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4618      	mov	r0, r3
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <_ZNSt12_Vector_baseIsSaIsEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689a      	ldr	r2, [r3, #8]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 80078e0:	461a      	mov	r2, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fd faf9 	bl	8004eda <_ZNSt12_Vector_baseIsSaIsEE13_M_deallocateEPsj>
      }
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff ffe0 	bl	80078b0 <_ZNSt12_Vector_baseIsSaIsEE12_Vector_implD1Ev>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4618      	mov	r0, r3
 80078f4:	3708      	adds	r7, #8
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <_ZSt8_DestroyIPssEvT_S1_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 f842 	bl	8007992 <_ZSt8_DestroyIPsEvT_S1_>
    }
 800790e:	bf00      	nop
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f84d 	bl	80079be <_ZNSaIfED1Ev>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4618      	mov	r0, r3
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <_ZNSt12_Vector_baseIfSaIfEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007946:	461a      	mov	r2, r3
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe f93e 	bl	8005bca <_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfj>
      }
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff ffe0 	bl	8007916 <_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <_ZSt8_DestroyIPffEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 f830 	bl	80079d4 <_ZSt8_DestroyIPfEvT_S1_>
    }
 8007974:	bf00      	nop
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <_ZNSaIsED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <_ZSt8_DestroyIPsEvT_S1_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
 800799c:	f7fe fdec 	bl	8006578 <__is_constant_evaluated>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <_ZSt8_DestroyIPsEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f829 	bl	8007a00 <_ZNSt12_Destroy_auxILb0EE9__destroyIPsEEvT_S3_>
 80079ae:	e003      	b.n	80079b8 <_ZSt8_DestroyIPsEvT_S1_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f83d 	bl	8007a32 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>
    }
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <_ZNSaIfED1Ev>:
 80079be:	b480      	push	{r7}
 80079c0:	b083      	sub	sp, #12
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4618      	mov	r0, r3
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <_ZSt8_DestroyIPfEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
      if (std::__is_constant_evaluated())
 80079de:	f7fe fdcb 	bl	8006578 <__is_constant_evaluated>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <_ZSt8_DestroyIPfEvT_S1_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80079e8:	6839      	ldr	r1, [r7, #0]
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f82c 	bl	8007a48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>
 80079f0:	e003      	b.n	80079fa <_ZSt8_DestroyIPfEvT_S1_+0x26>
	__destroy(__first, __last);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f840 	bl	8007a7a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>
    }
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZNSt12_Destroy_auxILb0EE9__destroyIPsEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007a0a:	e009      	b.n	8007a20 <_ZNSt12_Destroy_auxILb0EE9__destroyIPsEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fd fd48 	bl	80054a2 <_ZSt11__addressofIsEPT_RS0_>
 8007a12:	4603      	mov	r3, r0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f000 f83b 	bl	8007a90 <_ZSt8_DestroyIsEvPT_>
	  for (; __first != __last; ++__first)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	607b      	str	r3, [r7, #4]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d1f1      	bne.n	8007a0c <_ZNSt12_Destroy_auxILb0EE9__destroyIPsEEvT_S3_+0xc>
	}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <_ZNSt12_Destroy_auxILb1EE9__destroyIPsEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
 8007a3a:	6039      	str	r1, [r7, #0]
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007a52:	e009      	b.n	8007a68 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0x20>
	    std::_Destroy(std::__addressof(*__first));
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fe fb73 	bl	8006140 <_ZSt11__addressofIfEPT_RS0_>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 f822 	bl	8007aa6 <_ZSt8_DestroyIfEvPT_>
	  for (; __first != __last; ++__first)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3304      	adds	r3, #4
 8007a66:	607b      	str	r3, [r7, #4]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d1f1      	bne.n	8007a54 <_ZNSt12_Destroy_auxILb0EE9__destroyIPfEEvT_S3_+0xc>
	}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <_ZSt8_DestroyIsEvPT_>:
    _Destroy(_Tp* __pointer)
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7fd fd0d 	bl	80054b8 <_ZSt10destroy_atIsEvPT_>
    }
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <_ZSt8_DestroyIfEvPT_>:
    _Destroy(_Tp* __pointer)
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b082      	sub	sp, #8
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fe fb51 	bl	8006156 <_ZSt10destroy_atIfEvPT_>
    }
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <_GLOBAL__sub_I_imu>:
 8007abc:	b580      	push	{r7, lr}
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	f7ff fe45 	bl	8007754 <_Z41__static_initialization_and_destruction_0ii>
 8007aca:	bd80      	pop	{r7, pc}

08007acc <_GLOBAL__sub_D_imu>:
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f7ff fe3d 	bl	8007754 <_Z41__static_initialization_and_destruction_0ii>
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	0000      	movs	r0, r0
	...

08007ae0 <_ZN9IIRFilterC1Eff>:
 */
#include "Utility/IIRFilter.hpp"
#include <cmath>


IIRFilter::IIRFilter(float cutoff_frequency, float sampling_frequency)
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	ed2d 8b02 	vpush	{d8}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	ed87 0a02 	vstr	s0, [r7, #8]
 8007af0:	edc7 0a01 	vstr	s1, [r7, #4]
	: cutoff_frequency{cutoff_frequency},
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	601a      	str	r2, [r3, #0]
	  sampling_frequency{sampling_frequency},
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	605a      	str	r2, [r3, #4]
	  K{tanf(M_PI * (cutoff_frequency / sampling_frequency))}
 8007b00:	ed97 7a02 	vldr	s14, [r7, #8]
 8007b04:	edd7 7a01 	vldr	s15, [r7, #4]
 8007b08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007b0c:	ee16 0a90 	vmov	r0, s13
 8007b10:	f7f8 fd42 	bl	8000598 <__aeabi_f2d>
 8007b14:	a375      	add	r3, pc, #468	@ (adr r3, 8007cec <_ZN9IIRFilterC1Eff+0x20c>)
 8007b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1a:	f7f8 fd95 	bl	8000648 <__aeabi_dmul>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	460b      	mov	r3, r1
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	f7f9 f867 	bl	8000bf8 <__aeabi_d2f>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	ee00 3a10 	vmov	s0, r3
 8007b30:	f01a fa30 	bl	8021f94 <tanf>
 8007b34:	eef0 7a40 	vmov.f32	s15, s0
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	edc3 7a02 	vstr	s15, [r3, #8]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a69      	ldr	r2, [pc, #420]	@ (8007ce8 <_ZN9IIRFilterC1Eff+0x208>)
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3310      	adds	r3, #16
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	605a      	str	r2, [r3, #4]
 8007b4e:	609a      	str	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	331c      	adds	r3, #28
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	605a      	str	r2, [r3, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3324      	adds	r3, #36	@ 0x24
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	605a      	str	r2, [r3, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	332c      	adds	r3, #44	@ 0x2c
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
{
	a[0] = (K * K) / (K * K + K / Q + 1);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	edd3 6a02 	vldr	s13, [r3, #8]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8007b8a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	edd3 5a02 	vldr	s11, [r3, #8]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	ed93 6a03 	vldr	s12, [r3, #12]
 8007b9a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007baa:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	3310      	adds	r3, #16
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fa fa77 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	ed83 8a00 	vstr	s16, [r3]
	a[1] = 2 * a[0];
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	3310      	adds	r3, #16
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fa fa6e 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	edd3 7a00 	vldr	s15, [r3]
 8007bd2:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	3310      	adds	r3, #16
 8007bda:	2101      	movs	r1, #1
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fa fa63 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007be2:	4603      	mov	r3, r0
 8007be4:	ed83 8a00 	vstr	s16, [r3]
	a[2] = a[0];
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	3310      	adds	r3, #16
 8007bec:	2100      	movs	r1, #0
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fa fa5a 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	681c      	ldr	r4, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fa fa52 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007c04:	4603      	mov	r3, r0
 8007c06:	601c      	str	r4, [r3, #0]

	b[0] = (2 * (K * K - 1)) / (K * K + K / Q + 1);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c20:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	edd3 6a02 	vldr	s13, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c30:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	edd3 5a02 	vldr	s11, [r3, #8]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	ed93 6a03 	vldr	s12, [r3, #12]
 8007c40:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c50:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	331c      	adds	r3, #28
 8007c58:	2100      	movs	r1, #0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fc ffea 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007c60:	4603      	mov	r3, r0
 8007c62:	ed83 8a00 	vstr	s16, [r3]
	b[1] = (K * K - K / Q + 1) / (K * K + K / Q + 1);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	ed93 6a02 	vldr	s12, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	edd3 6a03 	vldr	s13, [r3, #12]
 8007c82:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8007c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	edd3 6a02 	vldr	s13, [r3, #8]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007c9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	edd3 5a02 	vldr	s11, [r3, #8]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	ed93 6a03 	vldr	s12, [r3, #12]
 8007cae:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8007cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cbe:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	331c      	adds	r3, #28
 8007cc6:	2101      	movs	r1, #1
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fc ffb3 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	ed83 8a00 	vstr	s16, [r3]
}
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	ecbd 8b02 	vpop	{d8}
 8007ce0:	bd90      	pop	{r4, r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	3f350481 	.word	0x3f350481
 8007cec:	54442d18 	.word	0x54442d18
 8007cf0:	400921fb 	.word	0x400921fb

08007cf4 <_ZN9IIRFilter6updateEf>:

float IIRFilter::update(float input)
{
 8007cf4:	b590      	push	{r4, r7, lr}
 8007cf6:	ed2d 8b02 	vpush	{d8}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	ed87 0a00 	vstr	s0, [r7]
	float sum1 = a[0] * input + a[1] * prev_input[0] + a[2] * prev_input[1];
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3310      	adds	r3, #16
 8007d08:	2100      	movs	r1, #0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fa f9cc 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007d10:	4603      	mov	r3, r0
 8007d12:	ed93 7a00 	vldr	s14, [r3]
 8007d16:	edd7 7a00 	vldr	s15, [r7]
 8007d1a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	3310      	adds	r3, #16
 8007d22:	2101      	movs	r1, #1
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fa f9bf 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	edd3 8a00 	vldr	s17, [r3]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3324      	adds	r3, #36	@ 0x24
 8007d34:	2100      	movs	r1, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fc ff7c 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	edd3 7a00 	vldr	s15, [r3]
 8007d42:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007d46:	ee38 8a27 	vadd.f32	s16, s16, s15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fa f9a9 	bl	80020a8 <_ZNSt5arrayIfLj3EEixEj>
 8007d56:	4603      	mov	r3, r0
 8007d58:	edd3 8a00 	vldr	s17, [r3]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	3324      	adds	r3, #36	@ 0x24
 8007d60:	2101      	movs	r1, #1
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fc ff66 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	edd3 7a00 	vldr	s15, [r3]
 8007d6e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007d72:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007d76:	edc7 7a05 	vstr	s15, [r7, #20]
	float sum2 = b[0] * prev_output[0] + b[1] * prev_output[1];
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	331c      	adds	r3, #28
 8007d7e:	2100      	movs	r1, #0
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fc ff57 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007d86:	4603      	mov	r3, r0
 8007d88:	ed93 8a00 	vldr	s16, [r3]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	332c      	adds	r3, #44	@ 0x2c
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fc ff4e 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	edd3 7a00 	vldr	s15, [r3]
 8007d9e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	331c      	adds	r3, #28
 8007da6:	2101      	movs	r1, #1
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fc ff43 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007dae:	4603      	mov	r3, r0
 8007db0:	edd3 8a00 	vldr	s17, [r3]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	332c      	adds	r3, #44	@ 0x2c
 8007db8:	2101      	movs	r1, #1
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7fc ff3a 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	edd3 7a00 	vldr	s15, [r3]
 8007dc6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8007dca:	ee78 7a27 	vadd.f32	s15, s16, s15
 8007dce:	edc7 7a04 	vstr	s15, [r7, #16]
	float output = sum1 - sum2;
 8007dd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8007dd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8007dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dde:	edc7 7a03 	vstr	s15, [r7, #12]

	prev_input[1] = prev_input[0];
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3324      	adds	r3, #36	@ 0x24
 8007de6:	2100      	movs	r1, #0
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fc ff23 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007dee:	4603      	mov	r3, r0
 8007df0:	681c      	ldr	r4, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3324      	adds	r3, #36	@ 0x24
 8007df6:	2101      	movs	r1, #1
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fc ff1b 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	601c      	str	r4, [r3, #0]
	prev_input[0] = input;
 8007e02:	683c      	ldr	r4, [r7, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3324      	adds	r3, #36	@ 0x24
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc ff12 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007e10:	4603      	mov	r3, r0
 8007e12:	601c      	str	r4, [r3, #0]
	prev_output[1] = prev_output[0];
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	332c      	adds	r3, #44	@ 0x2c
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fc ff0a 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007e20:	4603      	mov	r3, r0
 8007e22:	681c      	ldr	r4, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	332c      	adds	r3, #44	@ 0x2c
 8007e28:	2101      	movs	r1, #1
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fc ff02 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007e30:	4603      	mov	r3, r0
 8007e32:	601c      	str	r4, [r3, #0]
	prev_output[0] = output;
 8007e34:	68fc      	ldr	r4, [r7, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	332c      	adds	r3, #44	@ 0x2c
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fc fef9 	bl	8004c34 <_ZNSt5arrayIfLj2EEixEj>
 8007e42:	4603      	mov	r3, r0
 8007e44:	601c      	str	r4, [r3, #0]
	return output;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	ee07 3a90 	vmov	s15, r3
}
 8007e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	ecbd 8b02 	vpop	{d8}
 8007e58:	bd90      	pop	{r4, r7, pc}
	...

08007e5c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);
 8007e60:	4841      	ldr	r0, [pc, #260]	@ (8007f68 <MX_FREERTOS_Init+0x10c>)
 8007e62:	f00c f8ee 	bl	8014042 <osMutexNew>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4a40      	ldr	r2, [pc, #256]	@ (8007f6c <MX_FREERTOS_Init+0x110>)
 8007e6a:	6013      	str	r3, [r2, #0]

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);
 8007e6c:	4840      	ldr	r0, [pc, #256]	@ (8007f70 <MX_FREERTOS_Init+0x114>)
 8007e6e:	f00c f8e8 	bl	8014042 <osMutexNew>
 8007e72:	4603      	mov	r3, r0
 8007e74:	4a3f      	ldr	r2, [pc, #252]	@ (8007f74 <MX_FREERTOS_Init+0x118>)
 8007e76:	6013      	str	r3, [r2, #0]

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);
 8007e78:	483f      	ldr	r0, [pc, #252]	@ (8007f78 <MX_FREERTOS_Init+0x11c>)
 8007e7a:	f00c f8e2 	bl	8014042 <osMutexNew>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	4a3e      	ldr	r2, [pc, #248]	@ (8007f7c <MX_FREERTOS_Init+0x120>)
 8007e82:	6013      	str	r3, [r2, #0]

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);
 8007e84:	483e      	ldr	r0, [pc, #248]	@ (8007f80 <MX_FREERTOS_Init+0x124>)
 8007e86:	f00c f8dc 	bl	8014042 <osMutexNew>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4a3d      	ldr	r2, [pc, #244]	@ (8007f84 <MX_FREERTOS_Init+0x128>)
 8007e8e:	6013      	str	r3, [r2, #0]

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);
 8007e90:	483d      	ldr	r0, [pc, #244]	@ (8007f88 <MX_FREERTOS_Init+0x12c>)
 8007e92:	f00c f8d6 	bl	8014042 <osMutexNew>
 8007e96:	4603      	mov	r3, r0
 8007e98:	4a3c      	ldr	r2, [pc, #240]	@ (8007f8c <MX_FREERTOS_Init+0x130>)
 8007e9a:	6013      	str	r3, [r2, #0]

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);
 8007e9c:	483c      	ldr	r0, [pc, #240]	@ (8007f90 <MX_FREERTOS_Init+0x134>)
 8007e9e:	f00c f8d0 	bl	8014042 <osMutexNew>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4a3b      	ldr	r2, [pc, #236]	@ (8007f94 <MX_FREERTOS_Init+0x138>)
 8007ea6:	6013      	str	r3, [r2, #0]

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);
 8007ea8:	483b      	ldr	r0, [pc, #236]	@ (8007f98 <MX_FREERTOS_Init+0x13c>)
 8007eaa:	f00c f8ca 	bl	8014042 <osMutexNew>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	4a3a      	ldr	r2, [pc, #232]	@ (8007f9c <MX_FREERTOS_Init+0x140>)
 8007eb2:	6013      	str	r3, [r2, #0]

  /* creation of stateMutex */
  stateMutexHandle = osMutexNew(&stateMutex_attributes);
 8007eb4:	483a      	ldr	r0, [pc, #232]	@ (8007fa0 <MX_FREERTOS_Init+0x144>)
 8007eb6:	f00c f8c4 	bl	8014042 <osMutexNew>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	4a39      	ldr	r2, [pc, #228]	@ (8007fa4 <MX_FREERTOS_Init+0x148>)
 8007ebe:	6013      	str	r3, [r2, #0]

  /* creation of uart2Mutex */
  uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);
 8007ec0:	4839      	ldr	r0, [pc, #228]	@ (8007fa8 <MX_FREERTOS_Init+0x14c>)
 8007ec2:	f00c f8be 	bl	8014042 <osMutexNew>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	4a38      	ldr	r2, [pc, #224]	@ (8007fac <MX_FREERTOS_Init+0x150>)
 8007eca:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonicDataMutex */
  ultrasonicDataMutexHandle = osMutexNew(&ultrasonicDataMutex_attributes);
 8007ecc:	4838      	ldr	r0, [pc, #224]	@ (8007fb0 <MX_FREERTOS_Init+0x154>)
 8007ece:	f00c f8b8 	bl	8014042 <osMutexNew>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	4a37      	ldr	r2, [pc, #220]	@ (8007fb4 <MX_FREERTOS_Init+0x158>)
 8007ed6:	6013      	str	r3, [r2, #0]

  /* creation of flowDataMutex */
  flowDataMutexHandle = osMutexNew(&flowDataMutex_attributes);
 8007ed8:	4837      	ldr	r0, [pc, #220]	@ (8007fb8 <MX_FREERTOS_Init+0x15c>)
 8007eda:	f00c f8b2 	bl	8014042 <osMutexNew>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	4a36      	ldr	r2, [pc, #216]	@ (8007fbc <MX_FREERTOS_Init+0x160>)
 8007ee2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);
 8007ee4:	4a36      	ldr	r2, [pc, #216]	@ (8007fc0 <MX_FREERTOS_Init+0x164>)
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4836      	ldr	r0, [pc, #216]	@ (8007fc4 <MX_FREERTOS_Init+0x168>)
 8007eea:	f00b feff 	bl	8013cec <osThreadNew>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	4a35      	ldr	r2, [pc, #212]	@ (8007fc8 <MX_FREERTOS_Init+0x16c>)
 8007ef2:	6013      	str	r3, [r2, #0]

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);
 8007ef4:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <MX_FREERTOS_Init+0x170>)
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4835      	ldr	r0, [pc, #212]	@ (8007fd0 <MX_FREERTOS_Init+0x174>)
 8007efa:	f00b fef7 	bl	8013cec <osThreadNew>
 8007efe:	4603      	mov	r3, r0
 8007f00:	4a34      	ldr	r2, [pc, #208]	@ (8007fd4 <MX_FREERTOS_Init+0x178>)
 8007f02:	6013      	str	r3, [r2, #0]

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);
 8007f04:	4a34      	ldr	r2, [pc, #208]	@ (8007fd8 <MX_FREERTOS_Init+0x17c>)
 8007f06:	2100      	movs	r1, #0
 8007f08:	4834      	ldr	r0, [pc, #208]	@ (8007fdc <MX_FREERTOS_Init+0x180>)
 8007f0a:	f00b feef 	bl	8013cec <osThreadNew>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4a33      	ldr	r2, [pc, #204]	@ (8007fe0 <MX_FREERTOS_Init+0x184>)
 8007f12:	6013      	str	r3, [r2, #0]

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);
 8007f14:	4a33      	ldr	r2, [pc, #204]	@ (8007fe4 <MX_FREERTOS_Init+0x188>)
 8007f16:	2100      	movs	r1, #0
 8007f18:	4833      	ldr	r0, [pc, #204]	@ (8007fe8 <MX_FREERTOS_Init+0x18c>)
 8007f1a:	f00b fee7 	bl	8013cec <osThreadNew>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	4a32      	ldr	r2, [pc, #200]	@ (8007fec <MX_FREERTOS_Init+0x190>)
 8007f22:	6013      	str	r3, [r2, #0]

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);
 8007f24:	4a32      	ldr	r2, [pc, #200]	@ (8007ff0 <MX_FREERTOS_Init+0x194>)
 8007f26:	2100      	movs	r1, #0
 8007f28:	4832      	ldr	r0, [pc, #200]	@ (8007ff4 <MX_FREERTOS_Init+0x198>)
 8007f2a:	f00b fedf 	bl	8013cec <osThreadNew>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	4a31      	ldr	r2, [pc, #196]	@ (8007ff8 <MX_FREERTOS_Init+0x19c>)
 8007f32:	6013      	str	r3, [r2, #0]

  /* creation of fusionLoggingTask */
  fusionLoggingTaskHandle = osThreadNew(start_fusion_logging_task, NULL, &fusionLoggingTask_attributes);
 8007f34:	4a31      	ldr	r2, [pc, #196]	@ (8007ffc <MX_FREERTOS_Init+0x1a0>)
 8007f36:	2100      	movs	r1, #0
 8007f38:	4831      	ldr	r0, [pc, #196]	@ (8008000 <MX_FREERTOS_Init+0x1a4>)
 8007f3a:	f00b fed7 	bl	8013cec <osThreadNew>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4a30      	ldr	r2, [pc, #192]	@ (8008004 <MX_FREERTOS_Init+0x1a8>)
 8007f42:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonicPollingTask */
  ultrasonicPollingTaskHandle = osThreadNew(start_ultrasonic_polling_task, NULL, &ultrasonicPollingTask_attributes);
 8007f44:	4a30      	ldr	r2, [pc, #192]	@ (8008008 <MX_FREERTOS_Init+0x1ac>)
 8007f46:	2100      	movs	r1, #0
 8007f48:	4830      	ldr	r0, [pc, #192]	@ (800800c <MX_FREERTOS_Init+0x1b0>)
 8007f4a:	f00b fecf 	bl	8013cec <osThreadNew>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	4a2f      	ldr	r2, [pc, #188]	@ (8008010 <MX_FREERTOS_Init+0x1b4>)
 8007f52:	6013      	str	r3, [r2, #0]

  /* creation of opticalFlowPollingTask */
  opticalFlowPollingTaskHandle = osThreadNew(start_optical_flow_polling_task, NULL, &opticalFlowPollingTask_attributes);
 8007f54:	4a2f      	ldr	r2, [pc, #188]	@ (8008014 <MX_FREERTOS_Init+0x1b8>)
 8007f56:	2100      	movs	r1, #0
 8007f58:	482f      	ldr	r0, [pc, #188]	@ (8008018 <MX_FREERTOS_Init+0x1bc>)
 8007f5a:	f00b fec7 	bl	8013cec <osThreadNew>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	4a2e      	ldr	r2, [pc, #184]	@ (800801c <MX_FREERTOS_Init+0x1c0>)
 8007f62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8007f64:	bf00      	nop
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	08027a24 	.word	0x08027a24
 8007f6c:	20006254 	.word	0x20006254
 8007f70:	08027a34 	.word	0x08027a34
 8007f74:	200062a8 	.word	0x200062a8
 8007f78:	08027a44 	.word	0x08027a44
 8007f7c:	200062fc 	.word	0x200062fc
 8007f80:	08027a54 	.word	0x08027a54
 8007f84:	20006350 	.word	0x20006350
 8007f88:	08027a64 	.word	0x08027a64
 8007f8c:	200063a4 	.word	0x200063a4
 8007f90:	08027a74 	.word	0x08027a74
 8007f94:	200063f8 	.word	0x200063f8
 8007f98:	08027a84 	.word	0x08027a84
 8007f9c:	2000644c 	.word	0x2000644c
 8007fa0:	08027a94 	.word	0x08027a94
 8007fa4:	200064a0 	.word	0x200064a0
 8007fa8:	08027aa4 	.word	0x08027aa4
 8007fac:	200064f4 	.word	0x200064f4
 8007fb0:	08027ab4 	.word	0x08027ab4
 8007fb4:	20006548 	.word	0x20006548
 8007fb8:	08027ac4 	.word	0x08027ac4
 8007fbc:	2000659c 	.word	0x2000659c
 8007fc0:	08027904 	.word	0x08027904
 8007fc4:	08008021 	.word	0x08008021
 8007fc8:	20001854 	.word	0x20001854
 8007fcc:	08027928 	.word	0x08027928
 8007fd0:	08008035 	.word	0x08008035
 8007fd4:	20003914 	.word	0x20003914
 8007fd8:	0802794c 	.word	0x0802794c
 8007fdc:	08008051 	.word	0x08008051
 8007fe0:	20003dd4 	.word	0x20003dd4
 8007fe4:	08027970 	.word	0x08027970
 8007fe8:	0800806d 	.word	0x0800806d
 8007fec:	20004294 	.word	0x20004294
 8007ff0:	08027994 	.word	0x08027994
 8007ff4:	08008089 	.word	0x08008089
 8007ff8:	20004754 	.word	0x20004754
 8007ffc:	080279b8 	.word	0x080279b8
 8008000:	080080a5 	.word	0x080080a5
 8008004:	20004c14 	.word	0x20004c14
 8008008:	080279dc 	.word	0x080279dc
 800800c:	080080b9 	.word	0x080080b9
 8008010:	200054d4 	.word	0x200054d4
 8008014:	08027a00 	.word	0x08027a00
 8008018:	080080ef 	.word	0x080080ef
 800801c:	20005d94 	.word	0x20005d94

08008020 <start_sensor_fusion_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
 8008028:	f7fe fad2 	bl	80065d0 <sensor_fusion_thread>
  /* USER CODE END start_sensor_fusion_task */
}
 800802c:	bf00      	nop
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <start_acc_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 800803c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008040:	2101      	movs	r1, #1
 8008042:	2001      	movs	r0, #1
 8008044:	f00b ff34 	bl	8013eb0 <osThreadFlagsWait>
		service_BMI088_Accel();
 8008048:	f7ff fac4 	bl	80075d4 <service_BMI088_Accel>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 800804c:	bf00      	nop
 800804e:	e7f5      	b.n	800803c <start_acc_irq_task+0x8>

08008050 <start_gyro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8008058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800805c:	2101      	movs	r1, #1
 800805e:	2001      	movs	r0, #1
 8008060:	f00b ff26 	bl	8013eb0 <osThreadFlagsWait>
		service_BMI088_Gyro();
 8008064:	f7ff fac0 	bl	80075e8 <service_BMI088_Gyro>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8008068:	bf00      	nop
 800806a:	e7f5      	b.n	8008058 <start_gyro_irq_task+0x8>

0800806c <start_baro_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8008074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008078:	2101      	movs	r1, #1
 800807a:	2001      	movs	r0, #1
 800807c:	f00b ff18 	bl	8013eb0 <osThreadFlagsWait>
		service_BMP388();
 8008080:	f7ff fabc 	bl	80075fc <service_BMP388>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8008084:	bf00      	nop
 8008086:	e7f5      	b.n	8008074 <start_baro_irq_task+0x8>

08008088 <start_mag_irq_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8008090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008094:	2101      	movs	r1, #1
 8008096:	2001      	movs	r0, #1
 8008098:	f00b ff0a 	bl	8013eb0 <osThreadFlagsWait>
		service_LIS3MDL();
 800809c:	f7ff fab8 	bl	8007610 <service_LIS3MDL>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80080a0:	bf00      	nop
 80080a2:	e7f5      	b.n	8008090 <start_mag_irq_task+0x8>

080080a4 <start_fusion_logging_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fusion_logging_task */
void start_fusion_logging_task(void *argument)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_fusion_logging_task */
  /* Infinite loop */
  fusion_logging_thread();
 80080ac:	f7ff f980 	bl	80073b0 <fusion_logging_thread>
  /* USER CODE END start_fusion_logging_task */
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <start_ultrasonic_polling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_ultrasonic_polling_task */
void start_ultrasonic_polling_task(void *argument)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_ultrasonic_polling_task */
	/* Infinite loop */
	uint32_t last_wake_time = osKernelGetTickCount();
 80080c0:	f00b fdf6 	bl	8013cb0 <osKernelGetTickCount>
 80080c4:	60f8      	str	r0, [r7, #12]
	for(;;)
	{
		poll_US100_Ultrasonic( 1 );
 80080c6:	2001      	movs	r0, #1
 80080c8:	f7ff fab0 	bl	800762c <poll_US100_Ultrasonic>
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080d0:	2101      	movs	r1, #1
 80080d2:	2001      	movs	r0, #1
 80080d4:	f00b feec 	bl	8013eb0 <osThreadFlagsWait>
		poll_US100_Ultrasonic( 0 );
 80080d8:	2000      	movs	r0, #0
 80080da:	f7ff faa7 	bl	800762c <poll_US100_Ultrasonic>

		last_wake_time += 100;			// 100ms delay, update distance at 10Hz
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3364      	adds	r3, #100	@ 0x64
 80080e2:	60fb      	str	r3, [r7, #12]
		osDelayUntil(last_wake_time);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f00b ff7f 	bl	8013fe8 <osDelayUntil>
		poll_US100_Ultrasonic( 1 );
 80080ea:	bf00      	nop
 80080ec:	e7eb      	b.n	80080c6 <start_ultrasonic_polling_task+0xe>

080080ee <start_optical_flow_polling_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_optical_flow_polling_task */
void start_optical_flow_polling_task(void *argument)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_optical_flow_polling_task */
	/* Infinite loop */
	uint32_t last_wake_time = osKernelGetTickCount();
 80080f6:	f00b fddb 	bl	8013cb0 <osKernelGetTickCount>
 80080fa:	60f8      	str	r0, [r7, #12]
	for(;;)
	{
		poll_PMW3901();
 80080fc:	f7ff faac 	bl	8007658 <poll_PMW3901>

		last_wake_time += 10;			// 10ms delay, update delta x,y at 100 Hz
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	330a      	adds	r3, #10
 8008104:	60fb      	str	r3, [r7, #12]
		osDelayUntil(last_wake_time);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f00b ff6e 	bl	8013fe8 <osDelayUntil>
		poll_PMW3901();
 800810c:	bf00      	nop
 800810e:	e7f5      	b.n	80080fc <start_optical_flow_polling_task+0xe>

08008110 <HAL_GPIO_EXTI_Callback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ACCEL_INT_Pin)
 800811a:	88fb      	ldrh	r3, [r7, #6]
 800811c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008120:	d106      	bne.n	8008130 <HAL_GPIO_EXTI_Callback+0x20>
	{
		osThreadFlagsSet(accIRQTaskHandle, 0x00000001U);
 8008122:	4b15      	ldr	r3, [pc, #84]	@ (8008178 <HAL_GPIO_EXTI_Callback+0x68>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2101      	movs	r1, #1
 8008128:	4618      	mov	r0, r3
 800812a:	f00b fe73 	bl	8013e14 <osThreadFlagsSet>
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
	}
}
 800812e:	e01e      	b.n	800816e <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == GYRO_INT_Pin)
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b02      	cmp	r3, #2
 8008134:	d106      	bne.n	8008144 <HAL_GPIO_EXTI_Callback+0x34>
		osThreadFlagsSet(gyroIRQTaskHandle, 0x00000001U);
 8008136:	4b11      	ldr	r3, [pc, #68]	@ (800817c <HAL_GPIO_EXTI_Callback+0x6c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2101      	movs	r1, #1
 800813c:	4618      	mov	r0, r3
 800813e:	f00b fe69 	bl	8013e14 <osThreadFlagsSet>
}
 8008142:	e014      	b.n	800816e <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == BMP_INT_Pin)
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800814a:	d106      	bne.n	800815a <HAL_GPIO_EXTI_Callback+0x4a>
		osThreadFlagsSet(baroIRQTaskHandle, 0x00000001U);
 800814c:	4b0c      	ldr	r3, [pc, #48]	@ (8008180 <HAL_GPIO_EXTI_Callback+0x70>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2101      	movs	r1, #1
 8008152:	4618      	mov	r0, r3
 8008154:	f00b fe5e 	bl	8013e14 <osThreadFlagsSet>
}
 8008158:	e009      	b.n	800816e <HAL_GPIO_EXTI_Callback+0x5e>
	else if (GPIO_Pin == MAG_DRDY_Pin)
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008160:	d105      	bne.n	800816e <HAL_GPIO_EXTI_Callback+0x5e>
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
 8008162:	4b08      	ldr	r3, [pc, #32]	@ (8008184 <HAL_GPIO_EXTI_Callback+0x74>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2101      	movs	r1, #1
 8008168:	4618      	mov	r0, r3
 800816a:	f00b fe53 	bl	8013e14 <osThreadFlagsSet>
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	20003914 	.word	0x20003914
 800817c:	20003dd4 	.word	0x20003dd4
 8008180:	20004294 	.word	0x20004294
 8008184:	20004754 	.word	0x20004754

08008188 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	osThreadFlagsSet(ultrasonicPollingTaskHandle, 0x00000001U);
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <HAL_UART_RxCpltCallback+0x1c>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2101      	movs	r1, #1
 8008196:	4618      	mov	r0, r3
 8008198:	f00b fe3c 	bl	8013e14 <osThreadFlagsSet>
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200054d4 	.word	0x200054d4

080081a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80081ac:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081ae:	4a0e      	ldr	r2, [pc, #56]	@ (80081e8 <MX_CRC_Init+0x40>)
 80081b0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80081be:	4b09      	ldr	r3, [pc, #36]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80081c4:	4b07      	ldr	r3, [pc, #28]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80081ca:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80081d0:	4804      	ldr	r0, [pc, #16]	@ (80081e4 <MX_CRC_Init+0x3c>)
 80081d2:	f001 f8bd 	bl	8009350 <HAL_CRC_Init>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80081dc:	f000 fbbc 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80081e0:	bf00      	nop
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200065f0 	.word	0x200065f0
 80081e8:	40023000 	.word	0x40023000

080081ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008224 <HAL_CRC_MspInit+0x38>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d10b      	bne.n	8008216 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80081fe:	4b0a      	ldr	r3, [pc, #40]	@ (8008228 <HAL_CRC_MspInit+0x3c>)
 8008200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008202:	4a09      	ldr	r2, [pc, #36]	@ (8008228 <HAL_CRC_MspInit+0x3c>)
 8008204:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008208:	6493      	str	r3, [r2, #72]	@ 0x48
 800820a:	4b07      	ldr	r3, [pc, #28]	@ (8008228 <HAL_CRC_MspInit+0x3c>)
 800820c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800820e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40023000 	.word	0x40023000
 8008228:	40021000 	.word	0x40021000

0800822c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008232:	4b16      	ldr	r3, [pc, #88]	@ (800828c <MX_DMA_Init+0x60>)
 8008234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008236:	4a15      	ldr	r2, [pc, #84]	@ (800828c <MX_DMA_Init+0x60>)
 8008238:	f043 0304 	orr.w	r3, r3, #4
 800823c:	6493      	str	r3, [r2, #72]	@ 0x48
 800823e:	4b13      	ldr	r3, [pc, #76]	@ (800828c <MX_DMA_Init+0x60>)
 8008240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	607b      	str	r3, [r7, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800824a:	4b10      	ldr	r3, [pc, #64]	@ (800828c <MX_DMA_Init+0x60>)
 800824c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800824e:	4a0f      	ldr	r2, [pc, #60]	@ (800828c <MX_DMA_Init+0x60>)
 8008250:	f043 0301 	orr.w	r3, r3, #1
 8008254:	6493      	str	r3, [r2, #72]	@ 0x48
 8008256:	4b0d      	ldr	r3, [pc, #52]	@ (800828c <MX_DMA_Init+0x60>)
 8008258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	603b      	str	r3, [r7, #0]
 8008260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	2105      	movs	r1, #5
 8008266:	200b      	movs	r0, #11
 8008268:	f001 f84a 	bl	8009300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800826c:	200b      	movs	r0, #11
 800826e:	f001 f861 	bl	8009334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8008272:	2200      	movs	r2, #0
 8008274:	2105      	movs	r1, #5
 8008276:	200c      	movs	r0, #12
 8008278:	f001 f842 	bl	8009300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800827c:	200c      	movs	r0, #12
 800827e:	f001 f859 	bl	8009334 <HAL_NVIC_EnableIRQ>

}
 8008282:	bf00      	nop
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	40021000 	.word	0x40021000

08008290 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8008294:	4b1f      	ldr	r3, [pc, #124]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 8008296:	4a20      	ldr	r2, [pc, #128]	@ (8008318 <MX_FDCAN1_Init+0x88>)
 8008298:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800829a:	4b1e      	ldr	r3, [pc, #120]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 800829c:	2200      	movs	r2, #0
 800829e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80082a0:	4b1c      	ldr	r3, [pc, #112]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80082a6:	4b1b      	ldr	r3, [pc, #108]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80082ac:	4b19      	ldr	r3, [pc, #100]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082ae:	2201      	movs	r2, #1
 80082b0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 80082b2:	4b18      	ldr	r3, [pc, #96]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082b4:	2201      	movs	r2, #1
 80082b6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80082b8:	4b16      	ldr	r3, [pc, #88]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082ba:	2200      	movs	r2, #0
 80082bc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80082be:	4b15      	ldr	r3, [pc, #84]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082c0:	2210      	movs	r2, #16
 80082c2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80082c4:	4b13      	ldr	r3, [pc, #76]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 80082ca:	4b12      	ldr	r3, [pc, #72]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 80082d0:	4b10      	ldr	r3, [pc, #64]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082d2:	2201      	movs	r2, #1
 80082d4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80082d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082d8:	2201      	movs	r2, #1
 80082da:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80082dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082de:	2201      	movs	r2, #1
 80082e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80082e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082e4:	2201      	movs	r2, #1
 80082e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082ea:	2201      	movs	r2, #1
 80082ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80082ee:	4b09      	ldr	r3, [pc, #36]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80082f4:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80082fa:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8008300:	4804      	ldr	r0, [pc, #16]	@ (8008314 <MX_FDCAN1_Init+0x84>)
 8008302:	f001 fc49 	bl	8009b98 <HAL_FDCAN_Init>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800830c:	f000 fb24 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20006614 	.word	0x20006614
 8008318:	40006400 	.word	0x40006400

0800831c <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8008320:	4b1f      	ldr	r3, [pc, #124]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008322:	4a20      	ldr	r2, [pc, #128]	@ (80083a4 <MX_FDCAN2_Init+0x88>)
 8008324:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8008326:	4b1e      	ldr	r3, [pc, #120]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008328:	2200      	movs	r2, #0
 800832a:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800832c:	4b1c      	ldr	r3, [pc, #112]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800832e:	2200      	movs	r2, #0
 8008330:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8008332:	4b1b      	ldr	r3, [pc, #108]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008334:	2200      	movs	r2, #0
 8008336:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8008338:	4b19      	ldr	r3, [pc, #100]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800833a:	2201      	movs	r2, #1
 800833c:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = ENABLE;
 800833e:	4b18      	ldr	r3, [pc, #96]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008340:	2201      	movs	r2, #1
 8008342:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8008344:	4b16      	ldr	r3, [pc, #88]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008346:	2200      	movs	r2, #0
 8008348:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 800834a:	4b15      	ldr	r3, [pc, #84]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800834c:	2210      	movs	r2, #16
 800834e:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8008350:	4b13      	ldr	r3, [pc, #76]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008352:	2201      	movs	r2, #1
 8008354:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 1;
 8008356:	4b12      	ldr	r3, [pc, #72]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008358:	2201      	movs	r2, #1
 800835a:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 1;
 800835c:	4b10      	ldr	r3, [pc, #64]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800835e:	2201      	movs	r2, #1
 8008360:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8008362:	4b0f      	ldr	r3, [pc, #60]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008364:	2201      	movs	r2, #1
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8008368:	4b0d      	ldr	r3, [pc, #52]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800836a:	2201      	movs	r2, #1
 800836c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 800836e:	4b0c      	ldr	r3, [pc, #48]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008370:	2201      	movs	r2, #1
 8008372:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8008374:	4b0a      	ldr	r3, [pc, #40]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008376:	2201      	movs	r2, #1
 8008378:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 800837a:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800837c:	2200      	movs	r2, #0
 800837e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008382:	2200      	movs	r2, #0
 8008384:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8008386:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 8008388:	2200      	movs	r2, #0
 800838a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800838c:	4804      	ldr	r0, [pc, #16]	@ (80083a0 <MX_FDCAN2_Init+0x84>)
 800838e:	f001 fc03 	bl	8009b98 <HAL_FDCAN_Init>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 8008398:	f000 fade 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800839c:	bf00      	nop
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	20006678 	.word	0x20006678
 80083a4:	40006800 	.word	0x40006800

080083a8 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b0a0      	sub	sp, #128	@ 0x80
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80083c0:	f107 0318 	add.w	r3, r7, #24
 80083c4:	2254      	movs	r2, #84	@ 0x54
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f01c fd06 	bl	8024dda <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a48      	ldr	r2, [pc, #288]	@ (80084f4 <HAL_FDCAN_MspInit+0x14c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d142      	bne.n	800845e <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80083d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80083dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80083de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80083e2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80083e4:	f107 0318 	add.w	r3, r7, #24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f005 f881 	bl	800d4f0 <HAL_RCCEx_PeriphCLKConfig>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80083f4:	f000 fab0 	bl	8008958 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80083f8:	4b3f      	ldr	r3, [pc, #252]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3301      	adds	r3, #1
 80083fe:	4a3e      	ldr	r2, [pc, #248]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 8008400:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8008402:	4b3d      	ldr	r3, [pc, #244]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d10b      	bne.n	8008422 <HAL_FDCAN_MspInit+0x7a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800840a:	4b3c      	ldr	r3, [pc, #240]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 800840c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800840e:	4a3b      	ldr	r2, [pc, #236]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 8008410:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008414:	6593      	str	r3, [r2, #88]	@ 0x58
 8008416:	4b39      	ldr	r3, [pc, #228]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 8008418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800841a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008422:	4b36      	ldr	r3, [pc, #216]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 8008424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008426:	4a35      	ldr	r2, [pc, #212]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 8008428:	f043 0302 	orr.w	r3, r3, #2
 800842c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800842e:	4b33      	ldr	r3, [pc, #204]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 8008430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	613b      	str	r3, [r7, #16]
 8008438:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800843a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800843e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008440:	2302      	movs	r3, #2
 8008442:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008444:	2300      	movs	r3, #0
 8008446:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008448:	2300      	movs	r3, #0
 800844a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800844c:	2309      	movs	r3, #9
 800844e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008450:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008454:	4619      	mov	r1, r3
 8008456:	482a      	ldr	r0, [pc, #168]	@ (8008500 <HAL_FDCAN_MspInit+0x158>)
 8008458:	f001 fd64 	bl	8009f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800845c:	e045      	b.n	80084ea <HAL_FDCAN_MspInit+0x142>
  else if(fdcanHandle->Instance==FDCAN2)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a28      	ldr	r2, [pc, #160]	@ (8008504 <HAL_FDCAN_MspInit+0x15c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d140      	bne.n	80084ea <HAL_FDCAN_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008468:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800846c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800846e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008472:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008474:	f107 0318 	add.w	r3, r7, #24
 8008478:	4618      	mov	r0, r3
 800847a:	f005 f839 	bl	800d4f0 <HAL_RCCEx_PeriphCLKConfig>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <HAL_FDCAN_MspInit+0xe0>
      Error_Handler();
 8008484:	f000 fa68 	bl	8008958 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8008488:	4b1b      	ldr	r3, [pc, #108]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	4a1a      	ldr	r2, [pc, #104]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 8008490:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8008492:	4b19      	ldr	r3, [pc, #100]	@ (80084f8 <HAL_FDCAN_MspInit+0x150>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d10b      	bne.n	80084b2 <HAL_FDCAN_MspInit+0x10a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800849a:	4b18      	ldr	r3, [pc, #96]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849e:	4a17      	ldr	r2, [pc, #92]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 80084a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80084a6:	4b15      	ldr	r3, [pc, #84]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 80084a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084b2:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 80084b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b6:	4a11      	ldr	r2, [pc, #68]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 80084b8:	f043 0302 	orr.w	r3, r3, #2
 80084bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <HAL_FDCAN_MspInit+0x154>)
 80084c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	60bb      	str	r3, [r7, #8]
 80084c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80084ca:	2360      	movs	r3, #96	@ 0x60
 80084cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ce:	2302      	movs	r3, #2
 80084d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084d6:	2300      	movs	r3, #0
 80084d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80084da:	2309      	movs	r3, #9
 80084dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80084e2:	4619      	mov	r1, r3
 80084e4:	4806      	ldr	r0, [pc, #24]	@ (8008500 <HAL_FDCAN_MspInit+0x158>)
 80084e6:	f001 fd1d 	bl	8009f24 <HAL_GPIO_Init>
}
 80084ea:	bf00      	nop
 80084ec:	3780      	adds	r7, #128	@ 0x80
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	40006400 	.word	0x40006400
 80084f8:	200066dc 	.word	0x200066dc
 80084fc:	40021000 	.word	0x40021000
 8008500:	48000400 	.word	0x48000400
 8008504:	40006800 	.word	0x40006800

08008508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	@ 0x28
 800850c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800850e:	f107 0314 	add.w	r3, r7, #20
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	605a      	str	r2, [r3, #4]
 8008518:	609a      	str	r2, [r3, #8]
 800851a:	60da      	str	r2, [r3, #12]
 800851c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800851e:	4b72      	ldr	r3, [pc, #456]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008522:	4a71      	ldr	r2, [pc, #452]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008524:	f043 0304 	orr.w	r3, r3, #4
 8008528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800852a:	4b6f      	ldr	r3, [pc, #444]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 800852c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	613b      	str	r3, [r7, #16]
 8008534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008536:	4b6c      	ldr	r3, [pc, #432]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800853a:	4a6b      	ldr	r2, [pc, #428]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 800853c:	f043 0320 	orr.w	r3, r3, #32
 8008540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008542:	4b69      	ldr	r3, [pc, #420]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008546:	f003 0320 	and.w	r3, r3, #32
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800854e:	4b66      	ldr	r3, [pc, #408]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008552:	4a65      	ldr	r2, [pc, #404]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800855a:	4b63      	ldr	r3, [pc, #396]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 800855c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855e:	f003 0301 	and.w	r3, r3, #1
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008566:	4b60      	ldr	r3, [pc, #384]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856a:	4a5f      	ldr	r2, [pc, #380]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 800856c:	f043 0302 	orr.w	r3, r3, #2
 8008570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008572:	4b5d      	ldr	r3, [pc, #372]	@ (80086e8 <MX_GPIO_Init+0x1e0>)
 8008574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008576:	f003 0302 	and.w	r3, r3, #2
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO2_Pin|FLOW_CS_Pin, GPIO_PIN_RESET);
 800857e:	2200      	movs	r2, #0
 8008580:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8008584:	4859      	ldr	r0, [pc, #356]	@ (80086ec <MX_GPIO_Init+0x1e4>)
 8008586:	f001 fe4f 	bl	800a228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GYRO_CS_Pin|ACCEL_CS_Pin|GPIO5_Pin, GPIO_PIN_SET);
 800858a:	2201      	movs	r2, #1
 800858c:	f248 0111 	movw	r1, #32785	@ 0x8011
 8008590:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008594:	f001 fe48 	bl	800a228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CC2500_CS_GPIO_Port, CC2500_CS_Pin, GPIO_PIN_SET);
 8008598:	2201      	movs	r2, #1
 800859a:	2102      	movs	r1, #2
 800859c:	4854      	ldr	r0, [pc, #336]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 800859e:	f001 fe43 	bl	800a228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 80085a2:	2200      	movs	r2, #0
 80085a4:	f648 4190 	movw	r1, #35984	@ 0x8c90
 80085a8:	4851      	ldr	r0, [pc, #324]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 80085aa:	f001 fe3d 	bl	800a228 <HAL_GPIO_WritePin>
                          |GPIO1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO6_GPIO_Port, GPIO6_Pin, GPIO_PIN_RESET);
 80085ae:	2200      	movs	r2, #0
 80085b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80085b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80085b8:	f001 fe36 	bl	800a228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO2_Pin FLOW_CS_Pin */
  GPIO_InitStruct.Pin = GPIO2_Pin|FLOW_CS_Pin;
 80085bc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80085c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c2:	2301      	movs	r3, #1
 80085c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085ca:	2300      	movs	r3, #0
 80085cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80085ce:	f107 0314 	add.w	r3, r7, #20
 80085d2:	4619      	mov	r1, r3
 80085d4:	4845      	ldr	r0, [pc, #276]	@ (80086ec <MX_GPIO_Init+0x1e4>)
 80085d6:	f001 fca5 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACCEL_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin;
 80085da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80085e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80085e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80085e6:	2302      	movs	r3, #2
 80085e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACCEL_INT_GPIO_Port, &GPIO_InitStruct);
 80085ea:	f107 0314 	add.w	r3, r7, #20
 80085ee:	4619      	mov	r1, r3
 80085f0:	483e      	ldr	r0, [pc, #248]	@ (80086ec <MX_GPIO_Init+0x1e4>)
 80085f2:	f001 fc97 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin|ACCEL_CS_Pin;
 80085f6:	2311      	movs	r3, #17
 80085f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80085fe:	2301      	movs	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008602:	2300      	movs	r3, #0
 8008604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008606:	f107 0314 	add.w	r3, r7, #20
 800860a:	4619      	mov	r1, r3
 800860c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008610:	f001 fc88 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 8008614:	2302      	movs	r3, #2
 8008616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008618:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800861c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800861e:	2302      	movs	r3, #2
 8008620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	4619      	mov	r1, r3
 8008628:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800862c:	f001 fc7a 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : CC2500_GDO0_Pin CC2500_GDO2_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = CC2500_GDO0_Pin|CC2500_GDO2_Pin|MAG_INT_Pin;
 8008630:	f242 0305 	movw	r3, #8197	@ 0x2005
 8008634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008636:	2300      	movs	r3, #0
 8008638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800863e:	f107 0314 	add.w	r3, r7, #20
 8008642:	4619      	mov	r1, r3
 8008644:	482a      	ldr	r0, [pc, #168]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 8008646:	f001 fc6d 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CC2500_CS_Pin */
  GPIO_InitStruct.Pin = CC2500_CS_Pin;
 800864a:	2302      	movs	r3, #2
 800864c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800864e:	2301      	movs	r3, #1
 8008650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008652:	2301      	movs	r3, #1
 8008654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008656:	2300      	movs	r3, #0
 8008658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CC2500_CS_GPIO_Port, &GPIO_InitStruct);
 800865a:	f107 0314 	add.w	r3, r7, #20
 800865e:	4619      	mov	r1, r3
 8008660:	4823      	ldr	r0, [pc, #140]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 8008662:	f001 fc5f 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO8_Pin GPIO9_Pin GPIO7_Pin GPIO4_Pin
                           GPIO1_Pin */
  GPIO_InitStruct.Pin = GPIO8_Pin|GPIO9_Pin|GPIO7_Pin|GPIO4_Pin
 8008666:	f648 4390 	movw	r3, #35984	@ 0x8c90
 800866a:	617b      	str	r3, [r7, #20]
                          |GPIO1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800866c:	2301      	movs	r3, #1
 800866e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008670:	2300      	movs	r3, #0
 8008672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008674:	2300      	movs	r3, #0
 8008676:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	4619      	mov	r1, r3
 800867e:	481c      	ldr	r0, [pc, #112]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 8008680:	f001 fc50 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_DRDY_Pin BMP_INT_Pin */
  GPIO_InitStruct.Pin = MAG_DRDY_Pin|BMP_INT_Pin;
 8008684:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8008688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800868a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800868e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008690:	2302      	movs	r3, #2
 8008692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008694:	f107 0314 	add.w	r3, r7, #20
 8008698:	4619      	mov	r1, r3
 800869a:	4815      	ldr	r0, [pc, #84]	@ (80086f0 <MX_GPIO_Init+0x1e8>)
 800869c:	f001 fc42 	bl	8009f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO6_Pin GPIO5_Pin */
  GPIO_InitStruct.Pin = GPIO6_Pin|GPIO5_Pin;
 80086a0:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80086a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086a6:	2301      	movs	r3, #1
 80086a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086ae:	2300      	movs	r3, #0
 80086b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b2:	f107 0314 	add.w	r3, r7, #20
 80086b6:	4619      	mov	r1, r3
 80086b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80086bc:	f001 fc32 	bl	8009f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80086c0:	2200      	movs	r2, #0
 80086c2:	2105      	movs	r1, #5
 80086c4:	2007      	movs	r0, #7
 80086c6:	f000 fe1b 	bl	8009300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80086ca:	2007      	movs	r0, #7
 80086cc:	f000 fe32 	bl	8009334 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80086d0:	2200      	movs	r2, #0
 80086d2:	2105      	movs	r1, #5
 80086d4:	2028      	movs	r0, #40	@ 0x28
 80086d6:	f000 fe13 	bl	8009300 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80086da:	2028      	movs	r0, #40	@ 0x28
 80086dc:	f000 fe2a 	bl	8009334 <HAL_NVIC_EnableIRQ>

}
 80086e0:	bf00      	nop
 80086e2:	3728      	adds	r7, #40	@ 0x28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	40021000 	.word	0x40021000
 80086ec:	48000800 	.word	0x48000800
 80086f0:	48000400 	.word	0x48000400

080086f4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80086f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008768 <MX_I2C2_Init+0x74>)
 80086fa:	4a1c      	ldr	r2, [pc, #112]	@ (800876c <MX_I2C2_Init+0x78>)
 80086fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40621236;
 80086fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008700:	4a1b      	ldr	r2, [pc, #108]	@ (8008770 <MX_I2C2_Init+0x7c>)
 8008702:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008704:	4b18      	ldr	r3, [pc, #96]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008706:	2200      	movs	r2, #0
 8008708:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800870a:	4b17      	ldr	r3, [pc, #92]	@ (8008768 <MX_I2C2_Init+0x74>)
 800870c:	2201      	movs	r2, #1
 800870e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008710:	4b15      	ldr	r3, [pc, #84]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008716:	4b14      	ldr	r3, [pc, #80]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008718:	2200      	movs	r2, #0
 800871a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800871c:	4b12      	ldr	r3, [pc, #72]	@ (8008768 <MX_I2C2_Init+0x74>)
 800871e:	2200      	movs	r2, #0
 8008720:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008722:	4b11      	ldr	r3, [pc, #68]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008724:	2200      	movs	r2, #0
 8008726:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008728:	4b0f      	ldr	r3, [pc, #60]	@ (8008768 <MX_I2C2_Init+0x74>)
 800872a:	2200      	movs	r2, #0
 800872c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800872e:	480e      	ldr	r0, [pc, #56]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008730:	f001 fdaa 	bl	800a288 <HAL_I2C_Init>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800873a:	f000 f90d 	bl	8008958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800873e:	2100      	movs	r1, #0
 8008740:	4809      	ldr	r0, [pc, #36]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008742:	f002 fb2d 	bl	800ada0 <HAL_I2CEx_ConfigAnalogFilter>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800874c:	f000 f904 	bl	8008958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008750:	2100      	movs	r1, #0
 8008752:	4805      	ldr	r0, [pc, #20]	@ (8008768 <MX_I2C2_Init+0x74>)
 8008754:	f002 fb6f 	bl	800ae36 <HAL_I2CEx_ConfigDigitalFilter>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800875e:	f000 f8fb 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200066e0 	.word	0x200066e0
 800876c:	40005800 	.word	0x40005800
 8008770:	40621236 	.word	0x40621236

08008774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b09e      	sub	sp, #120	@ 0x78
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800878c:	f107 0310 	add.w	r3, r7, #16
 8008790:	2254      	movs	r2, #84	@ 0x54
 8008792:	2100      	movs	r1, #0
 8008794:	4618      	mov	r0, r3
 8008796:	f01c fb20 	bl	8024dda <memset>
  if(i2cHandle->Instance==I2C2)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1f      	ldr	r2, [pc, #124]	@ (800881c <HAL_I2C_MspInit+0xa8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d137      	bne.n	8008814 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80087a4:	2380      	movs	r3, #128	@ 0x80
 80087a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80087a8:	2300      	movs	r3, #0
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087ac:	f107 0310 	add.w	r3, r7, #16
 80087b0:	4618      	mov	r0, r3
 80087b2:	f004 fe9d 	bl	800d4f0 <HAL_RCCEx_PeriphCLKConfig>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80087bc:	f000 f8cc 	bl	8008958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087c0:	4b17      	ldr	r3, [pc, #92]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087c4:	4a16      	ldr	r2, [pc, #88]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80087cc:	4b14      	ldr	r3, [pc, #80]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 80087ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80087d8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80087dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80087de:	2312      	movs	r3, #18
 80087e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e2:	2300      	movs	r3, #0
 80087e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e6:	2300      	movs	r3, #0
 80087e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80087ea:	2304      	movs	r3, #4
 80087ec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80087f2:	4619      	mov	r1, r3
 80087f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087f8:	f001 fb94 	bl	8009f24 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80087fc:	4b08      	ldr	r3, [pc, #32]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 80087fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008800:	4a07      	ldr	r2, [pc, #28]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 8008802:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008806:	6593      	str	r3, [r2, #88]	@ 0x58
 8008808:	4b05      	ldr	r3, [pc, #20]	@ (8008820 <HAL_I2C_MspInit+0xac>)
 800880a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800880c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008810:	60bb      	str	r3, [r7, #8]
 8008812:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008814:	bf00      	nop
 8008816:	3778      	adds	r7, #120	@ 0x78
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40005800 	.word	0x40005800
 8008820:	40021000 	.word	0x40021000

08008824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008828:	f000 fc7b 	bl	8009122 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800882c:	f000 f81c 	bl	8008868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008830:	f7ff fe6a 	bl	8008508 <MX_GPIO_Init>
  MX_DMA_Init();
 8008834:	f7ff fcfa 	bl	800822c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8008838:	f7ff fd2a 	bl	8008290 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800883c:	f7ff fd6e 	bl	800831c <MX_FDCAN2_Init>
  MX_I2C2_Init();
 8008840:	f7ff ff58 	bl	80086f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8008844:	f000 f88e 	bl	8008964 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8008848:	f000 fb3a 	bl	8008ec0 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800884c:	f000 faec 	bl	8008e28 <MX_TIM16_Init>
  MX_CRC_Init();
 8008850:	f7ff fcaa 	bl	80081a8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_Device_Init();
 8008854:	f00f f810 	bl	8017878 <MX_USB_Device_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8008858:	f00b f9e0 	bl	8013c1c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800885c:	f7ff fafe 	bl	8007e5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008860:	f00b fa00 	bl	8013c64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <main+0x40>

08008868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b094      	sub	sp, #80	@ 0x50
 800886c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800886e:	f107 0318 	add.w	r3, r7, #24
 8008872:	2238      	movs	r2, #56	@ 0x38
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f01c faaf 	bl	8024dda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800887c:	1d3b      	adds	r3, r7, #4
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	605a      	str	r2, [r3, #4]
 8008884:	609a      	str	r2, [r3, #8]
 8008886:	60da      	str	r2, [r3, #12]
 8008888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800888a:	2000      	movs	r0, #0
 800888c:	f004 f820 	bl	800c8d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8008890:	2321      	movs	r3, #33	@ 0x21
 8008892:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008898:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800889a:	2301      	movs	r3, #1
 800889c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800889e:	2302      	movs	r3, #2
 80088a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088a2:	2303      	movs	r3, #3
 80088a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80088a6:	2304      	movs	r3, #4
 80088a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80088aa:	2355      	movs	r3, #85	@ 0x55
 80088ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80088ae:	2302      	movs	r3, #2
 80088b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80088b2:	2308      	movs	r3, #8
 80088b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80088b6:	2302      	movs	r3, #2
 80088b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088ba:	f107 0318 	add.w	r3, r7, #24
 80088be:	4618      	mov	r0, r3
 80088c0:	f004 f8ba 	bl	800ca38 <HAL_RCC_OscConfig>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80088ca:	f000 f845 	bl	8008958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088ce:	230f      	movs	r3, #15
 80088d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088d2:	2303      	movs	r3, #3
 80088d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088de:	2300      	movs	r3, #0
 80088e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80088e2:	1d3b      	adds	r3, r7, #4
 80088e4:	2104      	movs	r1, #4
 80088e6:	4618      	mov	r0, r3
 80088e8:	f004 fbb8 	bl	800d05c <HAL_RCC_ClockConfig>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80088f2:	f000 f831 	bl	8008958 <Error_Handler>
  }
}
 80088f6:	bf00      	nop
 80088f8:	3750      	adds	r7, #80	@ 0x50
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */

void configureTimerForRunTimeStats(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerCounts = 0;
 8008904:	4b03      	ldr	r3, [pc, #12]	@ (8008914 <configureTimerForRunTimeStats+0x14>)
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim16);
 800890a:	4803      	ldr	r0, [pc, #12]	@ (8008918 <configureTimerForRunTimeStats+0x18>)
 800890c:	f005 fe3a 	bl	800e584 <HAL_TIM_Base_Start_IT>
}
 8008910:	bf00      	nop
 8008912:	bd80      	pop	{r7, pc}
 8008914:	20006734 	.word	0x20006734
 8008918:	200067ec 	.word	0x200067ec

0800891c <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerCounts;
 8008920:	4b03      	ldr	r3, [pc, #12]	@ (8008930 <getRunTimeCounterValue+0x14>)
 8008922:	681b      	ldr	r3, [r3, #0]
}
 8008924:	4618      	mov	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20006734 	.word	0x20006734

08008934 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a04      	ldr	r2, [pc, #16]	@ (8008954 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d101      	bne.n	800894a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008946:	f000 fc05 	bl	8009154 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800894a:	bf00      	nop
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	40001000 	.word	0x40001000

08008958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008958:	b480      	push	{r7}
 800895a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800895c:	b672      	cpsid	i
}
 800895e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008960:	bf00      	nop
 8008962:	e7fd      	b.n	8008960 <Error_Handler+0x8>

08008964 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008968:	4b1b      	ldr	r3, [pc, #108]	@ (80089d8 <MX_SPI1_Init+0x74>)
 800896a:	4a1c      	ldr	r2, [pc, #112]	@ (80089dc <MX_SPI1_Init+0x78>)
 800896c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800896e:	4b1a      	ldr	r3, [pc, #104]	@ (80089d8 <MX_SPI1_Init+0x74>)
 8008970:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008974:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008976:	4b18      	ldr	r3, [pc, #96]	@ (80089d8 <MX_SPI1_Init+0x74>)
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800897c:	4b16      	ldr	r3, [pc, #88]	@ (80089d8 <MX_SPI1_Init+0x74>)
 800897e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8008982:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008984:	4b14      	ldr	r3, [pc, #80]	@ (80089d8 <MX_SPI1_Init+0x74>)
 8008986:	2200      	movs	r2, #0
 8008988:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800898a:	4b13      	ldr	r3, [pc, #76]	@ (80089d8 <MX_SPI1_Init+0x74>)
 800898c:	2200      	movs	r2, #0
 800898e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8008990:	4b11      	ldr	r3, [pc, #68]	@ (80089d8 <MX_SPI1_Init+0x74>)
 8008992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008996:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008998:	4b0f      	ldr	r3, [pc, #60]	@ (80089d8 <MX_SPI1_Init+0x74>)
 800899a:	2218      	movs	r2, #24
 800899c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800899e:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80089a4:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089aa:	4b0b      	ldr	r3, [pc, #44]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80089b0:	4b09      	ldr	r3, [pc, #36]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089b2:	2207      	movs	r2, #7
 80089b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80089b6:	4b08      	ldr	r3, [pc, #32]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80089bc:	4b06      	ldr	r3, [pc, #24]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089be:	2208      	movs	r2, #8
 80089c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80089c2:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <MX_SPI1_Init+0x74>)
 80089c4:	f004 ffe2 	bl	800d98c <HAL_SPI_Init>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80089ce:	f7ff ffc3 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80089d2:	bf00      	nop
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	20006738 	.word	0x20006738
 80089dc:	40013000 	.word	0x40013000

080089e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08a      	sub	sp, #40	@ 0x28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089e8:	f107 0314 	add.w	r3, r7, #20
 80089ec:	2200      	movs	r2, #0
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	605a      	str	r2, [r3, #4]
 80089f2:	609a      	str	r2, [r3, #8]
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a17      	ldr	r2, [pc, #92]	@ (8008a5c <HAL_SPI_MspInit+0x7c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d128      	bne.n	8008a54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a02:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a06:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008a0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8008a0e:	4b14      	ldr	r3, [pc, #80]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a1a:	4b11      	ldr	r3, [pc, #68]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a1e:	4a10      	ldr	r2, [pc, #64]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a20:	f043 0301 	orr.w	r3, r3, #1
 8008a24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008a26:	4b0e      	ldr	r3, [pc, #56]	@ (8008a60 <HAL_SPI_MspInit+0x80>)
 8008a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a32:	23e0      	movs	r3, #224	@ 0xe0
 8008a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a36:	2302      	movs	r3, #2
 8008a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a42:	2305      	movs	r3, #5
 8008a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a46:	f107 0314 	add.w	r3, r7, #20
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008a50:	f001 fa68 	bl	8009f24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8008a54:	bf00      	nop
 8008a56:	3728      	adds	r7, #40	@ 0x28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	40013000 	.word	0x40013000
 8008a60:	40021000 	.word	0x40021000

08008a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a6a:	4b12      	ldr	r3, [pc, #72]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a6e:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	6613      	str	r3, [r2, #96]	@ 0x60
 8008a76:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	607b      	str	r3, [r7, #4]
 8008a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a82:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a86:	4a0b      	ldr	r2, [pc, #44]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a8e:	4b09      	ldr	r3, [pc, #36]	@ (8008ab4 <HAL_MspInit+0x50>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a96:	603b      	str	r3, [r7, #0]
 8008a98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	210f      	movs	r1, #15
 8008a9e:	f06f 0001 	mvn.w	r0, #1
 8008aa2:	f000 fc2d 	bl	8009300 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008aa6:	f003 ffb7 	bl	800ca18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40021000 	.word	0x40021000

08008ab8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b08c      	sub	sp, #48	@ 0x30
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8008ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8008b7c <HAL_InitTick+0xc4>)
 8008aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008acc:	4a2b      	ldr	r2, [pc, #172]	@ (8008b7c <HAL_InitTick+0xc4>)
 8008ace:	f043 0310 	orr.w	r3, r3, #16
 8008ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ad4:	4b29      	ldr	r3, [pc, #164]	@ (8008b7c <HAL_InitTick+0xc4>)
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008ae0:	f107 020c 	add.w	r2, r7, #12
 8008ae4:	f107 0310 	add.w	r3, r7, #16
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f004 fc8a 	bl	800d404 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8008af0:	f004 fc5c 	bl	800d3ac <HAL_RCC_GetPCLK1Freq>
 8008af4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8008af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af8:	4a21      	ldr	r2, [pc, #132]	@ (8008b80 <HAL_InitTick+0xc8>)
 8008afa:	fba2 2303 	umull	r2, r3, r2, r3
 8008afe:	0c9b      	lsrs	r3, r3, #18
 8008b00:	3b01      	subs	r3, #1
 8008b02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8008b04:	4b1f      	ldr	r3, [pc, #124]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b06:	4a20      	ldr	r2, [pc, #128]	@ (8008b88 <HAL_InitTick+0xd0>)
 8008b08:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8008b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008b10:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8008b12:	4a1c      	ldr	r2, [pc, #112]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8008b18:	4b1a      	ldr	r3, [pc, #104]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b1e:	4b19      	ldr	r3, [pc, #100]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8008b24:	4817      	ldr	r0, [pc, #92]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b26:	f005 fcd5 	bl	800e4d4 <HAL_TIM_Base_Init>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8008b30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d11b      	bne.n	8008b70 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8008b38:	4812      	ldr	r0, [pc, #72]	@ (8008b84 <HAL_InitTick+0xcc>)
 8008b3a:	f005 fd23 	bl	800e584 <HAL_TIM_Base_Start_IT>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8008b44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d111      	bne.n	8008b70 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8008b4c:	2036      	movs	r0, #54	@ 0x36
 8008b4e:	f000 fbf1 	bl	8009334 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2b0f      	cmp	r3, #15
 8008b56:	d808      	bhi.n	8008b6a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8008b58:	2200      	movs	r2, #0
 8008b5a:	6879      	ldr	r1, [r7, #4]
 8008b5c:	2036      	movs	r0, #54	@ 0x36
 8008b5e:	f000 fbcf 	bl	8009300 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b62:	4a0a      	ldr	r2, [pc, #40]	@ (8008b8c <HAL_InitTick+0xd4>)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6013      	str	r3, [r2, #0]
 8008b68:	e002      	b.n	8008b70 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8008b70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3730      	adds	r7, #48	@ 0x30
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	431bde83 	.word	0x431bde83
 8008b84:	2000679c 	.word	0x2000679c
 8008b88:	40001000 	.word	0x40001000
 8008b8c:	20000010 	.word	0x20000010

08008b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b94:	bf00      	nop
 8008b96:	e7fd      	b.n	8008b94 <NMI_Handler+0x4>

08008b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <HardFault_Handler+0x4>

08008ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ba4:	bf00      	nop
 8008ba6:	e7fd      	b.n	8008ba4 <MemManage_Handler+0x4>

08008ba8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bac:	bf00      	nop
 8008bae:	e7fd      	b.n	8008bac <BusFault_Handler+0x4>

08008bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bb4:	bf00      	nop
 8008bb6:	e7fd      	b.n	8008bb4 <UsageFault_Handler+0x4>

08008bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008bbc:	bf00      	nop
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_INT_Pin);
 8008bca:	2002      	movs	r0, #2
 8008bcc:	f001 fb44 	bl	800a258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008bd0:	bf00      	nop
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008bd8:	4802      	ldr	r0, [pc, #8]	@ (8008be4 <DMA1_Channel1_IRQHandler+0x10>)
 8008bda:	f000 fe8e 	bl	80098fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200068cc 	.word	0x200068cc

08008be8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008bec:	4802      	ldr	r0, [pc, #8]	@ (8008bf8 <DMA1_Channel2_IRQHandler+0x10>)
 8008bee:	f000 fe84 	bl	80098fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008bf2:	bf00      	nop
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	2000692c 	.word	0x2000692c

08008bfc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008c00:	4802      	ldr	r0, [pc, #8]	@ (8008c0c <USB_LP_IRQHandler+0x10>)
 8008c02:	f002 fa54 	bl	800b0ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	2001927c 	.word	0x2001927c

08008c10 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  ++ulHighFrequencyTimerCounts;		// Needed for FREERTOS stats
 8008c14:	4b04      	ldr	r3, [pc, #16]	@ (8008c28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	4a03      	ldr	r2, [pc, #12]	@ (8008c28 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008c1c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8008c1e:	4803      	ldr	r0, [pc, #12]	@ (8008c2c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8008c20:	f005 fd28 	bl	800e674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008c24:	bf00      	nop
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	20006734 	.word	0x20006734
 8008c2c:	200067ec 	.word	0x200067ec

08008c30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008c34:	4802      	ldr	r0, [pc, #8]	@ (8008c40 <USART2_IRQHandler+0x10>)
 8008c36:	f006 f8ab 	bl	800ed90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008c3a:	bf00      	nop
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20006838 	.word	0x20006838

08008c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAG_DRDY_Pin);
 8008c48:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008c4c:	f001 fb04 	bl	800a258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BMP_INT_Pin);
 8008c50:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008c54:	f001 fb00 	bl	800a258 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACCEL_INT_Pin);
 8008c58:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008c5c:	f001 fafc 	bl	800a258 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8008c68:	4802      	ldr	r0, [pc, #8]	@ (8008c74 <TIM6_DAC_IRQHandler+0x10>)
 8008c6a:	f005 fd03 	bl	800e674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8008c6e:	bf00      	nop
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	2000679c 	.word	0x2000679c

08008c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	af00      	add	r7, sp, #0
  return 1;
 8008c7c:	2301      	movs	r3, #1
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <_kill>:

int _kill(int pid, int sig)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008c92:	f01c f99f 	bl	8024fd4 <__errno>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2216      	movs	r2, #22
 8008c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8008c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <_exit>:

void _exit (int status)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008cb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f7ff ffe7 	bl	8008c88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <_exit+0x12>

08008cbe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b086      	sub	sp, #24
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cca:	2300      	movs	r3, #0
 8008ccc:	617b      	str	r3, [r7, #20]
 8008cce:	e00a      	b.n	8008ce6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008cd0:	f3af 8000 	nop.w
 8008cd4:	4601      	mov	r1, r0
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	1c5a      	adds	r2, r3, #1
 8008cda:	60ba      	str	r2, [r7, #8]
 8008cdc:	b2ca      	uxtb	r2, r1
 8008cde:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	dbf0      	blt.n	8008cd0 <_read+0x12>
  }

  return len;
 8008cee:	687b      	ldr	r3, [r7, #4]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d04:	2300      	movs	r3, #0
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e009      	b.n	8008d1e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	1c5a      	adds	r2, r3, #1
 8008d0e:	60ba      	str	r2, [r7, #8]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	4618      	mov	r0, r3
 8008d14:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	697a      	ldr	r2, [r7, #20]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	dbf1      	blt.n	8008d0a <_write+0x12>
  }
  return len;
 8008d26:	687b      	ldr	r3, [r7, #4]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <_close>:

int _close(int file)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008d38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008d58:	605a      	str	r2, [r3, #4]
  return 0;
 8008d5a:	2300      	movs	r3, #0
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	370c      	adds	r7, #12
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <_isatty>:

int _isatty(int file)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008d70:	2301      	movs	r3, #1
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b085      	sub	sp, #20
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008da0:	4a14      	ldr	r2, [pc, #80]	@ (8008df4 <_sbrk+0x5c>)
 8008da2:	4b15      	ldr	r3, [pc, #84]	@ (8008df8 <_sbrk+0x60>)
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008dac:	4b13      	ldr	r3, [pc, #76]	@ (8008dfc <_sbrk+0x64>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008db4:	4b11      	ldr	r3, [pc, #68]	@ (8008dfc <_sbrk+0x64>)
 8008db6:	4a12      	ldr	r2, [pc, #72]	@ (8008e00 <_sbrk+0x68>)
 8008db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008dba:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <_sbrk+0x64>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d207      	bcs.n	8008dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008dc8:	f01c f904 	bl	8024fd4 <__errno>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	220c      	movs	r2, #12
 8008dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dd6:	e009      	b.n	8008dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008dd8:	4b08      	ldr	r3, [pc, #32]	@ (8008dfc <_sbrk+0x64>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008dde:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <_sbrk+0x64>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4413      	add	r3, r2
 8008de6:	4a05      	ldr	r2, [pc, #20]	@ (8008dfc <_sbrk+0x64>)
 8008de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dea:	68fb      	ldr	r3, [r7, #12]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20020000 	.word	0x20020000
 8008df8:	00000400 	.word	0x00000400
 8008dfc:	200067e8 	.word	0x200067e8
 8008e00:	200198c8 	.word	0x200198c8

08008e04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008e04:	b480      	push	{r7}
 8008e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008e08:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <SystemInit+0x20>)
 8008e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e0e:	4a05      	ldr	r2, [pc, #20]	@ (8008e24 <SystemInit+0x20>)
 8008e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e18:	bf00      	nop
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	e000ed00 	.word	0xe000ed00

08008e28 <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8008e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e2e:	4a10      	ldr	r2, [pc, #64]	@ (8008e70 <MX_TIM16_Init+0x48>)
 8008e30:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8008e32:	4b0e      	ldr	r3, [pc, #56]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e38:	4b0c      	ldr	r3, [pc, #48]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1699;
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e40:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8008e44:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e46:	4b09      	ldr	r3, [pc, #36]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008e4c:	4b07      	ldr	r3, [pc, #28]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e52:	4b06      	ldr	r3, [pc, #24]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e54:	2200      	movs	r2, #0
 8008e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008e58:	4804      	ldr	r0, [pc, #16]	@ (8008e6c <MX_TIM16_Init+0x44>)
 8008e5a:	f005 fb3b 	bl	800e4d4 <HAL_TIM_Base_Init>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8008e64:	f7ff fd78 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8008e68:	bf00      	nop
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	200067ec 	.word	0x200067ec
 8008e70:	40014400 	.word	0x40014400

08008e74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a0d      	ldr	r2, [pc, #52]	@ (8008eb8 <HAL_TIM_Base_MspInit+0x44>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d113      	bne.n	8008eae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008e86:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <HAL_TIM_Base_MspInit+0x48>)
 8008e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008ebc <HAL_TIM_Base_MspInit+0x48>)
 8008e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8008e92:	4b0a      	ldr	r3, [pc, #40]	@ (8008ebc <HAL_TIM_Base_MspInit+0x48>)
 8008e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	2105      	movs	r1, #5
 8008ea2:	2019      	movs	r0, #25
 8008ea4:	f000 fa2c 	bl	8009300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8008ea8:	2019      	movs	r0, #25
 8008eaa:	f000 fa43 	bl	8009334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8008eae:	bf00      	nop
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	40014400 	.word	0x40014400
 8008ebc:	40021000 	.word	0x40021000

08008ec0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008ec4:	4b22      	ldr	r3, [pc, #136]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ec6:	4a23      	ldr	r2, [pc, #140]	@ (8008f54 <MX_USART2_UART_Init+0x94>)
 8008ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8008eca:	4b21      	ldr	r3, [pc, #132]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ecc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8008ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008eda:	2200      	movs	r2, #0
 8008edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008ede:	4b1c      	ldr	r3, [pc, #112]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ee6:	220c      	movs	r2, #12
 8008ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008eea:	4b19      	ldr	r3, [pc, #100]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008ef0:	4b17      	ldr	r3, [pc, #92]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008ef6:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008efc:	4b14      	ldr	r3, [pc, #80]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008efe:	2200      	movs	r2, #0
 8008f00:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008f02:	4b13      	ldr	r3, [pc, #76]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008f08:	4811      	ldr	r0, [pc, #68]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008f0a:	f005 fe25 	bl	800eb58 <HAL_UART_Init>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008f14:	f7ff fd20 	bl	8008958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f18:	2100      	movs	r1, #0
 8008f1a:	480d      	ldr	r0, [pc, #52]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008f1c:	f007 fa95 	bl	801044a <HAL_UARTEx_SetTxFifoThreshold>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d001      	beq.n	8008f2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008f26:	f7ff fd17 	bl	8008958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	4808      	ldr	r0, [pc, #32]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008f2e:	f007 faca 	bl	80104c6 <HAL_UARTEx_SetRxFifoThreshold>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008f38:	f7ff fd0e 	bl	8008958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008f3c:	4804      	ldr	r0, [pc, #16]	@ (8008f50 <MX_USART2_UART_Init+0x90>)
 8008f3e:	f007 fa4b 	bl	80103d8 <HAL_UARTEx_DisableFifoMode>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008f48:	f7ff fd06 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008f4c:	bf00      	nop
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	20006838 	.word	0x20006838
 8008f54:	40004400 	.word	0x40004400

08008f58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b09e      	sub	sp, #120	@ 0x78
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008f64:	2200      	movs	r2, #0
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	605a      	str	r2, [r3, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
 8008f6c:	60da      	str	r2, [r3, #12]
 8008f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	2254      	movs	r2, #84	@ 0x54
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f01b ff2e 	bl	8024dda <memset>
  if(uartHandle->Instance==USART2)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a4d      	ldr	r2, [pc, #308]	@ (80090b8 <HAL_UART_MspInit+0x160>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	f040 8092 	bne.w	80090ae <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f92:	f107 0310 	add.w	r3, r7, #16
 8008f96:	4618      	mov	r0, r3
 8008f98:	f004 faaa 	bl	800d4f0 <HAL_RCCEx_PeriphCLKConfig>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8008fa2:	f7ff fcd9 	bl	8008958 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008fa6:	4b45      	ldr	r3, [pc, #276]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008faa:	4a44      	ldr	r2, [pc, #272]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008fb2:	4b42      	ldr	r3, [pc, #264]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fba:	60fb      	str	r3, [r7, #12]
 8008fbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fc4:	f043 0301 	orr.w	r3, r3, #1
 8008fc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fca:	4b3c      	ldr	r3, [pc, #240]	@ (80090bc <HAL_UART_MspInit+0x164>)
 8008fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	60bb      	str	r3, [r7, #8]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fda:	2302      	movs	r3, #2
 8008fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008fe6:	2307      	movs	r3, #7
 8008fe8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fea:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ff4:	f000 ff96 	bl	8009f24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8008ff8:	4b31      	ldr	r3, [pc, #196]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8008ffa:	4a32      	ldr	r2, [pc, #200]	@ (80090c4 <HAL_UART_MspInit+0x16c>)
 8008ffc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8008ffe:	4b30      	ldr	r3, [pc, #192]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009000:	221a      	movs	r2, #26
 8009002:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009004:	4b2e      	ldr	r3, [pc, #184]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009006:	2200      	movs	r2, #0
 8009008:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800900a:	4b2d      	ldr	r3, [pc, #180]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 800900c:	2200      	movs	r2, #0
 800900e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009010:	4b2b      	ldr	r3, [pc, #172]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009012:	2280      	movs	r2, #128	@ 0x80
 8009014:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009016:	4b2a      	ldr	r3, [pc, #168]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009018:	2200      	movs	r2, #0
 800901a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800901c:	4b28      	ldr	r3, [pc, #160]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 800901e:	2200      	movs	r2, #0
 8009020:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009022:	4b27      	ldr	r3, [pc, #156]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009024:	2200      	movs	r2, #0
 8009026:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009028:	4b25      	ldr	r3, [pc, #148]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 800902a:	2200      	movs	r2, #0
 800902c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800902e:	4824      	ldr	r0, [pc, #144]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009030:	f000 fa80 	bl	8009534 <HAL_DMA_Init>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800903a:	f7ff fc8d 	bl	8008958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1f      	ldr	r2, [pc, #124]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009046:	4a1e      	ldr	r2, [pc, #120]	@ (80090c0 <HAL_UART_MspInit+0x168>)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 800904c:	4b1e      	ldr	r3, [pc, #120]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 800904e:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <HAL_UART_MspInit+0x174>)
 8009050:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009052:	4b1d      	ldr	r3, [pc, #116]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009054:	221b      	movs	r2, #27
 8009056:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009058:	4b1b      	ldr	r3, [pc, #108]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 800905a:	2210      	movs	r2, #16
 800905c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800905e:	4b1a      	ldr	r3, [pc, #104]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009060:	2200      	movs	r2, #0
 8009062:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009064:	4b18      	ldr	r3, [pc, #96]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009066:	2280      	movs	r2, #128	@ 0x80
 8009068:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800906a:	4b17      	ldr	r3, [pc, #92]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 800906c:	2200      	movs	r2, #0
 800906e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009070:	4b15      	ldr	r3, [pc, #84]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009072:	2200      	movs	r2, #0
 8009074:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009076:	4b14      	ldr	r3, [pc, #80]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009078:	2200      	movs	r2, #0
 800907a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800907c:	4b12      	ldr	r3, [pc, #72]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 800907e:	2200      	movs	r2, #0
 8009080:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009082:	4811      	ldr	r0, [pc, #68]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009084:	f000 fa56 	bl	8009534 <HAL_DMA_Init>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800908e:	f7ff fc63 	bl	8008958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a0c      	ldr	r2, [pc, #48]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 8009096:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009098:	4a0b      	ldr	r2, [pc, #44]	@ (80090c8 <HAL_UART_MspInit+0x170>)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800909e:	2200      	movs	r2, #0
 80090a0:	2105      	movs	r1, #5
 80090a2:	2026      	movs	r0, #38	@ 0x26
 80090a4:	f000 f92c 	bl	8009300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80090a8:	2026      	movs	r0, #38	@ 0x26
 80090aa:	f000 f943 	bl	8009334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80090ae:	bf00      	nop
 80090b0:	3778      	adds	r7, #120	@ 0x78
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	40004400 	.word	0x40004400
 80090bc:	40021000 	.word	0x40021000
 80090c0:	200068cc 	.word	0x200068cc
 80090c4:	40020008 	.word	0x40020008
 80090c8:	2000692c 	.word	0x2000692c
 80090cc:	4002001c 	.word	0x4002001c

080090d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 80090d0:	480d      	ldr	r0, [pc, #52]	@ (8009108 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80090d4:	f7ff fe96 	bl	8008e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090d8:	480c      	ldr	r0, [pc, #48]	@ (800910c <LoopForever+0x6>)
  ldr r1, =_edata
 80090da:	490d      	ldr	r1, [pc, #52]	@ (8009110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090dc:	4a0d      	ldr	r2, [pc, #52]	@ (8009114 <LoopForever+0xe>)
  movs r3, #0
 80090de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80090e0:	e002      	b.n	80090e8 <LoopCopyDataInit>

080090e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090e6:	3304      	adds	r3, #4

080090e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090ec:	d3f9      	bcc.n	80090e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090f0:	4c0a      	ldr	r4, [pc, #40]	@ (800911c <LoopForever+0x16>)
  movs r3, #0
 80090f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090f4:	e001      	b.n	80090fa <LoopFillZerobss>

080090f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090f8:	3204      	adds	r2, #4

080090fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090fc:	d3fb      	bcc.n	80090f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80090fe:	f01b ff6f 	bl	8024fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009102:	f7ff fb8f 	bl	8008824 <main>

08009106 <LoopForever>:

LoopForever:
    b LoopForever
 8009106:	e7fe      	b.n	8009106 <LoopForever>
	  ldr   r0, =_estack
 8009108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800910c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009110:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8009114:	08028330 	.word	0x08028330
  ldr r2, =_sbss
 8009118:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 800911c:	200198c8 	.word	0x200198c8

08009120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009120:	e7fe      	b.n	8009120 <ADC1_2_IRQHandler>

08009122 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009128:	2300      	movs	r3, #0
 800912a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800912c:	2003      	movs	r0, #3
 800912e:	f000 f8dc 	bl	80092ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009132:	200f      	movs	r0, #15
 8009134:	f7ff fcc0 	bl	8008ab8 <HAL_InitTick>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	71fb      	strb	r3, [r7, #7]
 8009142:	e001      	b.n	8009148 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009144:	f7ff fc8e 	bl	8008a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009148:	79fb      	ldrb	r3, [r7, #7]

}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009158:	4b05      	ldr	r3, [pc, #20]	@ (8009170 <HAL_IncTick+0x1c>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b05      	ldr	r3, [pc, #20]	@ (8009174 <HAL_IncTick+0x20>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4413      	add	r3, r2
 8009162:	4a03      	ldr	r2, [pc, #12]	@ (8009170 <HAL_IncTick+0x1c>)
 8009164:	6013      	str	r3, [r2, #0]
}
 8009166:	bf00      	nop
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	2000698c 	.word	0x2000698c
 8009174:	20000014 	.word	0x20000014

08009178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  return uwTick;
 800917c:	4b03      	ldr	r3, [pc, #12]	@ (800918c <HAL_GetTick+0x14>)
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	2000698c 	.word	0x2000698c

08009190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091a0:	4b0c      	ldr	r3, [pc, #48]	@ (80091d4 <__NVIC_SetPriorityGrouping+0x44>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80091ac:	4013      	ands	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80091b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80091bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091c2:	4a04      	ldr	r2, [pc, #16]	@ (80091d4 <__NVIC_SetPriorityGrouping+0x44>)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	60d3      	str	r3, [r2, #12]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	e000ed00 	.word	0xe000ed00

080091d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091dc:	4b04      	ldr	r3, [pc, #16]	@ (80091f0 <__NVIC_GetPriorityGrouping+0x18>)
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	f003 0307 	and.w	r3, r3, #7
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	e000ed00 	.word	0xe000ed00

080091f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	4603      	mov	r3, r0
 80091fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009202:	2b00      	cmp	r3, #0
 8009204:	db0b      	blt.n	800921e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	f003 021f 	and.w	r2, r3, #31
 800920c:	4907      	ldr	r1, [pc, #28]	@ (800922c <__NVIC_EnableIRQ+0x38>)
 800920e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009212:	095b      	lsrs	r3, r3, #5
 8009214:	2001      	movs	r0, #1
 8009216:	fa00 f202 	lsl.w	r2, r0, r2
 800921a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr
 800922a:	bf00      	nop
 800922c:	e000e100 	.word	0xe000e100

08009230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800923c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009240:	2b00      	cmp	r3, #0
 8009242:	db0a      	blt.n	800925a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	490c      	ldr	r1, [pc, #48]	@ (800927c <__NVIC_SetPriority+0x4c>)
 800924a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924e:	0112      	lsls	r2, r2, #4
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	440b      	add	r3, r1
 8009254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009258:	e00a      	b.n	8009270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	b2da      	uxtb	r2, r3
 800925e:	4908      	ldr	r1, [pc, #32]	@ (8009280 <__NVIC_SetPriority+0x50>)
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	3b04      	subs	r3, #4
 8009268:	0112      	lsls	r2, r2, #4
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	440b      	add	r3, r1
 800926e:	761a      	strb	r2, [r3, #24]
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	e000e100 	.word	0xe000e100
 8009280:	e000ed00 	.word	0xe000ed00

08009284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009284:	b480      	push	{r7}
 8009286:	b089      	sub	sp, #36	@ 0x24
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009298:	69fb      	ldr	r3, [r7, #28]
 800929a:	f1c3 0307 	rsb	r3, r3, #7
 800929e:	2b04      	cmp	r3, #4
 80092a0:	bf28      	it	cs
 80092a2:	2304      	movcs	r3, #4
 80092a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3304      	adds	r3, #4
 80092aa:	2b06      	cmp	r3, #6
 80092ac:	d902      	bls.n	80092b4 <NVIC_EncodePriority+0x30>
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3b03      	subs	r3, #3
 80092b2:	e000      	b.n	80092b6 <NVIC_EncodePriority+0x32>
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	fa02 f303 	lsl.w	r3, r2, r3
 80092c2:	43da      	mvns	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	401a      	ands	r2, r3
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	fa01 f303 	lsl.w	r3, r1, r3
 80092d6:	43d9      	mvns	r1, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092dc:	4313      	orrs	r3, r2
         );
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3724      	adds	r7, #36	@ 0x24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff ff4c 	bl	8009190 <__NVIC_SetPriorityGrouping>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	607a      	str	r2, [r7, #4]
 800930c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800930e:	f7ff ff63 	bl	80091d8 <__NVIC_GetPriorityGrouping>
 8009312:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	6978      	ldr	r0, [r7, #20]
 800931a:	f7ff ffb3 	bl	8009284 <NVIC_EncodePriority>
 800931e:	4602      	mov	r2, r0
 8009320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009324:	4611      	mov	r1, r2
 8009326:	4618      	mov	r0, r3
 8009328:	f7ff ff82 	bl	8009230 <__NVIC_SetPriority>
}
 800932c:	bf00      	nop
 800932e:	3718      	adds	r7, #24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	4603      	mov	r3, r0
 800933c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800933e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff ff56 	bl	80091f4 <__NVIC_EnableIRQ>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d101      	bne.n	8009362 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e054      	b.n	800940c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	7f5b      	ldrb	r3, [r3, #29]
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d105      	bne.n	8009378 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fe ff3a 	bl	80081ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	791b      	ldrb	r3, [r3, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10c      	bne.n	80093a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a22      	ldr	r2, [pc, #136]	@ (8009414 <HAL_CRC_Init+0xc4>)
 800938c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	689a      	ldr	r2, [r3, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f022 0218 	bic.w	r2, r2, #24
 800939c:	609a      	str	r2, [r3, #8]
 800939e:	e00c      	b.n	80093ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6899      	ldr	r1, [r3, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	461a      	mov	r2, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f834 	bl	8009418 <HAL_CRCEx_Polynomial_Set>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	e028      	b.n	800940c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	795b      	ldrb	r3, [r3, #5]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d105      	bne.n	80093ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80093ca:	611a      	str	r2, [r3, #16]
 80093cc:	e004      	b.n	80093d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6912      	ldr	r2, [r2, #16]
 80093d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695a      	ldr	r2, [r3, #20]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	699a      	ldr	r2, [r3, #24]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	430a      	orrs	r2, r1
 8009402:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	04c11db7 	.word	0x04c11db7

08009418 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009418:	b480      	push	{r7}
 800941a:	b087      	sub	sp, #28
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009428:	231f      	movs	r3, #31
 800942a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	75fb      	strb	r3, [r7, #23]
 800943a:	e063      	b.n	8009504 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800943c:	bf00      	nop
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1e5a      	subs	r2, r3, #1
 8009442:	613a      	str	r2, [r7, #16]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d009      	beq.n	800945c <HAL_CRCEx_Polynomial_Set+0x44>
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	68ba      	ldr	r2, [r7, #8]
 8009450:	fa22 f303 	lsr.w	r3, r2, r3
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0f0      	beq.n	800943e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b18      	cmp	r3, #24
 8009460:	d846      	bhi.n	80094f0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8009462:	a201      	add	r2, pc, #4	@ (adr r2, 8009468 <HAL_CRCEx_Polynomial_Set+0x50>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	080094f7 	.word	0x080094f7
 800946c:	080094f1 	.word	0x080094f1
 8009470:	080094f1 	.word	0x080094f1
 8009474:	080094f1 	.word	0x080094f1
 8009478:	080094f1 	.word	0x080094f1
 800947c:	080094f1 	.word	0x080094f1
 8009480:	080094f1 	.word	0x080094f1
 8009484:	080094f1 	.word	0x080094f1
 8009488:	080094e5 	.word	0x080094e5
 800948c:	080094f1 	.word	0x080094f1
 8009490:	080094f1 	.word	0x080094f1
 8009494:	080094f1 	.word	0x080094f1
 8009498:	080094f1 	.word	0x080094f1
 800949c:	080094f1 	.word	0x080094f1
 80094a0:	080094f1 	.word	0x080094f1
 80094a4:	080094f1 	.word	0x080094f1
 80094a8:	080094d9 	.word	0x080094d9
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	080094f1 	.word	0x080094f1
 80094b4:	080094f1 	.word	0x080094f1
 80094b8:	080094f1 	.word	0x080094f1
 80094bc:	080094f1 	.word	0x080094f1
 80094c0:	080094f1 	.word	0x080094f1
 80094c4:	080094f1 	.word	0x080094f1
 80094c8:	080094cd 	.word	0x080094cd
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	2b06      	cmp	r3, #6
 80094d0:	d913      	bls.n	80094fa <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80094d6:	e010      	b.n	80094fa <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b07      	cmp	r3, #7
 80094dc:	d90f      	bls.n	80094fe <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80094e2:	e00c      	b.n	80094fe <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d90b      	bls.n	8009502 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80094ee:	e008      	b.n	8009502 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
        break;
 80094f4:	e006      	b.n	8009504 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80094f6:	bf00      	nop
 80094f8:	e004      	b.n	8009504 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80094fa:	bf00      	nop
 80094fc:	e002      	b.n	8009504 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80094fe:	bf00      	nop
 8009500:	e000      	b.n	8009504 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8009502:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10d      	bne.n	8009526 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f023 0118 	bic.w	r1, r3, #24
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	430a      	orrs	r2, r1
 8009524:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009526:	7dfb      	ldrb	r3, [r7, #23]
}
 8009528:	4618      	mov	r0, r3
 800952a:	371c      	adds	r7, #28
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d101      	bne.n	8009546 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	e08d      	b.n	8009662 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	4b47      	ldr	r3, [pc, #284]	@ (800966c <HAL_DMA_Init+0x138>)
 800954e:	429a      	cmp	r2, r3
 8009550:	d80f      	bhi.n	8009572 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	4b45      	ldr	r3, [pc, #276]	@ (8009670 <HAL_DMA_Init+0x13c>)
 800955a:	4413      	add	r3, r2
 800955c:	4a45      	ldr	r2, [pc, #276]	@ (8009674 <HAL_DMA_Init+0x140>)
 800955e:	fba2 2303 	umull	r2, r3, r2, r3
 8009562:	091b      	lsrs	r3, r3, #4
 8009564:	009a      	lsls	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a42      	ldr	r2, [pc, #264]	@ (8009678 <HAL_DMA_Init+0x144>)
 800956e:	641a      	str	r2, [r3, #64]	@ 0x40
 8009570:	e00e      	b.n	8009590 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	4b40      	ldr	r3, [pc, #256]	@ (800967c <HAL_DMA_Init+0x148>)
 800957a:	4413      	add	r3, r2
 800957c:	4a3d      	ldr	r2, [pc, #244]	@ (8009674 <HAL_DMA_Init+0x140>)
 800957e:	fba2 2303 	umull	r2, r3, r2, r3
 8009582:	091b      	lsrs	r3, r3, #4
 8009584:	009a      	lsls	r2, r3, #2
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a3c      	ldr	r2, [pc, #240]	@ (8009680 <HAL_DMA_Init+0x14c>)
 800958e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80095a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80095b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80095c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80095cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80095d4:	68fa      	ldr	r2, [r7, #12]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fa76 	bl	8009ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095f0:	d102      	bne.n	80095f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009600:	b2d2      	uxtb	r2, r2
 8009602:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800960c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <HAL_DMA_Init+0x104>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2b04      	cmp	r3, #4
 800961c:	d80c      	bhi.n	8009638 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fa96 	bl	8009b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	e008      	b.n	800964a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2201      	movs	r2, #1
 8009654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40020407 	.word	0x40020407
 8009670:	bffdfff8 	.word	0xbffdfff8
 8009674:	cccccccd 	.word	0xcccccccd
 8009678:	40020000 	.word	0x40020000
 800967c:	bffdfbf8 	.word	0xbffdfbf8
 8009680:	40020400 	.word	0x40020400

08009684 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b086      	sub	sp, #24
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
 8009690:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800969c:	2b01      	cmp	r3, #1
 800969e:	d101      	bne.n	80096a4 <HAL_DMA_Start_IT+0x20>
 80096a0:	2302      	movs	r3, #2
 80096a2:	e066      	b.n	8009772 <HAL_DMA_Start_IT+0xee>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d155      	bne.n	8009764 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2202      	movs	r2, #2
 80096bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f9bb 	bl	8009a58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d008      	beq.n	80096fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f042 020e 	orr.w	r2, r2, #14
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e00f      	b.n	800971c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0204 	bic.w	r2, r2, #4
 800970a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f042 020a 	orr.w	r2, r2, #10
 800971a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009738:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009750:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e005      	b.n	8009770 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800976c:	2302      	movs	r3, #2
 800976e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800977a:	b480      	push	{r7}
 800977c:	b085      	sub	sp, #20
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b02      	cmp	r3, #2
 8009790:	d005      	beq.n	800979e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2204      	movs	r2, #4
 8009796:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	73fb      	strb	r3, [r7, #15]
 800979c:	e037      	b.n	800980e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 020e 	bic.w	r2, r2, #14
 80097ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0201 	bic.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097d2:	f003 021f 	and.w	r2, r3, #31
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097da:	2101      	movs	r1, #1
 80097dc:	fa01 f202 	lsl.w	r2, r1, r2
 80097e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80097ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009802:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800980c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800981e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b02      	cmp	r3, #2
 8009842:	d00d      	beq.n	8009860 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2204      	movs	r2, #4
 8009848:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2201      	movs	r2, #1
 800984e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
 800985e:	e047      	b.n	80098f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 020e 	bic.w	r2, r2, #14
 800986e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800988a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800988e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009894:	f003 021f 	and.w	r2, r3, #31
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f202 	lsl.w	r2, r1, r2
 80098a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80098ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00c      	beq.n	80098d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80098c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80098ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
    }
  }
  return status;
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009916:	f003 031f 	and.w	r3, r3, #31
 800991a:	2204      	movs	r2, #4
 800991c:	409a      	lsls	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4013      	ands	r3, r2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d026      	beq.n	8009974 <HAL_DMA_IRQHandler+0x7a>
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d021      	beq.n	8009974 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0320 	and.w	r3, r3, #32
 800993a:	2b00      	cmp	r3, #0
 800993c:	d107      	bne.n	800994e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0204 	bic.w	r2, r2, #4
 800994c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009952:	f003 021f 	and.w	r2, r3, #31
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995a:	2104      	movs	r1, #4
 800995c:	fa01 f202 	lsl.w	r2, r1, r2
 8009960:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009966:	2b00      	cmp	r3, #0
 8009968:	d071      	beq.n	8009a4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009972:	e06c      	b.n	8009a4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009978:	f003 031f 	and.w	r3, r3, #31
 800997c:	2202      	movs	r2, #2
 800997e:	409a      	lsls	r2, r3
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	4013      	ands	r3, r2
 8009984:	2b00      	cmp	r3, #0
 8009986:	d02e      	beq.n	80099e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f003 0302 	and.w	r3, r3, #2
 800998e:	2b00      	cmp	r3, #0
 8009990:	d029      	beq.n	80099e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0320 	and.w	r3, r3, #32
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10b      	bne.n	80099b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 020a 	bic.w	r2, r2, #10
 80099ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099bc:	f003 021f 	and.w	r2, r3, #31
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099c4:	2102      	movs	r1, #2
 80099c6:	fa01 f202 	lsl.w	r2, r1, r2
 80099ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d038      	beq.n	8009a4e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80099e4:	e033      	b.n	8009a4e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ea:	f003 031f 	and.w	r3, r3, #31
 80099ee:	2208      	movs	r2, #8
 80099f0:	409a      	lsls	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d02a      	beq.n	8009a50 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	f003 0308 	and.w	r3, r3, #8
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d025      	beq.n	8009a50 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 020e 	bic.w	r2, r2, #14
 8009a12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a18:	f003 021f 	and.w	r2, r3, #31
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a20:	2101      	movs	r1, #1
 8009a22:	fa01 f202 	lsl.w	r2, r1, r2
 8009a26:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d004      	beq.n	8009a50 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009a4e:	bf00      	nop
 8009a50:	bf00      	nop
}
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	60f8      	str	r0, [r7, #12]
 8009a60:	60b9      	str	r1, [r7, #8]
 8009a62:	607a      	str	r2, [r7, #4]
 8009a64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009a6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a86:	f003 021f 	and.w	r2, r3, #31
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8e:	2101      	movs	r1, #1
 8009a90:	fa01 f202 	lsl.w	r2, r1, r2
 8009a94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	2b10      	cmp	r3, #16
 8009aa4:	d108      	bne.n	8009ab8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009ab6:	e007      	b.n	8009ac8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	60da      	str	r2, [r3, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4b16      	ldr	r3, [pc, #88]	@ (8009b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d802      	bhi.n	8009aee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009ae8:	4b15      	ldr	r3, [pc, #84]	@ (8009b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e001      	b.n	8009af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009aee:	4b15      	ldr	r3, [pc, #84]	@ (8009b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009af0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	3b08      	subs	r3, #8
 8009afe:	4a12      	ldr	r2, [pc, #72]	@ (8009b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009b00:	fba2 2303 	umull	r2, r3, r2, r3
 8009b04:	091b      	lsrs	r3, r3, #4
 8009b06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0c:	089b      	lsrs	r3, r3, #2
 8009b0e:	009a      	lsls	r2, r3, #2
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	4413      	add	r3, r2
 8009b14:	461a      	mov	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a0b      	ldr	r2, [pc, #44]	@ (8009b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009b1e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f003 031f 	and.w	r3, r3, #31
 8009b26:	2201      	movs	r2, #1
 8009b28:	409a      	lsls	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009b2e:	bf00      	nop
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	40020407 	.word	0x40020407
 8009b40:	40020800 	.word	0x40020800
 8009b44:	40020820 	.word	0x40020820
 8009b48:	cccccccd 	.word	0xcccccccd
 8009b4c:	40020880 	.word	0x40020880

08009b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009b60:	68fa      	ldr	r2, [r7, #12]
 8009b62:	4b0b      	ldr	r3, [pc, #44]	@ (8009b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4a08      	ldr	r2, [pc, #32]	@ (8009b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009b72:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	f003 031f 	and.w	r3, r3, #31
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	409a      	lsls	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	1000823f 	.word	0x1000823f
 8009b94:	40020940 	.word	0x40020940

08009b98 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e147      	b.n	8009e3a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d106      	bne.n	8009bc4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fe fbf2 	bl	80083a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	699a      	ldr	r2, [r3, #24]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0210 	bic.w	r2, r2, #16
 8009bd2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bd4:	f7ff fad0 	bl	8009178 <HAL_GetTick>
 8009bd8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009bda:	e012      	b.n	8009c02 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009bdc:	f7ff facc 	bl	8009178 <HAL_GetTick>
 8009be0:	4602      	mov	r2, r0
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	1ad3      	subs	r3, r2, r3
 8009be6:	2b0a      	cmp	r3, #10
 8009be8:	d90b      	bls.n	8009c02 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bee:	f043 0201 	orr.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e11b      	b.n	8009e3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	f003 0308 	and.w	r3, r3, #8
 8009c0c:	2b08      	cmp	r3, #8
 8009c0e:	d0e5      	beq.n	8009bdc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	699a      	ldr	r2, [r3, #24]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c20:	f7ff faaa 	bl	8009178 <HAL_GetTick>
 8009c24:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009c26:	e012      	b.n	8009c4e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009c28:	f7ff faa6 	bl	8009178 <HAL_GetTick>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	1ad3      	subs	r3, r2, r3
 8009c32:	2b0a      	cmp	r3, #10
 8009c34:	d90b      	bls.n	8009c4e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c3a:	f043 0201 	orr.w	r2, r3, #1
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2203      	movs	r2, #3
 8009c46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e0f5      	b.n	8009e3a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	f003 0301 	and.w	r3, r3, #1
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0e5      	beq.n	8009c28 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f042 0202 	orr.w	r2, r2, #2
 8009c6a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a74      	ldr	r2, [pc, #464]	@ (8009e44 <HAL_FDCAN_Init+0x2ac>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d103      	bne.n	8009c7e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8009c76:	4a74      	ldr	r2, [pc, #464]	@ (8009e48 <HAL_FDCAN_Init+0x2b0>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	7c1b      	ldrb	r3, [r3, #16]
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d108      	bne.n	8009c98 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	699a      	ldr	r2, [r3, #24]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c94:	619a      	str	r2, [r3, #24]
 8009c96:	e007      	b.n	8009ca8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	699a      	ldr	r2, [r3, #24]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7c5b      	ldrb	r3, [r3, #17]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d108      	bne.n	8009cc2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	699a      	ldr	r2, [r3, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cbe:	619a      	str	r2, [r3, #24]
 8009cc0:	e007      	b.n	8009cd2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	699a      	ldr	r2, [r3, #24]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009cd0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	7c9b      	ldrb	r3, [r3, #18]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d108      	bne.n	8009cec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	699a      	ldr	r2, [r3, #24]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ce8:	619a      	str	r2, [r3, #24]
 8009cea:	e007      	b.n	8009cfc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	699a      	ldr	r2, [r3, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cfa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689a      	ldr	r2, [r3, #8]
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	699a      	ldr	r2, [r3, #24]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009d20:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691a      	ldr	r2, [r3, #16]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0210 	bic.w	r2, r2, #16
 8009d30:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d108      	bne.n	8009d4c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699a      	ldr	r2, [r3, #24]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0204 	orr.w	r2, r2, #4
 8009d48:	619a      	str	r2, [r3, #24]
 8009d4a:	e02c      	b.n	8009da6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d028      	beq.n	8009da6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68db      	ldr	r3, [r3, #12]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d01c      	beq.n	8009d96 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699a      	ldr	r2, [r3, #24]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d6a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	691a      	ldr	r2, [r3, #16]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0210 	orr.w	r2, r2, #16
 8009d7a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d110      	bne.n	8009da6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0220 	orr.w	r2, r2, #32
 8009d92:	619a      	str	r2, [r3, #24]
 8009d94:	e007      	b.n	8009da6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	699a      	ldr	r2, [r3, #24]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0220 	orr.w	r2, r2, #32
 8009da4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	3b01      	subs	r3, #1
 8009dac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009db6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009dbe:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	695b      	ldr	r3, [r3, #20]
 8009dc6:	3b01      	subs	r3, #1
 8009dc8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009dce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009dd0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009dda:	d115      	bne.n	8009e08 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de6:	3b01      	subs	r3, #1
 8009de8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009dea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df0:	3b01      	subs	r3, #1
 8009df2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009df4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009e04:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009e06:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f814 	bl	8009e4c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	40006400 	.word	0x40006400
 8009e48:	40006500 	.word	0x40006500

08009e4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8009e54:	4b30      	ldr	r3, [pc, #192]	@ (8009f18 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8009e56:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a2f      	ldr	r2, [pc, #188]	@ (8009f1c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d103      	bne.n	8009e6a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009e68:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8009f20 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d103      	bne.n	8009e7c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8009e7a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e8a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e92:	041a      	lsls	r2, r3, #16
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eb0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb8:	061a      	lsls	r2, r3, #24
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	430a      	orrs	r2, r1
 8009ec0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	e005      	b.n	8009efe <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	3304      	adds	r3, #4
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d3f3      	bcc.n	8009ef2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr
 8009f18:	4000a400 	.word	0x4000a400
 8009f1c:	40006800 	.word	0x40006800
 8009f20:	40006c00 	.word	0x40006c00

08009f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b087      	sub	sp, #28
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009f32:	e15a      	b.n	800a1ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	2101      	movs	r1, #1
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 814c 	beq.w	800a1e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f003 0303 	and.w	r3, r3, #3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d005      	beq.n	8009f64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f60:	2b02      	cmp	r3, #2
 8009f62:	d130      	bne.n	8009fc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	2203      	movs	r2, #3
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	43db      	mvns	r3, r3
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	4013      	ands	r3, r2
 8009f7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	005b      	lsls	r3, r3, #1
 8009f84:	fa02 f303 	lsl.w	r3, r2, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	693a      	ldr	r2, [r7, #16]
 8009f92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa2:	43db      	mvns	r3, r3
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	4013      	ands	r3, r2
 8009fa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	091b      	lsrs	r3, r3, #4
 8009fb0:	f003 0201 	and.w	r2, r3, #1
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fba:	693a      	ldr	r2, [r7, #16]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d017      	beq.n	800a002 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	2203      	movs	r2, #3
 8009fde:	fa02 f303 	lsl.w	r3, r2, r3
 8009fe2:	43db      	mvns	r3, r3
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff6:	693a      	ldr	r2, [r7, #16]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b02      	cmp	r3, #2
 800a00c:	d123      	bne.n	800a056 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	08da      	lsrs	r2, r3, #3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	3208      	adds	r2, #8
 800a016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	220f      	movs	r2, #15
 800a026:	fa02 f303 	lsl.w	r3, r2, r3
 800a02a:	43db      	mvns	r3, r3
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4013      	ands	r3, r2
 800a030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	691a      	ldr	r2, [r3, #16]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	009b      	lsls	r3, r3, #2
 800a03e:	fa02 f303 	lsl.w	r3, r2, r3
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	4313      	orrs	r3, r2
 800a046:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	08da      	lsrs	r2, r3, #3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	3208      	adds	r2, #8
 800a050:	6939      	ldr	r1, [r7, #16]
 800a052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	2203      	movs	r2, #3
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43db      	mvns	r3, r3
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4013      	ands	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	f003 0203 	and.w	r2, r3, #3
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a092:	2b00      	cmp	r3, #0
 800a094:	f000 80a6 	beq.w	800a1e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a098:	4b5b      	ldr	r3, [pc, #364]	@ (800a208 <HAL_GPIO_Init+0x2e4>)
 800a09a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a09c:	4a5a      	ldr	r2, [pc, #360]	@ (800a208 <HAL_GPIO_Init+0x2e4>)
 800a09e:	f043 0301 	orr.w	r3, r3, #1
 800a0a2:	6613      	str	r3, [r2, #96]	@ 0x60
 800a0a4:	4b58      	ldr	r3, [pc, #352]	@ (800a208 <HAL_GPIO_Init+0x2e4>)
 800a0a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	60bb      	str	r3, [r7, #8]
 800a0ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a0b0:	4a56      	ldr	r2, [pc, #344]	@ (800a20c <HAL_GPIO_Init+0x2e8>)
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	089b      	lsrs	r3, r3, #2
 800a0b6:	3302      	adds	r3, #2
 800a0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	220f      	movs	r2, #15
 800a0c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0cc:	43db      	mvns	r3, r3
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	4013      	ands	r3, r2
 800a0d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a0da:	d01f      	beq.n	800a11c <HAL_GPIO_Init+0x1f8>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a4c      	ldr	r2, [pc, #304]	@ (800a210 <HAL_GPIO_Init+0x2ec>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d019      	beq.n	800a118 <HAL_GPIO_Init+0x1f4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a4b      	ldr	r2, [pc, #300]	@ (800a214 <HAL_GPIO_Init+0x2f0>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d013      	beq.n	800a114 <HAL_GPIO_Init+0x1f0>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a4a      	ldr	r2, [pc, #296]	@ (800a218 <HAL_GPIO_Init+0x2f4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d00d      	beq.n	800a110 <HAL_GPIO_Init+0x1ec>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a49      	ldr	r2, [pc, #292]	@ (800a21c <HAL_GPIO_Init+0x2f8>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d007      	beq.n	800a10c <HAL_GPIO_Init+0x1e8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a48      	ldr	r2, [pc, #288]	@ (800a220 <HAL_GPIO_Init+0x2fc>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d101      	bne.n	800a108 <HAL_GPIO_Init+0x1e4>
 800a104:	2305      	movs	r3, #5
 800a106:	e00a      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a108:	2306      	movs	r3, #6
 800a10a:	e008      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a10c:	2304      	movs	r3, #4
 800a10e:	e006      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a110:	2303      	movs	r3, #3
 800a112:	e004      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a114:	2302      	movs	r3, #2
 800a116:	e002      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a118:	2301      	movs	r3, #1
 800a11a:	e000      	b.n	800a11e <HAL_GPIO_Init+0x1fa>
 800a11c:	2300      	movs	r3, #0
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	f002 0203 	and.w	r2, r2, #3
 800a124:	0092      	lsls	r2, r2, #2
 800a126:	4093      	lsls	r3, r2
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a12e:	4937      	ldr	r1, [pc, #220]	@ (800a20c <HAL_GPIO_Init+0x2e8>)
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	089b      	lsrs	r3, r3, #2
 800a134:	3302      	adds	r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a13c:	4b39      	ldr	r3, [pc, #228]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	43db      	mvns	r3, r3
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	4013      	ands	r3, r2
 800a14a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d003      	beq.n	800a160 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a158:	693a      	ldr	r2, [r7, #16]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a160:	4a30      	ldr	r2, [pc, #192]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a166:	4b2f      	ldr	r3, [pc, #188]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	43db      	mvns	r3, r3
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4013      	ands	r3, r2
 800a174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a182:	693a      	ldr	r2, [r7, #16]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4313      	orrs	r3, r2
 800a188:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a18a:	4a26      	ldr	r2, [pc, #152]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a190:	4b24      	ldr	r3, [pc, #144]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	43db      	mvns	r3, r3
 800a19a:	693a      	ldr	r2, [r7, #16]
 800a19c:	4013      	ands	r3, r2
 800a19e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a1ac:	693a      	ldr	r2, [r7, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a1b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a1de:	4a11      	ldr	r2, [pc, #68]	@ (800a224 <HAL_GPIO_Init+0x300>)
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f47f ae9d 	bne.w	8009f34 <HAL_GPIO_Init+0x10>
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	bf00      	nop
 800a1fe:	371c      	adds	r7, #28
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	40021000 	.word	0x40021000
 800a20c:	40010000 	.word	0x40010000
 800a210:	48000400 	.word	0x48000400
 800a214:	48000800 	.word	0x48000800
 800a218:	48000c00 	.word	0x48000c00
 800a21c:	48001000 	.word	0x48001000
 800a220:	48001400 	.word	0x48001400
 800a224:	40010400 	.word	0x40010400

0800a228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	807b      	strh	r3, [r7, #2]
 800a234:	4613      	mov	r3, r2
 800a236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a238:	787b      	ldrb	r3, [r7, #1]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a23e:	887a      	ldrh	r2, [r7, #2]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a244:	e002      	b.n	800a24c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a246:	887a      	ldrh	r2, [r7, #2]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a24c:	bf00      	nop
 800a24e:	370c      	adds	r7, #12
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr

0800a258 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a262:	4b08      	ldr	r3, [pc, #32]	@ (800a284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a264:	695a      	ldr	r2, [r3, #20]
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	4013      	ands	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d006      	beq.n	800a27c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a26e:	4a05      	ldr	r2, [pc, #20]	@ (800a284 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a274:	88fb      	ldrh	r3, [r7, #6]
 800a276:	4618      	mov	r0, r3
 800a278:	f7fd ff4a 	bl	8008110 <HAL_GPIO_EXTI_Callback>
  }
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	40010400 	.word	0x40010400

0800a288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e08d      	b.n	800a3b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7fe fa60 	bl	8008774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2224      	movs	r2, #36	@ 0x24
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a2d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	689a      	ldr	r2, [r3, #8]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d107      	bne.n	800a302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689a      	ldr	r2, [r3, #8]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2fe:	609a      	str	r2, [r3, #8]
 800a300:	e006      	b.n	800a310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689a      	ldr	r2, [r3, #8]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a30e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d108      	bne.n	800a32a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a326:	605a      	str	r2, [r3, #4]
 800a328:	e007      	b.n	800a33a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6812      	ldr	r2, [r2, #0]
 800a344:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a348:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a34c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a35c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	691a      	ldr	r2, [r3, #16]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69d9      	ldr	r1, [r3, #28]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a1a      	ldr	r2, [r3, #32]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	430a      	orrs	r2, r1
 800a386:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f042 0201 	orr.w	r2, r2, #1
 800a396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3708      	adds	r7, #8
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af02      	add	r7, sp, #8
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	817b      	strh	r3, [r7, #10]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	813b      	strh	r3, [r7, #8]
 800a3d6:	4613      	mov	r3, r2
 800a3d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3e0:	b2db      	uxtb	r3, r3
 800a3e2:	2b20      	cmp	r3, #32
 800a3e4:	f040 80f9 	bne.w	800a5da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3e8:	6a3b      	ldr	r3, [r7, #32]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d002      	beq.n	800a3f4 <HAL_I2C_Mem_Write+0x34>
 800a3ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d105      	bne.n	800a400 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e0ed      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a406:	2b01      	cmp	r3, #1
 800a408:	d101      	bne.n	800a40e <HAL_I2C_Mem_Write+0x4e>
 800a40a:	2302      	movs	r3, #2
 800a40c:	e0e6      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a416:	f7fe feaf 	bl	8009178 <HAL_GetTick>
 800a41a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2319      	movs	r3, #25
 800a422:	2201      	movs	r2, #1
 800a424:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a428:	68f8      	ldr	r0, [r7, #12]
 800a42a:	f000 fac3 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d001      	beq.n	800a438 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e0d1      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2221      	movs	r2, #33	@ 0x21
 800a43c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2240      	movs	r2, #64	@ 0x40
 800a444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a3a      	ldr	r2, [r7, #32]
 800a452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a460:	88f8      	ldrh	r0, [r7, #6]
 800a462:	893a      	ldrh	r2, [r7, #8]
 800a464:	8979      	ldrh	r1, [r7, #10]
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	9300      	str	r3, [sp, #0]
 800a46e:	4603      	mov	r3, r0
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f9d3 	bl	800a81c <I2C_RequestMemoryWrite>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0a9      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2bff      	cmp	r3, #255	@ 0xff
 800a490:	d90e      	bls.n	800a4b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	22ff      	movs	r2, #255	@ 0xff
 800a496:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a49c:	b2da      	uxtb	r2, r3
 800a49e:	8979      	ldrh	r1, [r7, #10]
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f000 fc47 	bl	800ad3c <I2C_TransferConfig>
 800a4ae:	e00f      	b.n	800a4d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	8979      	ldrh	r1, [r7, #10]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 fc36 	bl	800ad3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4d0:	697a      	ldr	r2, [r7, #20]
 800a4d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fac6 	bl	800aa66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d001      	beq.n	800a4e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e07b      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	3b01      	subs	r3, #1
 800a502:	b29a      	uxth	r2, r3
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29a      	uxth	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a518:	b29b      	uxth	r3, r3
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d034      	beq.n	800a588 <HAL_I2C_Mem_Write+0x1c8>
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a522:	2b00      	cmp	r3, #0
 800a524:	d130      	bne.n	800a588 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a52c:	2200      	movs	r2, #0
 800a52e:	2180      	movs	r1, #128	@ 0x80
 800a530:	68f8      	ldr	r0, [r7, #12]
 800a532:	f000 fa3f 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a536:	4603      	mov	r3, r0
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e04d      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a544:	b29b      	uxth	r3, r3
 800a546:	2bff      	cmp	r3, #255	@ 0xff
 800a548:	d90e      	bls.n	800a568 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	22ff      	movs	r2, #255	@ 0xff
 800a54e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a554:	b2da      	uxtb	r2, r3
 800a556:	8979      	ldrh	r1, [r7, #10]
 800a558:	2300      	movs	r3, #0
 800a55a:	9300      	str	r3, [sp, #0]
 800a55c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 fbeb 	bl	800ad3c <I2C_TransferConfig>
 800a566:	e00f      	b.n	800a588 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a576:	b2da      	uxtb	r2, r3
 800a578:	8979      	ldrh	r1, [r7, #10]
 800a57a:	2300      	movs	r3, #0
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 fbda 	bl	800ad3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d19e      	bne.n	800a4d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a592:	697a      	ldr	r2, [r7, #20]
 800a594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 faac 	bl	800aaf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e01a      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	6859      	ldr	r1, [r3, #4]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e4 <HAL_I2C_Mem_Write+0x224>)
 800a5ba:	400b      	ands	r3, r1
 800a5bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2220      	movs	r2, #32
 800a5c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	e000      	b.n	800a5dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a5da:	2302      	movs	r3, #2
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	fe00e800 	.word	0xfe00e800

0800a5e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b088      	sub	sp, #32
 800a5ec:	af02      	add	r7, sp, #8
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	817b      	strh	r3, [r7, #10]
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	813b      	strh	r3, [r7, #8]
 800a5fe:	4613      	mov	r3, r2
 800a600:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	f040 80fd 	bne.w	800a80a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a610:	6a3b      	ldr	r3, [r7, #32]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <HAL_I2C_Mem_Read+0x34>
 800a616:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d105      	bne.n	800a628 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a622:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e0f1      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d101      	bne.n	800a636 <HAL_I2C_Mem_Read+0x4e>
 800a632:	2302      	movs	r3, #2
 800a634:	e0ea      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a63e:	f7fe fd9b 	bl	8009178 <HAL_GetTick>
 800a642:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	2319      	movs	r3, #25
 800a64a:	2201      	movs	r2, #1
 800a64c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 f9af 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e0d5      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2222      	movs	r2, #34	@ 0x22
 800a664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2240      	movs	r2, #64	@ 0x40
 800a66c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	2200      	movs	r2, #0
 800a674:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a3a      	ldr	r2, [r7, #32]
 800a67a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	2200      	movs	r2, #0
 800a686:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a688:	88f8      	ldrh	r0, [r7, #6]
 800a68a:	893a      	ldrh	r2, [r7, #8]
 800a68c:	8979      	ldrh	r1, [r7, #10]
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	4603      	mov	r3, r0
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 f913 	bl	800a8c4 <I2C_RequestMemoryRead>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d005      	beq.n	800a6b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0ad      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2bff      	cmp	r3, #255	@ 0xff
 800a6b8:	d90e      	bls.n	800a6d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	22ff      	movs	r2, #255	@ 0xff
 800a6be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	8979      	ldrh	r1, [r7, #10]
 800a6c8:	4b52      	ldr	r3, [pc, #328]	@ (800a814 <HAL_I2C_Mem_Read+0x22c>)
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a6d0:	68f8      	ldr	r0, [r7, #12]
 800a6d2:	f000 fb33 	bl	800ad3c <I2C_TransferConfig>
 800a6d6:	e00f      	b.n	800a6f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	8979      	ldrh	r1, [r7, #10]
 800a6ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a814 <HAL_I2C_Mem_Read+0x22c>)
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6f2:	68f8      	ldr	r0, [r7, #12]
 800a6f4:	f000 fb22 	bl	800ad3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	2200      	movs	r2, #0
 800a700:	2104      	movs	r1, #4
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f000 f956 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e07c      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a72e:	3b01      	subs	r3, #1
 800a730:	b29a      	uxth	r2, r3
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	3b01      	subs	r3, #1
 800a73e:	b29a      	uxth	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a748:	b29b      	uxth	r3, r3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d034      	beq.n	800a7b8 <HAL_I2C_Mem_Read+0x1d0>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a752:	2b00      	cmp	r3, #0
 800a754:	d130      	bne.n	800a7b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	2200      	movs	r2, #0
 800a75e:	2180      	movs	r1, #128	@ 0x80
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 f927 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	e04d      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a774:	b29b      	uxth	r3, r3
 800a776:	2bff      	cmp	r3, #255	@ 0xff
 800a778:	d90e      	bls.n	800a798 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	22ff      	movs	r2, #255	@ 0xff
 800a77e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a784:	b2da      	uxtb	r2, r3
 800a786:	8979      	ldrh	r1, [r7, #10]
 800a788:	2300      	movs	r3, #0
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f000 fad3 	bl	800ad3c <I2C_TransferConfig>
 800a796:	e00f      	b.n	800a7b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	8979      	ldrh	r1, [r7, #10]
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 fac2 	bl	800ad3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d19a      	bne.n	800a6f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 f994 	bl	800aaf4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d001      	beq.n	800a7d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e01a      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6859      	ldr	r1, [r3, #4]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800a818 <HAL_I2C_Mem_Read+0x230>)
 800a7ea:	400b      	ands	r3, r1
 800a7ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	2220      	movs	r2, #32
 800a7f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e000      	b.n	800a80c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a80a:	2302      	movs	r3, #2
  }
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	80002400 	.word	0x80002400
 800a818:	fe00e800 	.word	0xfe00e800

0800a81c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af02      	add	r7, sp, #8
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	4603      	mov	r3, r0
 800a82c:	817b      	strh	r3, [r7, #10]
 800a82e:	460b      	mov	r3, r1
 800a830:	813b      	strh	r3, [r7, #8]
 800a832:	4613      	mov	r3, r2
 800a834:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a836:	88fb      	ldrh	r3, [r7, #6]
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	8979      	ldrh	r1, [r7, #10]
 800a83c:	4b20      	ldr	r3, [pc, #128]	@ (800a8c0 <I2C_RequestMemoryWrite+0xa4>)
 800a83e:	9300      	str	r3, [sp, #0]
 800a840:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f000 fa79 	bl	800ad3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	69b9      	ldr	r1, [r7, #24]
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	f000 f909 	bl	800aa66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e02c      	b.n	800a8b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a85e:	88fb      	ldrh	r3, [r7, #6]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d105      	bne.n	800a870 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a864:	893b      	ldrh	r3, [r7, #8]
 800a866:	b2da      	uxtb	r2, r3
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a86e:	e015      	b.n	800a89c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a870:	893b      	ldrh	r3, [r7, #8]
 800a872:	0a1b      	lsrs	r3, r3, #8
 800a874:	b29b      	uxth	r3, r3
 800a876:	b2da      	uxtb	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	69b9      	ldr	r1, [r7, #24]
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f000 f8ef 	bl	800aa66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e012      	b.n	800a8b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a892:	893b      	ldrh	r3, [r7, #8]
 800a894:	b2da      	uxtb	r2, r3
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	2180      	movs	r1, #128	@ 0x80
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f000 f884 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d001      	beq.n	800a8b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e000      	b.n	800a8b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	80002000 	.word	0x80002000

0800a8c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af02      	add	r7, sp, #8
 800a8ca:	60f8      	str	r0, [r7, #12]
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	817b      	strh	r3, [r7, #10]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	813b      	strh	r3, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	b2da      	uxtb	r2, r3
 800a8e2:	8979      	ldrh	r1, [r7, #10]
 800a8e4:	4b20      	ldr	r3, [pc, #128]	@ (800a968 <I2C_RequestMemoryRead+0xa4>)
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fa26 	bl	800ad3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	69b9      	ldr	r1, [r7, #24]
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 f8b6 	bl	800aa66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	e02c      	b.n	800a95e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a904:	88fb      	ldrh	r3, [r7, #6]
 800a906:	2b01      	cmp	r3, #1
 800a908:	d105      	bne.n	800a916 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a90a:	893b      	ldrh	r3, [r7, #8]
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	629a      	str	r2, [r3, #40]	@ 0x28
 800a914:	e015      	b.n	800a942 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a916:	893b      	ldrh	r3, [r7, #8]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a924:	69fa      	ldr	r2, [r7, #28]
 800a926:	69b9      	ldr	r1, [r7, #24]
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 f89c 	bl	800aa66 <I2C_WaitOnTXISFlagUntilTimeout>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e012      	b.n	800a95e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a938:	893b      	ldrh	r3, [r7, #8]
 800a93a:	b2da      	uxtb	r2, r3
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2200      	movs	r2, #0
 800a94a:	2140      	movs	r1, #64	@ 0x40
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 f831 	bl	800a9b4 <I2C_WaitOnFlagUntilTimeout>
 800a952:	4603      	mov	r3, r0
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a958:	2301      	movs	r3, #1
 800a95a:	e000      	b.n	800a95e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	80002000 	.word	0x80002000

0800a96c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d103      	bne.n	800a98a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2200      	movs	r2, #0
 800a988:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b01      	cmp	r3, #1
 800a996:	d007      	beq.n	800a9a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	699a      	ldr	r2, [r3, #24]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f042 0201 	orr.w	r2, r2, #1
 800a9a6:	619a      	str	r2, [r3, #24]
  }
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60f8      	str	r0, [r7, #12]
 800a9bc:	60b9      	str	r1, [r7, #8]
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a9c4:	e03b      	b.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9c6:	69ba      	ldr	r2, [r7, #24]
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f000 f8d6 	bl	800ab7c <I2C_IsErrorOccurred>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d001      	beq.n	800a9da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e041      	b.n	800aa5e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9e0:	d02d      	beq.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9e2:	f7fe fbc9 	bl	8009178 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d302      	bcc.n	800a9f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d122      	bne.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	699a      	ldr	r2, [r3, #24]
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	4013      	ands	r3, r2
 800aa02:	68ba      	ldr	r2, [r7, #8]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	bf0c      	ite	eq
 800aa08:	2301      	moveq	r3, #1
 800aa0a:	2300      	movne	r3, #0
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	79fb      	ldrb	r3, [r7, #7]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d113      	bne.n	800aa3e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa1a:	f043 0220 	orr.w	r2, r3, #32
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2220      	movs	r2, #32
 800aa26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e00f      	b.n	800aa5e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	699a      	ldr	r2, [r3, #24]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4013      	ands	r3, r2
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	bf0c      	ite	eq
 800aa4e:	2301      	moveq	r3, #1
 800aa50:	2300      	movne	r3, #0
 800aa52:	b2db      	uxtb	r3, r3
 800aa54:	461a      	mov	r2, r3
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d0b4      	beq.n	800a9c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aa72:	e033      	b.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f87f 	bl	800ab7c <I2C_IsErrorOccurred>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e031      	b.n	800aaec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa8e:	d025      	beq.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa90:	f7fe fb72 	bl	8009178 <HAL_GetTick>
 800aa94:	4602      	mov	r2, r0
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	1ad3      	subs	r3, r2, r3
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d302      	bcc.n	800aaa6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d11a      	bne.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	f003 0302 	and.w	r3, r3, #2
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d013      	beq.n	800aadc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab8:	f043 0220 	orr.w	r2, r3, #32
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2220      	movs	r2, #32
 800aac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2200      	movs	r2, #0
 800aacc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e007      	b.n	800aaec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d1c4      	bne.n	800aa74 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab00:	e02f      	b.n	800ab62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 f838 	bl	800ab7c <I2C_IsErrorOccurred>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e02d      	b.n	800ab72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab16:	f7fe fb2f 	bl	8009178 <HAL_GetTick>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d302      	bcc.n	800ab2c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d11a      	bne.n	800ab62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	699b      	ldr	r3, [r3, #24]
 800ab32:	f003 0320 	and.w	r3, r3, #32
 800ab36:	2b20      	cmp	r3, #32
 800ab38:	d013      	beq.n	800ab62 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab3e:	f043 0220 	orr.w	r2, r3, #32
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2220      	movs	r2, #32
 800ab4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e007      	b.n	800ab72 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	f003 0320 	and.w	r3, r3, #32
 800ab6c:	2b20      	cmp	r3, #32
 800ab6e:	d1c8      	bne.n	800ab02 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
	...

0800ab7c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b08a      	sub	sp, #40	@ 0x28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	699b      	ldr	r3, [r3, #24]
 800ab94:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ab96:	2300      	movs	r3, #0
 800ab98:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	f003 0310 	and.w	r3, r3, #16
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d068      	beq.n	800ac7a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2210      	movs	r2, #16
 800abae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800abb0:	e049      	b.n	800ac46 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abb8:	d045      	beq.n	800ac46 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800abba:	f7fe fadd 	bl	8009178 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d302      	bcc.n	800abd0 <I2C_IsErrorOccurred+0x54>
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d13a      	bne.n	800ac46 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abda:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abe2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abf2:	d121      	bne.n	800ac38 <I2C_IsErrorOccurred+0xbc>
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abfa:	d01d      	beq.n	800ac38 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800abfc:	7cfb      	ldrb	r3, [r7, #19]
 800abfe:	2b20      	cmp	r3, #32
 800ac00:	d01a      	beq.n	800ac38 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ac10:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ac12:	f7fe fab1 	bl	8009178 <HAL_GetTick>
 800ac16:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac18:	e00e      	b.n	800ac38 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ac1a:	f7fe faad 	bl	8009178 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b19      	cmp	r3, #25
 800ac26:	d907      	bls.n	800ac38 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	f043 0320 	orr.w	r3, r3, #32
 800ac2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800ac36:	e006      	b.n	800ac46 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	699b      	ldr	r3, [r3, #24]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	d1e9      	bne.n	800ac1a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	f003 0320 	and.w	r3, r3, #32
 800ac50:	2b20      	cmp	r3, #32
 800ac52:	d003      	beq.n	800ac5c <I2C_IsErrorOccurred+0xe0>
 800ac54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0aa      	beq.n	800abb2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ac5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	f043 0304 	orr.w	r3, r3, #4
 800ac72:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	699b      	ldr	r3, [r3, #24]
 800ac80:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00b      	beq.n	800aca4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ac8c:	6a3b      	ldr	r3, [r7, #32]
 800ac8e:	f043 0301 	orr.w	r3, r3, #1
 800ac92:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac9c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aca4:	69bb      	ldr	r3, [r7, #24]
 800aca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00b      	beq.n	800acc6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	f043 0308 	orr.w	r3, r3, #8
 800acb4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800acbe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00b      	beq.n	800ace8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800acd0:	6a3b      	ldr	r3, [r7, #32]
 800acd2:	f043 0302 	orr.w	r3, r3, #2
 800acd6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ace0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ace8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01c      	beq.n	800ad2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7ff fe3b 	bl	800a96c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	6859      	ldr	r1, [r3, #4]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	4b0d      	ldr	r3, [pc, #52]	@ (800ad38 <I2C_IsErrorOccurred+0x1bc>)
 800ad02:	400b      	ands	r3, r1
 800ad04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ad2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	3728      	adds	r7, #40	@ 0x28
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	fe00e800 	.word	0xfe00e800

0800ad3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	607b      	str	r3, [r7, #4]
 800ad46:	460b      	mov	r3, r1
 800ad48:	817b      	strh	r3, [r7, #10]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad4e:	897b      	ldrh	r3, [r7, #10]
 800ad50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ad54:	7a7b      	ldrb	r3, [r7, #9]
 800ad56:	041b      	lsls	r3, r3, #16
 800ad58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	4313      	orrs	r3, r2
 800ad66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	6a3b      	ldr	r3, [r7, #32]
 800ad74:	0d5b      	lsrs	r3, r3, #21
 800ad76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ad7a:	4b08      	ldr	r3, [pc, #32]	@ (800ad9c <I2C_TransferConfig+0x60>)
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	43db      	mvns	r3, r3
 800ad80:	ea02 0103 	and.w	r1, r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	697a      	ldr	r2, [r7, #20]
 800ad8a:	430a      	orrs	r2, r1
 800ad8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ad8e:	bf00      	nop
 800ad90:	371c      	adds	r7, #28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	03ff63ff 	.word	0x03ff63ff

0800ada0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d138      	bne.n	800ae28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d101      	bne.n	800adc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800adc0:	2302      	movs	r3, #2
 800adc2:	e032      	b.n	800ae2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2224      	movs	r2, #36	@ 0x24
 800add0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800adf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6819      	ldr	r1, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	430a      	orrs	r2, r1
 800ae02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f042 0201 	orr.w	r2, r2, #1
 800ae12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2220      	movs	r2, #32
 800ae18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	e000      	b.n	800ae2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ae28:	2302      	movs	r3, #2
  }
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b20      	cmp	r3, #32
 800ae4a:	d139      	bne.n	800aec0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d101      	bne.n	800ae5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ae56:	2302      	movs	r3, #2
 800ae58:	e033      	b.n	800aec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2224      	movs	r2, #36	@ 0x24
 800ae66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f022 0201 	bic.w	r2, r2, #1
 800ae78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ae88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	021b      	lsls	r3, r3, #8
 800ae8e:	68fa      	ldr	r2, [r7, #12]
 800ae90:	4313      	orrs	r3, r2
 800ae92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f042 0201 	orr.w	r2, r2, #1
 800aeaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2220      	movs	r2, #32
 800aeb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	e000      	b.n	800aec2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800aec0:	2302      	movs	r3, #2
  }
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e0c0      	b.n	800b062 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f00c fec5 	bl	8017c84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2203      	movs	r2, #3
 800aefe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f005 fb81 	bl	801060e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af0c:	2300      	movs	r3, #0
 800af0e:	73fb      	strb	r3, [r7, #15]
 800af10:	e03e      	b.n	800af90 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800af12:	7bfa      	ldrb	r2, [r7, #15]
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	440b      	add	r3, r1
 800af20:	3311      	adds	r3, #17
 800af22:	2201      	movs	r2, #1
 800af24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800af26:	7bfa      	ldrb	r2, [r7, #15]
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	00db      	lsls	r3, r3, #3
 800af32:	440b      	add	r3, r1
 800af34:	3310      	adds	r3, #16
 800af36:	7bfa      	ldrb	r2, [r7, #15]
 800af38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800af3a:	7bfa      	ldrb	r2, [r7, #15]
 800af3c:	6879      	ldr	r1, [r7, #4]
 800af3e:	4613      	mov	r3, r2
 800af40:	009b      	lsls	r3, r3, #2
 800af42:	4413      	add	r3, r2
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	440b      	add	r3, r1
 800af48:	3313      	adds	r3, #19
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800af4e:	7bfa      	ldrb	r2, [r7, #15]
 800af50:	6879      	ldr	r1, [r7, #4]
 800af52:	4613      	mov	r3, r2
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	4413      	add	r3, r2
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	440b      	add	r3, r1
 800af5c:	3320      	adds	r3, #32
 800af5e:	2200      	movs	r2, #0
 800af60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800af62:	7bfa      	ldrb	r2, [r7, #15]
 800af64:	6879      	ldr	r1, [r7, #4]
 800af66:	4613      	mov	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	00db      	lsls	r3, r3, #3
 800af6e:	440b      	add	r3, r1
 800af70:	3324      	adds	r3, #36	@ 0x24
 800af72:	2200      	movs	r2, #0
 800af74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	1c5a      	adds	r2, r3, #1
 800af7c:	4613      	mov	r3, r2
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	4413      	add	r3, r2
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	440b      	add	r3, r1
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	3301      	adds	r3, #1
 800af8e:	73fb      	strb	r3, [r7, #15]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	791b      	ldrb	r3, [r3, #4]
 800af94:	7bfa      	ldrb	r2, [r7, #15]
 800af96:	429a      	cmp	r2, r3
 800af98:	d3bb      	bcc.n	800af12 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
 800af9e:	e044      	b.n	800b02a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800afa0:	7bfa      	ldrb	r2, [r7, #15]
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	4613      	mov	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	00db      	lsls	r3, r3, #3
 800afac:	440b      	add	r3, r1
 800afae:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800afb2:	2200      	movs	r2, #0
 800afb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800afb6:	7bfa      	ldrb	r2, [r7, #15]
 800afb8:	6879      	ldr	r1, [r7, #4]
 800afba:	4613      	mov	r3, r2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	00db      	lsls	r3, r3, #3
 800afc2:	440b      	add	r3, r1
 800afc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afc8:	7bfa      	ldrb	r2, [r7, #15]
 800afca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800afcc:	7bfa      	ldrb	r2, [r7, #15]
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	00db      	lsls	r3, r3, #3
 800afd8:	440b      	add	r3, r1
 800afda:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800afde:	2200      	movs	r2, #0
 800afe0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800afe2:	7bfa      	ldrb	r2, [r7, #15]
 800afe4:	6879      	ldr	r1, [r7, #4]
 800afe6:	4613      	mov	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	4413      	add	r3, r2
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	440b      	add	r3, r1
 800aff0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800aff8:	7bfa      	ldrb	r2, [r7, #15]
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	4613      	mov	r3, r2
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	4413      	add	r3, r2
 800b002:	00db      	lsls	r3, r3, #3
 800b004:	440b      	add	r3, r1
 800b006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b00e:	7bfa      	ldrb	r2, [r7, #15]
 800b010:	6879      	ldr	r1, [r7, #4]
 800b012:	4613      	mov	r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	440b      	add	r3, r1
 800b01c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b020:	2200      	movs	r2, #0
 800b022:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	3301      	adds	r3, #1
 800b028:	73fb      	strb	r3, [r7, #15]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	791b      	ldrb	r3, [r3, #4]
 800b02e:	7bfa      	ldrb	r2, [r7, #15]
 800b030:	429a      	cmp	r2, r3
 800b032:	d3b5      	bcc.n	800afa0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6818      	ldr	r0, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	3304      	adds	r3, #4
 800b03c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b040:	f005 fb00 	bl	8010644 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2201      	movs	r2, #1
 800b04e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	7a9b      	ldrb	r3, [r3, #10]
 800b056:	2b01      	cmp	r3, #1
 800b058:	d102      	bne.n	800b060 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 fc0e 	bl	800c87c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d101      	bne.n	800b080 <HAL_PCD_Start+0x16>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e012      	b.n	800b0a6 <HAL_PCD_Start+0x3c>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f005 faa7 	bl	80105e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f007 f884 	bl	80121a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f007 f889 	bl	80121d2 <USB_ReadInterrupts>
 800b0c0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 fb06 	bl	800b6de <PCD_EP_ISR_Handler>

    return;
 800b0d2:	e110      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d013      	beq.n	800b106 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0f0:	b292      	uxth	r2, r2
 800b0f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f00c fe55 	bl	8017da6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f8fc 	bl	800b2fc <HAL_PCD_SetAddress>

    return;
 800b104:	e0f7      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00c      	beq.n	800b12a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b118:	b29a      	uxth	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b122:	b292      	uxth	r2, r2
 800b124:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b128:	e0e5      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00c      	beq.n	800b14e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b146:	b292      	uxth	r2, r2
 800b148:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b14c:	e0d3      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b154:	2b00      	cmp	r3, #0
 800b156:	d034      	beq.n	800b1c2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b160:	b29a      	uxth	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f022 0204 	bic.w	r2, r2, #4
 800b16a:	b292      	uxth	r2, r2
 800b16c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b178:	b29a      	uxth	r2, r3
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f022 0208 	bic.w	r2, r2, #8
 800b182:	b292      	uxth	r2, r2
 800b184:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d107      	bne.n	800b1a2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b19a:	2100      	movs	r1, #0
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f00c fff5 	bl	801818c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f00c fe38 	bl	8017e18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b1ba:	b292      	uxth	r2, r2
 800b1bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b1c0:	e099      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d027      	beq.n	800b21c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0208 	orr.w	r2, r2, #8
 800b1de:	b292      	uxth	r2, r2
 800b1e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b1f6:	b292      	uxth	r2, r2
 800b1f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f042 0204 	orr.w	r2, r2, #4
 800b20e:	b292      	uxth	r2, r2
 800b210:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f00c fde5 	bl	8017de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b21a:	e06c      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b222:	2b00      	cmp	r3, #0
 800b224:	d040      	beq.n	800b2a8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b22e:	b29a      	uxth	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b238:	b292      	uxth	r2, r2
 800b23a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800b244:	2b00      	cmp	r3, #0
 800b246:	d12b      	bne.n	800b2a0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f042 0204 	orr.w	r2, r2, #4
 800b25a:	b292      	uxth	r2, r2
 800b25c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b268:	b29a      	uxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0208 	orr.w	r2, r2, #8
 800b272:	b292      	uxth	r2, r2
 800b274:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2201      	movs	r2, #1
 800b27c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b288:	b29b      	uxth	r3, r3
 800b28a:	089b      	lsrs	r3, r3, #2
 800b28c:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b296:	2101      	movs	r1, #1
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f00c ff77 	bl	801818c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b29e:	e02a      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f00c fd9f 	bl	8017de4 <HAL_PCD_SuspendCallback>
    return;
 800b2a6:	e026      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d00f      	beq.n	800b2d2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b2c4:	b292      	uxth	r2, r2
 800b2c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f00c fd5d 	bl	8017d8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b2d0:	e011      	b.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00c      	beq.n	800b2f6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b2ee:	b292      	uxth	r2, r2
 800b2f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800b2f4:	bf00      	nop
  }
}
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	460b      	mov	r3, r1
 800b306:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d101      	bne.n	800b316 <HAL_PCD_SetAddress+0x1a>
 800b312:	2302      	movs	r3, #2
 800b314:	e012      	b.n	800b33c <HAL_PCD_SetAddress+0x40>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	78fa      	ldrb	r2, [r7, #3]
 800b322:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	78fa      	ldrb	r2, [r7, #3]
 800b32a:	4611      	mov	r1, r2
 800b32c:	4618      	mov	r0, r3
 800b32e:	f006 ff25 	bl	801217c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2200      	movs	r2, #0
 800b336:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	4608      	mov	r0, r1
 800b34e:	4611      	mov	r1, r2
 800b350:	461a      	mov	r2, r3
 800b352:	4603      	mov	r3, r0
 800b354:	70fb      	strb	r3, [r7, #3]
 800b356:	460b      	mov	r3, r1
 800b358:	803b      	strh	r3, [r7, #0]
 800b35a:	4613      	mov	r3, r2
 800b35c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b362:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b366:	2b00      	cmp	r3, #0
 800b368:	da0e      	bge.n	800b388 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b36a:	78fb      	ldrb	r3, [r7, #3]
 800b36c:	f003 0207 	and.w	r2, r3, #7
 800b370:	4613      	mov	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	00db      	lsls	r3, r3, #3
 800b378:	3310      	adds	r3, #16
 800b37a:	687a      	ldr	r2, [r7, #4]
 800b37c:	4413      	add	r3, r2
 800b37e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2201      	movs	r2, #1
 800b384:	705a      	strb	r2, [r3, #1]
 800b386:	e00e      	b.n	800b3a6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b388:	78fb      	ldrb	r3, [r7, #3]
 800b38a:	f003 0207 	and.w	r2, r3, #7
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	00db      	lsls	r3, r3, #3
 800b396:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	4413      	add	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b3a6:	78fb      	ldrb	r3, [r7, #3]
 800b3a8:	f003 0307 	and.w	r3, r3, #7
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800b3b2:	883b      	ldrh	r3, [r7, #0]
 800b3b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	78ba      	ldrb	r2, [r7, #2]
 800b3c0:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b3c2:	78bb      	ldrb	r3, [r7, #2]
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d102      	bne.n	800b3ce <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d101      	bne.n	800b3dc <HAL_PCD_EP_Open+0x98>
 800b3d8:	2302      	movs	r3, #2
 800b3da:	e00e      	b.n	800b3fa <HAL_PCD_EP_Open+0xb6>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68f9      	ldr	r1, [r7, #12]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f005 f948 	bl	8010680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800b3f8:	7afb      	ldrb	r3, [r7, #11]
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b084      	sub	sp, #16
 800b406:	af00      	add	r7, sp, #0
 800b408:	6078      	str	r0, [r7, #4]
 800b40a:	460b      	mov	r3, r1
 800b40c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b40e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b412:	2b00      	cmp	r3, #0
 800b414:	da0e      	bge.n	800b434 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	f003 0207 	and.w	r2, r3, #7
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	00db      	lsls	r3, r3, #3
 800b424:	3310      	adds	r3, #16
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	4413      	add	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2201      	movs	r2, #1
 800b430:	705a      	strb	r2, [r3, #1]
 800b432:	e00e      	b.n	800b452 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b434:	78fb      	ldrb	r3, [r7, #3]
 800b436:	f003 0207 	and.w	r2, r3, #7
 800b43a:	4613      	mov	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4413      	add	r3, r2
 800b440:	00db      	lsls	r3, r3, #3
 800b442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	4413      	add	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b452:	78fb      	ldrb	r3, [r7, #3]
 800b454:	f003 0307 	and.w	r3, r3, #7
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b464:	2b01      	cmp	r3, #1
 800b466:	d101      	bne.n	800b46c <HAL_PCD_EP_Close+0x6a>
 800b468:	2302      	movs	r3, #2
 800b46a:	e00e      	b.n	800b48a <HAL_PCD_EP_Close+0x88>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68f9      	ldr	r1, [r7, #12]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f005 fde8 	bl	8011050 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b086      	sub	sp, #24
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	f003 0207 	and.w	r2, r3, #7
 800b4a8:	4613      	mov	r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	00db      	lsls	r3, r3, #3
 800b4b0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b4d2:	7afb      	ldrb	r3, [r7, #11]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	b2da      	uxtb	r2, r3
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6979      	ldr	r1, [r7, #20]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f005 ffa0 	bl	801142a <USB_EPStartXfer>

  return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3718      	adds	r7, #24
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b500:	78fb      	ldrb	r3, [r7, #3]
 800b502:	f003 0207 	and.w	r2, r3, #7
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4613      	mov	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	440b      	add	r3, r1
 800b512:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800b516:	681b      	ldr	r3, [r3, #0]
}
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
 800b530:	460b      	mov	r3, r1
 800b532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b534:	7afb      	ldrb	r3, [r7, #11]
 800b536:	f003 0207 	and.w	r2, r3, #7
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	3310      	adds	r3, #16
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	4413      	add	r3, r2
 800b548:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b556:	697b      	ldr	r3, [r7, #20]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	683a      	ldr	r2, [r7, #0]
 800b562:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	2200      	movs	r2, #0
 800b568:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2201      	movs	r2, #1
 800b56e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	b2da      	uxtb	r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6979      	ldr	r1, [r7, #20]
 800b582:	4618      	mov	r0, r3
 800b584:	f005 ff51 	bl	801142a <USB_EPStartXfer>

  return HAL_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3718      	adds	r7, #24
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b59e:	78fb      	ldrb	r3, [r7, #3]
 800b5a0:	f003 0307 	and.w	r3, r3, #7
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	7912      	ldrb	r2, [r2, #4]
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d901      	bls.n	800b5b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e03e      	b.n	800b62e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b5b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	da0e      	bge.n	800b5d6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	f003 0207 	and.w	r2, r3, #7
 800b5be:	4613      	mov	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4413      	add	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	3310      	adds	r3, #16
 800b5c8:	687a      	ldr	r2, [r7, #4]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	705a      	strb	r2, [r3, #1]
 800b5d4:	e00c      	b.n	800b5f0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b5d6:	78fa      	ldrb	r2, [r7, #3]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	00db      	lsls	r3, r3, #3
 800b5e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5f6:	78fb      	ldrb	r3, [r7, #3]
 800b5f8:	f003 0307 	and.w	r3, r3, #7
 800b5fc:	b2da      	uxtb	r2, r3
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d101      	bne.n	800b610 <HAL_PCD_EP_SetStall+0x7e>
 800b60c:	2302      	movs	r3, #2
 800b60e:	e00e      	b.n	800b62e <HAL_PCD_EP_SetStall+0x9c>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68f9      	ldr	r1, [r7, #12]
 800b61e:	4618      	mov	r0, r3
 800b620:	f006 fcb2 	bl	8011f88 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3710      	adds	r7, #16
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	460b      	mov	r3, r1
 800b640:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b642:	78fb      	ldrb	r3, [r7, #3]
 800b644:	f003 030f 	and.w	r3, r3, #15
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	7912      	ldrb	r2, [r2, #4]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d901      	bls.n	800b654 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e040      	b.n	800b6d6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b654:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	da0e      	bge.n	800b67a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b65c:	78fb      	ldrb	r3, [r7, #3]
 800b65e:	f003 0207 	and.w	r2, r3, #7
 800b662:	4613      	mov	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4413      	add	r3, r2
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	3310      	adds	r3, #16
 800b66c:	687a      	ldr	r2, [r7, #4]
 800b66e:	4413      	add	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	705a      	strb	r2, [r3, #1]
 800b678:	e00e      	b.n	800b698 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	f003 0207 	and.w	r2, r3, #7
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	4413      	add	r3, r2
 800b690:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2200      	movs	r2, #0
 800b696:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b69e:	78fb      	ldrb	r3, [r7, #3]
 800b6a0:	f003 0307 	and.w	r3, r3, #7
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d101      	bne.n	800b6b8 <HAL_PCD_EP_ClrStall+0x82>
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	e00e      	b.n	800b6d6 <HAL_PCD_EP_ClrStall+0xa0>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	68f9      	ldr	r1, [r7, #12]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f006 fcaf 	bl	801202a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b092      	sub	sp, #72	@ 0x48
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800b6e6:	e333      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b6f0:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800b6f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	f003 030f 	and.w	r3, r3, #15
 800b6fa:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800b6fe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b702:	2b00      	cmp	r3, #0
 800b704:	f040 8108 	bne.w	800b918 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800b708:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b70a:	f003 0310 	and.w	r3, r3, #16
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d14c      	bne.n	800b7ac <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	b29b      	uxth	r3, r3
 800b71a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800b71e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b722:	813b      	strh	r3, [r7, #8]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	893b      	ldrh	r3, [r7, #8]
 800b72a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b72e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b732:	b29b      	uxth	r3, r3
 800b734:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3310      	adds	r3, #16
 800b73a:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b744:	b29b      	uxth	r3, r3
 800b746:	461a      	mov	r2, r3
 800b748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	00db      	lsls	r3, r3, #3
 800b74e:	4413      	add	r3, r2
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6812      	ldr	r2, [r2, #0]
 800b754:	4413      	add	r3, r2
 800b756:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b762:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800b764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b766:	695a      	ldr	r2, [r3, #20]
 800b768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	441a      	add	r2, r3
 800b76e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b770:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800b772:	2100      	movs	r1, #0
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f00c faee 	bl	8017d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	7b1b      	ldrb	r3, [r3, #12]
 800b77e:	b2db      	uxtb	r3, r3
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 82e5 	beq.w	800bd50 <PCD_EP_ISR_Handler+0x672>
 800b786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f040 82e0 	bne.w	800bd50 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	7b1b      	ldrb	r3, [r3, #12]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b79a:	b2da      	uxtb	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	731a      	strb	r2, [r3, #12]
 800b7aa:	e2d1      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b7b2:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800b7bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b7be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d032      	beq.n	800b82c <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	00db      	lsls	r3, r3, #3
 800b7d8:	4413      	add	r3, r2
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b7ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800b7f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800b7fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800b800:	b29b      	uxth	r3, r3
 800b802:	f006 fd38 	bl	8012276 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	881b      	ldrh	r3, [r3, #0]
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b812:	4013      	ands	r3, r2
 800b814:	817b      	strh	r3, [r7, #10]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	897a      	ldrh	r2, [r7, #10]
 800b81c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b820:	b292      	uxth	r2, r2
 800b822:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f00c fa69 	bl	8017cfc <HAL_PCD_SetupStageCallback>
 800b82a:	e291      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b82c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b830:	2b00      	cmp	r3, #0
 800b832:	f280 828d 	bge.w	800bd50 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	881b      	ldrh	r3, [r3, #0]
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b842:	4013      	ands	r3, r2
 800b844:	81fb      	strh	r3, [r7, #14]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	89fa      	ldrh	r2, [r7, #14]
 800b84c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b850:	b292      	uxth	r2, r2
 800b852:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	461a      	mov	r2, r3
 800b860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	00db      	lsls	r3, r3, #3
 800b866:	4413      	add	r3, r2
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6812      	ldr	r2, [r2, #0]
 800b86c:	4413      	add	r3, r2
 800b86e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b872:	881b      	ldrh	r3, [r3, #0]
 800b874:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800b878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b87a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800b87c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b87e:	69db      	ldr	r3, [r3, #28]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d019      	beq.n	800b8b8 <PCD_EP_ISR_Handler+0x1da>
 800b884:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d015      	beq.n	800b8b8 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6818      	ldr	r0, [r3, #0]
 800b890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b892:	6959      	ldr	r1, [r3, #20]
 800b894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b896:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800b898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b89a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	f006 fcea 	bl	8012276 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800b8a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8a4:	695a      	ldr	r2, [r3, #20]
 800b8a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	441a      	add	r2, r3
 800b8ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800b8b0:	2100      	movs	r1, #0
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f00c fa34 	bl	8017d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	881b      	ldrh	r3, [r3, #0]
 800b8be:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800b8c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f040 8242 	bne.w	800bd50 <PCD_EP_ISR_Handler+0x672>
 800b8cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b8ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b8d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b8d6:	f000 823b 	beq.w	800bd50 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8ea:	81bb      	strh	r3, [r7, #12]
 800b8ec:	89bb      	ldrh	r3, [r7, #12]
 800b8ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b8f2:	81bb      	strh	r3, [r7, #12]
 800b8f4:	89bb      	ldrh	r3, [r7, #12]
 800b8f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b8fa:	81bb      	strh	r3, [r7, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	89bb      	ldrh	r3, [r7, #12]
 800b902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b90a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b90e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b912:	b29b      	uxth	r3, r3
 800b914:	8013      	strh	r3, [r2, #0]
 800b916:	e21b      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	461a      	mov	r2, r3
 800b91e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	881b      	ldrh	r3, [r3, #0]
 800b928:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800b92a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f280 80f1 	bge.w	800bb16 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	461a      	mov	r2, r3
 800b93a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	881b      	ldrh	r3, [r3, #0]
 800b944:	b29a      	uxth	r2, r3
 800b946:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800b94a:	4013      	ands	r3, r2
 800b94c:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	4413      	add	r3, r2
 800b95c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b95e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b962:	b292      	uxth	r2, r2
 800b964:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800b966:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800b96a:	4613      	mov	r3, r2
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	4413      	add	r3, r2
 800b970:	00db      	lsls	r3, r3, #3
 800b972:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	4413      	add	r3, r2
 800b97a:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800b97c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b97e:	7b1b      	ldrb	r3, [r3, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d123      	bne.n	800b9cc <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b98c:	b29b      	uxth	r3, r3
 800b98e:	461a      	mov	r2, r3
 800b990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	00db      	lsls	r3, r3, #3
 800b996:	4413      	add	r3, r2
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	4413      	add	r3, r2
 800b99e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b9a8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800b9ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f000 808b 	beq.w	800bacc <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6818      	ldr	r0, [r3, #0]
 800b9ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9bc:	6959      	ldr	r1, [r3, #20]
 800b9be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9c0:	88da      	ldrh	r2, [r3, #6]
 800b9c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b9c6:	f006 fc56 	bl	8012276 <USB_ReadPMA>
 800b9ca:	e07f      	b.n	800bacc <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800b9cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9ce:	78db      	ldrb	r3, [r3, #3]
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d109      	bne.n	800b9e8 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800b9d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f9c6 	bl	800bd6c <HAL_PCD_EP_DB_Receive>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800b9e6:	e071      	b.n	800bacc <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9f0:	781b      	ldrb	r3, [r3, #0]
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4413      	add	r3, r2
 800b9f6:	881b      	ldrh	r3, [r3, #0]
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba02:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	461a      	mov	r2, r3
 800ba0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	441a      	add	r2, r3
 800ba12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ba14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4413      	add	r3, r2
 800ba36:	881b      	ldrh	r3, [r3, #0]
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d022      	beq.n	800ba88 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	00db      	lsls	r3, r3, #3
 800ba54:	4413      	add	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6812      	ldr	r2, [r2, #0]
 800ba5a:	4413      	add	r3, r2
 800ba5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba66:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ba6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d02c      	beq.n	800bacc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba78:	6959      	ldr	r1, [r3, #20]
 800ba7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba7c:	891a      	ldrh	r2, [r3, #8]
 800ba7e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ba82:	f006 fbf8 	bl	8012276 <USB_ReadPMA>
 800ba86:	e021      	b.n	800bacc <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	461a      	mov	r2, r3
 800ba94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	4413      	add	r3, r2
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	6812      	ldr	r2, [r2, #0]
 800baa0:	4413      	add	r3, r2
 800baa2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800baa6:	881b      	ldrh	r3, [r3, #0]
 800baa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800baac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800bab0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d009      	beq.n	800bacc <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800babe:	6959      	ldr	r1, [r3, #20]
 800bac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bac2:	895a      	ldrh	r2, [r3, #10]
 800bac4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bac8:	f006 fbd5 	bl	8012276 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bacc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bace:	69da      	ldr	r2, [r3, #28]
 800bad0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bad4:	441a      	add	r2, r3
 800bad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bad8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800badc:	695a      	ldr	r2, [r3, #20]
 800bade:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bae2:	441a      	add	r2, r3
 800bae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <PCD_EP_ISR_Handler+0x41e>
 800baf0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800baf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	429a      	cmp	r2, r3
 800bafa:	d206      	bcs.n	800bb0a <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bafc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f00c f90c 	bl	8017d20 <HAL_PCD_DataOutStageCallback>
 800bb08:	e005      	b.n	800bb16 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bb10:	4618      	mov	r0, r3
 800bb12:	f005 fc8a 	bl	801142a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bb16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 8117 	beq.w	800bd50 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800bb22:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	3310      	adds	r3, #16
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	4413      	add	r3, r2
 800bb34:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	4413      	add	r3, r2
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800bb4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800bb5c:	009b      	lsls	r3, r3, #2
 800bb5e:	441a      	add	r2, r3
 800bb60:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800bb62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800bb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb70:	78db      	ldrb	r3, [r3, #3]
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	f040 80a1 	bne.w	800bcba <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800bb78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb80:	7b1b      	ldrb	r3, [r3, #12]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f000 8092 	beq.w	800bcac <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bb88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bb8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d046      	beq.n	800bc20 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bb92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb94:	785b      	ldrb	r3, [r3, #1]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d126      	bne.n	800bbe8 <PCD_EP_ISR_Handler+0x50a>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	617b      	str	r3, [r7, #20]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	461a      	mov	r2, r3
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	4413      	add	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	00da      	lsls	r2, r3, #3
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	4413      	add	r3, r2
 800bbbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	881b      	ldrh	r3, [r3, #0]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbcc:	b29a      	uxth	r2, r3
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	801a      	strh	r2, [r3, #0]
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bbdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	801a      	strh	r2, [r3, #0]
 800bbe6:	e061      	b.n	800bcac <PCD_EP_ISR_Handler+0x5ce>
 800bbe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bbea:	785b      	ldrb	r3, [r3, #1]
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d15d      	bne.n	800bcac <PCD_EP_ISR_Handler+0x5ce>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	61fb      	str	r3, [r7, #28]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	461a      	mov	r2, r3
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	4413      	add	r3, r2
 800bc06:	61fb      	str	r3, [r7, #28]
 800bc08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	00da      	lsls	r2, r3, #3
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	4413      	add	r3, r2
 800bc12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc16:	61bb      	str	r3, [r7, #24]
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	801a      	strh	r2, [r3, #0]
 800bc1e:	e045      	b.n	800bcac <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc28:	785b      	ldrb	r3, [r3, #1]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d126      	bne.n	800bc7c <PCD_EP_ISR_Handler+0x59e>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	461a      	mov	r2, r3
 800bc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc42:	4413      	add	r3, r2
 800bc44:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	00da      	lsls	r2, r3, #3
 800bc4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4e:	4413      	add	r3, r2
 800bc50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bc54:	623b      	str	r3, [r7, #32]
 800bc56:	6a3b      	ldr	r3, [r7, #32]
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	6a3b      	ldr	r3, [r7, #32]
 800bc64:	801a      	strh	r2, [r3, #0]
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	6a3b      	ldr	r3, [r7, #32]
 800bc78:	801a      	strh	r2, [r3, #0]
 800bc7a:	e017      	b.n	800bcac <PCD_EP_ISR_Handler+0x5ce>
 800bc7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc7e:	785b      	ldrb	r3, [r3, #1]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d113      	bne.n	800bcac <PCD_EP_ISR_Handler+0x5ce>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	461a      	mov	r2, r3
 800bc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc92:	4413      	add	r3, r2
 800bc94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	00da      	lsls	r2, r3, #3
 800bc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc9e:	4413      	add	r3, r2
 800bca0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca8:	2200      	movs	r2, #0
 800bcaa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bcac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f00c f84f 	bl	8017d56 <HAL_PCD_DataInStageCallback>
 800bcb8:	e04a      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800bcba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d13f      	bne.n	800bd44 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	4413      	add	r3, r2
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6812      	ldr	r2, [r2, #0]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bce2:	881b      	ldrh	r3, [r3, #0]
 800bce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bce8:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800bcea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcec:	699a      	ldr	r2, [r3, #24]
 800bcee:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d906      	bls.n	800bd02 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800bcf4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcf6:	699a      	ldr	r2, [r3, #24]
 800bcf8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bcfa:	1ad2      	subs	r2, r2, r3
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bcfe:	619a      	str	r2, [r3, #24]
 800bd00:	e002      	b.n	800bd08 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800bd02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd04:	2200      	movs	r2, #0
 800bd06:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800bd08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d106      	bne.n	800bd1e <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800bd10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	4619      	mov	r1, r3
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f00c f81d 	bl	8017d56 <HAL_PCD_DataInStageCallback>
 800bd1c:	e018      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800bd1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd20:	695a      	ldr	r2, [r3, #20]
 800bd22:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bd24:	441a      	add	r2, r3
 800bd26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd28:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800bd2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd2c:	69da      	ldr	r2, [r3, #28]
 800bd2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800bd30:	441a      	add	r2, r3
 800bd32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd34:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f005 fb74 	bl	801142a <USB_EPStartXfer>
 800bd42:	e005      	b.n	800bd50 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800bd44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bd46:	461a      	mov	r2, r3
 800bd48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f917 	bl	800bf7e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bd58:	b29b      	uxth	r3, r3
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f6ff acc3 	blt.w	800b6e8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800bd62:	2300      	movs	r3, #0
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3748      	adds	r7, #72	@ 0x48
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b088      	sub	sp, #32
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	4613      	mov	r3, r2
 800bd78:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d07c      	beq.n	800be7e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	461a      	mov	r2, r3
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	4413      	add	r3, r2
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	4413      	add	r3, r2
 800bd9e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bda2:	881b      	ldrh	r3, [r3, #0]
 800bda4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bda8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	699a      	ldr	r2, [r3, #24]
 800bdae:	8b7b      	ldrh	r3, [r7, #26]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d306      	bcc.n	800bdc2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	699a      	ldr	r2, [r3, #24]
 800bdb8:	8b7b      	ldrh	r3, [r7, #26]
 800bdba:	1ad2      	subs	r2, r2, r3
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	619a      	str	r2, [r3, #24]
 800bdc0:	e002      	b.n	800bdc8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	699b      	ldr	r3, [r3, #24]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d123      	bne.n	800be18 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bde6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdea:	833b      	strh	r3, [r7, #24]
 800bdec:	8b3b      	ldrh	r3, [r7, #24]
 800bdee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bdf2:	833b      	strh	r3, [r7, #24]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	441a      	add	r2, r3
 800be02:	8b3b      	ldrh	r3, [r7, #24]
 800be04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be14:	b29b      	uxth	r3, r3
 800be16:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d01f      	beq.n	800be62 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	461a      	mov	r2, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4413      	add	r3, r2
 800be30:	881b      	ldrh	r3, [r3, #0]
 800be32:	b29b      	uxth	r3, r3
 800be34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be3c:	82fb      	strh	r3, [r7, #22]
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	441a      	add	r2, r3
 800be4c:	8afb      	ldrh	r3, [r7, #22]
 800be4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be5a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be5e:	b29b      	uxth	r3, r3
 800be60:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800be62:	8b7b      	ldrh	r3, [r7, #26]
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8085 	beq.w	800bf74 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6818      	ldr	r0, [r3, #0]
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	6959      	ldr	r1, [r3, #20]
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	891a      	ldrh	r2, [r3, #8]
 800be76:	8b7b      	ldrh	r3, [r7, #26]
 800be78:	f006 f9fd 	bl	8012276 <USB_ReadPMA>
 800be7c:	e07a      	b.n	800bf74 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be86:	b29b      	uxth	r3, r3
 800be88:	461a      	mov	r2, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	4413      	add	r3, r2
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	6812      	ldr	r2, [r2, #0]
 800be96:	4413      	add	r3, r2
 800be98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be9c:	881b      	ldrh	r3, [r3, #0]
 800be9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bea2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	699a      	ldr	r2, [r3, #24]
 800bea8:	8b7b      	ldrh	r3, [r7, #26]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d306      	bcc.n	800bebc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	699a      	ldr	r2, [r3, #24]
 800beb2:	8b7b      	ldrh	r3, [r7, #26]
 800beb4:	1ad2      	subs	r2, r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	619a      	str	r2, [r3, #24]
 800beba:	e002      	b.n	800bec2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2200      	movs	r2, #0
 800bec0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d123      	bne.n	800bf12 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	4413      	add	r3, r2
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	b29b      	uxth	r3, r3
 800bedc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee4:	83fb      	strh	r3, [r7, #30]
 800bee6:	8bfb      	ldrh	r3, [r7, #30]
 800bee8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800beec:	83fb      	strh	r3, [r7, #30]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	461a      	mov	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	441a      	add	r2, r3
 800befc:	8bfb      	ldrh	r3, [r7, #30]
 800befe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d11f      	bne.n	800bf5c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	881b      	ldrh	r3, [r3, #0]
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf36:	83bb      	strh	r3, [r7, #28]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	441a      	add	r2, r3
 800bf46:	8bbb      	ldrh	r3, [r7, #28]
 800bf48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800bf5c:	8b7b      	ldrh	r3, [r7, #26]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d008      	beq.n	800bf74 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	6818      	ldr	r0, [r3, #0]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	6959      	ldr	r1, [r3, #20]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	895a      	ldrh	r2, [r3, #10]
 800bf6e:	8b7b      	ldrh	r3, [r7, #26]
 800bf70:	f006 f981 	bl	8012276 <USB_ReadPMA>
    }
  }

  return count;
 800bf74:	8b7b      	ldrh	r3, [r7, #26]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3720      	adds	r7, #32
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b0a6      	sub	sp, #152	@ 0x98
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	60f8      	str	r0, [r7, #12]
 800bf86:	60b9      	str	r1, [r7, #8]
 800bf88:	4613      	mov	r3, r2
 800bf8a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800bf8c:	88fb      	ldrh	r3, [r7, #6]
 800bf8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	f000 81f7 	beq.w	800c386 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	4413      	add	r3, r2
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bfb6:	881b      	ldrh	r3, [r3, #0]
 800bfb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bfbc:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	699a      	ldr	r2, [r3, #24]
 800bfc4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d907      	bls.n	800bfdc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	699a      	ldr	r2, [r3, #24]
 800bfd0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800bfd4:	1ad2      	subs	r2, r2, r3
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	619a      	str	r2, [r3, #24]
 800bfda:	e002      	b.n	800bfe2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f040 80e1 	bne.w	800c1ae <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	785b      	ldrb	r3, [r3, #1]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d126      	bne.n	800c042 <HAL_PCD_EP_DB_Transmit+0xc4>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c002:	b29b      	uxth	r3, r3
 800c004:	461a      	mov	r2, r3
 800c006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c008:	4413      	add	r3, r2
 800c00a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	00da      	lsls	r2, r3, #3
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	4413      	add	r3, r2
 800c016:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	b29b      	uxth	r3, r3
 800c022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c026:	b29a      	uxth	r2, r3
 800c028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02a:	801a      	strh	r2, [r3, #0]
 800c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c02e:	881b      	ldrh	r3, [r3, #0]
 800c030:	b29b      	uxth	r3, r3
 800c032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c03a:	b29a      	uxth	r2, r3
 800c03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03e:	801a      	strh	r2, [r3, #0]
 800c040:	e01a      	b.n	800c078 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	785b      	ldrb	r3, [r3, #1]
 800c046:	2b01      	cmp	r3, #1
 800c048:	d116      	bne.n	800c078 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c058:	b29b      	uxth	r3, r3
 800c05a:	461a      	mov	r2, r3
 800c05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c05e:	4413      	add	r3, r2
 800c060:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	00da      	lsls	r2, r3, #3
 800c068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c06a:	4413      	add	r3, r2
 800c06c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c070:	637b      	str	r3, [r7, #52]	@ 0x34
 800c072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c074:	2200      	movs	r2, #0
 800c076:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	785b      	ldrb	r3, [r3, #1]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d126      	bne.n	800c0d4 <HAL_PCD_EP_DB_Transmit+0x156>
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	623b      	str	r3, [r7, #32]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c094:	b29b      	uxth	r3, r3
 800c096:	461a      	mov	r2, r3
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	4413      	add	r3, r2
 800c09c:	623b      	str	r3, [r7, #32]
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	00da      	lsls	r2, r3, #3
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c0ac:	61fb      	str	r3, [r7, #28]
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	881b      	ldrh	r3, [r3, #0]
 800c0b2:	b29b      	uxth	r3, r3
 800c0b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	801a      	strh	r2, [r3, #0]
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	881b      	ldrh	r3, [r3, #0]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	801a      	strh	r2, [r3, #0]
 800c0d2:	e017      	b.n	800c104 <HAL_PCD_EP_DB_Transmit+0x186>
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d113      	bne.n	800c104 <HAL_PCD_EP_DB_Transmit+0x186>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	4413      	add	r3, r2
 800c0ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	00da      	lsls	r2, r3, #3
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c0fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c100:	2200      	movs	r2, #0
 800c102:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	78db      	ldrb	r3, [r3, #3]
 800c108:	2b02      	cmp	r3, #2
 800c10a:	d123      	bne.n	800c154 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	4413      	add	r3, r2
 800c11a:	881b      	ldrh	r3, [r3, #0]
 800c11c:	b29b      	uxth	r3, r3
 800c11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c126:	837b      	strh	r3, [r7, #26]
 800c128:	8b7b      	ldrh	r3, [r7, #26]
 800c12a:	f083 0320 	eor.w	r3, r3, #32
 800c12e:	837b      	strh	r3, [r7, #26]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	461a      	mov	r2, r3
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	441a      	add	r2, r3
 800c13e:	8b7b      	ldrh	r3, [r7, #26]
 800c140:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c144:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c150:	b29b      	uxth	r3, r3
 800c152:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	4619      	mov	r1, r3
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f00b fdfb 	bl	8017d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c160:	88fb      	ldrh	r3, [r7, #6]
 800c162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c166:	2b00      	cmp	r3, #0
 800c168:	d01f      	beq.n	800c1aa <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	461a      	mov	r2, r3
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c184:	833b      	strh	r3, [r7, #24]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	68bb      	ldr	r3, [r7, #8]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	441a      	add	r2, r3
 800c194:	8b3b      	ldrh	r3, [r7, #24]
 800c196:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c19a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c19e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1a6:	b29b      	uxth	r3, r3
 800c1a8:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	e31f      	b.n	800c7ee <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d021      	beq.n	800c1fc <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	461a      	mov	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1d2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	441a      	add	r2, r3
 800c1e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c1e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c1f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c202:	2b01      	cmp	r3, #1
 800c204:	f040 82ca 	bne.w	800c79c <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c210:	441a      	add	r2, r3
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	69da      	ldr	r2, [r3, #28]
 800c21a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c21e:	441a      	add	r2, r3
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	6a1a      	ldr	r2, [r3, #32]
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d309      	bcc.n	800c244 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6a1a      	ldr	r2, [r3, #32]
 800c23a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c23c:	1ad2      	subs	r2, r2, r3
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	621a      	str	r2, [r3, #32]
 800c242:	e015      	b.n	800c270 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	6a1b      	ldr	r3, [r3, #32]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d107      	bne.n	800c25c <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800c24c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c250:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c25a:	e009      	b.n	800c270 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	6a1b      	ldr	r3, [r3, #32]
 800c268:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	2200      	movs	r2, #0
 800c26e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	785b      	ldrb	r3, [r3, #1]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d15f      	bne.n	800c338 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c286:	b29b      	uxth	r3, r3
 800c288:	461a      	mov	r2, r3
 800c28a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c28c:	4413      	add	r3, r2
 800c28e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	00da      	lsls	r2, r3, #3
 800c296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c298:	4413      	add	r3, r2
 800c29a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a2:	881b      	ldrh	r3, [r3, #0]
 800c2a4:	b29b      	uxth	r3, r3
 800c2a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ae:	801a      	strh	r2, [r3, #0]
 800c2b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d10a      	bne.n	800c2cc <HAL_PCD_EP_DB_Transmit+0x34e>
 800c2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b8:	881b      	ldrh	r3, [r3, #0]
 800c2ba:	b29b      	uxth	r3, r3
 800c2bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2c8:	801a      	strh	r2, [r3, #0]
 800c2ca:	e051      	b.n	800c370 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c2cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800c2d0:	d816      	bhi.n	800c300 <HAL_PCD_EP_DB_Transmit+0x382>
 800c2d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2da:	f003 0301 	and.w	r3, r3, #1
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d002      	beq.n	800c2e8 <HAL_PCD_EP_DB_Transmit+0x36a>
 800c2e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	b29a      	uxth	r2, r3
 800c2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	029b      	lsls	r3, r3, #10
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2fc:	801a      	strh	r2, [r3, #0]
 800c2fe:	e037      	b.n	800c370 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c300:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c302:	095b      	lsrs	r3, r3, #5
 800c304:	653b      	str	r3, [r7, #80]	@ 0x50
 800c306:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c308:	f003 031f 	and.w	r3, r3, #31
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d102      	bne.n	800c316 <HAL_PCD_EP_DB_Transmit+0x398>
 800c310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c312:	3b01      	subs	r3, #1
 800c314:	653b      	str	r3, [r7, #80]	@ 0x50
 800c316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c318:	881b      	ldrh	r3, [r3, #0]
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c31e:	b29b      	uxth	r3, r3
 800c320:	029b      	lsls	r3, r3, #10
 800c322:	b29b      	uxth	r3, r3
 800c324:	4313      	orrs	r3, r2
 800c326:	b29b      	uxth	r3, r3
 800c328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c32c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c330:	b29a      	uxth	r2, r3
 800c332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c334:	801a      	strh	r2, [r3, #0]
 800c336:	e01b      	b.n	800c370 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	785b      	ldrb	r3, [r3, #1]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d117      	bne.n	800c370 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c34e:	b29b      	uxth	r3, r3
 800c350:	461a      	mov	r2, r3
 800c352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c354:	4413      	add	r3, r2
 800c356:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	00da      	lsls	r2, r3, #3
 800c35e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c360:	4413      	add	r3, r2
 800c362:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c366:	647b      	str	r3, [r7, #68]	@ 0x44
 800c368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c36a:	b29a      	uxth	r2, r3
 800c36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c36e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	6959      	ldr	r1, [r3, #20]
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	891a      	ldrh	r2, [r3, #8]
 800c37c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c37e:	b29b      	uxth	r3, r3
 800c380:	f005 ff37 	bl	80121f2 <USB_WritePMA>
 800c384:	e20a      	b.n	800c79c <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c38e:	b29b      	uxth	r3, r3
 800c390:	461a      	mov	r2, r3
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	4413      	add	r3, r2
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	6812      	ldr	r2, [r2, #0]
 800c39e:	4413      	add	r3, r2
 800c3a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3aa:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	699a      	ldr	r2, [r3, #24]
 800c3b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d307      	bcc.n	800c3ca <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	699a      	ldr	r2, [r3, #24]
 800c3be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c3c2:	1ad2      	subs	r2, r2, r3
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	619a      	str	r2, [r3, #24]
 800c3c8:	e002      	b.n	800c3d0 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	699b      	ldr	r3, [r3, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f040 80f6 	bne.w	800c5c6 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d126      	bne.n	800c430 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	461a      	mov	r2, r3
 800c3f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3f6:	4413      	add	r3, r2
 800c3f8:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	00da      	lsls	r2, r3, #3
 800c400:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c402:	4413      	add	r3, r2
 800c404:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c408:	673b      	str	r3, [r7, #112]	@ 0x70
 800c40a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c414:	b29a      	uxth	r2, r3
 800c416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c418:	801a      	strh	r2, [r3, #0]
 800c41a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c428:	b29a      	uxth	r2, r3
 800c42a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c42c:	801a      	strh	r2, [r3, #0]
 800c42e:	e01a      	b.n	800c466 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	785b      	ldrb	r3, [r3, #1]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d116      	bne.n	800c466 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c446:	b29b      	uxth	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c44c:	4413      	add	r3, r2
 800c44e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00da      	lsls	r2, r3, #3
 800c456:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c458:	4413      	add	r3, r2
 800c45a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c45e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c462:	2200      	movs	r2, #0
 800c464:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	785b      	ldrb	r3, [r3, #1]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d12f      	bne.n	800c4d6 <HAL_PCD_EP_DB_Transmit+0x558>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c486:	b29b      	uxth	r3, r3
 800c488:	461a      	mov	r2, r3
 800c48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c48e:	4413      	add	r3, r2
 800c490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	00da      	lsls	r2, r3, #3
 800c49a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c49e:	4413      	add	r3, r2
 800c4a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c4a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4ba:	801a      	strh	r2, [r3, #0]
 800c4bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c4d2:	801a      	strh	r2, [r3, #0]
 800c4d4:	e01c      	b.n	800c510 <HAL_PCD_EP_DB_Transmit+0x592>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	785b      	ldrb	r3, [r3, #1]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d118      	bne.n	800c510 <HAL_PCD_EP_DB_Transmit+0x592>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	00da      	lsls	r2, r3, #3
 800c4fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c4fe:	4413      	add	r3, r2
 800c500:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c504:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c508:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c50c:	2200      	movs	r2, #0
 800c50e:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	78db      	ldrb	r3, [r3, #3]
 800c514:	2b02      	cmp	r3, #2
 800c516:	d127      	bne.n	800c568 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	461a      	mov	r2, r3
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	881b      	ldrh	r3, [r3, #0]
 800c528:	b29b      	uxth	r3, r3
 800c52a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c52e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c532:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c536:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c53a:	f083 0320 	eor.w	r3, r3, #32
 800c53e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	461a      	mov	r2, r3
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	441a      	add	r2, r3
 800c550:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c554:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c558:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c55c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c564:	b29b      	uxth	r3, r3
 800c566:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	4619      	mov	r1, r3
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f00b fbf1 	bl	8017d56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c574:	88fb      	ldrh	r3, [r7, #6]
 800c576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d121      	bne.n	800c5c2 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	881b      	ldrh	r3, [r3, #0]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c598:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	441a      	add	r2, r3
 800c5aa:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800c5ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e113      	b.n	800c7ee <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c5c6:	88fb      	ldrh	r3, [r7, #6]
 800c5c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d121      	bne.n	800c614 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	4413      	add	r3, r2
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ea:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	441a      	add	r2, r3
 800c5fc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c60c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c610:	b29b      	uxth	r3, r3
 800c612:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	f040 80be 	bne.w	800c79c <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	695a      	ldr	r2, [r3, #20]
 800c624:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c628:	441a      	add	r2, r3
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	69da      	ldr	r2, [r3, #28]
 800c632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c636:	441a      	add	r2, r3
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	6a1a      	ldr	r2, [r3, #32]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	429a      	cmp	r2, r3
 800c646:	d309      	bcc.n	800c65c <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6a1a      	ldr	r2, [r3, #32]
 800c652:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c654:	1ad2      	subs	r2, r2, r3
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	621a      	str	r2, [r3, #32]
 800c65a:	e015      	b.n	800c688 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	6a1b      	ldr	r3, [r3, #32]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d107      	bne.n	800c674 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800c664:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c668:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800c672:	e009      	b.n	800c688 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	6a1b      	ldr	r3, [r3, #32]
 800c678:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2200      	movs	r2, #0
 800c67e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c68e:	68bb      	ldr	r3, [r7, #8]
 800c690:	785b      	ldrb	r3, [r3, #1]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d15f      	bne.n	800c756 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6a4:	b29b      	uxth	r3, r3
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6aa:	4413      	add	r3, r2
 800c6ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	00da      	lsls	r2, r3, #3
 800c6b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800c6be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6cc:	801a      	strh	r2, [r3, #0]
 800c6ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10a      	bne.n	800c6ea <HAL_PCD_EP_DB_Transmit+0x76c>
 800c6d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c6e6:	801a      	strh	r2, [r3, #0]
 800c6e8:	e04e      	b.n	800c788 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c6ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6ec:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6ee:	d816      	bhi.n	800c71e <HAL_PCD_EP_DB_Transmit+0x7a0>
 800c6f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6f2:	085b      	lsrs	r3, r3, #1
 800c6f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c6f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d002      	beq.n	800c706 <HAL_PCD_EP_DB_Transmit+0x788>
 800c700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c702:	3301      	adds	r3, #1
 800c704:	663b      	str	r3, [r7, #96]	@ 0x60
 800c706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c708:	881b      	ldrh	r3, [r3, #0]
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c70e:	b29b      	uxth	r3, r3
 800c710:	029b      	lsls	r3, r3, #10
 800c712:	b29b      	uxth	r3, r3
 800c714:	4313      	orrs	r3, r2
 800c716:	b29a      	uxth	r2, r3
 800c718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c71a:	801a      	strh	r2, [r3, #0]
 800c71c:	e034      	b.n	800c788 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c71e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c720:	095b      	lsrs	r3, r3, #5
 800c722:	663b      	str	r3, [r7, #96]	@ 0x60
 800c724:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c726:	f003 031f 	and.w	r3, r3, #31
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d102      	bne.n	800c734 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800c72e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c730:	3b01      	subs	r3, #1
 800c732:	663b      	str	r3, [r7, #96]	@ 0x60
 800c734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	b29a      	uxth	r2, r3
 800c73a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	029b      	lsls	r3, r3, #10
 800c740:	b29b      	uxth	r3, r3
 800c742:	4313      	orrs	r3, r2
 800c744:	b29b      	uxth	r3, r3
 800c746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c74e:	b29a      	uxth	r2, r3
 800c750:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c752:	801a      	strh	r2, [r3, #0]
 800c754:	e018      	b.n	800c788 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	785b      	ldrb	r3, [r3, #1]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d114      	bne.n	800c788 <HAL_PCD_EP_DB_Transmit+0x80a>
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c766:	b29b      	uxth	r3, r3
 800c768:	461a      	mov	r2, r3
 800c76a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c76c:	4413      	add	r3, r2
 800c76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	00da      	lsls	r2, r3, #3
 800c776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c778:	4413      	add	r3, r2
 800c77a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c77e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c780:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c782:	b29a      	uxth	r2, r3
 800c784:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c786:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	6818      	ldr	r0, [r3, #0]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6959      	ldr	r1, [r3, #20]
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	895a      	ldrh	r2, [r3, #10]
 800c794:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c796:	b29b      	uxth	r3, r3
 800c798:	f005 fd2b 	bl	80121f2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7b6:	82fb      	strh	r3, [r7, #22]
 800c7b8:	8afb      	ldrh	r3, [r7, #22]
 800c7ba:	f083 0310 	eor.w	r3, r3, #16
 800c7be:	82fb      	strh	r3, [r7, #22]
 800c7c0:	8afb      	ldrh	r3, [r7, #22]
 800c7c2:	f083 0320 	eor.w	r3, r3, #32
 800c7c6:	82fb      	strh	r3, [r7, #22]
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	009b      	lsls	r3, r3, #2
 800c7d4:	441a      	add	r2, r3
 800c7d6:	8afb      	ldrh	r3, [r7, #22]
 800c7d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800c7ec:	2300      	movs	r3, #0
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3798      	adds	r7, #152	@ 0x98
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800c7f6:	b480      	push	{r7}
 800c7f8:	b087      	sub	sp, #28
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	607b      	str	r3, [r7, #4]
 800c800:	460b      	mov	r3, r1
 800c802:	817b      	strh	r3, [r7, #10]
 800c804:	4613      	mov	r3, r2
 800c806:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800c808:	897b      	ldrh	r3, [r7, #10]
 800c80a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c80e:	b29b      	uxth	r3, r3
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c814:	897b      	ldrh	r3, [r7, #10]
 800c816:	f003 0207 	and.w	r2, r3, #7
 800c81a:	4613      	mov	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	4413      	add	r3, r2
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	3310      	adds	r3, #16
 800c824:	68fa      	ldr	r2, [r7, #12]
 800c826:	4413      	add	r3, r2
 800c828:	617b      	str	r3, [r7, #20]
 800c82a:	e009      	b.n	800c840 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c82c:	897a      	ldrh	r2, [r7, #10]
 800c82e:	4613      	mov	r3, r2
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	4413      	add	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800c840:	893b      	ldrh	r3, [r7, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d107      	bne.n	800c856 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	2200      	movs	r2, #0
 800c84a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	b29a      	uxth	r2, r3
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	80da      	strh	r2, [r3, #6]
 800c854:	e00b      	b.n	800c86e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2201      	movs	r2, #1
 800c85a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	b29a      	uxth	r2, r3
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	0c1b      	lsrs	r3, r3, #16
 800c868:	b29a      	uxth	r2, r3
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	371c      	adds	r7, #28
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c8a0:	b29b      	uxth	r3, r3
 800c8a2:	f043 0301 	orr.w	r3, r3, #1
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800c8b4:	b29b      	uxth	r3, r3
 800c8b6:	f043 0302 	orr.w	r3, r3, #2
 800c8ba:	b29a      	uxth	r2, r3
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800c8c2:	2300      	movs	r3, #0
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3714      	adds	r7, #20
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d141      	bne.n	800c962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c8de:	4b4b      	ldr	r3, [pc, #300]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c8e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8ea:	d131      	bne.n	800c950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c8ec:	4b47      	ldr	r3, [pc, #284]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8f2:	4a46      	ldr	r2, [pc, #280]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c8fc:	4b43      	ldr	r3, [pc, #268]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c904:	4a41      	ldr	r2, [pc, #260]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c90a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c90c:	4b40      	ldr	r3, [pc, #256]	@ (800ca10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2232      	movs	r2, #50	@ 0x32
 800c912:	fb02 f303 	mul.w	r3, r2, r3
 800c916:	4a3f      	ldr	r2, [pc, #252]	@ (800ca14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c918:	fba2 2303 	umull	r2, r3, r2, r3
 800c91c:	0c9b      	lsrs	r3, r3, #18
 800c91e:	3301      	adds	r3, #1
 800c920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c922:	e002      	b.n	800c92a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	3b01      	subs	r3, #1
 800c928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c92a:	4b38      	ldr	r3, [pc, #224]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c936:	d102      	bne.n	800c93e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d1f2      	bne.n	800c924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c93e:	4b33      	ldr	r3, [pc, #204]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c940:	695b      	ldr	r3, [r3, #20]
 800c942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c94a:	d158      	bne.n	800c9fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c94c:	2303      	movs	r3, #3
 800c94e:	e057      	b.n	800ca00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c950:	4b2e      	ldr	r3, [pc, #184]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c956:	4a2d      	ldr	r2, [pc, #180]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c95c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c960:	e04d      	b.n	800c9fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c968:	d141      	bne.n	800c9ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c96a:	4b28      	ldr	r3, [pc, #160]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c976:	d131      	bne.n	800c9dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c978:	4b24      	ldr	r3, [pc, #144]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c97a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c97e:	4a23      	ldr	r2, [pc, #140]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c988:	4b20      	ldr	r3, [pc, #128]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c990:	4a1e      	ldr	r2, [pc, #120]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c998:	4b1d      	ldr	r3, [pc, #116]	@ (800ca10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2232      	movs	r2, #50	@ 0x32
 800c99e:	fb02 f303 	mul.w	r3, r2, r3
 800c9a2:	4a1c      	ldr	r2, [pc, #112]	@ (800ca14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a8:	0c9b      	lsrs	r3, r3, #18
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9ae:	e002      	b.n	800c9b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3b01      	subs	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c9b6:	4b15      	ldr	r3, [pc, #84]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9b8:	695b      	ldr	r3, [r3, #20]
 800c9ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9c2:	d102      	bne.n	800c9ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f2      	bne.n	800c9b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c9ca:	4b10      	ldr	r3, [pc, #64]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9d6:	d112      	bne.n	800c9fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e011      	b.n	800ca00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c9dc:	4b0b      	ldr	r3, [pc, #44]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9e2:	4a0a      	ldr	r2, [pc, #40]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c9ec:	e007      	b.n	800c9fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c9ee:	4b07      	ldr	r3, [pc, #28]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c9f6:	4a05      	ldr	r2, [pc, #20]	@ (800ca0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c9fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3714      	adds	r7, #20
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr
 800ca0c:	40007000 	.word	0x40007000
 800ca10:	2000000c 	.word	0x2000000c
 800ca14:	431bde83 	.word	0x431bde83

0800ca18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ca1c:	4b05      	ldr	r3, [pc, #20]	@ (800ca34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ca1e:	689b      	ldr	r3, [r3, #8]
 800ca20:	4a04      	ldr	r2, [pc, #16]	@ (800ca34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ca22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca26:	6093      	str	r3, [r2, #8]
}
 800ca28:	bf00      	nop
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop
 800ca34:	40007000 	.word	0x40007000

0800ca38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b088      	sub	sp, #32
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e2fe      	b.n	800d048 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 0301 	and.w	r3, r3, #1
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d075      	beq.n	800cb42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca56:	4b97      	ldr	r3, [pc, #604]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f003 030c 	and.w	r3, r3, #12
 800ca5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ca60:	4b94      	ldr	r3, [pc, #592]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	f003 0303 	and.w	r3, r3, #3
 800ca68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ca6a:	69bb      	ldr	r3, [r7, #24]
 800ca6c:	2b0c      	cmp	r3, #12
 800ca6e:	d102      	bne.n	800ca76 <HAL_RCC_OscConfig+0x3e>
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2b03      	cmp	r3, #3
 800ca74:	d002      	beq.n	800ca7c <HAL_RCC_OscConfig+0x44>
 800ca76:	69bb      	ldr	r3, [r7, #24]
 800ca78:	2b08      	cmp	r3, #8
 800ca7a:	d10b      	bne.n	800ca94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca7c:	4b8d      	ldr	r3, [pc, #564]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d05b      	beq.n	800cb40 <HAL_RCC_OscConfig+0x108>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d157      	bne.n	800cb40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e2d9      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca9c:	d106      	bne.n	800caac <HAL_RCC_OscConfig+0x74>
 800ca9e:	4b85      	ldr	r3, [pc, #532]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4a84      	ldr	r2, [pc, #528]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800caa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800caa8:	6013      	str	r3, [r2, #0]
 800caaa:	e01d      	b.n	800cae8 <HAL_RCC_OscConfig+0xb0>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cab4:	d10c      	bne.n	800cad0 <HAL_RCC_OscConfig+0x98>
 800cab6:	4b7f      	ldr	r3, [pc, #508]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a7e      	ldr	r2, [pc, #504]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cabc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cac0:	6013      	str	r3, [r2, #0]
 800cac2:	4b7c      	ldr	r3, [pc, #496]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a7b      	ldr	r2, [pc, #492]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	e00b      	b.n	800cae8 <HAL_RCC_OscConfig+0xb0>
 800cad0:	4b78      	ldr	r3, [pc, #480]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a77      	ldr	r2, [pc, #476]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cada:	6013      	str	r3, [r2, #0]
 800cadc:	4b75      	ldr	r3, [pc, #468]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a74      	ldr	r2, [pc, #464]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d013      	beq.n	800cb18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf0:	f7fc fb42 	bl	8009178 <HAL_GetTick>
 800caf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800caf6:	e008      	b.n	800cb0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800caf8:	f7fc fb3e 	bl	8009178 <HAL_GetTick>
 800cafc:	4602      	mov	r2, r0
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	2b64      	cmp	r3, #100	@ 0x64
 800cb04:	d901      	bls.n	800cb0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e29e      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb0a:	4b6a      	ldr	r3, [pc, #424]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d0f0      	beq.n	800caf8 <HAL_RCC_OscConfig+0xc0>
 800cb16:	e014      	b.n	800cb42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb18:	f7fc fb2e 	bl	8009178 <HAL_GetTick>
 800cb1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb1e:	e008      	b.n	800cb32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb20:	f7fc fb2a 	bl	8009178 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	2b64      	cmp	r3, #100	@ 0x64
 800cb2c:	d901      	bls.n	800cb32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cb2e:	2303      	movs	r3, #3
 800cb30:	e28a      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb32:	4b60      	ldr	r3, [pc, #384]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1f0      	bne.n	800cb20 <HAL_RCC_OscConfig+0xe8>
 800cb3e:	e000      	b.n	800cb42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d075      	beq.n	800cc3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb4e:	4b59      	ldr	r3, [pc, #356]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f003 030c 	and.w	r3, r3, #12
 800cb56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cb58:	4b56      	ldr	r3, [pc, #344]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f003 0303 	and.w	r3, r3, #3
 800cb60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	2b0c      	cmp	r3, #12
 800cb66:	d102      	bne.n	800cb6e <HAL_RCC_OscConfig+0x136>
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2b02      	cmp	r3, #2
 800cb6c:	d002      	beq.n	800cb74 <HAL_RCC_OscConfig+0x13c>
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	2b04      	cmp	r3, #4
 800cb72:	d11f      	bne.n	800cbb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb74:	4b4f      	ldr	r3, [pc, #316]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d005      	beq.n	800cb8c <HAL_RCC_OscConfig+0x154>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d101      	bne.n	800cb8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e25d      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb8c:	4b49      	ldr	r3, [pc, #292]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	691b      	ldr	r3, [r3, #16]
 800cb98:	061b      	lsls	r3, r3, #24
 800cb9a:	4946      	ldr	r1, [pc, #280]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cba0:	4b45      	ldr	r3, [pc, #276]	@ (800ccb8 <HAL_RCC_OscConfig+0x280>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fb ff87 	bl	8008ab8 <HAL_InitTick>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d043      	beq.n	800cc38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e249      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d023      	beq.n	800cc04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cbbc:	4b3d      	ldr	r3, [pc, #244]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a3c      	ldr	r2, [pc, #240]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cbc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbc8:	f7fc fad6 	bl	8009178 <HAL_GetTick>
 800cbcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbce:	e008      	b.n	800cbe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cbd0:	f7fc fad2 	bl	8009178 <HAL_GetTick>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d901      	bls.n	800cbe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	e232      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cbe2:	4b34      	ldr	r3, [pc, #208]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0f0      	beq.n	800cbd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbee:	4b31      	ldr	r3, [pc, #196]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	691b      	ldr	r3, [r3, #16]
 800cbfa:	061b      	lsls	r3, r3, #24
 800cbfc:	492d      	ldr	r1, [pc, #180]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	604b      	str	r3, [r1, #4]
 800cc02:	e01a      	b.n	800cc3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc04:	4b2b      	ldr	r3, [pc, #172]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a2a      	ldr	r2, [pc, #168]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc10:	f7fc fab2 	bl	8009178 <HAL_GetTick>
 800cc14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc16:	e008      	b.n	800cc2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc18:	f7fc faae 	bl	8009178 <HAL_GetTick>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d901      	bls.n	800cc2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cc26:	2303      	movs	r3, #3
 800cc28:	e20e      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc2a:	4b22      	ldr	r3, [pc, #136]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d1f0      	bne.n	800cc18 <HAL_RCC_OscConfig+0x1e0>
 800cc36:	e000      	b.n	800cc3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cc38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 0308 	and.w	r3, r3, #8
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d041      	beq.n	800ccca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695b      	ldr	r3, [r3, #20]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01c      	beq.n	800cc88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc4e:	4b19      	ldr	r3, [pc, #100]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc54:	4a17      	ldr	r2, [pc, #92]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc56:	f043 0301 	orr.w	r3, r3, #1
 800cc5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc5e:	f7fc fa8b 	bl	8009178 <HAL_GetTick>
 800cc62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc64:	e008      	b.n	800cc78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cc66:	f7fc fa87 	bl	8009178 <HAL_GetTick>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	1ad3      	subs	r3, r2, r3
 800cc70:	2b02      	cmp	r3, #2
 800cc72:	d901      	bls.n	800cc78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cc74:	2303      	movs	r3, #3
 800cc76:	e1e7      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cc78:	4b0e      	ldr	r3, [pc, #56]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d0ef      	beq.n	800cc66 <HAL_RCC_OscConfig+0x22e>
 800cc86:	e020      	b.n	800ccca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc88:	4b0a      	ldr	r3, [pc, #40]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cc8e:	4a09      	ldr	r2, [pc, #36]	@ (800ccb4 <HAL_RCC_OscConfig+0x27c>)
 800cc90:	f023 0301 	bic.w	r3, r3, #1
 800cc94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc98:	f7fc fa6e 	bl	8009178 <HAL_GetTick>
 800cc9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cc9e:	e00d      	b.n	800ccbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cca0:	f7fc fa6a 	bl	8009178 <HAL_GetTick>
 800cca4:	4602      	mov	r2, r0
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	1ad3      	subs	r3, r2, r3
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d906      	bls.n	800ccbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ccae:	2303      	movs	r3, #3
 800ccb0:	e1ca      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
 800ccb2:	bf00      	nop
 800ccb4:	40021000 	.word	0x40021000
 800ccb8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ccbc:	4b8c      	ldr	r3, [pc, #560]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ccbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccc2:	f003 0302 	and.w	r3, r3, #2
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1ea      	bne.n	800cca0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 0304 	and.w	r3, r3, #4
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	f000 80a6 	beq.w	800ce24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ccdc:	4b84      	ldr	r3, [pc, #528]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ccde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <HAL_RCC_OscConfig+0x2b4>
 800cce8:	2301      	movs	r3, #1
 800ccea:	e000      	b.n	800ccee <HAL_RCC_OscConfig+0x2b6>
 800ccec:	2300      	movs	r3, #0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00d      	beq.n	800cd0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ccf2:	4b7f      	ldr	r3, [pc, #508]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ccf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccf6:	4a7e      	ldr	r2, [pc, #504]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ccf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ccfc:	6593      	str	r3, [r2, #88]	@ 0x58
 800ccfe:	4b7c      	ldr	r3, [pc, #496]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd0e:	4b79      	ldr	r3, [pc, #484]	@ (800cef4 <HAL_RCC_OscConfig+0x4bc>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d118      	bne.n	800cd4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd1a:	4b76      	ldr	r3, [pc, #472]	@ (800cef4 <HAL_RCC_OscConfig+0x4bc>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a75      	ldr	r2, [pc, #468]	@ (800cef4 <HAL_RCC_OscConfig+0x4bc>)
 800cd20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd26:	f7fc fa27 	bl	8009178 <HAL_GetTick>
 800cd2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd2c:	e008      	b.n	800cd40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd2e:	f7fc fa23 	bl	8009178 <HAL_GetTick>
 800cd32:	4602      	mov	r2, r0
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d901      	bls.n	800cd40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cd3c:	2303      	movs	r3, #3
 800cd3e:	e183      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd40:	4b6c      	ldr	r3, [pc, #432]	@ (800cef4 <HAL_RCC_OscConfig+0x4bc>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0f0      	beq.n	800cd2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	689b      	ldr	r3, [r3, #8]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d108      	bne.n	800cd66 <HAL_RCC_OscConfig+0x32e>
 800cd54:	4b66      	ldr	r3, [pc, #408]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd5a:	4a65      	ldr	r2, [pc, #404]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd5c:	f043 0301 	orr.w	r3, r3, #1
 800cd60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cd64:	e024      	b.n	800cdb0 <HAL_RCC_OscConfig+0x378>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	689b      	ldr	r3, [r3, #8]
 800cd6a:	2b05      	cmp	r3, #5
 800cd6c:	d110      	bne.n	800cd90 <HAL_RCC_OscConfig+0x358>
 800cd6e:	4b60      	ldr	r3, [pc, #384]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd74:	4a5e      	ldr	r2, [pc, #376]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd76:	f043 0304 	orr.w	r3, r3, #4
 800cd7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cd7e:	4b5c      	ldr	r3, [pc, #368]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd84:	4a5a      	ldr	r2, [pc, #360]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd86:	f043 0301 	orr.w	r3, r3, #1
 800cd8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cd8e:	e00f      	b.n	800cdb0 <HAL_RCC_OscConfig+0x378>
 800cd90:	4b57      	ldr	r3, [pc, #348]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd96:	4a56      	ldr	r2, [pc, #344]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cd98:	f023 0301 	bic.w	r3, r3, #1
 800cd9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cda0:	4b53      	ldr	r3, [pc, #332]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cda6:	4a52      	ldr	r2, [pc, #328]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cda8:	f023 0304 	bic.w	r3, r3, #4
 800cdac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d016      	beq.n	800cde6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdb8:	f7fc f9de 	bl	8009178 <HAL_GetTick>
 800cdbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdbe:	e00a      	b.n	800cdd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdc0:	f7fc f9da 	bl	8009178 <HAL_GetTick>
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d901      	bls.n	800cdd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e138      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdd6:	4b46      	ldr	r3, [pc, #280]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cddc:	f003 0302 	and.w	r3, r3, #2
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d0ed      	beq.n	800cdc0 <HAL_RCC_OscConfig+0x388>
 800cde4:	e015      	b.n	800ce12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cde6:	f7fc f9c7 	bl	8009178 <HAL_GetTick>
 800cdea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cdec:	e00a      	b.n	800ce04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdee:	f7fc f9c3 	bl	8009178 <HAL_GetTick>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d901      	bls.n	800ce04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ce00:	2303      	movs	r3, #3
 800ce02:	e121      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ce04:	4b3a      	ldr	r3, [pc, #232]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce0a:	f003 0302 	and.w	r3, r3, #2
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1ed      	bne.n	800cdee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ce12:	7ffb      	ldrb	r3, [r7, #31]
 800ce14:	2b01      	cmp	r3, #1
 800ce16:	d105      	bne.n	800ce24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce18:	4b35      	ldr	r3, [pc, #212]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce1c:	4a34      	ldr	r2, [pc, #208]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0320 	and.w	r3, r3, #32
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d03c      	beq.n	800ceaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d01c      	beq.n	800ce72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ce38:	4b2d      	ldr	r3, [pc, #180]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ce3e:	4a2c      	ldr	r2, [pc, #176]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce40:	f043 0301 	orr.w	r3, r3, #1
 800ce44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce48:	f7fc f996 	bl	8009178 <HAL_GetTick>
 800ce4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce4e:	e008      	b.n	800ce62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce50:	f7fc f992 	bl	8009178 <HAL_GetTick>
 800ce54:	4602      	mov	r2, r0
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	1ad3      	subs	r3, r2, r3
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d901      	bls.n	800ce62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ce5e:	2303      	movs	r3, #3
 800ce60:	e0f2      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ce62:	4b23      	ldr	r3, [pc, #140]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d0ef      	beq.n	800ce50 <HAL_RCC_OscConfig+0x418>
 800ce70:	e01b      	b.n	800ceaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ce72:	4b1f      	ldr	r3, [pc, #124]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ce78:	4a1d      	ldr	r2, [pc, #116]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce7a:	f023 0301 	bic.w	r3, r3, #1
 800ce7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce82:	f7fc f979 	bl	8009178 <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce88:	e008      	b.n	800ce9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ce8a:	f7fc f975 	bl	8009178 <HAL_GetTick>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d901      	bls.n	800ce9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e0d5      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ce9c:	4b14      	ldr	r3, [pc, #80]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ce9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1ef      	bne.n	800ce8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 80c9 	beq.w	800d046 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ceb6:	689b      	ldr	r3, [r3, #8]
 800ceb8:	f003 030c 	and.w	r3, r3, #12
 800cebc:	2b0c      	cmp	r3, #12
 800cebe:	f000 8083 	beq.w	800cfc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69db      	ldr	r3, [r3, #28]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d15e      	bne.n	800cf88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a08      	ldr	r2, [pc, #32]	@ (800cef0 <HAL_RCC_OscConfig+0x4b8>)
 800ced0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ced4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced6:	f7fc f94f 	bl	8009178 <HAL_GetTick>
 800ceda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cedc:	e00c      	b.n	800cef8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cede:	f7fc f94b 	bl	8009178 <HAL_GetTick>
 800cee2:	4602      	mov	r2, r0
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	2b02      	cmp	r3, #2
 800ceea:	d905      	bls.n	800cef8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e0ab      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
 800cef0:	40021000 	.word	0x40021000
 800cef4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cef8:	4b55      	ldr	r3, [pc, #340]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d1ec      	bne.n	800cede <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf04:	4b52      	ldr	r3, [pc, #328]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf06:	68da      	ldr	r2, [r3, #12]
 800cf08:	4b52      	ldr	r3, [pc, #328]	@ (800d054 <HAL_RCC_OscConfig+0x61c>)
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	6a11      	ldr	r1, [r2, #32]
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cf14:	3a01      	subs	r2, #1
 800cf16:	0112      	lsls	r2, r2, #4
 800cf18:	4311      	orrs	r1, r2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cf1e:	0212      	lsls	r2, r2, #8
 800cf20:	4311      	orrs	r1, r2
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cf26:	0852      	lsrs	r2, r2, #1
 800cf28:	3a01      	subs	r2, #1
 800cf2a:	0552      	lsls	r2, r2, #21
 800cf2c:	4311      	orrs	r1, r2
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cf32:	0852      	lsrs	r2, r2, #1
 800cf34:	3a01      	subs	r2, #1
 800cf36:	0652      	lsls	r2, r2, #25
 800cf38:	4311      	orrs	r1, r2
 800cf3a:	687a      	ldr	r2, [r7, #4]
 800cf3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cf3e:	06d2      	lsls	r2, r2, #27
 800cf40:	430a      	orrs	r2, r1
 800cf42:	4943      	ldr	r1, [pc, #268]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf48:	4b41      	ldr	r3, [pc, #260]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	4a40      	ldr	r2, [pc, #256]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cf54:	4b3e      	ldr	r3, [pc, #248]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	4a3d      	ldr	r2, [pc, #244]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf60:	f7fc f90a 	bl	8009178 <HAL_GetTick>
 800cf64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf66:	e008      	b.n	800cf7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf68:	f7fc f906 	bl	8009178 <HAL_GetTick>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d901      	bls.n	800cf7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800cf76:	2303      	movs	r3, #3
 800cf78:	e066      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf7a:	4b35      	ldr	r3, [pc, #212]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0f0      	beq.n	800cf68 <HAL_RCC_OscConfig+0x530>
 800cf86:	e05e      	b.n	800d046 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf88:	4b31      	ldr	r3, [pc, #196]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	4a30      	ldr	r2, [pc, #192]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cf8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf94:	f7fc f8f0 	bl	8009178 <HAL_GetTick>
 800cf98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf9a:	e008      	b.n	800cfae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf9c:	f7fc f8ec 	bl	8009178 <HAL_GetTick>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	693b      	ldr	r3, [r7, #16]
 800cfa4:	1ad3      	subs	r3, r2, r3
 800cfa6:	2b02      	cmp	r3, #2
 800cfa8:	d901      	bls.n	800cfae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e04c      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cfae:	4b28      	ldr	r3, [pc, #160]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d1f0      	bne.n	800cf9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cfba:	4b25      	ldr	r3, [pc, #148]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cfbc:	68da      	ldr	r2, [r3, #12]
 800cfbe:	4924      	ldr	r1, [pc, #144]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cfc0:	4b25      	ldr	r3, [pc, #148]	@ (800d058 <HAL_RCC_OscConfig+0x620>)
 800cfc2:	4013      	ands	r3, r2
 800cfc4:	60cb      	str	r3, [r1, #12]
 800cfc6:	e03e      	b.n	800d046 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d101      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e039      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cfd4:	4b1e      	ldr	r3, [pc, #120]	@ (800d050 <HAL_RCC_OscConfig+0x618>)
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	f003 0203 	and.w	r2, r3, #3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6a1b      	ldr	r3, [r3, #32]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d12c      	bne.n	800d042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff2:	3b01      	subs	r3, #1
 800cff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d123      	bne.n	800d042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d004:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d006:	429a      	cmp	r2, r3
 800d008:	d11b      	bne.n	800d042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d00a:	697b      	ldr	r3, [r7, #20]
 800d00c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d014:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d016:	429a      	cmp	r2, r3
 800d018:	d113      	bne.n	800d042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d024:	085b      	lsrs	r3, r3, #1
 800d026:	3b01      	subs	r3, #1
 800d028:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d109      	bne.n	800d042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d038:	085b      	lsrs	r3, r3, #1
 800d03a:	3b01      	subs	r3, #1
 800d03c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d03e:	429a      	cmp	r2, r3
 800d040:	d001      	beq.n	800d046 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e000      	b.n	800d048 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d046:	2300      	movs	r3, #0
}
 800d048:	4618      	mov	r0, r3
 800d04a:	3720      	adds	r7, #32
 800d04c:	46bd      	mov	sp, r7
 800d04e:	bd80      	pop	{r7, pc}
 800d050:	40021000 	.word	0x40021000
 800d054:	019f800c 	.word	0x019f800c
 800d058:	feeefffc 	.word	0xfeeefffc

0800d05c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b086      	sub	sp, #24
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d066:	2300      	movs	r3, #0
 800d068:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d101      	bne.n	800d074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e11e      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d074:	4b91      	ldr	r3, [pc, #580]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 030f 	and.w	r3, r3, #15
 800d07c:	683a      	ldr	r2, [r7, #0]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d910      	bls.n	800d0a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d082:	4b8e      	ldr	r3, [pc, #568]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f023 020f 	bic.w	r2, r3, #15
 800d08a:	498c      	ldr	r1, [pc, #560]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	4313      	orrs	r3, r2
 800d090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d092:	4b8a      	ldr	r3, [pc, #552]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 030f 	and.w	r3, r3, #15
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d001      	beq.n	800d0a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e106      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f003 0301 	and.w	r3, r3, #1
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d073      	beq.n	800d198 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	d129      	bne.n	800d10c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d0b8:	4b81      	ldr	r3, [pc, #516]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d101      	bne.n	800d0c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e0f4      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d0c8:	f000 f9ce 	bl	800d468 <RCC_GetSysClockFreqFromPLLSource>
 800d0cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	4a7c      	ldr	r2, [pc, #496]	@ (800d2c4 <HAL_RCC_ClockConfig+0x268>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d93f      	bls.n	800d156 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d0d6:	4b7a      	ldr	r3, [pc, #488]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d009      	beq.n	800d0f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d033      	beq.n	800d156 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d12f      	bne.n	800d156 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d0f6:	4b72      	ldr	r3, [pc, #456]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d0fe:	4a70      	ldr	r2, [pc, #448]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d104:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d106:	2380      	movs	r3, #128	@ 0x80
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	e024      	b.n	800d156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d107      	bne.n	800d124 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d114:	4b6a      	ldr	r3, [pc, #424]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e0c6      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d124:	4b66      	ldr	r3, [pc, #408]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e0be      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d134:	f000 f8ce 	bl	800d2d4 <HAL_RCC_GetSysClockFreq>
 800d138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	4a61      	ldr	r2, [pc, #388]	@ (800d2c4 <HAL_RCC_ClockConfig+0x268>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d909      	bls.n	800d156 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d142:	4b5f      	ldr	r3, [pc, #380]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d14a:	4a5d      	ldr	r2, [pc, #372]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d14c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d150:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d152:	2380      	movs	r3, #128	@ 0x80
 800d154:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d156:	4b5a      	ldr	r3, [pc, #360]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	f023 0203 	bic.w	r2, r3, #3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	4957      	ldr	r1, [pc, #348]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d164:	4313      	orrs	r3, r2
 800d166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d168:	f7fc f806 	bl	8009178 <HAL_GetTick>
 800d16c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d16e:	e00a      	b.n	800d186 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d170:	f7fc f802 	bl	8009178 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d17e:	4293      	cmp	r3, r2
 800d180:	d901      	bls.n	800d186 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d182:	2303      	movs	r3, #3
 800d184:	e095      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d186:	4b4e      	ldr	r3, [pc, #312]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d188:	689b      	ldr	r3, [r3, #8]
 800d18a:	f003 020c 	and.w	r2, r3, #12
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	429a      	cmp	r2, r3
 800d196:	d1eb      	bne.n	800d170 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	f003 0302 	and.w	r3, r3, #2
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d023      	beq.n	800d1ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d005      	beq.n	800d1bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d1b0:	4b43      	ldr	r3, [pc, #268]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	4a42      	ldr	r2, [pc, #264]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d1ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f003 0308 	and.w	r3, r3, #8
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d007      	beq.n	800d1d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d1c8:	4b3d      	ldr	r3, [pc, #244]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1ca:	689b      	ldr	r3, [r3, #8]
 800d1cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d1d0:	4a3b      	ldr	r2, [pc, #236]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d1d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1d8:	4b39      	ldr	r3, [pc, #228]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	689b      	ldr	r3, [r3, #8]
 800d1e4:	4936      	ldr	r1, [pc, #216]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	608b      	str	r3, [r1, #8]
 800d1ea:	e008      	b.n	800d1fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	2b80      	cmp	r3, #128	@ 0x80
 800d1f0:	d105      	bne.n	800d1fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d1f2:	4b33      	ldr	r3, [pc, #204]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	4a32      	ldr	r2, [pc, #200]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d1f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d1fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d1fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f003 030f 	and.w	r3, r3, #15
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d21d      	bcs.n	800d248 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d20c:	4b2b      	ldr	r3, [pc, #172]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f023 020f 	bic.w	r2, r3, #15
 800d214:	4929      	ldr	r1, [pc, #164]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	4313      	orrs	r3, r2
 800d21a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d21c:	f7fb ffac 	bl	8009178 <HAL_GetTick>
 800d220:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d222:	e00a      	b.n	800d23a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d224:	f7fb ffa8 	bl	8009178 <HAL_GetTick>
 800d228:	4602      	mov	r2, r0
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d232:	4293      	cmp	r3, r2
 800d234:	d901      	bls.n	800d23a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d236:	2303      	movs	r3, #3
 800d238:	e03b      	b.n	800d2b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d23a:	4b20      	ldr	r3, [pc, #128]	@ (800d2bc <HAL_RCC_ClockConfig+0x260>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f003 030f 	and.w	r3, r3, #15
 800d242:	683a      	ldr	r2, [r7, #0]
 800d244:	429a      	cmp	r2, r3
 800d246:	d1ed      	bne.n	800d224 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d008      	beq.n	800d266 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d254:	4b1a      	ldr	r3, [pc, #104]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	4917      	ldr	r1, [pc, #92]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d262:	4313      	orrs	r3, r2
 800d264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0308 	and.w	r3, r3, #8
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d009      	beq.n	800d286 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d272:	4b13      	ldr	r3, [pc, #76]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	490f      	ldr	r1, [pc, #60]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d282:	4313      	orrs	r3, r2
 800d284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d286:	f000 f825 	bl	800d2d4 <HAL_RCC_GetSysClockFreq>
 800d28a:	4602      	mov	r2, r0
 800d28c:	4b0c      	ldr	r3, [pc, #48]	@ (800d2c0 <HAL_RCC_ClockConfig+0x264>)
 800d28e:	689b      	ldr	r3, [r3, #8]
 800d290:	091b      	lsrs	r3, r3, #4
 800d292:	f003 030f 	and.w	r3, r3, #15
 800d296:	490c      	ldr	r1, [pc, #48]	@ (800d2c8 <HAL_RCC_ClockConfig+0x26c>)
 800d298:	5ccb      	ldrb	r3, [r1, r3]
 800d29a:	f003 031f 	and.w	r3, r3, #31
 800d29e:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a2:	4a0a      	ldr	r2, [pc, #40]	@ (800d2cc <HAL_RCC_ClockConfig+0x270>)
 800d2a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d2a6:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d0 <HAL_RCC_ClockConfig+0x274>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7fb fc04 	bl	8008ab8 <HAL_InitTick>
 800d2b0:	4603      	mov	r3, r0
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	40022000 	.word	0x40022000
 800d2c0:	40021000 	.word	0x40021000
 800d2c4:	04c4b400 	.word	0x04c4b400
 800d2c8:	08027ad4 	.word	0x08027ad4
 800d2cc:	2000000c 	.word	0x2000000c
 800d2d0:	20000010 	.word	0x20000010

0800d2d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d2da:	4b2c      	ldr	r3, [pc, #176]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2dc:	689b      	ldr	r3, [r3, #8]
 800d2de:	f003 030c 	and.w	r3, r3, #12
 800d2e2:	2b04      	cmp	r3, #4
 800d2e4:	d102      	bne.n	800d2ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d2e6:	4b2a      	ldr	r3, [pc, #168]	@ (800d390 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d2e8:	613b      	str	r3, [r7, #16]
 800d2ea:	e047      	b.n	800d37c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d2ec:	4b27      	ldr	r3, [pc, #156]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d2ee:	689b      	ldr	r3, [r3, #8]
 800d2f0:	f003 030c 	and.w	r3, r3, #12
 800d2f4:	2b08      	cmp	r3, #8
 800d2f6:	d102      	bne.n	800d2fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d2f8:	4b25      	ldr	r3, [pc, #148]	@ (800d390 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d2fa:	613b      	str	r3, [r7, #16]
 800d2fc:	e03e      	b.n	800d37c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d2fe:	4b23      	ldr	r3, [pc, #140]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d300:	689b      	ldr	r3, [r3, #8]
 800d302:	f003 030c 	and.w	r3, r3, #12
 800d306:	2b0c      	cmp	r3, #12
 800d308:	d136      	bne.n	800d378 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d30a:	4b20      	ldr	r3, [pc, #128]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	f003 0303 	and.w	r3, r3, #3
 800d312:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d314:	4b1d      	ldr	r3, [pc, #116]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	091b      	lsrs	r3, r3, #4
 800d31a:	f003 030f 	and.w	r3, r3, #15
 800d31e:	3301      	adds	r3, #1
 800d320:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2b03      	cmp	r3, #3
 800d326:	d10c      	bne.n	800d342 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d328:	4a19      	ldr	r2, [pc, #100]	@ (800d390 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d330:	4a16      	ldr	r2, [pc, #88]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d332:	68d2      	ldr	r2, [r2, #12]
 800d334:	0a12      	lsrs	r2, r2, #8
 800d336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d33a:	fb02 f303 	mul.w	r3, r2, r3
 800d33e:	617b      	str	r3, [r7, #20]
      break;
 800d340:	e00c      	b.n	800d35c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d342:	4a13      	ldr	r2, [pc, #76]	@ (800d390 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	fbb2 f3f3 	udiv	r3, r2, r3
 800d34a:	4a10      	ldr	r2, [pc, #64]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d34c:	68d2      	ldr	r2, [r2, #12]
 800d34e:	0a12      	lsrs	r2, r2, #8
 800d350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d354:	fb02 f303 	mul.w	r3, r2, r3
 800d358:	617b      	str	r3, [r7, #20]
      break;
 800d35a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d35c:	4b0b      	ldr	r3, [pc, #44]	@ (800d38c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	0e5b      	lsrs	r3, r3, #25
 800d362:	f003 0303 	and.w	r3, r3, #3
 800d366:	3301      	adds	r3, #1
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d36c:	697a      	ldr	r2, [r7, #20]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	fbb2 f3f3 	udiv	r3, r2, r3
 800d374:	613b      	str	r3, [r7, #16]
 800d376:	e001      	b.n	800d37c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d378:	2300      	movs	r3, #0
 800d37a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d37c:	693b      	ldr	r3, [r7, #16]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	371c      	adds	r7, #28
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	40021000 	.word	0x40021000
 800d390:	00f42400 	.word	0x00f42400

0800d394 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d394:	b480      	push	{r7}
 800d396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d398:	4b03      	ldr	r3, [pc, #12]	@ (800d3a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d39a:	681b      	ldr	r3, [r3, #0]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	2000000c 	.word	0x2000000c

0800d3ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d3b0:	f7ff fff0 	bl	800d394 <HAL_RCC_GetHCLKFreq>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	4b06      	ldr	r3, [pc, #24]	@ (800d3d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	0a1b      	lsrs	r3, r3, #8
 800d3bc:	f003 0307 	and.w	r3, r3, #7
 800d3c0:	4904      	ldr	r1, [pc, #16]	@ (800d3d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d3c2:	5ccb      	ldrb	r3, [r1, r3]
 800d3c4:	f003 031f 	and.w	r3, r3, #31
 800d3c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	40021000 	.word	0x40021000
 800d3d4:	08027ae4 	.word	0x08027ae4

0800d3d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d3dc:	f7ff ffda 	bl	800d394 <HAL_RCC_GetHCLKFreq>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	4b06      	ldr	r3, [pc, #24]	@ (800d3fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	0adb      	lsrs	r3, r3, #11
 800d3e8:	f003 0307 	and.w	r3, r3, #7
 800d3ec:	4904      	ldr	r1, [pc, #16]	@ (800d400 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d3ee:	5ccb      	ldrb	r3, [r1, r3]
 800d3f0:	f003 031f 	and.w	r3, r3, #31
 800d3f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	40021000 	.word	0x40021000
 800d400:	08027ae4 	.word	0x08027ae4

0800d404 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	220f      	movs	r2, #15
 800d412:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800d414:	4b12      	ldr	r3, [pc, #72]	@ (800d460 <HAL_RCC_GetClockConfig+0x5c>)
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	f003 0203 	and.w	r2, r3, #3
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800d420:	4b0f      	ldr	r3, [pc, #60]	@ (800d460 <HAL_RCC_GetClockConfig+0x5c>)
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800d42c:	4b0c      	ldr	r3, [pc, #48]	@ (800d460 <HAL_RCC_GetClockConfig+0x5c>)
 800d42e:	689b      	ldr	r3, [r3, #8]
 800d430:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800d438:	4b09      	ldr	r3, [pc, #36]	@ (800d460 <HAL_RCC_GetClockConfig+0x5c>)
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	08db      	lsrs	r3, r3, #3
 800d43e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800d446:	4b07      	ldr	r3, [pc, #28]	@ (800d464 <HAL_RCC_GetClockConfig+0x60>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 020f 	and.w	r2, r3, #15
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	601a      	str	r2, [r3, #0]
}
 800d452:	bf00      	nop
 800d454:	370c      	adds	r7, #12
 800d456:	46bd      	mov	sp, r7
 800d458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45c:	4770      	bx	lr
 800d45e:	bf00      	nop
 800d460:	40021000 	.word	0x40021000
 800d464:	40022000 	.word	0x40022000

0800d468 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d468:	b480      	push	{r7}
 800d46a:	b087      	sub	sp, #28
 800d46c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d46e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d470:	68db      	ldr	r3, [r3, #12]
 800d472:	f003 0303 	and.w	r3, r3, #3
 800d476:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d478:	4b1b      	ldr	r3, [pc, #108]	@ (800d4e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	091b      	lsrs	r3, r3, #4
 800d47e:	f003 030f 	and.w	r3, r3, #15
 800d482:	3301      	adds	r3, #1
 800d484:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d10c      	bne.n	800d4a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d48c:	4a17      	ldr	r2, [pc, #92]	@ (800d4ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	fbb2 f3f3 	udiv	r3, r2, r3
 800d494:	4a14      	ldr	r2, [pc, #80]	@ (800d4e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d496:	68d2      	ldr	r2, [r2, #12]
 800d498:	0a12      	lsrs	r2, r2, #8
 800d49a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d49e:	fb02 f303 	mul.w	r3, r2, r3
 800d4a2:	617b      	str	r3, [r7, #20]
    break;
 800d4a4:	e00c      	b.n	800d4c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d4a6:	4a11      	ldr	r2, [pc, #68]	@ (800d4ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ae:	4a0e      	ldr	r2, [pc, #56]	@ (800d4e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d4b0:	68d2      	ldr	r2, [r2, #12]
 800d4b2:	0a12      	lsrs	r2, r2, #8
 800d4b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4b8:	fb02 f303 	mul.w	r3, r2, r3
 800d4bc:	617b      	str	r3, [r7, #20]
    break;
 800d4be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d4c0:	4b09      	ldr	r3, [pc, #36]	@ (800d4e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	0e5b      	lsrs	r3, r3, #25
 800d4c6:	f003 0303 	and.w	r3, r3, #3
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d4da:	687b      	ldr	r3, [r7, #4]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	371c      	adds	r7, #28
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	40021000 	.word	0x40021000
 800d4ec:	00f42400 	.word	0x00f42400

0800d4f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b086      	sub	sp, #24
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f000 8098 	beq.w	800d63e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d50e:	2300      	movs	r3, #0
 800d510:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d512:	4b43      	ldr	r3, [pc, #268]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d10d      	bne.n	800d53a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d51e:	4b40      	ldr	r3, [pc, #256]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d522:	4a3f      	ldr	r2, [pc, #252]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d528:	6593      	str	r3, [r2, #88]	@ 0x58
 800d52a:	4b3d      	ldr	r3, [pc, #244]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d52c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d52e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d532:	60bb      	str	r3, [r7, #8]
 800d534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d536:	2301      	movs	r3, #1
 800d538:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d53a:	4b3a      	ldr	r3, [pc, #232]	@ (800d624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a39      	ldr	r2, [pc, #228]	@ (800d624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d546:	f7fb fe17 	bl	8009178 <HAL_GetTick>
 800d54a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d54c:	e009      	b.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d54e:	f7fb fe13 	bl	8009178 <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d902      	bls.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	74fb      	strb	r3, [r7, #19]
        break;
 800d560:	e005      	b.n	800d56e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d562:	4b30      	ldr	r3, [pc, #192]	@ (800d624 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d0ef      	beq.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d56e:	7cfb      	ldrb	r3, [r7, #19]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d159      	bne.n	800d628 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d574:	4b2a      	ldr	r3, [pc, #168]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d57a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d57e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d01e      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d019      	beq.n	800d5c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d590:	4b23      	ldr	r3, [pc, #140]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d59a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d59c:	4b20      	ldr	r3, [pc, #128]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d59e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5a2:	4a1f      	ldr	r2, [pc, #124]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d5ac:	4b1c      	ldr	r3, [pc, #112]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d5bc:	4a18      	ldr	r2, [pc, #96]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d016      	beq.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5ce:	f7fb fdd3 	bl	8009178 <HAL_GetTick>
 800d5d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5d4:	e00b      	b.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5d6:	f7fb fdcf 	bl	8009178 <HAL_GetTick>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5e4:	4293      	cmp	r3, r2
 800d5e6:	d902      	bls.n	800d5ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	74fb      	strb	r3, [r7, #19]
            break;
 800d5ec:	e006      	b.n	800d5fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0ec      	beq.n	800d5d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d5fc:	7cfb      	ldrb	r3, [r7, #19]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10b      	bne.n	800d61a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d602:	4b07      	ldr	r3, [pc, #28]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d610:	4903      	ldr	r1, [pc, #12]	@ (800d620 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d612:	4313      	orrs	r3, r2
 800d614:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d618:	e008      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d61a:	7cfb      	ldrb	r3, [r7, #19]
 800d61c:	74bb      	strb	r3, [r7, #18]
 800d61e:	e005      	b.n	800d62c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d620:	40021000 	.word	0x40021000
 800d624:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d628:	7cfb      	ldrb	r3, [r7, #19]
 800d62a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d62c:	7c7b      	ldrb	r3, [r7, #17]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d105      	bne.n	800d63e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d632:	4ba7      	ldr	r3, [pc, #668]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d636:	4aa6      	ldr	r2, [pc, #664]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d63c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0301 	and.w	r3, r3, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00a      	beq.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d64a:	4ba1      	ldr	r3, [pc, #644]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d650:	f023 0203 	bic.w	r2, r3, #3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	685b      	ldr	r3, [r3, #4]
 800d658:	499d      	ldr	r1, [pc, #628]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d65a:	4313      	orrs	r3, r2
 800d65c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 0302 	and.w	r3, r3, #2
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00a      	beq.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d66c:	4b98      	ldr	r3, [pc, #608]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d672:	f023 020c 	bic.w	r2, r3, #12
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	4995      	ldr	r1, [pc, #596]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d67c:	4313      	orrs	r3, r2
 800d67e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0304 	and.w	r3, r3, #4
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d68e:	4b90      	ldr	r3, [pc, #576]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d694:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	498c      	ldr	r1, [pc, #560]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f003 0308 	and.w	r3, r3, #8
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d00a      	beq.n	800d6c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d6b0:	4b87      	ldr	r3, [pc, #540]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	691b      	ldr	r3, [r3, #16]
 800d6be:	4984      	ldr	r1, [pc, #528]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0310 	and.w	r3, r3, #16
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d00a      	beq.n	800d6e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d6d2:	4b7f      	ldr	r3, [pc, #508]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	695b      	ldr	r3, [r3, #20]
 800d6e0:	497b      	ldr	r1, [pc, #492]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0320 	and.w	r3, r3, #32
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d00a      	beq.n	800d70a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d6f4:	4b76      	ldr	r3, [pc, #472]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	4973      	ldr	r1, [pc, #460]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d704:	4313      	orrs	r3, r2
 800d706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00a      	beq.n	800d72c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d716:	4b6e      	ldr	r3, [pc, #440]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d71c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	69db      	ldr	r3, [r3, #28]
 800d724:	496a      	ldr	r1, [pc, #424]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d726:	4313      	orrs	r3, r2
 800d728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d734:	2b00      	cmp	r3, #0
 800d736:	d00a      	beq.n	800d74e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d738:	4b65      	ldr	r3, [pc, #404]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d73a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d73e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	4962      	ldr	r1, [pc, #392]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d748:	4313      	orrs	r3, r2
 800d74a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00a      	beq.n	800d770 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d75a:	4b5d      	ldr	r3, [pc, #372]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d760:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d768:	4959      	ldr	r1, [pc, #356]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d76a:	4313      	orrs	r3, r2
 800d76c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d00a      	beq.n	800d792 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d77c:	4b54      	ldr	r3, [pc, #336]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d77e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d782:	f023 0203 	bic.w	r2, r3, #3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d78a:	4951      	ldr	r1, [pc, #324]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d78c:	4313      	orrs	r3, r2
 800d78e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00a      	beq.n	800d7b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d79e:	4b4c      	ldr	r3, [pc, #304]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7ac:	4948      	ldr	r1, [pc, #288]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d015      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7c0:	4b43      	ldr	r3, [pc, #268]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ce:	4940      	ldr	r1, [pc, #256]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7d0:	4313      	orrs	r3, r2
 800d7d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7de:	d105      	bne.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7e0:	4b3b      	ldr	r3, [pc, #236]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	4a3a      	ldr	r2, [pc, #232]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7ea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d015      	beq.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d7f8:	4b35      	ldr	r3, [pc, #212]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d806:	4932      	ldr	r1, [pc, #200]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d808:	4313      	orrs	r3, r2
 800d80a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d816:	d105      	bne.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d818:	4b2d      	ldr	r3, [pc, #180]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d81a:	68db      	ldr	r3, [r3, #12]
 800d81c:	4a2c      	ldr	r2, [pc, #176]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d81e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d822:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d015      	beq.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d830:	4b27      	ldr	r3, [pc, #156]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d836:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d83e:	4924      	ldr	r1, [pc, #144]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d840:	4313      	orrs	r3, r2
 800d842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d84a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d84e:	d105      	bne.n	800d85c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d850:	4b1f      	ldr	r3, [pc, #124]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	4a1e      	ldr	r2, [pc, #120]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d85a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d864:	2b00      	cmp	r3, #0
 800d866:	d015      	beq.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d868:	4b19      	ldr	r3, [pc, #100]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d86e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d876:	4916      	ldr	r1, [pc, #88]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d878:	4313      	orrs	r3, r2
 800d87a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d882:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d886:	d105      	bne.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d888:	4b11      	ldr	r3, [pc, #68]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	4a10      	ldr	r2, [pc, #64]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d88e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d892:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d019      	beq.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8a6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ae:	4908      	ldr	r1, [pc, #32]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8be:	d109      	bne.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8c0:	4b03      	ldr	r3, [pc, #12]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	4a02      	ldr	r2, [pc, #8]	@ (800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8ca:	60d3      	str	r3, [r2, #12]
 800d8cc:	e002      	b.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d8ce:	bf00      	nop
 800d8d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d015      	beq.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d8e0:	4b29      	ldr	r3, [pc, #164]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8ee:	4926      	ldr	r1, [pc, #152]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8fe:	d105      	bne.n	800d90c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d900:	4b21      	ldr	r3, [pc, #132]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d902:	68db      	ldr	r3, [r3, #12]
 800d904:	4a20      	ldr	r2, [pc, #128]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d90a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d015      	beq.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d918:	4b1b      	ldr	r3, [pc, #108]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d91a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d91e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d926:	4918      	ldr	r1, [pc, #96]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d928:	4313      	orrs	r3, r2
 800d92a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d936:	d105      	bne.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d938:	4b13      	ldr	r3, [pc, #76]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4a12      	ldr	r2, [pc, #72]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d93e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d942:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d015      	beq.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d950:	4b0d      	ldr	r3, [pc, #52]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d952:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d95e:	490a      	ldr	r1, [pc, #40]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d960:	4313      	orrs	r3, r2
 800d962:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d96a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d96e:	d105      	bne.n	800d97c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d970:	4b05      	ldr	r3, [pc, #20]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	4a04      	ldr	r2, [pc, #16]	@ (800d988 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d97a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d97c:	7cbb      	ldrb	r3, [r7, #18]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3718      	adds	r7, #24
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}
 800d986:	bf00      	nop
 800d988:	40021000 	.word	0x40021000

0800d98c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d101      	bne.n	800d99e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d99a:	2301      	movs	r3, #1
 800d99c:	e09d      	b.n	800dada <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d108      	bne.n	800d9b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d9ae:	d009      	beq.n	800d9c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	61da      	str	r2, [r3, #28]
 800d9b6:	e005      	b.n	800d9c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d106      	bne.n	800d9e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7fa fffe 	bl	80089e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2202      	movs	r2, #2
 800d9e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d9fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800da04:	d902      	bls.n	800da0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800da06:	2300      	movs	r3, #0
 800da08:	60fb      	str	r3, [r7, #12]
 800da0a:	e002      	b.n	800da12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800da0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800da10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800da1a:	d007      	beq.n	800da2c <HAL_SPI_Init+0xa0>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	68db      	ldr	r3, [r3, #12]
 800da20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800da24:	d002      	beq.n	800da2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2200      	movs	r2, #0
 800da2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800da3c:	431a      	orrs	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	431a      	orrs	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	f003 0301 	and.w	r3, r3, #1
 800da50:	431a      	orrs	r2, r3
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800da5a:	431a      	orrs	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	69db      	ldr	r3, [r3, #28]
 800da60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6a1b      	ldr	r3, [r3, #32]
 800da6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da6e:	ea42 0103 	orr.w	r1, r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	430a      	orrs	r2, r1
 800da80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	699b      	ldr	r3, [r3, #24]
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	f003 0204 	and.w	r2, r3, #4
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da90:	f003 0310 	and.w	r3, r3, #16
 800da94:	431a      	orrs	r2, r3
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da9a:	f003 0308 	and.w	r3, r3, #8
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800daa8:	ea42 0103 	orr.w	r1, r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	430a      	orrs	r2, r1
 800dab8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	69da      	ldr	r2, [r3, #28]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dac8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b088      	sub	sp, #32
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	60b9      	str	r1, [r7, #8]
 800daec:	603b      	str	r3, [r7, #0]
 800daee:	4613      	mov	r3, r2
 800daf0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800daf2:	f7fb fb41 	bl	8009178 <HAL_GetTick>
 800daf6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800daf8:	88fb      	ldrh	r3, [r7, #6]
 800dafa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b01      	cmp	r3, #1
 800db06:	d001      	beq.n	800db0c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800db08:	2302      	movs	r3, #2
 800db0a:	e15c      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d002      	beq.n	800db18 <HAL_SPI_Transmit+0x36>
 800db12:	88fb      	ldrh	r3, [r7, #6]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d101      	bne.n	800db1c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e154      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800db22:	2b01      	cmp	r3, #1
 800db24:	d101      	bne.n	800db2a <HAL_SPI_Transmit+0x48>
 800db26:	2302      	movs	r3, #2
 800db28:	e14d      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2201      	movs	r2, #1
 800db2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2203      	movs	r2, #3
 800db36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	68ba      	ldr	r2, [r7, #8]
 800db44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	88fa      	ldrh	r2, [r7, #6]
 800db4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	88fa      	ldrh	r2, [r7, #6]
 800db50:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2200      	movs	r2, #0
 800db56:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2200      	movs	r2, #0
 800db64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db7c:	d10f      	bne.n	800db9e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800db9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba8:	2b40      	cmp	r3, #64	@ 0x40
 800dbaa:	d007      	beq.n	800dbbc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dbba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dbc4:	d952      	bls.n	800dc6c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d002      	beq.n	800dbd4 <HAL_SPI_Transmit+0xf2>
 800dbce:	8b7b      	ldrh	r3, [r7, #26]
 800dbd0:	2b01      	cmp	r3, #1
 800dbd2:	d145      	bne.n	800dc60 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd8:	881a      	ldrh	r2, [r3, #0]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe4:	1c9a      	adds	r2, r3, #2
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	3b01      	subs	r3, #1
 800dbf2:	b29a      	uxth	r2, r3
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dbf8:	e032      	b.n	800dc60 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	f003 0302 	and.w	r3, r3, #2
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d112      	bne.n	800dc2e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc0c:	881a      	ldrh	r2, [r3, #0]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc18:	1c9a      	adds	r2, r3, #2
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc22:	b29b      	uxth	r3, r3
 800dc24:	3b01      	subs	r3, #1
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dc2c:	e018      	b.n	800dc60 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc2e:	f7fb faa3 	bl	8009178 <HAL_GetTick>
 800dc32:	4602      	mov	r2, r0
 800dc34:	69fb      	ldr	r3, [r7, #28]
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d803      	bhi.n	800dc46 <HAL_SPI_Transmit+0x164>
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dc44:	d102      	bne.n	800dc4c <HAL_SPI_Transmit+0x16a>
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d109      	bne.n	800dc60 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e0b2      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1c7      	bne.n	800dbfa <HAL_SPI_Transmit+0x118>
 800dc6a:	e083      	b.n	800dd74 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <HAL_SPI_Transmit+0x198>
 800dc74:	8b7b      	ldrh	r3, [r7, #26]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d177      	bne.n	800dd6a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d912      	bls.n	800dcaa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc88:	881a      	ldrh	r2, [r3, #0]
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc94:	1c9a      	adds	r2, r3, #2
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	3b02      	subs	r3, #2
 800dca2:	b29a      	uxth	r2, r3
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dca8:	e05f      	b.n	800dd6a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	330c      	adds	r3, #12
 800dcb4:	7812      	ldrb	r2, [r2, #0]
 800dcb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800dcd0:	e04b      	b.n	800dd6a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	f003 0302 	and.w	r3, r3, #2
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d12b      	bne.n	800dd38 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dce4:	b29b      	uxth	r3, r3
 800dce6:	2b01      	cmp	r3, #1
 800dce8:	d912      	bls.n	800dd10 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcee:	881a      	ldrh	r2, [r3, #0]
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfa:	1c9a      	adds	r2, r3, #2
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	3b02      	subs	r3, #2
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dd0e:	e02c      	b.n	800dd6a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	330c      	adds	r3, #12
 800dd1a:	7812      	ldrb	r2, [r2, #0]
 800dd1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd22:	1c5a      	adds	r2, r3, #1
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	3b01      	subs	r3, #1
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dd36:	e018      	b.n	800dd6a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd38:	f7fb fa1e 	bl	8009178 <HAL_GetTick>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	683a      	ldr	r2, [r7, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d803      	bhi.n	800dd50 <HAL_SPI_Transmit+0x26e>
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dd4e:	d102      	bne.n	800dd56 <HAL_SPI_Transmit+0x274>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d109      	bne.n	800dd6a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800dd66:	2303      	movs	r3, #3
 800dd68:	e02d      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d1ae      	bne.n	800dcd2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dd74:	69fa      	ldr	r2, [r7, #28]
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f000 fb65 	bl	800e448 <SPI_EndRxTxTransaction>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2220      	movs	r2, #32
 800dd88:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd92:	2300      	movs	r3, #0
 800dd94:	617b      	str	r3, [r7, #20]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68db      	ldr	r3, [r3, #12]
 800dd9c:	617b      	str	r3, [r7, #20]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	617b      	str	r3, [r7, #20]
 800dda6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	e000      	b.n	800ddc6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800ddc4:	2300      	movs	r3, #0
  }
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3720      	adds	r7, #32
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}

0800ddce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b08a      	sub	sp, #40	@ 0x28
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	60f8      	str	r0, [r7, #12]
 800ddd6:	60b9      	str	r1, [r7, #8]
 800ddd8:	607a      	str	r2, [r7, #4]
 800ddda:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dddc:	2301      	movs	r3, #1
 800ddde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dde0:	f7fb f9ca 	bl	8009178 <HAL_GetTick>
 800dde4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ddec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800ddf4:	887b      	ldrh	r3, [r7, #2]
 800ddf6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800ddf8:	887b      	ldrh	r3, [r7, #2]
 800ddfa:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ddfc:	7ffb      	ldrb	r3, [r7, #31]
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d00c      	beq.n	800de1c <HAL_SPI_TransmitReceive+0x4e>
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de08:	d106      	bne.n	800de18 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d102      	bne.n	800de18 <HAL_SPI_TransmitReceive+0x4a>
 800de12:	7ffb      	ldrb	r3, [r7, #31]
 800de14:	2b04      	cmp	r3, #4
 800de16:	d001      	beq.n	800de1c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800de18:	2302      	movs	r3, #2
 800de1a:	e1f3      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d005      	beq.n	800de2e <HAL_SPI_TransmitReceive+0x60>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <HAL_SPI_TransmitReceive+0x60>
 800de28:	887b      	ldrh	r3, [r7, #2]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d101      	bne.n	800de32 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800de2e:	2301      	movs	r3, #1
 800de30:	e1e8      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d101      	bne.n	800de40 <HAL_SPI_TransmitReceive+0x72>
 800de3c:	2302      	movs	r3, #2
 800de3e:	e1e1      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	2b04      	cmp	r3, #4
 800de52:	d003      	beq.n	800de5c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2205      	movs	r2, #5
 800de58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	687a      	ldr	r2, [r7, #4]
 800de66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	887a      	ldrh	r2, [r7, #2]
 800de6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	887a      	ldrh	r2, [r7, #2]
 800de74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68ba      	ldr	r2, [r7, #8]
 800de7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	887a      	ldrh	r2, [r7, #2]
 800de82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	887a      	ldrh	r2, [r7, #2]
 800de88:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2200      	movs	r2, #0
 800de8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2200      	movs	r2, #0
 800de94:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800de9e:	d802      	bhi.n	800dea6 <HAL_SPI_TransmitReceive+0xd8>
 800dea0:	8abb      	ldrh	r3, [r7, #20]
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d908      	bls.n	800deb8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	685a      	ldr	r2, [r3, #4]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800deb4:	605a      	str	r2, [r3, #4]
 800deb6:	e007      	b.n	800dec8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	685a      	ldr	r2, [r3, #4]
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800dec6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ded2:	2b40      	cmp	r3, #64	@ 0x40
 800ded4:	d007      	beq.n	800dee6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800deee:	f240 8083 	bls.w	800dff8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	685b      	ldr	r3, [r3, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d002      	beq.n	800df00 <HAL_SPI_TransmitReceive+0x132>
 800defa:	8afb      	ldrh	r3, [r7, #22]
 800defc:	2b01      	cmp	r3, #1
 800defe:	d16f      	bne.n	800dfe0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df04:	881a      	ldrh	r2, [r3, #0]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df10:	1c9a      	adds	r2, r3, #2
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b29a      	uxth	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df24:	e05c      	b.n	800dfe0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	f003 0302 	and.w	r3, r3, #2
 800df30:	2b02      	cmp	r3, #2
 800df32:	d11b      	bne.n	800df6c <HAL_SPI_TransmitReceive+0x19e>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df38:	b29b      	uxth	r3, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d016      	beq.n	800df6c <HAL_SPI_TransmitReceive+0x19e>
 800df3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df40:	2b01      	cmp	r3, #1
 800df42:	d113      	bne.n	800df6c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df48:	881a      	ldrh	r2, [r3, #0]
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df54:	1c9a      	adds	r2, r3, #2
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df5e:	b29b      	uxth	r3, r3
 800df60:	3b01      	subs	r3, #1
 800df62:	b29a      	uxth	r2, r3
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	2b01      	cmp	r3, #1
 800df78:	d11c      	bne.n	800dfb4 <HAL_SPI_TransmitReceive+0x1e6>
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800df80:	b29b      	uxth	r3, r3
 800df82:	2b00      	cmp	r3, #0
 800df84:	d016      	beq.n	800dfb4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68da      	ldr	r2, [r3, #12]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df90:	b292      	uxth	r2, r2
 800df92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800df98:	1c9a      	adds	r2, r3, #2
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	3b01      	subs	r3, #1
 800dfa8:	b29a      	uxth	r2, r3
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dfb4:	f7fb f8e0 	bl	8009178 <HAL_GetTick>
 800dfb8:	4602      	mov	r2, r0
 800dfba:	6a3b      	ldr	r3, [r7, #32]
 800dfbc:	1ad3      	subs	r3, r2, r3
 800dfbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d80d      	bhi.n	800dfe0 <HAL_SPI_TransmitReceive+0x212>
 800dfc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfca:	d009      	beq.n	800dfe0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e111      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d19d      	bne.n	800df26 <HAL_SPI_TransmitReceive+0x158>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d197      	bne.n	800df26 <HAL_SPI_TransmitReceive+0x158>
 800dff6:	e0e5      	b.n	800e1c4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d003      	beq.n	800e008 <HAL_SPI_TransmitReceive+0x23a>
 800e000:	8afb      	ldrh	r3, [r7, #22]
 800e002:	2b01      	cmp	r3, #1
 800e004:	f040 80d1 	bne.w	800e1aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d912      	bls.n	800e038 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e016:	881a      	ldrh	r2, [r3, #0]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e022:	1c9a      	adds	r2, r3, #2
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3b02      	subs	r3, #2
 800e030:	b29a      	uxth	r2, r3
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e036:	e0b8      	b.n	800e1aa <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	330c      	adds	r3, #12
 800e042:	7812      	ldrb	r2, [r2, #0]
 800e044:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e054:	b29b      	uxth	r3, r3
 800e056:	3b01      	subs	r3, #1
 800e058:	b29a      	uxth	r2, r3
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e05e:	e0a4      	b.n	800e1aa <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	f003 0302 	and.w	r3, r3, #2
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d134      	bne.n	800e0d8 <HAL_SPI_TransmitReceive+0x30a>
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e072:	b29b      	uxth	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d02f      	beq.n	800e0d8 <HAL_SPI_TransmitReceive+0x30a>
 800e078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d12c      	bne.n	800e0d8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e082:	b29b      	uxth	r3, r3
 800e084:	2b01      	cmp	r3, #1
 800e086:	d912      	bls.n	800e0ae <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08c:	881a      	ldrh	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e098:	1c9a      	adds	r2, r3, #2
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	3b02      	subs	r3, #2
 800e0a6:	b29a      	uxth	r2, r3
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e0ac:	e012      	b.n	800e0d4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	330c      	adds	r3, #12
 800e0b8:	7812      	ldrb	r2, [r2, #0]
 800e0ba:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0c0:	1c5a      	adds	r2, r3, #1
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	3b01      	subs	r3, #1
 800e0ce:	b29a      	uxth	r2, r3
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d148      	bne.n	800e178 <HAL_SPI_TransmitReceive+0x3aa>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d042      	beq.n	800e178 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d923      	bls.n	800e146 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68da      	ldr	r2, [r3, #12]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e108:	b292      	uxth	r2, r2
 800e10a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e110:	1c9a      	adds	r2, r3, #2
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	3b02      	subs	r3, #2
 800e120:	b29a      	uxth	r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e12e:	b29b      	uxth	r3, r3
 800e130:	2b01      	cmp	r3, #1
 800e132:	d81f      	bhi.n	800e174 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	685a      	ldr	r2, [r3, #4]
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e142:	605a      	str	r2, [r3, #4]
 800e144:	e016      	b.n	800e174 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	f103 020c 	add.w	r2, r3, #12
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e152:	7812      	ldrb	r2, [r2, #0]
 800e154:	b2d2      	uxtb	r2, r2
 800e156:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e15c:	1c5a      	adds	r2, r3, #1
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e168:	b29b      	uxth	r3, r3
 800e16a:	3b01      	subs	r3, #1
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e174:	2301      	movs	r3, #1
 800e176:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e178:	f7fa fffe 	bl	8009178 <HAL_GetTick>
 800e17c:	4602      	mov	r2, r0
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	1ad3      	subs	r3, r2, r3
 800e182:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e184:	429a      	cmp	r2, r3
 800e186:	d803      	bhi.n	800e190 <HAL_SPI_TransmitReceive+0x3c2>
 800e188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e18e:	d102      	bne.n	800e196 <HAL_SPI_TransmitReceive+0x3c8>
 800e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e192:	2b00      	cmp	r3, #0
 800e194:	d109      	bne.n	800e1aa <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	e02c      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f47f af55 	bne.w	800e060 <HAL_SPI_TransmitReceive+0x292>
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	f47f af4e 	bne.w	800e060 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1c4:	6a3a      	ldr	r2, [r7, #32]
 800e1c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e1c8:	68f8      	ldr	r0, [r7, #12]
 800e1ca:	f000 f93d 	bl	800e448 <SPI_EndRxTxTransaction>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d008      	beq.n	800e1e6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2220      	movs	r2, #32
 800e1d8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e00e      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e1fe:	2301      	movs	r3, #1
 800e200:	e000      	b.n	800e204 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e202:	2300      	movs	r3, #0
  }
}
 800e204:	4618      	mov	r0, r3
 800e206:	3728      	adds	r7, #40	@ 0x28
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b088      	sub	sp, #32
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	4613      	mov	r3, r2
 800e21a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e21c:	f7fa ffac 	bl	8009178 <HAL_GetTick>
 800e220:	4602      	mov	r2, r0
 800e222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e224:	1a9b      	subs	r3, r3, r2
 800e226:	683a      	ldr	r2, [r7, #0]
 800e228:	4413      	add	r3, r2
 800e22a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e22c:	f7fa ffa4 	bl	8009178 <HAL_GetTick>
 800e230:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e232:	4b39      	ldr	r3, [pc, #228]	@ (800e318 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	015b      	lsls	r3, r3, #5
 800e238:	0d1b      	lsrs	r3, r3, #20
 800e23a:	69fa      	ldr	r2, [r7, #28]
 800e23c:	fb02 f303 	mul.w	r3, r2, r3
 800e240:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e242:	e054      	b.n	800e2ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e24a:	d050      	beq.n	800e2ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e24c:	f7fa ff94 	bl	8009178 <HAL_GetTick>
 800e250:	4602      	mov	r2, r0
 800e252:	69bb      	ldr	r3, [r7, #24]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	429a      	cmp	r2, r3
 800e25a:	d902      	bls.n	800e262 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d13d      	bne.n	800e2de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	685a      	ldr	r2, [r3, #4]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e27a:	d111      	bne.n	800e2a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e284:	d004      	beq.n	800e290 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e28e:	d107      	bne.n	800e2a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681a      	ldr	r2, [r3, #0]
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e29e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2a8:	d10f      	bne.n	800e2ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e2c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e2da:	2303      	movs	r3, #3
 800e2dc:	e017      	b.n	800e30e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	3b01      	subs	r3, #1
 800e2ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689a      	ldr	r2, [r3, #8]
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4013      	ands	r3, r2
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	bf0c      	ite	eq
 800e2fe:	2301      	moveq	r3, #1
 800e300:	2300      	movne	r3, #0
 800e302:	b2db      	uxtb	r3, r3
 800e304:	461a      	mov	r2, r3
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	429a      	cmp	r2, r3
 800e30a:	d19b      	bne.n	800e244 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	3720      	adds	r7, #32
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	2000000c 	.word	0x2000000c

0800e31c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08a      	sub	sp, #40	@ 0x28
 800e320:	af00      	add	r7, sp, #0
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
 800e328:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e32a:	2300      	movs	r3, #0
 800e32c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e32e:	f7fa ff23 	bl	8009178 <HAL_GetTick>
 800e332:	4602      	mov	r2, r0
 800e334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e336:	1a9b      	subs	r3, r3, r2
 800e338:	683a      	ldr	r2, [r7, #0]
 800e33a:	4413      	add	r3, r2
 800e33c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800e33e:	f7fa ff1b 	bl	8009178 <HAL_GetTick>
 800e342:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	330c      	adds	r3, #12
 800e34a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e34c:	4b3d      	ldr	r3, [pc, #244]	@ (800e444 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	4613      	mov	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4413      	add	r3, r2
 800e356:	00da      	lsls	r2, r3, #3
 800e358:	1ad3      	subs	r3, r2, r3
 800e35a:	0d1b      	lsrs	r3, r3, #20
 800e35c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e35e:	fb02 f303 	mul.w	r3, r2, r3
 800e362:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800e364:	e060      	b.n	800e428 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800e36c:	d107      	bne.n	800e37e <SPI_WaitFifoStateUntilTimeout+0x62>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d104      	bne.n	800e37e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e37c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e384:	d050      	beq.n	800e428 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e386:	f7fa fef7 	bl	8009178 <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e392:	429a      	cmp	r2, r3
 800e394:	d902      	bls.n	800e39c <SPI_WaitFifoStateUntilTimeout+0x80>
 800e396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d13d      	bne.n	800e418 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	685a      	ldr	r2, [r3, #4]
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e3aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e3b4:	d111      	bne.n	800e3da <SPI_WaitFifoStateUntilTimeout+0xbe>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	689b      	ldr	r3, [r3, #8]
 800e3ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e3be:	d004      	beq.n	800e3ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3c8:	d107      	bne.n	800e3da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e3d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e3e2:	d10f      	bne.n	800e404 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e3f2:	601a      	str	r2, [r3, #0]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e402:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800e414:	2303      	movs	r3, #3
 800e416:	e010      	b.n	800e43a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d101      	bne.n	800e422 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800e41e:	2300      	movs	r3, #0
 800e420:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	3b01      	subs	r3, #1
 800e426:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	689a      	ldr	r2, [r3, #8]
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	4013      	ands	r3, r2
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	429a      	cmp	r2, r3
 800e436:	d196      	bne.n	800e366 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3728      	adds	r7, #40	@ 0x28
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	2000000c 	.word	0x2000000c

0800e448 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800e460:	68f8      	ldr	r0, [r7, #12]
 800e462:	f7ff ff5b 	bl	800e31c <SPI_WaitFifoStateUntilTimeout>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d007      	beq.n	800e47c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e470:	f043 0220 	orr.w	r2, r3, #32
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e478:	2303      	movs	r3, #3
 800e47a:	e027      	b.n	800e4cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	9300      	str	r3, [sp, #0]
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2200      	movs	r2, #0
 800e484:	2180      	movs	r1, #128	@ 0x80
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f7ff fec0 	bl	800e20c <SPI_WaitFlagStateUntilTimeout>
 800e48c:	4603      	mov	r3, r0
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d007      	beq.n	800e4a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e496:	f043 0220 	orr.w	r2, r3, #32
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	e014      	b.n	800e4cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	9300      	str	r3, [sp, #0]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800e4ae:	68f8      	ldr	r0, [r7, #12]
 800e4b0:	f7ff ff34 	bl	800e31c <SPI_WaitFifoStateUntilTimeout>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d007      	beq.n	800e4ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4be:	f043 0220 	orr.w	r2, r3, #32
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	e000      	b.n	800e4cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d101      	bne.n	800e4e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e4e2:	2301      	movs	r3, #1
 800e4e4:	e049      	b.n	800e57a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d106      	bne.n	800e500 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7fa fcba 	bl	8008e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2202      	movs	r2, #2
 800e504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	3304      	adds	r3, #4
 800e510:	4619      	mov	r1, r3
 800e512:	4610      	mov	r0, r2
 800e514:	f000 fa26 	bl	800e964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2201      	movs	r2, #1
 800e51c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2201      	movs	r2, #1
 800e534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2201      	movs	r2, #1
 800e55c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2201      	movs	r2, #1
 800e574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e578:	2300      	movs	r3, #0
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
	...

0800e584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e592:	b2db      	uxtb	r3, r3
 800e594:	2b01      	cmp	r3, #1
 800e596:	d001      	beq.n	800e59c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e598:	2301      	movs	r3, #1
 800e59a:	e054      	b.n	800e646 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2202      	movs	r2, #2
 800e5a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0201 	orr.w	r2, r2, #1
 800e5b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4a26      	ldr	r2, [pc, #152]	@ (800e654 <HAL_TIM_Base_Start_IT+0xd0>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d022      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5c6:	d01d      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a22      	ldr	r2, [pc, #136]	@ (800e658 <HAL_TIM_Base_Start_IT+0xd4>)
 800e5ce:	4293      	cmp	r3, r2
 800e5d0:	d018      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	4a21      	ldr	r2, [pc, #132]	@ (800e65c <HAL_TIM_Base_Start_IT+0xd8>)
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	d013      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e660 <HAL_TIM_Base_Start_IT+0xdc>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d00e      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e664 <HAL_TIM_Base_Start_IT+0xe0>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d009      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e668 <HAL_TIM_Base_Start_IT+0xe4>)
 800e5f6:	4293      	cmp	r3, r2
 800e5f8:	d004      	beq.n	800e604 <HAL_TIM_Base_Start_IT+0x80>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a1b      	ldr	r2, [pc, #108]	@ (800e66c <HAL_TIM_Base_Start_IT+0xe8>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d115      	bne.n	800e630 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	689a      	ldr	r2, [r3, #8]
 800e60a:	4b19      	ldr	r3, [pc, #100]	@ (800e670 <HAL_TIM_Base_Start_IT+0xec>)
 800e60c:	4013      	ands	r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b06      	cmp	r3, #6
 800e614:	d015      	beq.n	800e642 <HAL_TIM_Base_Start_IT+0xbe>
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e61c:	d011      	beq.n	800e642 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	681a      	ldr	r2, [r3, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f042 0201 	orr.w	r2, r2, #1
 800e62c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e62e:	e008      	b.n	800e642 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f042 0201 	orr.w	r2, r2, #1
 800e63e:	601a      	str	r2, [r3, #0]
 800e640:	e000      	b.n	800e644 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	40012c00 	.word	0x40012c00
 800e658:	40000400 	.word	0x40000400
 800e65c:	40000800 	.word	0x40000800
 800e660:	40000c00 	.word	0x40000c00
 800e664:	40013400 	.word	0x40013400
 800e668:	40014000 	.word	0x40014000
 800e66c:	40015000 	.word	0x40015000
 800e670:	00010007 	.word	0x00010007

0800e674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f003 0302 	and.w	r3, r3, #2
 800e692:	2b00      	cmp	r3, #0
 800e694:	d020      	beq.n	800e6d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f003 0302 	and.w	r3, r3, #2
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d01b      	beq.n	800e6d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f06f 0202 	mvn.w	r2, #2
 800e6a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2201      	movs	r2, #1
 800e6ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	f003 0303 	and.w	r3, r3, #3
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d003      	beq.n	800e6c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	f000 f931 	bl	800e926 <HAL_TIM_IC_CaptureCallback>
 800e6c4:	e005      	b.n	800e6d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6c6:	6878      	ldr	r0, [r7, #4]
 800e6c8:	f000 f923 	bl	800e912 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 f934 	bl	800e93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f003 0304 	and.w	r3, r3, #4
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d020      	beq.n	800e724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d01b      	beq.n	800e724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f06f 0204 	mvn.w	r2, #4
 800e6f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	699b      	ldr	r3, [r3, #24]
 800e702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e706:	2b00      	cmp	r3, #0
 800e708:	d003      	beq.n	800e712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f000 f90b 	bl	800e926 <HAL_TIM_IC_CaptureCallback>
 800e710:	e005      	b.n	800e71e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f8fd 	bl	800e912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f000 f90e 	bl	800e93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f003 0308 	and.w	r3, r3, #8
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d020      	beq.n	800e770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f003 0308 	and.w	r3, r3, #8
 800e734:	2b00      	cmp	r3, #0
 800e736:	d01b      	beq.n	800e770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f06f 0208 	mvn.w	r2, #8
 800e740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2204      	movs	r2, #4
 800e746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	f003 0303 	and.w	r3, r3, #3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d003      	beq.n	800e75e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 f8e5 	bl	800e926 <HAL_TIM_IC_CaptureCallback>
 800e75c:	e005      	b.n	800e76a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f000 f8d7 	bl	800e912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f000 f8e8 	bl	800e93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	2200      	movs	r2, #0
 800e76e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	f003 0310 	and.w	r3, r3, #16
 800e776:	2b00      	cmp	r3, #0
 800e778:	d020      	beq.n	800e7bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f003 0310 	and.w	r3, r3, #16
 800e780:	2b00      	cmp	r3, #0
 800e782:	d01b      	beq.n	800e7bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f06f 0210 	mvn.w	r2, #16
 800e78c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2208      	movs	r2, #8
 800e792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	69db      	ldr	r3, [r3, #28]
 800e79a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d003      	beq.n	800e7aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f8bf 	bl	800e926 <HAL_TIM_IC_CaptureCallback>
 800e7a8:	e005      	b.n	800e7b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 f8b1 	bl	800e912 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f8c2 	bl	800e93a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	f003 0301 	and.w	r3, r3, #1
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00c      	beq.n	800e7e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d007      	beq.n	800e7e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f06f 0201 	mvn.w	r2, #1
 800e7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7fa f8aa 	bl	8008934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d104      	bne.n	800e7f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00c      	beq.n	800e80e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f969 	bl	800eae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e80e:	68bb      	ldr	r3, [r7, #8]
 800e810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e814:	2b00      	cmp	r3, #0
 800e816:	d00c      	beq.n	800e832 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d007      	beq.n	800e832 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e82a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f961 	bl	800eaf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00c      	beq.n	800e856 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e84e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f000 f87c 	bl	800e94e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f003 0320 	and.w	r3, r3, #32
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d00c      	beq.n	800e87a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f003 0320 	and.w	r3, r3, #32
 800e866:	2b00      	cmp	r3, #0
 800e868:	d007      	beq.n	800e87a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	f06f 0220 	mvn.w	r2, #32
 800e872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f000 f929 	bl	800eacc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00c      	beq.n	800e89e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d007      	beq.n	800e89e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f000 f935 	bl	800eb08 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00c      	beq.n	800e8c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d007      	beq.n	800e8c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e8ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f92d 	bl	800eb1c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00c      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d007      	beq.n	800e8e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e8de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f000 f925 	bl	800eb30 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00c      	beq.n	800e90a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d007      	beq.n	800e90a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f91d 	bl	800eb44 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e90a:	bf00      	nop
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e912:	b480      	push	{r7}
 800e914:	b083      	sub	sp, #12
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e91a:	bf00      	nop
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr

0800e926 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e926:	b480      	push	{r7}
 800e928:	b083      	sub	sp, #12
 800e92a:	af00      	add	r7, sp, #0
 800e92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e92e:	bf00      	nop
 800e930:	370c      	adds	r7, #12
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e93a:	b480      	push	{r7}
 800e93c:	b083      	sub	sp, #12
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e942:	bf00      	nop
 800e944:	370c      	adds	r7, #12
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr

0800e94e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e94e:	b480      	push	{r7}
 800e950:	b083      	sub	sp, #12
 800e952:	af00      	add	r7, sp, #0
 800e954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e956:	bf00      	nop
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr
	...

0800e964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e964:	b480      	push	{r7}
 800e966:	b085      	sub	sp, #20
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a4c      	ldr	r2, [pc, #304]	@ (800eaa8 <TIM_Base_SetConfig+0x144>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d017      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e982:	d013      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a49      	ldr	r2, [pc, #292]	@ (800eaac <TIM_Base_SetConfig+0x148>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d00f      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a48      	ldr	r2, [pc, #288]	@ (800eab0 <TIM_Base_SetConfig+0x14c>)
 800e990:	4293      	cmp	r3, r2
 800e992:	d00b      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	4a47      	ldr	r2, [pc, #284]	@ (800eab4 <TIM_Base_SetConfig+0x150>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d007      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	4a46      	ldr	r2, [pc, #280]	@ (800eab8 <TIM_Base_SetConfig+0x154>)
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d003      	beq.n	800e9ac <TIM_Base_SetConfig+0x48>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	4a45      	ldr	r2, [pc, #276]	@ (800eabc <TIM_Base_SetConfig+0x158>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d108      	bne.n	800e9be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a39      	ldr	r2, [pc, #228]	@ (800eaa8 <TIM_Base_SetConfig+0x144>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d023      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9cc:	d01f      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a36      	ldr	r2, [pc, #216]	@ (800eaac <TIM_Base_SetConfig+0x148>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d01b      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a35      	ldr	r2, [pc, #212]	@ (800eab0 <TIM_Base_SetConfig+0x14c>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d017      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a34      	ldr	r2, [pc, #208]	@ (800eab4 <TIM_Base_SetConfig+0x150>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d013      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4a33      	ldr	r2, [pc, #204]	@ (800eab8 <TIM_Base_SetConfig+0x154>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d00f      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a33      	ldr	r2, [pc, #204]	@ (800eac0 <TIM_Base_SetConfig+0x15c>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d00b      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a32      	ldr	r2, [pc, #200]	@ (800eac4 <TIM_Base_SetConfig+0x160>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d007      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	4a31      	ldr	r2, [pc, #196]	@ (800eac8 <TIM_Base_SetConfig+0x164>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d003      	beq.n	800ea0e <TIM_Base_SetConfig+0xaa>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	4a2c      	ldr	r2, [pc, #176]	@ (800eabc <TIM_Base_SetConfig+0x158>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d108      	bne.n	800ea20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	68db      	ldr	r3, [r3, #12]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	689a      	ldr	r2, [r3, #8]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a18      	ldr	r2, [pc, #96]	@ (800eaa8 <TIM_Base_SetConfig+0x144>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d013      	beq.n	800ea74 <TIM_Base_SetConfig+0x110>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a1a      	ldr	r2, [pc, #104]	@ (800eab8 <TIM_Base_SetConfig+0x154>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d00f      	beq.n	800ea74 <TIM_Base_SetConfig+0x110>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a1a      	ldr	r2, [pc, #104]	@ (800eac0 <TIM_Base_SetConfig+0x15c>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d00b      	beq.n	800ea74 <TIM_Base_SetConfig+0x110>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a19      	ldr	r2, [pc, #100]	@ (800eac4 <TIM_Base_SetConfig+0x160>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d007      	beq.n	800ea74 <TIM_Base_SetConfig+0x110>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	4a18      	ldr	r2, [pc, #96]	@ (800eac8 <TIM_Base_SetConfig+0x164>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d003      	beq.n	800ea74 <TIM_Base_SetConfig+0x110>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	4a13      	ldr	r2, [pc, #76]	@ (800eabc <TIM_Base_SetConfig+0x158>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d103      	bne.n	800ea7c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	691a      	ldr	r2, [r3, #16]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d105      	bne.n	800ea9a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	691b      	ldr	r3, [r3, #16]
 800ea92:	f023 0201 	bic.w	r2, r3, #1
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	611a      	str	r2, [r3, #16]
  }
}
 800ea9a:	bf00      	nop
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	40012c00 	.word	0x40012c00
 800eaac:	40000400 	.word	0x40000400
 800eab0:	40000800 	.word	0x40000800
 800eab4:	40000c00 	.word	0x40000c00
 800eab8:	40013400 	.word	0x40013400
 800eabc:	40015000 	.word	0x40015000
 800eac0:	40014000 	.word	0x40014000
 800eac4:	40014400 	.word	0x40014400
 800eac8:	40014800 	.word	0x40014800

0800eacc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eafc:	bf00      	nop
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr

0800eb08 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b083      	sub	sp, #12
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800eb10:	bf00      	nop
 800eb12:	370c      	adds	r7, #12
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800eb1c:	b480      	push	{r7}
 800eb1e:	b083      	sub	sp, #12
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800eb24:	bf00      	nop
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr

0800eb30 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800eb38:	bf00      	nop
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eb66:	2301      	movs	r3, #1
 800eb68:	e042      	b.n	800ebf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d106      	bne.n	800eb82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7fa f9eb 	bl	8008f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2224      	movs	r2, #36	@ 0x24
 800eb86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	681a      	ldr	r2, [r3, #0]
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f022 0201 	bic.w	r2, r2, #1
 800eb98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d002      	beq.n	800eba8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 ff66 	bl	800fa74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eba8:	6878      	ldr	r0, [r7, #4]
 800ebaa:	f000 fc67 	bl	800f47c <UART_SetConfig>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	2b01      	cmp	r3, #1
 800ebb2:	d101      	bne.n	800ebb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e01b      	b.n	800ebf0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ebc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	689a      	ldr	r2, [r3, #8]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ebd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	681a      	ldr	r2, [r3, #0]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f042 0201 	orr.w	r2, r2, #1
 800ebe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 ffe5 	bl	800fbb8 <UART_CheckIdleState>
 800ebee:	4603      	mov	r3, r0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b08a      	sub	sp, #40	@ 0x28
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	60f8      	str	r0, [r7, #12]
 800ec00:	60b9      	str	r1, [r7, #8]
 800ec02:	4613      	mov	r3, r2
 800ec04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec0c:	2b20      	cmp	r3, #32
 800ec0e:	d167      	bne.n	800ece0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec10:	68bb      	ldr	r3, [r7, #8]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <HAL_UART_Transmit_DMA+0x24>
 800ec16:	88fb      	ldrh	r3, [r7, #6]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d101      	bne.n	800ec20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e060      	b.n	800ece2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	68ba      	ldr	r2, [r7, #8]
 800ec24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	88fa      	ldrh	r2, [r7, #6]
 800ec2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	88fa      	ldrh	r2, [r7, #6]
 800ec32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2221      	movs	r2, #33	@ 0x21
 800ec42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d028      	beq.n	800eca0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec52:	4a26      	ldr	r2, [pc, #152]	@ (800ecec <HAL_UART_Transmit_DMA+0xf4>)
 800ec54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec5a:	4a25      	ldr	r2, [pc, #148]	@ (800ecf0 <HAL_UART_Transmit_DMA+0xf8>)
 800ec5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec62:	4a24      	ldr	r2, [pc, #144]	@ (800ecf4 <HAL_UART_Transmit_DMA+0xfc>)
 800ec64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec76:	4619      	mov	r1, r3
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	3328      	adds	r3, #40	@ 0x28
 800ec7e:	461a      	mov	r2, r3
 800ec80:	88fb      	ldrh	r3, [r7, #6]
 800ec82:	f7fa fcff 	bl	8009684 <HAL_DMA_Start_IT>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d009      	beq.n	800eca0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2210      	movs	r2, #16
 800ec90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2220      	movs	r2, #32
 800ec98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e020      	b.n	800ece2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2240      	movs	r2, #64	@ 0x40
 800eca6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	3308      	adds	r3, #8
 800ecae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	e853 3f00 	ldrex	r3, [r3]
 800ecb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	3308      	adds	r3, #8
 800ecc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ecc8:	623a      	str	r2, [r7, #32]
 800ecca:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eccc:	69f9      	ldr	r1, [r7, #28]
 800ecce:	6a3a      	ldr	r2, [r7, #32]
 800ecd0:	e841 2300 	strex	r3, r2, [r1]
 800ecd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800ecd6:	69bb      	ldr	r3, [r7, #24]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1e5      	bne.n	800eca8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	e000      	b.n	800ece2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ece0:	2302      	movs	r3, #2
  }
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3728      	adds	r7, #40	@ 0x28
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	08010083 	.word	0x08010083
 800ecf0:	0801011d 	.word	0x0801011d
 800ecf4:	080102a3 	.word	0x080102a3

0800ecf8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b08a      	sub	sp, #40	@ 0x28
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	60f8      	str	r0, [r7, #12]
 800ed00:	60b9      	str	r1, [r7, #8]
 800ed02:	4613      	mov	r3, r2
 800ed04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed0c:	2b20      	cmp	r3, #32
 800ed0e:	d137      	bne.n	800ed80 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d002      	beq.n	800ed1c <HAL_UART_Receive_DMA+0x24>
 800ed16:	88fb      	ldrh	r3, [r7, #6]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	e030      	b.n	800ed82 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	2200      	movs	r2, #0
 800ed24:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a18      	ldr	r2, [pc, #96]	@ (800ed8c <HAL_UART_Receive_DMA+0x94>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d01f      	beq.n	800ed70 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d018      	beq.n	800ed70 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	e853 3f00 	ldrex	r3, [r3]
 800ed4a:	613b      	str	r3, [r7, #16]
   return(result);
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ed52:	627b      	str	r3, [r7, #36]	@ 0x24
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	461a      	mov	r2, r3
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed5c:	623b      	str	r3, [r7, #32]
 800ed5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed60:	69f9      	ldr	r1, [r7, #28]
 800ed62:	6a3a      	ldr	r2, [r7, #32]
 800ed64:	e841 2300 	strex	r3, r2, [r1]
 800ed68:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d1e6      	bne.n	800ed3e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ed70:	88fb      	ldrh	r3, [r7, #6]
 800ed72:	461a      	mov	r2, r3
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f001 f836 	bl	800fde8 <UART_Start_Receive_DMA>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	e000      	b.n	800ed82 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ed80:	2302      	movs	r3, #2
  }
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	3728      	adds	r7, #40	@ 0x28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	40008000 	.word	0x40008000

0800ed90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b0ba      	sub	sp, #232	@ 0xe8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	69db      	ldr	r3, [r3, #28]
 800ed9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800edb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800edba:	f640 030f 	movw	r3, #2063	@ 0x80f
 800edbe:	4013      	ands	r3, r2
 800edc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800edc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d11b      	bne.n	800ee04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800edcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edd0:	f003 0320 	and.w	r3, r3, #32
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d015      	beq.n	800ee04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eddc:	f003 0320 	and.w	r3, r3, #32
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d105      	bne.n	800edf0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ede4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ede8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800edec:	2b00      	cmp	r3, #0
 800edee:	d009      	beq.n	800ee04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 8300 	beq.w	800f3fa <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	4798      	blx	r3
      }
      return;
 800ee02:	e2fa      	b.n	800f3fa <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ee04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f000 8123 	beq.w	800f054 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ee0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ee12:	4b8d      	ldr	r3, [pc, #564]	@ (800f048 <HAL_UART_IRQHandler+0x2b8>)
 800ee14:	4013      	ands	r3, r2
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d106      	bne.n	800ee28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ee1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ee1e:	4b8b      	ldr	r3, [pc, #556]	@ (800f04c <HAL_UART_IRQHandler+0x2bc>)
 800ee20:	4013      	ands	r3, r2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	f000 8116 	beq.w	800f054 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee2c:	f003 0301 	and.w	r3, r3, #1
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d011      	beq.n	800ee58 <HAL_UART_IRQHandler+0xc8>
 800ee34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d00b      	beq.n	800ee58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	2201      	movs	r2, #1
 800ee46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee4e:	f043 0201 	orr.w	r2, r3, #1
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee5c:	f003 0302 	and.w	r3, r3, #2
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d011      	beq.n	800ee88 <HAL_UART_IRQHandler+0xf8>
 800ee64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee68:	f003 0301 	and.w	r3, r3, #1
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d00b      	beq.n	800ee88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2202      	movs	r2, #2
 800ee76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee7e:	f043 0204 	orr.w	r2, r3, #4
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee8c:	f003 0304 	and.w	r3, r3, #4
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d011      	beq.n	800eeb8 <HAL_UART_IRQHandler+0x128>
 800ee94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ee98:	f003 0301 	and.w	r3, r3, #1
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d00b      	beq.n	800eeb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2204      	movs	r2, #4
 800eea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeae:	f043 0202 	orr.w	r2, r3, #2
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eeb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eebc:	f003 0308 	and.w	r3, r3, #8
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d017      	beq.n	800eef4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eec8:	f003 0320 	and.w	r3, r3, #32
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d105      	bne.n	800eedc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eed0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eed4:	4b5c      	ldr	r3, [pc, #368]	@ (800f048 <HAL_UART_IRQHandler+0x2b8>)
 800eed6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d00b      	beq.n	800eef4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	2208      	movs	r2, #8
 800eee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eeea:	f043 0208 	orr.w	r2, r3, #8
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eef8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d012      	beq.n	800ef26 <HAL_UART_IRQHandler+0x196>
 800ef00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d00c      	beq.n	800ef26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ef14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef1c:	f043 0220 	orr.w	r2, r3, #32
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	f000 8266 	beq.w	800f3fe <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef36:	f003 0320 	and.w	r3, r3, #32
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d013      	beq.n	800ef66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ef42:	f003 0320 	and.w	r3, r3, #32
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d105      	bne.n	800ef56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d007      	beq.n	800ef66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef7a:	2b40      	cmp	r3, #64	@ 0x40
 800ef7c:	d005      	beq.n	800ef8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ef7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d054      	beq.n	800f034 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f001 f813 	bl	800ffb6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	689b      	ldr	r3, [r3, #8]
 800ef96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef9a:	2b40      	cmp	r3, #64	@ 0x40
 800ef9c:	d146      	bne.n	800f02c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	3308      	adds	r3, #8
 800efa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800efac:	e853 3f00 	ldrex	r3, [r3]
 800efb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800efb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800efb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3308      	adds	r3, #8
 800efc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800efca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800efce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800efd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efda:	e841 2300 	strex	r3, r2, [r1]
 800efde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800efe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1d9      	bne.n	800ef9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d017      	beq.n	800f024 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800effa:	4a15      	ldr	r2, [pc, #84]	@ (800f050 <HAL_UART_IRQHandler+0x2c0>)
 800effc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f004:	4618      	mov	r0, r3
 800f006:	f7fa fc11 	bl	800982c <HAL_DMA_Abort_IT>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d019      	beq.n	800f044 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f01e:	4610      	mov	r0, r2
 800f020:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f022:	e00f      	b.n	800f044 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fa13 	bl	800f450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f02a:	e00b      	b.n	800f044 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f000 fa0f 	bl	800f450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f032:	e007      	b.n	800f044 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f000 fa0b 	bl	800f450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f042:	e1dc      	b.n	800f3fe <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f044:	bf00      	nop
    return;
 800f046:	e1da      	b.n	800f3fe <HAL_UART_IRQHandler+0x66e>
 800f048:	10000001 	.word	0x10000001
 800f04c:	04000120 	.word	0x04000120
 800f050:	08010323 	.word	0x08010323

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f058:	2b01      	cmp	r3, #1
 800f05a:	f040 8170 	bne.w	800f33e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f062:	f003 0310 	and.w	r3, r3, #16
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 8169 	beq.w	800f33e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f06c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f070:	f003 0310 	and.w	r3, r3, #16
 800f074:	2b00      	cmp	r3, #0
 800f076:	f000 8162 	beq.w	800f33e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	2210      	movs	r2, #16
 800f080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f08c:	2b40      	cmp	r3, #64	@ 0x40
 800f08e:	f040 80d8 	bne.w	800f242 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f0a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	f000 80af 	beq.w	800f208 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f0b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	f080 80a7 	bcs.w	800f208 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f0c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f003 0320 	and.w	r3, r3, #32
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f040 8087 	bne.w	800f1e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f0e4:	e853 3f00 	ldrex	r3, [r3]
 800f0e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f0ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f0f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f0f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f106:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f10e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f112:	e841 2300 	strex	r3, r2, [r1]
 800f116:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d1da      	bne.n	800f0d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3308      	adds	r3, #8
 800f128:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f12a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f12c:	e853 3f00 	ldrex	r3, [r3]
 800f130:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f132:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f134:	f023 0301 	bic.w	r3, r3, #1
 800f138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3308      	adds	r3, #8
 800f142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f146:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f14a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f14c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f14e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f152:	e841 2300 	strex	r3, r2, [r1]
 800f156:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d1e1      	bne.n	800f122 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3308      	adds	r3, #8
 800f164:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f168:	e853 3f00 	ldrex	r3, [r3]
 800f16c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f170:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	3308      	adds	r3, #8
 800f17e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f182:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f184:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f186:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f188:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f18a:	e841 2300 	strex	r3, r2, [r1]
 800f18e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f190:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1e3      	bne.n	800f15e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2220      	movs	r2, #32
 800f19a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f1ac:	e853 3f00 	ldrex	r3, [r3]
 800f1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f1b4:	f023 0310 	bic.w	r3, r3, #16
 800f1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f1c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f1c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f1cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f1ce:	e841 2300 	strex	r3, r2, [r1]
 800f1d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f1d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1e4      	bne.n	800f1a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fa faca 	bl	800977a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 f92f 	bl	800f464 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f206:	e0fc      	b.n	800f402 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f20e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f212:	429a      	cmp	r2, r3
 800f214:	f040 80f5 	bne.w	800f402 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	f003 0320 	and.w	r3, r3, #32
 800f226:	2b20      	cmp	r3, #32
 800f228:	f040 80eb 	bne.w	800f402 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2202      	movs	r2, #2
 800f230:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f238:	4619      	mov	r1, r3
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 f912 	bl	800f464 <HAL_UARTEx_RxEventCallback>
      return;
 800f240:	e0df      	b.n	800f402 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f24e:	b29b      	uxth	r3, r3
 800f250:	1ad3      	subs	r3, r2, r3
 800f252:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	2b00      	cmp	r3, #0
 800f260:	f000 80d1 	beq.w	800f406 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800f264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f268:	2b00      	cmp	r3, #0
 800f26a:	f000 80cc 	beq.w	800f406 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f276:	e853 3f00 	ldrex	r3, [r3]
 800f27a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f27c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f27e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f282:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	461a      	mov	r2, r3
 800f28c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f290:	647b      	str	r3, [r7, #68]	@ 0x44
 800f292:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f298:	e841 2300 	strex	r3, r2, [r1]
 800f29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e4      	bne.n	800f26e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	3308      	adds	r3, #8
 800f2aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ae:	e853 3f00 	ldrex	r3, [r3]
 800f2b2:	623b      	str	r3, [r7, #32]
   return(result);
 800f2b4:	6a3b      	ldr	r3, [r7, #32]
 800f2b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f2ba:	f023 0301 	bic.w	r3, r3, #1
 800f2be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f2cc:	633a      	str	r2, [r7, #48]	@ 0x30
 800f2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f2d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2d4:	e841 2300 	strex	r3, r2, [r1]
 800f2d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1e1      	bne.n	800f2a4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2220      	movs	r2, #32
 800f2e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	e853 3f00 	ldrex	r3, [r3]
 800f300:	60fb      	str	r3, [r7, #12]
   return(result);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f023 0310 	bic.w	r3, r3, #16
 800f308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	461a      	mov	r2, r3
 800f312:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f316:	61fb      	str	r3, [r7, #28]
 800f318:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31a:	69b9      	ldr	r1, [r7, #24]
 800f31c:	69fa      	ldr	r2, [r7, #28]
 800f31e:	e841 2300 	strex	r3, r2, [r1]
 800f322:	617b      	str	r3, [r7, #20]
   return(result);
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1e4      	bne.n	800f2f4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2202      	movs	r2, #2
 800f32e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f330:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f334:	4619      	mov	r1, r3
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f894 	bl	800f464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f33c:	e063      	b.n	800f406 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f33e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f342:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00e      	beq.n	800f368 <HAL_UART_IRQHandler+0x5d8>
 800f34a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f34e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f352:	2b00      	cmp	r3, #0
 800f354:	d008      	beq.n	800f368 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f35e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f001 f81b 	bl	801039c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f366:	e051      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f36c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f370:	2b00      	cmp	r3, #0
 800f372:	d014      	beq.n	800f39e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d105      	bne.n	800f38c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f380:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d008      	beq.n	800f39e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f390:	2b00      	cmp	r3, #0
 800f392:	d03a      	beq.n	800f40a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	4798      	blx	r3
    }
    return;
 800f39c:	e035      	b.n	800f40a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d009      	beq.n	800f3be <HAL_UART_IRQHandler+0x62e>
 800f3aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d003      	beq.n	800f3be <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 ffc5 	bl	8010346 <UART_EndTransmit_IT>
    return;
 800f3bc:	e026      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d009      	beq.n	800f3de <HAL_UART_IRQHandler+0x64e>
 800f3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d003      	beq.n	800f3de <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 fff4 	bl	80103c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3dc:	e016      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f3de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f3e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d010      	beq.n	800f40c <HAL_UART_IRQHandler+0x67c>
 800f3ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	da0c      	bge.n	800f40c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f000 ffdc 	bl	80103b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3f8:	e008      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
      return;
 800f3fa:	bf00      	nop
 800f3fc:	e006      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
    return;
 800f3fe:	bf00      	nop
 800f400:	e004      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
      return;
 800f402:	bf00      	nop
 800f404:	e002      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
      return;
 800f406:	bf00      	nop
 800f408:	e000      	b.n	800f40c <HAL_UART_IRQHandler+0x67c>
    return;
 800f40a:	bf00      	nop
  }
}
 800f40c:	37e8      	adds	r7, #232	@ 0xe8
 800f40e:	46bd      	mov	sp, r7
 800f410:	bd80      	pop	{r7, pc}
 800f412:	bf00      	nop

0800f414 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f41c:	bf00      	nop
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f430:	bf00      	nop
 800f432:	370c      	adds	r7, #12
 800f434:	46bd      	mov	sp, r7
 800f436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43a:	4770      	bx	lr

0800f43c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f444:	bf00      	nop
 800f446:	370c      	adds	r7, #12
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr

0800f450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f450:	b480      	push	{r7}
 800f452:	b083      	sub	sp, #12
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f458:	bf00      	nop
 800f45a:	370c      	adds	r7, #12
 800f45c:	46bd      	mov	sp, r7
 800f45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f462:	4770      	bx	lr

0800f464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	460b      	mov	r3, r1
 800f46e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f480:	b08c      	sub	sp, #48	@ 0x30
 800f482:	af00      	add	r7, sp, #0
 800f484:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f486:	2300      	movs	r3, #0
 800f488:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	689a      	ldr	r2, [r3, #8]
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	691b      	ldr	r3, [r3, #16]
 800f494:	431a      	orrs	r2, r3
 800f496:	697b      	ldr	r3, [r7, #20]
 800f498:	695b      	ldr	r3, [r3, #20]
 800f49a:	431a      	orrs	r2, r3
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	69db      	ldr	r3, [r3, #28]
 800f4a0:	4313      	orrs	r3, r2
 800f4a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	4baa      	ldr	r3, [pc, #680]	@ (800f754 <UART_SetConfig+0x2d8>)
 800f4ac:	4013      	ands	r3, r2
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	6812      	ldr	r2, [r2, #0]
 800f4b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4b4:	430b      	orrs	r3, r1
 800f4b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	68da      	ldr	r2, [r3, #12]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	430a      	orrs	r2, r1
 800f4cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4a9f      	ldr	r2, [pc, #636]	@ (800f758 <UART_SetConfig+0x2dc>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d004      	beq.n	800f4e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	689b      	ldr	r3, [r3, #8]
 800f4ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f4f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	6812      	ldr	r2, [r2, #0]
 800f4fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f4fc:	430b      	orrs	r3, r1
 800f4fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f506:	f023 010f 	bic.w	r1, r3, #15
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4a90      	ldr	r2, [pc, #576]	@ (800f75c <UART_SetConfig+0x2e0>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d125      	bne.n	800f56c <UART_SetConfig+0xf0>
 800f520:	4b8f      	ldr	r3, [pc, #572]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f526:	f003 0303 	and.w	r3, r3, #3
 800f52a:	2b03      	cmp	r3, #3
 800f52c:	d81a      	bhi.n	800f564 <UART_SetConfig+0xe8>
 800f52e:	a201      	add	r2, pc, #4	@ (adr r2, 800f534 <UART_SetConfig+0xb8>)
 800f530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f534:	0800f545 	.word	0x0800f545
 800f538:	0800f555 	.word	0x0800f555
 800f53c:	0800f54d 	.word	0x0800f54d
 800f540:	0800f55d 	.word	0x0800f55d
 800f544:	2301      	movs	r3, #1
 800f546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f54a:	e116      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f54c:	2302      	movs	r3, #2
 800f54e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f552:	e112      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f554:	2304      	movs	r3, #4
 800f556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f55a:	e10e      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f55c:	2308      	movs	r3, #8
 800f55e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f562:	e10a      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f564:	2310      	movs	r3, #16
 800f566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f56a:	e106      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a7c      	ldr	r2, [pc, #496]	@ (800f764 <UART_SetConfig+0x2e8>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d138      	bne.n	800f5e8 <UART_SetConfig+0x16c>
 800f576:	4b7a      	ldr	r3, [pc, #488]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f57c:	f003 030c 	and.w	r3, r3, #12
 800f580:	2b0c      	cmp	r3, #12
 800f582:	d82d      	bhi.n	800f5e0 <UART_SetConfig+0x164>
 800f584:	a201      	add	r2, pc, #4	@ (adr r2, 800f58c <UART_SetConfig+0x110>)
 800f586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58a:	bf00      	nop
 800f58c:	0800f5c1 	.word	0x0800f5c1
 800f590:	0800f5e1 	.word	0x0800f5e1
 800f594:	0800f5e1 	.word	0x0800f5e1
 800f598:	0800f5e1 	.word	0x0800f5e1
 800f59c:	0800f5d1 	.word	0x0800f5d1
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5c9 	.word	0x0800f5c9
 800f5b0:	0800f5e1 	.word	0x0800f5e1
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	0800f5e1 	.word	0x0800f5e1
 800f5bc:	0800f5d9 	.word	0x0800f5d9
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5c6:	e0d8      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f5c8:	2302      	movs	r3, #2
 800f5ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5ce:	e0d4      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f5d0:	2304      	movs	r3, #4
 800f5d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5d6:	e0d0      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f5d8:	2308      	movs	r3, #8
 800f5da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5de:	e0cc      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f5e0:	2310      	movs	r3, #16
 800f5e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f5e6:	e0c8      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	4a5e      	ldr	r2, [pc, #376]	@ (800f768 <UART_SetConfig+0x2ec>)
 800f5ee:	4293      	cmp	r3, r2
 800f5f0:	d125      	bne.n	800f63e <UART_SetConfig+0x1c2>
 800f5f2:	4b5b      	ldr	r3, [pc, #364]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f5f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f5fc:	2b30      	cmp	r3, #48	@ 0x30
 800f5fe:	d016      	beq.n	800f62e <UART_SetConfig+0x1b2>
 800f600:	2b30      	cmp	r3, #48	@ 0x30
 800f602:	d818      	bhi.n	800f636 <UART_SetConfig+0x1ba>
 800f604:	2b20      	cmp	r3, #32
 800f606:	d00a      	beq.n	800f61e <UART_SetConfig+0x1a2>
 800f608:	2b20      	cmp	r3, #32
 800f60a:	d814      	bhi.n	800f636 <UART_SetConfig+0x1ba>
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d002      	beq.n	800f616 <UART_SetConfig+0x19a>
 800f610:	2b10      	cmp	r3, #16
 800f612:	d008      	beq.n	800f626 <UART_SetConfig+0x1aa>
 800f614:	e00f      	b.n	800f636 <UART_SetConfig+0x1ba>
 800f616:	2300      	movs	r3, #0
 800f618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f61c:	e0ad      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f61e:	2302      	movs	r3, #2
 800f620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f624:	e0a9      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f626:	2304      	movs	r3, #4
 800f628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f62c:	e0a5      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f62e:	2308      	movs	r3, #8
 800f630:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f634:	e0a1      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f636:	2310      	movs	r3, #16
 800f638:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f63c:	e09d      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a4a      	ldr	r2, [pc, #296]	@ (800f76c <UART_SetConfig+0x2f0>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d125      	bne.n	800f694 <UART_SetConfig+0x218>
 800f648:	4b45      	ldr	r3, [pc, #276]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f64a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f64e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f652:	2bc0      	cmp	r3, #192	@ 0xc0
 800f654:	d016      	beq.n	800f684 <UART_SetConfig+0x208>
 800f656:	2bc0      	cmp	r3, #192	@ 0xc0
 800f658:	d818      	bhi.n	800f68c <UART_SetConfig+0x210>
 800f65a:	2b80      	cmp	r3, #128	@ 0x80
 800f65c:	d00a      	beq.n	800f674 <UART_SetConfig+0x1f8>
 800f65e:	2b80      	cmp	r3, #128	@ 0x80
 800f660:	d814      	bhi.n	800f68c <UART_SetConfig+0x210>
 800f662:	2b00      	cmp	r3, #0
 800f664:	d002      	beq.n	800f66c <UART_SetConfig+0x1f0>
 800f666:	2b40      	cmp	r3, #64	@ 0x40
 800f668:	d008      	beq.n	800f67c <UART_SetConfig+0x200>
 800f66a:	e00f      	b.n	800f68c <UART_SetConfig+0x210>
 800f66c:	2300      	movs	r3, #0
 800f66e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f672:	e082      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f674:	2302      	movs	r3, #2
 800f676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f67a:	e07e      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f67c:	2304      	movs	r3, #4
 800f67e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f682:	e07a      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f684:	2308      	movs	r3, #8
 800f686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f68a:	e076      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f68c:	2310      	movs	r3, #16
 800f68e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f692:	e072      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a35      	ldr	r2, [pc, #212]	@ (800f770 <UART_SetConfig+0x2f4>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d12a      	bne.n	800f6f4 <UART_SetConfig+0x278>
 800f69e:	4b30      	ldr	r3, [pc, #192]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f6a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f6ac:	d01a      	beq.n	800f6e4 <UART_SetConfig+0x268>
 800f6ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f6b2:	d81b      	bhi.n	800f6ec <UART_SetConfig+0x270>
 800f6b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6b8:	d00c      	beq.n	800f6d4 <UART_SetConfig+0x258>
 800f6ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f6be:	d815      	bhi.n	800f6ec <UART_SetConfig+0x270>
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d003      	beq.n	800f6cc <UART_SetConfig+0x250>
 800f6c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f6c8:	d008      	beq.n	800f6dc <UART_SetConfig+0x260>
 800f6ca:	e00f      	b.n	800f6ec <UART_SetConfig+0x270>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6d2:	e052      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f6d4:	2302      	movs	r3, #2
 800f6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6da:	e04e      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f6dc:	2304      	movs	r3, #4
 800f6de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6e2:	e04a      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f6e4:	2308      	movs	r3, #8
 800f6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6ea:	e046      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f6ec:	2310      	movs	r3, #16
 800f6ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f6f2:	e042      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a17      	ldr	r2, [pc, #92]	@ (800f758 <UART_SetConfig+0x2dc>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d13a      	bne.n	800f774 <UART_SetConfig+0x2f8>
 800f6fe:	4b18      	ldr	r3, [pc, #96]	@ (800f760 <UART_SetConfig+0x2e4>)
 800f700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f704:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f70c:	d01a      	beq.n	800f744 <UART_SetConfig+0x2c8>
 800f70e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f712:	d81b      	bhi.n	800f74c <UART_SetConfig+0x2d0>
 800f714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f718:	d00c      	beq.n	800f734 <UART_SetConfig+0x2b8>
 800f71a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f71e:	d815      	bhi.n	800f74c <UART_SetConfig+0x2d0>
 800f720:	2b00      	cmp	r3, #0
 800f722:	d003      	beq.n	800f72c <UART_SetConfig+0x2b0>
 800f724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f728:	d008      	beq.n	800f73c <UART_SetConfig+0x2c0>
 800f72a:	e00f      	b.n	800f74c <UART_SetConfig+0x2d0>
 800f72c:	2300      	movs	r3, #0
 800f72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f732:	e022      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f734:	2302      	movs	r3, #2
 800f736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f73a:	e01e      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f73c:	2304      	movs	r3, #4
 800f73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f742:	e01a      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f744:	2308      	movs	r3, #8
 800f746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f74a:	e016      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f74c:	2310      	movs	r3, #16
 800f74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f752:	e012      	b.n	800f77a <UART_SetConfig+0x2fe>
 800f754:	cfff69f3 	.word	0xcfff69f3
 800f758:	40008000 	.word	0x40008000
 800f75c:	40013800 	.word	0x40013800
 800f760:	40021000 	.word	0x40021000
 800f764:	40004400 	.word	0x40004400
 800f768:	40004800 	.word	0x40004800
 800f76c:	40004c00 	.word	0x40004c00
 800f770:	40005000 	.word	0x40005000
 800f774:	2310      	movs	r3, #16
 800f776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4aae      	ldr	r2, [pc, #696]	@ (800fa38 <UART_SetConfig+0x5bc>)
 800f780:	4293      	cmp	r3, r2
 800f782:	f040 8097 	bne.w	800f8b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f786:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f78a:	2b08      	cmp	r3, #8
 800f78c:	d823      	bhi.n	800f7d6 <UART_SetConfig+0x35a>
 800f78e:	a201      	add	r2, pc, #4	@ (adr r2, 800f794 <UART_SetConfig+0x318>)
 800f790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f794:	0800f7b9 	.word	0x0800f7b9
 800f798:	0800f7d7 	.word	0x0800f7d7
 800f79c:	0800f7c1 	.word	0x0800f7c1
 800f7a0:	0800f7d7 	.word	0x0800f7d7
 800f7a4:	0800f7c7 	.word	0x0800f7c7
 800f7a8:	0800f7d7 	.word	0x0800f7d7
 800f7ac:	0800f7d7 	.word	0x0800f7d7
 800f7b0:	0800f7d7 	.word	0x0800f7d7
 800f7b4:	0800f7cf 	.word	0x0800f7cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f7b8:	f7fd fdf8 	bl	800d3ac <HAL_RCC_GetPCLK1Freq>
 800f7bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7be:	e010      	b.n	800f7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f7c0:	4b9e      	ldr	r3, [pc, #632]	@ (800fa3c <UART_SetConfig+0x5c0>)
 800f7c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7c4:	e00d      	b.n	800f7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f7c6:	f7fd fd85 	bl	800d2d4 <HAL_RCC_GetSysClockFreq>
 800f7ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f7cc:	e009      	b.n	800f7e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f7ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f7d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f7d4:	e005      	b.n	800f7e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f7da:	2301      	movs	r3, #1
 800f7dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f7e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 8130 	beq.w	800fa4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7ee:	4a94      	ldr	r2, [pc, #592]	@ (800fa40 <UART_SetConfig+0x5c4>)
 800f7f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f7fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	685a      	ldr	r2, [r3, #4]
 800f802:	4613      	mov	r3, r2
 800f804:	005b      	lsls	r3, r3, #1
 800f806:	4413      	add	r3, r2
 800f808:	69ba      	ldr	r2, [r7, #24]
 800f80a:	429a      	cmp	r2, r3
 800f80c:	d305      	bcc.n	800f81a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f814:	69ba      	ldr	r2, [r7, #24]
 800f816:	429a      	cmp	r2, r3
 800f818:	d903      	bls.n	800f822 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f820:	e113      	b.n	800fa4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f824:	2200      	movs	r2, #0
 800f826:	60bb      	str	r3, [r7, #8]
 800f828:	60fa      	str	r2, [r7, #12]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f82e:	4a84      	ldr	r2, [pc, #528]	@ (800fa40 <UART_SetConfig+0x5c4>)
 800f830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f834:	b29b      	uxth	r3, r3
 800f836:	2200      	movs	r2, #0
 800f838:	603b      	str	r3, [r7, #0]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f840:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f844:	f7f1 fa28 	bl	8000c98 <__aeabi_uldivmod>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	4610      	mov	r0, r2
 800f84e:	4619      	mov	r1, r3
 800f850:	f04f 0200 	mov.w	r2, #0
 800f854:	f04f 0300 	mov.w	r3, #0
 800f858:	020b      	lsls	r3, r1, #8
 800f85a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f85e:	0202      	lsls	r2, r0, #8
 800f860:	6979      	ldr	r1, [r7, #20]
 800f862:	6849      	ldr	r1, [r1, #4]
 800f864:	0849      	lsrs	r1, r1, #1
 800f866:	2000      	movs	r0, #0
 800f868:	460c      	mov	r4, r1
 800f86a:	4605      	mov	r5, r0
 800f86c:	eb12 0804 	adds.w	r8, r2, r4
 800f870:	eb43 0905 	adc.w	r9, r3, r5
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	469a      	mov	sl, r3
 800f87c:	4693      	mov	fp, r2
 800f87e:	4652      	mov	r2, sl
 800f880:	465b      	mov	r3, fp
 800f882:	4640      	mov	r0, r8
 800f884:	4649      	mov	r1, r9
 800f886:	f7f1 fa07 	bl	8000c98 <__aeabi_uldivmod>
 800f88a:	4602      	mov	r2, r0
 800f88c:	460b      	mov	r3, r1
 800f88e:	4613      	mov	r3, r2
 800f890:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f892:	6a3b      	ldr	r3, [r7, #32]
 800f894:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f898:	d308      	bcc.n	800f8ac <UART_SetConfig+0x430>
 800f89a:	6a3b      	ldr	r3, [r7, #32]
 800f89c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f8a0:	d204      	bcs.n	800f8ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	6a3a      	ldr	r2, [r7, #32]
 800f8a8:	60da      	str	r2, [r3, #12]
 800f8aa:	e0ce      	b.n	800fa4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f8b2:	e0ca      	b.n	800fa4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	69db      	ldr	r3, [r3, #28]
 800f8b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f8bc:	d166      	bne.n	800f98c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800f8be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f8c2:	2b08      	cmp	r3, #8
 800f8c4:	d827      	bhi.n	800f916 <UART_SetConfig+0x49a>
 800f8c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f8cc <UART_SetConfig+0x450>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8f1 	.word	0x0800f8f1
 800f8d0:	0800f8f9 	.word	0x0800f8f9
 800f8d4:	0800f901 	.word	0x0800f901
 800f8d8:	0800f917 	.word	0x0800f917
 800f8dc:	0800f907 	.word	0x0800f907
 800f8e0:	0800f917 	.word	0x0800f917
 800f8e4:	0800f917 	.word	0x0800f917
 800f8e8:	0800f917 	.word	0x0800f917
 800f8ec:	0800f90f 	.word	0x0800f90f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f8f0:	f7fd fd5c 	bl	800d3ac <HAL_RCC_GetPCLK1Freq>
 800f8f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f8f6:	e014      	b.n	800f922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f8f8:	f7fd fd6e 	bl	800d3d8 <HAL_RCC_GetPCLK2Freq>
 800f8fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f8fe:	e010      	b.n	800f922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f900:	4b4e      	ldr	r3, [pc, #312]	@ (800fa3c <UART_SetConfig+0x5c0>)
 800f902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f904:	e00d      	b.n	800f922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f906:	f7fd fce5 	bl	800d2d4 <HAL_RCC_GetSysClockFreq>
 800f90a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f90c:	e009      	b.n	800f922 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f90e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f912:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f914:	e005      	b.n	800f922 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800f916:	2300      	movs	r3, #0
 800f918:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f920:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f924:	2b00      	cmp	r3, #0
 800f926:	f000 8090 	beq.w	800fa4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f92e:	4a44      	ldr	r2, [pc, #272]	@ (800fa40 <UART_SetConfig+0x5c4>)
 800f930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f934:	461a      	mov	r2, r3
 800f936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f938:	fbb3 f3f2 	udiv	r3, r3, r2
 800f93c:	005a      	lsls	r2, r3, #1
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	685b      	ldr	r3, [r3, #4]
 800f942:	085b      	lsrs	r3, r3, #1
 800f944:	441a      	add	r2, r3
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f94e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f950:	6a3b      	ldr	r3, [r7, #32]
 800f952:	2b0f      	cmp	r3, #15
 800f954:	d916      	bls.n	800f984 <UART_SetConfig+0x508>
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f95c:	d212      	bcs.n	800f984 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	b29b      	uxth	r3, r3
 800f962:	f023 030f 	bic.w	r3, r3, #15
 800f966:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f968:	6a3b      	ldr	r3, [r7, #32]
 800f96a:	085b      	lsrs	r3, r3, #1
 800f96c:	b29b      	uxth	r3, r3
 800f96e:	f003 0307 	and.w	r3, r3, #7
 800f972:	b29a      	uxth	r2, r3
 800f974:	8bfb      	ldrh	r3, [r7, #30]
 800f976:	4313      	orrs	r3, r2
 800f978:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	8bfa      	ldrh	r2, [r7, #30]
 800f980:	60da      	str	r2, [r3, #12]
 800f982:	e062      	b.n	800fa4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800f984:	2301      	movs	r3, #1
 800f986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f98a:	e05e      	b.n	800fa4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f98c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f990:	2b08      	cmp	r3, #8
 800f992:	d828      	bhi.n	800f9e6 <UART_SetConfig+0x56a>
 800f994:	a201      	add	r2, pc, #4	@ (adr r2, 800f99c <UART_SetConfig+0x520>)
 800f996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99a:	bf00      	nop
 800f99c:	0800f9c1 	.word	0x0800f9c1
 800f9a0:	0800f9c9 	.word	0x0800f9c9
 800f9a4:	0800f9d1 	.word	0x0800f9d1
 800f9a8:	0800f9e7 	.word	0x0800f9e7
 800f9ac:	0800f9d7 	.word	0x0800f9d7
 800f9b0:	0800f9e7 	.word	0x0800f9e7
 800f9b4:	0800f9e7 	.word	0x0800f9e7
 800f9b8:	0800f9e7 	.word	0x0800f9e7
 800f9bc:	0800f9df 	.word	0x0800f9df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9c0:	f7fd fcf4 	bl	800d3ac <HAL_RCC_GetPCLK1Freq>
 800f9c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f9c6:	e014      	b.n	800f9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9c8:	f7fd fd06 	bl	800d3d8 <HAL_RCC_GetPCLK2Freq>
 800f9cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f9ce:	e010      	b.n	800f9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f9d0:	4b1a      	ldr	r3, [pc, #104]	@ (800fa3c <UART_SetConfig+0x5c0>)
 800f9d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f9d4:	e00d      	b.n	800f9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f9d6:	f7fd fc7d 	bl	800d2d4 <HAL_RCC_GetSysClockFreq>
 800f9da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f9dc:	e009      	b.n	800f9f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f9e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f9e4:	e005      	b.n	800f9f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f9f0:	bf00      	nop
    }

    if (pclk != 0U)
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d028      	beq.n	800fa4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9fc:	4a10      	ldr	r2, [pc, #64]	@ (800fa40 <UART_SetConfig+0x5c4>)
 800f9fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa02:	461a      	mov	r2, r3
 800fa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa06:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	685b      	ldr	r3, [r3, #4]
 800fa0e:	085b      	lsrs	r3, r3, #1
 800fa10:	441a      	add	r2, r3
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	685b      	ldr	r3, [r3, #4]
 800fa16:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	2b0f      	cmp	r3, #15
 800fa20:	d910      	bls.n	800fa44 <UART_SetConfig+0x5c8>
 800fa22:	6a3b      	ldr	r3, [r7, #32]
 800fa24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa28:	d20c      	bcs.n	800fa44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa2a:	6a3b      	ldr	r3, [r7, #32]
 800fa2c:	b29a      	uxth	r2, r3
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	60da      	str	r2, [r3, #12]
 800fa34:	e009      	b.n	800fa4a <UART_SetConfig+0x5ce>
 800fa36:	bf00      	nop
 800fa38:	40008000 	.word	0x40008000
 800fa3c:	00f42400 	.word	0x00f42400
 800fa40:	08027aec 	.word	0x08027aec
      }
      else
      {
        ret = HAL_ERROR;
 800fa44:	2301      	movs	r3, #1
 800fa46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2201      	movs	r2, #1
 800fa56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2200      	movs	r2, #0
 800fa64:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800fa66:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3730      	adds	r7, #48	@ 0x30
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fa74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa80:	f003 0308 	and.w	r3, r3, #8
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00a      	beq.n	800fa9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	685b      	ldr	r3, [r3, #4]
 800fa8e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	430a      	orrs	r2, r1
 800fa9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faa2:	f003 0301 	and.w	r3, r3, #1
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00a      	beq.n	800fac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	430a      	orrs	r2, r1
 800fabe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fac4:	f003 0302 	and.w	r3, r3, #2
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00a      	beq.n	800fae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	685b      	ldr	r3, [r3, #4]
 800fad2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	430a      	orrs	r2, r1
 800fae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fae6:	f003 0304 	and.w	r3, r3, #4
 800faea:	2b00      	cmp	r3, #0
 800faec:	d00a      	beq.n	800fb04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	430a      	orrs	r2, r1
 800fb02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb08:	f003 0310 	and.w	r3, r3, #16
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d00a      	beq.n	800fb26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	689b      	ldr	r3, [r3, #8]
 800fb16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	430a      	orrs	r2, r1
 800fb24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb2a:	f003 0320 	and.w	r3, r3, #32
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00a      	beq.n	800fb48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	430a      	orrs	r2, r1
 800fb46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d01a      	beq.n	800fb8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	430a      	orrs	r2, r1
 800fb68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fb6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fb72:	d10a      	bne.n	800fb8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	430a      	orrs	r2, r1
 800fb88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00a      	beq.n	800fbac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	685b      	ldr	r3, [r3, #4]
 800fb9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	430a      	orrs	r2, r1
 800fbaa:	605a      	str	r2, [r3, #4]
  }
}
 800fbac:	bf00      	nop
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b098      	sub	sp, #96	@ 0x60
 800fbbc:	af02      	add	r7, sp, #8
 800fbbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fbc8:	f7f9 fad6 	bl	8009178 <HAL_GetTick>
 800fbcc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f003 0308 	and.w	r3, r3, #8
 800fbd8:	2b08      	cmp	r3, #8
 800fbda:	d12f      	bne.n	800fc3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fbdc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fbe0:	9300      	str	r3, [sp, #0]
 800fbe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fbea:	6878      	ldr	r0, [r7, #4]
 800fbec:	f000 f88e 	bl	800fd0c <UART_WaitOnFlagUntilTimeout>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d022      	beq.n	800fc3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fbfe:	e853 3f00 	ldrex	r3, [r3]
 800fc02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc0a:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	461a      	mov	r2, r3
 800fc12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fc14:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc1c:	e841 2300 	strex	r3, r2, [r1]
 800fc20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1e6      	bne.n	800fbf6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2220      	movs	r2, #32
 800fc2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc38:	2303      	movs	r3, #3
 800fc3a:	e063      	b.n	800fd04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	f003 0304 	and.w	r3, r3, #4
 800fc46:	2b04      	cmp	r3, #4
 800fc48:	d149      	bne.n	800fcde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc52:	2200      	movs	r2, #0
 800fc54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f857 	bl	800fd0c <UART_WaitOnFlagUntilTimeout>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d03c      	beq.n	800fcde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	623b      	str	r3, [r7, #32]
   return(result);
 800fc72:	6a3b      	ldr	r3, [r7, #32]
 800fc74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fc82:	633b      	str	r3, [r7, #48]	@ 0x30
 800fc84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc8a:	e841 2300 	strex	r3, r2, [r1]
 800fc8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d1e6      	bne.n	800fc64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	3308      	adds	r3, #8
 800fc9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	e853 3f00 	ldrex	r3, [r3]
 800fca4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f023 0301 	bic.w	r3, r3, #1
 800fcac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	3308      	adds	r3, #8
 800fcb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fcb6:	61fa      	str	r2, [r7, #28]
 800fcb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcba:	69b9      	ldr	r1, [r7, #24]
 800fcbc:	69fa      	ldr	r2, [r7, #28]
 800fcbe:	e841 2300 	strex	r3, r2, [r1]
 800fcc2:	617b      	str	r3, [r7, #20]
   return(result);
 800fcc4:	697b      	ldr	r3, [r7, #20]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d1e5      	bne.n	800fc96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2220      	movs	r2, #32
 800fcce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcda:	2303      	movs	r3, #3
 800fcdc:	e012      	b.n	800fd04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2220      	movs	r2, #32
 800fce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2220      	movs	r2, #32
 800fcea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fd02:	2300      	movs	r3, #0
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3758      	adds	r7, #88	@ 0x58
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b084      	sub	sp, #16
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	60f8      	str	r0, [r7, #12]
 800fd14:	60b9      	str	r1, [r7, #8]
 800fd16:	603b      	str	r3, [r7, #0]
 800fd18:	4613      	mov	r3, r2
 800fd1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd1c:	e04f      	b.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fd24:	d04b      	beq.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd26:	f7f9 fa27 	bl	8009178 <HAL_GetTick>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	1ad3      	subs	r3, r2, r3
 800fd30:	69ba      	ldr	r2, [r7, #24]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d302      	bcc.n	800fd3c <UART_WaitOnFlagUntilTimeout+0x30>
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d101      	bne.n	800fd40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	e04e      	b.n	800fdde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f003 0304 	and.w	r3, r3, #4
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d037      	beq.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b80      	cmp	r3, #128	@ 0x80
 800fd52:	d034      	beq.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	2b40      	cmp	r3, #64	@ 0x40
 800fd58:	d031      	beq.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	69db      	ldr	r3, [r3, #28]
 800fd60:	f003 0308 	and.w	r3, r3, #8
 800fd64:	2b08      	cmp	r3, #8
 800fd66:	d110      	bne.n	800fd8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2208      	movs	r2, #8
 800fd6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 f920 	bl	800ffb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	2208      	movs	r2, #8
 800fd7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	2200      	movs	r2, #0
 800fd82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fd86:	2301      	movs	r3, #1
 800fd88:	e029      	b.n	800fdde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	69db      	ldr	r3, [r3, #28]
 800fd90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd98:	d111      	bne.n	800fdbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fda2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fda4:	68f8      	ldr	r0, [r7, #12]
 800fda6:	f000 f906 	bl	800ffb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	2220      	movs	r2, #32
 800fdae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fdba:	2303      	movs	r3, #3
 800fdbc:	e00f      	b.n	800fdde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	69da      	ldr	r2, [r3, #28]
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	bf0c      	ite	eq
 800fdce:	2301      	moveq	r3, #1
 800fdd0:	2300      	movne	r3, #0
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	79fb      	ldrb	r3, [r7, #7]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d0a0      	beq.n	800fd1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
	...

0800fde8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b096      	sub	sp, #88	@ 0x58
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	60f8      	str	r0, [r7, #12]
 800fdf0:	60b9      	str	r1, [r7, #8]
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	68ba      	ldr	r2, [r7, #8]
 800fdfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	88fa      	ldrh	r2, [r7, #6]
 800fe00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2222      	movs	r2, #34	@ 0x22
 800fe10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d02d      	beq.n	800fe7a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe24:	4a40      	ldr	r2, [pc, #256]	@ (800ff28 <UART_Start_Receive_DMA+0x140>)
 800fe26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe2e:	4a3f      	ldr	r2, [pc, #252]	@ (800ff2c <UART_Start_Receive_DMA+0x144>)
 800fe30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe38:	4a3d      	ldr	r2, [pc, #244]	@ (800ff30 <UART_Start_Receive_DMA+0x148>)
 800fe3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe42:	2200      	movs	r2, #0
 800fe44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	3324      	adds	r3, #36	@ 0x24
 800fe52:	4619      	mov	r1, r3
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe58:	461a      	mov	r2, r3
 800fe5a:	88fb      	ldrh	r3, [r7, #6]
 800fe5c:	f7f9 fc12 	bl	8009684 <HAL_DMA_Start_IT>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d009      	beq.n	800fe7a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	2210      	movs	r2, #16
 800fe6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2220      	movs	r2, #32
 800fe72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e051      	b.n	800ff1e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	691b      	ldr	r3, [r3, #16]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d018      	beq.n	800feb4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe8a:	e853 3f00 	ldrex	r3, [r3]
 800fe8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fe90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe96:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fea0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fea2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fea6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fea8:	e841 2300 	strex	r3, r2, [r1]
 800feac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800feae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d1e6      	bne.n	800fe82 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	3308      	adds	r3, #8
 800feba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febe:	e853 3f00 	ldrex	r3, [r3]
 800fec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec6:	f043 0301 	orr.w	r3, r3, #1
 800feca:	653b      	str	r3, [r7, #80]	@ 0x50
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3308      	adds	r3, #8
 800fed2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fed4:	637a      	str	r2, [r7, #52]	@ 0x34
 800fed6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800feda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fedc:	e841 2300 	strex	r3, r2, [r1]
 800fee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d1e5      	bne.n	800feb4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	3308      	adds	r3, #8
 800feee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	e853 3f00 	ldrex	r3, [r3]
 800fef6:	613b      	str	r3, [r7, #16]
   return(result);
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fefe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	3308      	adds	r3, #8
 800ff06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ff08:	623a      	str	r2, [r7, #32]
 800ff0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0c:	69f9      	ldr	r1, [r7, #28]
 800ff0e:	6a3a      	ldr	r2, [r7, #32]
 800ff10:	e841 2300 	strex	r3, r2, [r1]
 800ff14:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1e5      	bne.n	800fee8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3758      	adds	r7, #88	@ 0x58
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	08010139 	.word	0x08010139
 800ff2c:	08010265 	.word	0x08010265
 800ff30:	080102a3 	.word	0x080102a3

0800ff34 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b08f      	sub	sp, #60	@ 0x3c
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	e853 3f00 	ldrex	r3, [r3]
 800ff48:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ff50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	461a      	mov	r2, r3
 800ff58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff5c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ff60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff62:	e841 2300 	strex	r3, r2, [r1]
 800ff66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ff68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d1e6      	bne.n	800ff3c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	3308      	adds	r3, #8
 800ff74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	e853 3f00 	ldrex	r3, [r3]
 800ff7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ff84:	633b      	str	r3, [r7, #48]	@ 0x30
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	3308      	adds	r3, #8
 800ff8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff8e:	61ba      	str	r2, [r7, #24]
 800ff90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff92:	6979      	ldr	r1, [r7, #20]
 800ff94:	69ba      	ldr	r2, [r7, #24]
 800ff96:	e841 2300 	strex	r3, r2, [r1]
 800ff9a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d1e5      	bne.n	800ff6e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2220      	movs	r2, #32
 800ffa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ffaa:	bf00      	nop
 800ffac:	373c      	adds	r7, #60	@ 0x3c
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffb6:	b480      	push	{r7}
 800ffb8:	b095      	sub	sp, #84	@ 0x54
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ffd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	461a      	mov	r2, r3
 800ffda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffdc:	643b      	str	r3, [r7, #64]	@ 0x40
 800ffde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ffe2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ffe4:	e841 2300 	strex	r3, r2, [r1]
 800ffe8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ffea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1e6      	bne.n	800ffbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	3308      	adds	r3, #8
 800fff6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff8:	6a3b      	ldr	r3, [r7, #32]
 800fffa:	e853 3f00 	ldrex	r3, [r3]
 800fffe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010006:	f023 0301 	bic.w	r3, r3, #1
 801000a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	3308      	adds	r3, #8
 8010012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010014:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010016:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801001a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801001c:	e841 2300 	strex	r3, r2, [r1]
 8010020:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1e3      	bne.n	800fff0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801002c:	2b01      	cmp	r3, #1
 801002e:	d118      	bne.n	8010062 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	e853 3f00 	ldrex	r3, [r3]
 801003c:	60bb      	str	r3, [r7, #8]
   return(result);
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	f023 0310 	bic.w	r3, r3, #16
 8010044:	647b      	str	r3, [r7, #68]	@ 0x44
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801004e:	61bb      	str	r3, [r7, #24]
 8010050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010052:	6979      	ldr	r1, [r7, #20]
 8010054:	69ba      	ldr	r2, [r7, #24]
 8010056:	e841 2300 	strex	r3, r2, [r1]
 801005a:	613b      	str	r3, [r7, #16]
   return(result);
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1e6      	bne.n	8010030 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2220      	movs	r2, #32
 8010066:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2200      	movs	r2, #0
 801006e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2200      	movs	r2, #0
 8010074:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010076:	bf00      	nop
 8010078:	3754      	adds	r7, #84	@ 0x54
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b090      	sub	sp, #64	@ 0x40
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801008e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f003 0320 	and.w	r3, r3, #32
 801009a:	2b00      	cmp	r3, #0
 801009c:	d137      	bne.n	801010e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801009e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100a0:	2200      	movs	r2, #0
 80100a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80100a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3308      	adds	r3, #8
 80100ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b0:	e853 3f00 	ldrex	r3, [r3]
 80100b4:	623b      	str	r3, [r7, #32]
   return(result);
 80100b6:	6a3b      	ldr	r3, [r7, #32]
 80100b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80100bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80100be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3308      	adds	r3, #8
 80100c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80100c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80100c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100ce:	e841 2300 	strex	r3, r2, [r1]
 80100d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e5      	bne.n	80100a6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80100da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	e853 3f00 	ldrex	r3, [r3]
 80100e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80100f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	461a      	mov	r2, r3
 80100f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100f8:	61fb      	str	r3, [r7, #28]
 80100fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fc:	69b9      	ldr	r1, [r7, #24]
 80100fe:	69fa      	ldr	r2, [r7, #28]
 8010100:	e841 2300 	strex	r3, r2, [r1]
 8010104:	617b      	str	r3, [r7, #20]
   return(result);
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d1e6      	bne.n	80100da <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801010c:	e002      	b.n	8010114 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801010e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010110:	f7ff f980 	bl	800f414 <HAL_UART_TxCpltCallback>
}
 8010114:	bf00      	nop
 8010116:	3740      	adds	r7, #64	@ 0x40
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010128:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801012a:	68f8      	ldr	r0, [r7, #12]
 801012c:	f7ff f97c 	bl	800f428 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010130:	bf00      	nop
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b09c      	sub	sp, #112	@ 0x70
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010144:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f003 0320 	and.w	r3, r3, #32
 8010150:	2b00      	cmp	r3, #0
 8010152:	d171      	bne.n	8010238 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010154:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010156:	2200      	movs	r2, #0
 8010158:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801015c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010164:	e853 3f00 	ldrex	r3, [r3]
 8010168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801016a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801016c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	461a      	mov	r2, r3
 8010178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801017a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801017c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010180:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010182:	e841 2300 	strex	r3, r2, [r1]
 8010186:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801018a:	2b00      	cmp	r3, #0
 801018c:	d1e6      	bne.n	801015c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801018e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3308      	adds	r3, #8
 8010194:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010198:	e853 3f00 	ldrex	r3, [r3]
 801019c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801019e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a0:	f023 0301 	bic.w	r3, r3, #1
 80101a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80101a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3308      	adds	r3, #8
 80101ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80101ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80101b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80101b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80101b6:	e841 2300 	strex	r3, r2, [r1]
 80101ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80101bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d1e5      	bne.n	801018e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	3308      	adds	r3, #8
 80101c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101cc:	e853 3f00 	ldrex	r3, [r3]
 80101d0:	623b      	str	r3, [r7, #32]
   return(result);
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80101da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3308      	adds	r3, #8
 80101e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80101e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80101e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80101ea:	e841 2300 	strex	r3, r2, [r1]
 80101ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80101f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d1e5      	bne.n	80101c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80101f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101f8:	2220      	movs	r2, #32
 80101fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010202:	2b01      	cmp	r3, #1
 8010204:	d118      	bne.n	8010238 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	e853 3f00 	ldrex	r3, [r3]
 8010212:	60fb      	str	r3, [r7, #12]
   return(result);
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f023 0310 	bic.w	r3, r3, #16
 801021a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801021c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	461a      	mov	r2, r3
 8010222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010224:	61fb      	str	r3, [r7, #28]
 8010226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010228:	69b9      	ldr	r1, [r7, #24]
 801022a:	69fa      	ldr	r2, [r7, #28]
 801022c:	e841 2300 	strex	r3, r2, [r1]
 8010230:	617b      	str	r3, [r7, #20]
   return(result);
 8010232:	697b      	ldr	r3, [r7, #20]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d1e6      	bne.n	8010206 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801023a:	2200      	movs	r2, #0
 801023c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801023e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010240:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010242:	2b01      	cmp	r3, #1
 8010244:	d107      	bne.n	8010256 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010248:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801024c:	4619      	mov	r1, r3
 801024e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010250:	f7ff f908 	bl	800f464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010254:	e002      	b.n	801025c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010256:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010258:	f7f7 ff96 	bl	8008188 <HAL_UART_RxCpltCallback>
}
 801025c:	bf00      	nop
 801025e:	3770      	adds	r7, #112	@ 0x70
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b084      	sub	sp, #16
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010270:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2201      	movs	r2, #1
 8010276:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801027c:	2b01      	cmp	r3, #1
 801027e:	d109      	bne.n	8010294 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010286:	085b      	lsrs	r3, r3, #1
 8010288:	b29b      	uxth	r3, r3
 801028a:	4619      	mov	r1, r3
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7ff f8e9 	bl	800f464 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010292:	e002      	b.n	801029a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010294:	68f8      	ldr	r0, [r7, #12]
 8010296:	f7ff f8d1 	bl	800f43c <HAL_UART_RxHalfCpltCallback>
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80102b0:	697b      	ldr	r3, [r7, #20]
 80102b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80102be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102ca:	2b80      	cmp	r3, #128	@ 0x80
 80102cc:	d109      	bne.n	80102e2 <UART_DMAError+0x40>
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2b21      	cmp	r3, #33	@ 0x21
 80102d2:	d106      	bne.n	80102e2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	2200      	movs	r2, #0
 80102d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80102dc:	6978      	ldr	r0, [r7, #20]
 80102de:	f7ff fe29 	bl	800ff34 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ec:	2b40      	cmp	r3, #64	@ 0x40
 80102ee:	d109      	bne.n	8010304 <UART_DMAError+0x62>
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	2b22      	cmp	r3, #34	@ 0x22
 80102f4:	d106      	bne.n	8010304 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	2200      	movs	r2, #0
 80102fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80102fe:	6978      	ldr	r0, [r7, #20]
 8010300:	f7ff fe59 	bl	800ffb6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801030a:	f043 0210 	orr.w	r2, r3, #16
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010314:	6978      	ldr	r0, [r7, #20]
 8010316:	f7ff f89b 	bl	800f450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801031a:	bf00      	nop
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}

08010322 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b084      	sub	sp, #16
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801032e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010338:	68f8      	ldr	r0, [r7, #12]
 801033a:	f7ff f889 	bl	800f450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801033e:	bf00      	nop
 8010340:	3710      	adds	r7, #16
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}

08010346 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010346:	b580      	push	{r7, lr}
 8010348:	b088      	sub	sp, #32
 801034a:	af00      	add	r7, sp, #0
 801034c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	e853 3f00 	ldrex	r3, [r3]
 801035a:	60bb      	str	r3, [r7, #8]
   return(result);
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	461a      	mov	r2, r3
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	61bb      	str	r3, [r7, #24]
 801036e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010370:	6979      	ldr	r1, [r7, #20]
 8010372:	69ba      	ldr	r2, [r7, #24]
 8010374:	e841 2300 	strex	r3, r2, [r1]
 8010378:	613b      	str	r3, [r7, #16]
   return(result);
 801037a:	693b      	ldr	r3, [r7, #16]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e6      	bne.n	801034e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2220      	movs	r2, #32
 8010384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2200      	movs	r2, #0
 801038c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff f840 	bl	800f414 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010394:	bf00      	nop
 8010396:	3720      	adds	r7, #32
 8010398:	46bd      	mov	sp, r7
 801039a:	bd80      	pop	{r7, pc}

0801039c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801039c:	b480      	push	{r7}
 801039e:	b083      	sub	sp, #12
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80103a4:	bf00      	nop
 80103a6:	370c      	adds	r7, #12
 80103a8:	46bd      	mov	sp, r7
 80103aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ae:	4770      	bx	lr

080103b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80103b8:	bf00      	nop
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr

080103c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80103cc:	bf00      	nop
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d101      	bne.n	80103ee <HAL_UARTEx_DisableFifoMode+0x16>
 80103ea:	2302      	movs	r3, #2
 80103ec:	e027      	b.n	801043e <HAL_UARTEx_DisableFifoMode+0x66>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2224      	movs	r2, #36	@ 0x24
 80103fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	f022 0201 	bic.w	r2, r2, #1
 8010414:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801041c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	2200      	movs	r2, #0
 8010422:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68fa      	ldr	r2, [r7, #12]
 801042a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2220      	movs	r2, #32
 8010430:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3714      	adds	r7, #20
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b084      	sub	sp, #16
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801045a:	2b01      	cmp	r3, #1
 801045c:	d101      	bne.n	8010462 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801045e:	2302      	movs	r3, #2
 8010460:	e02d      	b.n	80104be <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2201      	movs	r2, #1
 8010466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	2224      	movs	r2, #36	@ 0x24
 801046e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	681a      	ldr	r2, [r3, #0]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	f022 0201 	bic.w	r2, r2, #1
 8010488:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	683a      	ldr	r2, [r7, #0]
 801049a:	430a      	orrs	r2, r1
 801049c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f000 f850 	bl	8010544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	68fa      	ldr	r2, [r7, #12]
 80104aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2220      	movs	r2, #32
 80104b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80104bc:	2300      	movs	r3, #0
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80104c6:	b580      	push	{r7, lr}
 80104c8:	b084      	sub	sp, #16
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d101      	bne.n	80104de <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80104da:	2302      	movs	r3, #2
 80104dc:	e02d      	b.n	801053a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2201      	movs	r2, #1
 80104e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2224      	movs	r2, #36	@ 0x24
 80104ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f022 0201 	bic.w	r2, r2, #1
 8010504:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	430a      	orrs	r2, r1
 8010518:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f000 f812 	bl	8010544 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2220      	movs	r2, #32
 801052c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2200      	movs	r2, #0
 8010534:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
	...

08010544 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010550:	2b00      	cmp	r3, #0
 8010552:	d108      	bne.n	8010566 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010564:	e031      	b.n	80105ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010566:	2308      	movs	r3, #8
 8010568:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801056a:	2308      	movs	r3, #8
 801056c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	689b      	ldr	r3, [r3, #8]
 8010574:	0e5b      	lsrs	r3, r3, #25
 8010576:	b2db      	uxtb	r3, r3
 8010578:	f003 0307 	and.w	r3, r3, #7
 801057c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	689b      	ldr	r3, [r3, #8]
 8010584:	0f5b      	lsrs	r3, r3, #29
 8010586:	b2db      	uxtb	r3, r3
 8010588:	f003 0307 	and.w	r3, r3, #7
 801058c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801058e:	7bbb      	ldrb	r3, [r7, #14]
 8010590:	7b3a      	ldrb	r2, [r7, #12]
 8010592:	4911      	ldr	r1, [pc, #68]	@ (80105d8 <UARTEx_SetNbDataToProcess+0x94>)
 8010594:	5c8a      	ldrb	r2, [r1, r2]
 8010596:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801059a:	7b3a      	ldrb	r2, [r7, #12]
 801059c:	490f      	ldr	r1, [pc, #60]	@ (80105dc <UARTEx_SetNbDataToProcess+0x98>)
 801059e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80105a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80105a4:	b29a      	uxth	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105ac:	7bfb      	ldrb	r3, [r7, #15]
 80105ae:	7b7a      	ldrb	r2, [r7, #13]
 80105b0:	4909      	ldr	r1, [pc, #36]	@ (80105d8 <UARTEx_SetNbDataToProcess+0x94>)
 80105b2:	5c8a      	ldrb	r2, [r1, r2]
 80105b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80105b8:	7b7a      	ldrb	r2, [r7, #13]
 80105ba:	4908      	ldr	r1, [pc, #32]	@ (80105dc <UARTEx_SetNbDataToProcess+0x98>)
 80105bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80105be:	fb93 f3f2 	sdiv	r3, r3, r2
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80105ca:	bf00      	nop
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	08027b04 	.word	0x08027b04
 80105dc:	08027b0c 	.word	0x08027b0c

080105e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80105f0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80105f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010600:	2300      	movs	r3, #0
}
 8010602:	4618      	mov	r0, r3
 8010604:	3714      	adds	r7, #20
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr

0801060e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 801060e:	b480      	push	{r7}
 8010610:	b085      	sub	sp, #20
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010616:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801061a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010622:	b29a      	uxth	r2, r3
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	b29b      	uxth	r3, r3
 8010628:	43db      	mvns	r3, r3
 801062a:	b29b      	uxth	r3, r3
 801062c:	4013      	ands	r3, r2
 801062e:	b29a      	uxth	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8010636:	2300      	movs	r3, #0
}
 8010638:	4618      	mov	r0, r3
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	1d3b      	adds	r3, r7, #4
 801064e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	2201      	movs	r2, #1
 8010656:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	2200      	movs	r2, #0
 801065e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2200      	movs	r2, #0
 8010666:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	2200      	movs	r2, #0
 801066e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010672:	2300      	movs	r3, #0
}
 8010674:	4618      	mov	r0, r3
 8010676:	3714      	adds	r7, #20
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010680:	b480      	push	{r7}
 8010682:	b0a7      	sub	sp, #156	@ 0x9c
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801068a:	2300      	movs	r3, #0
 801068c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	009b      	lsls	r3, r3, #2
 8010698:	4413      	add	r3, r2
 801069a:	881b      	ldrh	r3, [r3, #0]
 801069c:	b29b      	uxth	r3, r3
 801069e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80106a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106a6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	78db      	ldrb	r3, [r3, #3]
 80106ae:	2b03      	cmp	r3, #3
 80106b0:	d81f      	bhi.n	80106f2 <USB_ActivateEndpoint+0x72>
 80106b2:	a201      	add	r2, pc, #4	@ (adr r2, 80106b8 <USB_ActivateEndpoint+0x38>)
 80106b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106b8:	080106c9 	.word	0x080106c9
 80106bc:	080106e5 	.word	0x080106e5
 80106c0:	080106fb 	.word	0x080106fb
 80106c4:	080106d7 	.word	0x080106d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80106c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80106cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80106d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80106d4:	e012      	b.n	80106fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80106d6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80106da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80106de:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80106e2:	e00b      	b.n	80106fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80106e4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80106e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80106ec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80106f0:	e004      	b.n	80106fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80106f8:	e000      	b.n	80106fc <USB_ActivateEndpoint+0x7c>
      break;
 80106fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	781b      	ldrb	r3, [r3, #0]
 8010702:	009b      	lsls	r3, r3, #2
 8010704:	441a      	add	r2, r3
 8010706:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 801070a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801070e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801071a:	b29b      	uxth	r3, r3
 801071c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	009b      	lsls	r3, r3, #2
 8010726:	4413      	add	r3, r2
 8010728:	881b      	ldrh	r3, [r3, #0]
 801072a:	b29b      	uxth	r3, r3
 801072c:	b21b      	sxth	r3, r3
 801072e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010736:	b21a      	sxth	r2, r3
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	b21b      	sxth	r3, r3
 801073e:	4313      	orrs	r3, r2
 8010740:	b21b      	sxth	r3, r3
 8010742:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8010746:	687a      	ldr	r2, [r7, #4]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	441a      	add	r2, r3
 8010750:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010754:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010758:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801075c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010764:	b29b      	uxth	r3, r3
 8010766:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	7b1b      	ldrb	r3, [r3, #12]
 801076c:	2b00      	cmp	r3, #0
 801076e:	f040 8180 	bne.w	8010a72 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	785b      	ldrb	r3, [r3, #1]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 8084 	beq.w	8010884 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	61bb      	str	r3, [r7, #24]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010786:	b29b      	uxth	r3, r3
 8010788:	461a      	mov	r2, r3
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	4413      	add	r3, r2
 801078e:	61bb      	str	r3, [r7, #24]
 8010790:	683b      	ldr	r3, [r7, #0]
 8010792:	781b      	ldrb	r3, [r3, #0]
 8010794:	00da      	lsls	r2, r3, #3
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	4413      	add	r3, r2
 801079a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801079e:	617b      	str	r3, [r7, #20]
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	88db      	ldrh	r3, [r3, #6]
 80107a4:	085b      	lsrs	r3, r3, #1
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	009b      	lsls	r3, r3, #2
 80107b8:	4413      	add	r3, r2
 80107ba:	881b      	ldrh	r3, [r3, #0]
 80107bc:	827b      	strh	r3, [r7, #18]
 80107be:	8a7b      	ldrh	r3, [r7, #18]
 80107c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d01b      	beq.n	8010800 <USB_ActivateEndpoint+0x180>
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	009b      	lsls	r3, r3, #2
 80107d0:	4413      	add	r3, r2
 80107d2:	881b      	ldrh	r3, [r3, #0]
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80107da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107de:	823b      	strh	r3, [r7, #16]
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	441a      	add	r2, r3
 80107ea:	8a3b      	ldrh	r3, [r7, #16]
 80107ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	78db      	ldrb	r3, [r3, #3]
 8010804:	2b01      	cmp	r3, #1
 8010806:	d020      	beq.n	801084a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010808:	687a      	ldr	r2, [r7, #4]
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	781b      	ldrb	r3, [r3, #0]
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	b29b      	uxth	r3, r3
 8010816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801081a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801081e:	81bb      	strh	r3, [r7, #12]
 8010820:	89bb      	ldrh	r3, [r7, #12]
 8010822:	f083 0320 	eor.w	r3, r3, #32
 8010826:	81bb      	strh	r3, [r7, #12]
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	009b      	lsls	r3, r3, #2
 8010830:	441a      	add	r2, r3
 8010832:	89bb      	ldrh	r3, [r7, #12]
 8010834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801083c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010844:	b29b      	uxth	r3, r3
 8010846:	8013      	strh	r3, [r2, #0]
 8010848:	e3f9      	b.n	801103e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	b29b      	uxth	r3, r3
 8010858:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801085c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010860:	81fb      	strh	r3, [r7, #14]
 8010862:	687a      	ldr	r2, [r7, #4]
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	441a      	add	r2, r3
 801086c:	89fb      	ldrh	r3, [r7, #14]
 801086e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801087a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801087e:	b29b      	uxth	r3, r3
 8010880:	8013      	strh	r3, [r2, #0]
 8010882:	e3dc      	b.n	801103e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	633b      	str	r3, [r7, #48]	@ 0x30
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801088e:	b29b      	uxth	r3, r3
 8010890:	461a      	mov	r2, r3
 8010892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010894:	4413      	add	r3, r2
 8010896:	633b      	str	r3, [r7, #48]	@ 0x30
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	781b      	ldrb	r3, [r3, #0]
 801089c:	00da      	lsls	r2, r3, #3
 801089e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a0:	4413      	add	r3, r2
 80108a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80108a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	88db      	ldrh	r3, [r3, #6]
 80108ac:	085b      	lsrs	r3, r3, #1
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	005b      	lsls	r3, r3, #1
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	461a      	mov	r2, r3
 80108c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c8:	4413      	add	r3, r2
 80108ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	00da      	lsls	r2, r3, #3
 80108d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d4:	4413      	add	r3, r2
 80108d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80108da:	627b      	str	r3, [r7, #36]	@ 0x24
 80108dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108de:	881b      	ldrh	r3, [r3, #0]
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ea:	801a      	strh	r2, [r3, #0]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d10a      	bne.n	801090a <USB_ActivateEndpoint+0x28a>
 80108f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010902:	b29a      	uxth	r2, r3
 8010904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010906:	801a      	strh	r2, [r3, #0]
 8010908:	e041      	b.n	801098e <USB_ActivateEndpoint+0x30e>
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	691b      	ldr	r3, [r3, #16]
 801090e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010910:	d81c      	bhi.n	801094c <USB_ActivateEndpoint+0x2cc>
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	691b      	ldr	r3, [r3, #16]
 8010916:	085b      	lsrs	r3, r3, #1
 8010918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	f003 0301 	and.w	r3, r3, #1
 8010924:	2b00      	cmp	r3, #0
 8010926:	d004      	beq.n	8010932 <USB_ActivateEndpoint+0x2b2>
 8010928:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801092c:	3301      	adds	r3, #1
 801092e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	b29a      	uxth	r2, r3
 8010938:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801093c:	b29b      	uxth	r3, r3
 801093e:	029b      	lsls	r3, r3, #10
 8010940:	b29b      	uxth	r3, r3
 8010942:	4313      	orrs	r3, r2
 8010944:	b29a      	uxth	r2, r3
 8010946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010948:	801a      	strh	r2, [r3, #0]
 801094a:	e020      	b.n	801098e <USB_ActivateEndpoint+0x30e>
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	691b      	ldr	r3, [r3, #16]
 8010950:	095b      	lsrs	r3, r3, #5
 8010952:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	f003 031f 	and.w	r3, r3, #31
 801095e:	2b00      	cmp	r3, #0
 8010960:	d104      	bne.n	801096c <USB_ActivateEndpoint+0x2ec>
 8010962:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010966:	3b01      	subs	r3, #1
 8010968:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801096c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096e:	881b      	ldrh	r3, [r3, #0]
 8010970:	b29a      	uxth	r2, r3
 8010972:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010976:	b29b      	uxth	r3, r3
 8010978:	029b      	lsls	r3, r3, #10
 801097a:	b29b      	uxth	r3, r3
 801097c:	4313      	orrs	r3, r2
 801097e:	b29b      	uxth	r3, r3
 8010980:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010984:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010988:	b29a      	uxth	r2, r3
 801098a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801099c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801099e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d01b      	beq.n	80109de <USB_ActivateEndpoint+0x35e>
 80109a6:	687a      	ldr	r2, [r7, #4]
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4413      	add	r3, r2
 80109b0:	881b      	ldrh	r3, [r3, #0]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80109b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109bc:	843b      	strh	r3, [r7, #32]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	781b      	ldrb	r3, [r3, #0]
 80109c4:	009b      	lsls	r3, r3, #2
 80109c6:	441a      	add	r2, r3
 80109c8:	8c3b      	ldrh	r3, [r7, #32]
 80109ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80109ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80109d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80109d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109da:	b29b      	uxth	r3, r3
 80109dc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d124      	bne.n	8010a30 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80109e6:	687a      	ldr	r2, [r7, #4]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	881b      	ldrh	r3, [r3, #0]
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80109f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80109fc:	83bb      	strh	r3, [r7, #28]
 80109fe:	8bbb      	ldrh	r3, [r7, #28]
 8010a00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010a04:	83bb      	strh	r3, [r7, #28]
 8010a06:	8bbb      	ldrh	r3, [r7, #28]
 8010a08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010a0c:	83bb      	strh	r3, [r7, #28]
 8010a0e:	687a      	ldr	r2, [r7, #4]
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	441a      	add	r2, r3
 8010a18:	8bbb      	ldrh	r3, [r7, #28]
 8010a1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	8013      	strh	r3, [r2, #0]
 8010a2e:	e306      	b.n	801103e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4413      	add	r3, r2
 8010a3a:	881b      	ldrh	r3, [r3, #0]
 8010a3c:	b29b      	uxth	r3, r3
 8010a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a46:	83fb      	strh	r3, [r7, #30]
 8010a48:	8bfb      	ldrh	r3, [r7, #30]
 8010a4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010a4e:	83fb      	strh	r3, [r7, #30]
 8010a50:	687a      	ldr	r2, [r7, #4]
 8010a52:	683b      	ldr	r3, [r7, #0]
 8010a54:	781b      	ldrb	r3, [r3, #0]
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	441a      	add	r2, r3
 8010a5a:	8bfb      	ldrh	r3, [r7, #30]
 8010a5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010a60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010a68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	8013      	strh	r3, [r2, #0]
 8010a70:	e2e5      	b.n	801103e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	78db      	ldrb	r3, [r3, #3]
 8010a76:	2b02      	cmp	r3, #2
 8010a78:	d11e      	bne.n	8010ab8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4413      	add	r3, r2
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010a90:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8010a94:	687a      	ldr	r2, [r7, #4]
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	009b      	lsls	r3, r3, #2
 8010a9c:	441a      	add	r2, r3
 8010a9e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8010aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010aaa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	8013      	strh	r3, [r2, #0]
 8010ab6:	e01d      	b.n	8010af4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8010ab8:	687a      	ldr	r2, [r7, #4]
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	781b      	ldrb	r3, [r3, #0]
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	881b      	ldrh	r3, [r3, #0]
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8010aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ace:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	781b      	ldrb	r3, [r3, #0]
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	441a      	add	r2, r3
 8010adc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8010ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	461a      	mov	r2, r3
 8010b02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010b04:	4413      	add	r3, r2
 8010b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	00da      	lsls	r2, r3, #3
 8010b0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010b10:	4413      	add	r3, r2
 8010b12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010b16:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	891b      	ldrh	r3, [r3, #8]
 8010b1c:	085b      	lsrs	r3, r3, #1
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010b26:	801a      	strh	r2, [r3, #0]
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	461a      	mov	r2, r3
 8010b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b38:	4413      	add	r3, r2
 8010b3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	00da      	lsls	r2, r3, #3
 8010b42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b44:	4413      	add	r3, r2
 8010b46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8010b4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	895b      	ldrh	r3, [r3, #10]
 8010b50:	085b      	lsrs	r3, r3, #1
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010b5a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010b5c:	683b      	ldr	r3, [r7, #0]
 8010b5e:	785b      	ldrb	r3, [r3, #1]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f040 81af 	bne.w	8010ec4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	4413      	add	r3, r2
 8010b70:	881b      	ldrh	r3, [r3, #0]
 8010b72:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8010b76:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8010b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d01d      	beq.n	8010bbe <USB_ActivateEndpoint+0x53e>
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	781b      	ldrb	r3, [r3, #0]
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	4413      	add	r3, r2
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b98:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	441a      	add	r2, r3
 8010ba6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8010baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bba:	b29b      	uxth	r3, r3
 8010bbc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010bbe:	687a      	ldr	r2, [r7, #4]
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	009b      	lsls	r3, r3, #2
 8010bc6:	4413      	add	r3, r2
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8010bce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8010bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d01d      	beq.n	8010c16 <USB_ActivateEndpoint+0x596>
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bf0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	441a      	add	r2, r3
 8010bfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8010c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c0e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	785b      	ldrb	r3, [r3, #1]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d16b      	bne.n	8010cf6 <USB_ActivateEndpoint+0x676>
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c2e:	4413      	add	r3, r2
 8010c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	00da      	lsls	r2, r3, #3
 8010c38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c44:	881b      	ldrh	r3, [r3, #0]
 8010c46:	b29b      	uxth	r3, r3
 8010c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c4c:	b29a      	uxth	r2, r3
 8010c4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c50:	801a      	strh	r2, [r3, #0]
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	691b      	ldr	r3, [r3, #16]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d10a      	bne.n	8010c70 <USB_ActivateEndpoint+0x5f0>
 8010c5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	b29b      	uxth	r3, r3
 8010c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c6c:	801a      	strh	r2, [r3, #0]
 8010c6e:	e05d      	b.n	8010d2c <USB_ActivateEndpoint+0x6ac>
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	691b      	ldr	r3, [r3, #16]
 8010c74:	2b3e      	cmp	r3, #62	@ 0x3e
 8010c76:	d81c      	bhi.n	8010cb2 <USB_ActivateEndpoint+0x632>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	691b      	ldr	r3, [r3, #16]
 8010c7c:	085b      	lsrs	r3, r3, #1
 8010c7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	691b      	ldr	r3, [r3, #16]
 8010c86:	f003 0301 	and.w	r3, r3, #1
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d004      	beq.n	8010c98 <USB_ActivateEndpoint+0x618>
 8010c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010c92:	3301      	adds	r3, #1
 8010c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c9a:	881b      	ldrh	r3, [r3, #0]
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	029b      	lsls	r3, r3, #10
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	4313      	orrs	r3, r2
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cae:	801a      	strh	r2, [r3, #0]
 8010cb0:	e03c      	b.n	8010d2c <USB_ActivateEndpoint+0x6ac>
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	691b      	ldr	r3, [r3, #16]
 8010cb6:	095b      	lsrs	r3, r3, #5
 8010cb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	691b      	ldr	r3, [r3, #16]
 8010cc0:	f003 031f 	and.w	r3, r3, #31
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d104      	bne.n	8010cd2 <USB_ActivateEndpoint+0x652>
 8010cc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	029b      	lsls	r3, r3, #10
 8010ce0:	b29b      	uxth	r3, r3
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010cf2:	801a      	strh	r2, [r3, #0]
 8010cf4:	e01a      	b.n	8010d2c <USB_ActivateEndpoint+0x6ac>
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	785b      	ldrb	r3, [r3, #1]
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d116      	bne.n	8010d2c <USB_ActivateEndpoint+0x6ac>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	461a      	mov	r2, r3
 8010d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d0e:	4413      	add	r3, r2
 8010d10:	657b      	str	r3, [r7, #84]	@ 0x54
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	00da      	lsls	r2, r3, #3
 8010d18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d1a:	4413      	add	r3, r2
 8010d1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010d20:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d2a:	801a      	strh	r2, [r3, #0]
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	785b      	ldrb	r3, [r3, #1]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d16b      	bne.n	8010e10 <USB_ActivateEndpoint+0x790>
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	461a      	mov	r2, r3
 8010d46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d48:	4413      	add	r3, r2
 8010d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	00da      	lsls	r2, r3, #3
 8010d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d54:	4413      	add	r3, r2
 8010d56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d5e:	881b      	ldrh	r3, [r3, #0]
 8010d60:	b29b      	uxth	r3, r3
 8010d62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6a:	801a      	strh	r2, [r3, #0]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	691b      	ldr	r3, [r3, #16]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10a      	bne.n	8010d8a <USB_ActivateEndpoint+0x70a>
 8010d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d76:	881b      	ldrh	r3, [r3, #0]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010d82:	b29a      	uxth	r2, r3
 8010d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d86:	801a      	strh	r2, [r3, #0]
 8010d88:	e05b      	b.n	8010e42 <USB_ActivateEndpoint+0x7c2>
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	691b      	ldr	r3, [r3, #16]
 8010d8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010d90:	d81c      	bhi.n	8010dcc <USB_ActivateEndpoint+0x74c>
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	691b      	ldr	r3, [r3, #16]
 8010d96:	085b      	lsrs	r3, r3, #1
 8010d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	f003 0301 	and.w	r3, r3, #1
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d004      	beq.n	8010db2 <USB_ActivateEndpoint+0x732>
 8010da8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010dac:	3301      	adds	r3, #1
 8010dae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	b29a      	uxth	r2, r3
 8010db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010dbc:	b29b      	uxth	r3, r3
 8010dbe:	029b      	lsls	r3, r3, #10
 8010dc0:	b29b      	uxth	r3, r3
 8010dc2:	4313      	orrs	r3, r2
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc8:	801a      	strh	r2, [r3, #0]
 8010dca:	e03a      	b.n	8010e42 <USB_ActivateEndpoint+0x7c2>
 8010dcc:	683b      	ldr	r3, [r7, #0]
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	095b      	lsrs	r3, r3, #5
 8010dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010dd6:	683b      	ldr	r3, [r7, #0]
 8010dd8:	691b      	ldr	r3, [r3, #16]
 8010dda:	f003 031f 	and.w	r3, r3, #31
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d104      	bne.n	8010dec <USB_ActivateEndpoint+0x76c>
 8010de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010de6:	3b01      	subs	r3, #1
 8010de8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dee:	881b      	ldrh	r3, [r3, #0]
 8010df0:	b29a      	uxth	r2, r3
 8010df2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010df6:	b29b      	uxth	r3, r3
 8010df8:	029b      	lsls	r3, r3, #10
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	4313      	orrs	r3, r2
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0c:	801a      	strh	r2, [r3, #0]
 8010e0e:	e018      	b.n	8010e42 <USB_ActivateEndpoint+0x7c2>
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d114      	bne.n	8010e42 <USB_ActivateEndpoint+0x7c2>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	461a      	mov	r2, r3
 8010e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e24:	4413      	add	r3, r2
 8010e26:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	781b      	ldrb	r3, [r3, #0]
 8010e2c:	00da      	lsls	r2, r3, #3
 8010e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010e30:	4413      	add	r3, r2
 8010e32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010e36:	643b      	str	r3, [r7, #64]	@ 0x40
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	691b      	ldr	r3, [r3, #16]
 8010e3c:	b29a      	uxth	r2, r3
 8010e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e40:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	4413      	add	r3, r2
 8010e4c:	881b      	ldrh	r3, [r3, #0]
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e58:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010e5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010e60:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010e68:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	781b      	ldrb	r3, [r3, #0]
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	441a      	add	r2, r3
 8010e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010e8a:	687a      	ldr	r2, [r7, #4]
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4413      	add	r3, r2
 8010e94:	881b      	ldrh	r3, [r3, #0]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ea0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	441a      	add	r2, r3
 8010eac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010eae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010eb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	8013      	strh	r3, [r2, #0]
 8010ec2:	e0bc      	b.n	801103e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ec4:	687a      	ldr	r2, [r7, #4]
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	881b      	ldrh	r3, [r3, #0]
 8010ed0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010ed4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d01d      	beq.n	8010f1c <USB_ActivateEndpoint+0x89c>
 8010ee0:	687a      	ldr	r2, [r7, #4]
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	009b      	lsls	r3, r3, #2
 8010ee8:	4413      	add	r3, r2
 8010eea:	881b      	ldrh	r3, [r3, #0]
 8010eec:	b29b      	uxth	r3, r3
 8010eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010ef6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	441a      	add	r2, r3
 8010f04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f18:	b29b      	uxth	r3, r3
 8010f1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010f1c:	687a      	ldr	r2, [r7, #4]
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	009b      	lsls	r3, r3, #2
 8010f24:	4413      	add	r3, r2
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010f2c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d01d      	beq.n	8010f74 <USB_ActivateEndpoint+0x8f4>
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4413      	add	r3, r2
 8010f42:	881b      	ldrh	r3, [r3, #0]
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f4e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	009b      	lsls	r3, r3, #2
 8010f5a:	441a      	add	r2, r3
 8010f5c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010f60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010f70:	b29b      	uxth	r3, r3
 8010f72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	78db      	ldrb	r3, [r3, #3]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	d024      	beq.n	8010fc6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	009b      	lsls	r3, r3, #2
 8010f84:	4413      	add	r3, r2
 8010f86:	881b      	ldrh	r3, [r3, #0]
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f92:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010f96:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010f9a:	f083 0320 	eor.w	r3, r3, #32
 8010f9e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	441a      	add	r2, r3
 8010fac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	8013      	strh	r3, [r2, #0]
 8010fc4:	e01d      	b.n	8011002 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010fc6:	687a      	ldr	r2, [r7, #4]
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	009b      	lsls	r3, r3, #2
 8010fce:	4413      	add	r3, r2
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010fdc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010fe0:	687a      	ldr	r2, [r7, #4]
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	441a      	add	r2, r3
 8010fea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ffe:	b29b      	uxth	r3, r3
 8011000:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	009b      	lsls	r3, r3, #2
 801100a:	4413      	add	r3, r2
 801100c:	881b      	ldrh	r3, [r3, #0]
 801100e:	b29b      	uxth	r3, r3
 8011010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011018:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	441a      	add	r2, r3
 8011026:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 801102a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801102e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801103a:	b29b      	uxth	r3, r3
 801103c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 801103e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011042:	4618      	mov	r0, r3
 8011044:	379c      	adds	r7, #156	@ 0x9c
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop

08011050 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011050:	b480      	push	{r7}
 8011052:	b08d      	sub	sp, #52	@ 0x34
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	7b1b      	ldrb	r3, [r3, #12]
 801105e:	2b00      	cmp	r3, #0
 8011060:	f040 808e 	bne.w	8011180 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	785b      	ldrb	r3, [r3, #1]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d044      	beq.n	80110f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	781b      	ldrb	r3, [r3, #0]
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	81bb      	strh	r3, [r7, #12]
 801107a:	89bb      	ldrh	r3, [r7, #12]
 801107c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011080:	2b00      	cmp	r3, #0
 8011082:	d01b      	beq.n	80110bc <USB_DeactivateEndpoint+0x6c>
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	009b      	lsls	r3, r3, #2
 801108c:	4413      	add	r3, r2
 801108e:	881b      	ldrh	r3, [r3, #0]
 8011090:	b29b      	uxth	r3, r3
 8011092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801109a:	817b      	strh	r3, [r7, #10]
 801109c:	687a      	ldr	r2, [r7, #4]
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	009b      	lsls	r3, r3, #2
 80110a4:	441a      	add	r2, r3
 80110a6:	897b      	ldrh	r3, [r7, #10]
 80110a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80110b8:	b29b      	uxth	r3, r3
 80110ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80110bc:	687a      	ldr	r2, [r7, #4]
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	781b      	ldrb	r3, [r3, #0]
 80110c2:	009b      	lsls	r3, r3, #2
 80110c4:	4413      	add	r3, r2
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110d2:	813b      	strh	r3, [r7, #8]
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	009b      	lsls	r3, r3, #2
 80110dc:	441a      	add	r2, r3
 80110de:	893b      	ldrh	r3, [r7, #8]
 80110e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	8013      	strh	r3, [r2, #0]
 80110f4:	e192      	b.n	801141c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	683b      	ldr	r3, [r7, #0]
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	009b      	lsls	r3, r3, #2
 80110fe:	4413      	add	r3, r2
 8011100:	881b      	ldrh	r3, [r3, #0]
 8011102:	827b      	strh	r3, [r7, #18]
 8011104:	8a7b      	ldrh	r3, [r7, #18]
 8011106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801110a:	2b00      	cmp	r3, #0
 801110c:	d01b      	beq.n	8011146 <USB_DeactivateEndpoint+0xf6>
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	009b      	lsls	r3, r3, #2
 8011116:	4413      	add	r3, r2
 8011118:	881b      	ldrh	r3, [r3, #0]
 801111a:	b29b      	uxth	r3, r3
 801111c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011120:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011124:	823b      	strh	r3, [r7, #16]
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	009b      	lsls	r3, r3, #2
 801112e:	441a      	add	r2, r3
 8011130:	8a3b      	ldrh	r3, [r7, #16]
 8011132:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011136:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801113a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801113e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011142:	b29b      	uxth	r3, r3
 8011144:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011146:	687a      	ldr	r2, [r7, #4]
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	781b      	ldrb	r3, [r3, #0]
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4413      	add	r3, r2
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	b29b      	uxth	r3, r3
 8011154:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801115c:	81fb      	strh	r3, [r7, #14]
 801115e:	687a      	ldr	r2, [r7, #4]
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	441a      	add	r2, r3
 8011168:	89fb      	ldrh	r3, [r7, #14]
 801116a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801116e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801117a:	b29b      	uxth	r3, r3
 801117c:	8013      	strh	r3, [r2, #0]
 801117e:	e14d      	b.n	801141c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	785b      	ldrb	r3, [r3, #1]
 8011184:	2b00      	cmp	r3, #0
 8011186:	f040 80a5 	bne.w	80112d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	881b      	ldrh	r3, [r3, #0]
 8011196:	843b      	strh	r3, [r7, #32]
 8011198:	8c3b      	ldrh	r3, [r7, #32]
 801119a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d01b      	beq.n	80111da <USB_DeactivateEndpoint+0x18a>
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	683b      	ldr	r3, [r7, #0]
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	009b      	lsls	r3, r3, #2
 80111aa:	4413      	add	r3, r2
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80111b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111b8:	83fb      	strh	r3, [r7, #30]
 80111ba:	687a      	ldr	r2, [r7, #4]
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	441a      	add	r2, r3
 80111c4:	8bfb      	ldrh	r3, [r7, #30]
 80111c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80111ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80111ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80111d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	781b      	ldrb	r3, [r3, #0]
 80111e0:	009b      	lsls	r3, r3, #2
 80111e2:	4413      	add	r3, r2
 80111e4:	881b      	ldrh	r3, [r3, #0]
 80111e6:	83bb      	strh	r3, [r7, #28]
 80111e8:	8bbb      	ldrh	r3, [r7, #28]
 80111ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d01b      	beq.n	801122a <USB_DeactivateEndpoint+0x1da>
 80111f2:	687a      	ldr	r2, [r7, #4]
 80111f4:	683b      	ldr	r3, [r7, #0]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	009b      	lsls	r3, r3, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	881b      	ldrh	r3, [r3, #0]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011204:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011208:	837b      	strh	r3, [r7, #26]
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	781b      	ldrb	r3, [r3, #0]
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	441a      	add	r2, r3
 8011214:	8b7b      	ldrh	r3, [r7, #26]
 8011216:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801121a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801121e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011222:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011226:	b29b      	uxth	r3, r3
 8011228:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801122a:	687a      	ldr	r2, [r7, #4]
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4413      	add	r3, r2
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	b29b      	uxth	r3, r3
 8011238:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801123c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011240:	833b      	strh	r3, [r7, #24]
 8011242:	687a      	ldr	r2, [r7, #4]
 8011244:	683b      	ldr	r3, [r7, #0]
 8011246:	781b      	ldrb	r3, [r3, #0]
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	441a      	add	r2, r3
 801124c:	8b3b      	ldrh	r3, [r7, #24]
 801124e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011252:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801125a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801125e:	b29b      	uxth	r3, r3
 8011260:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	009b      	lsls	r3, r3, #2
 801126a:	4413      	add	r3, r2
 801126c:	881b      	ldrh	r3, [r3, #0]
 801126e:	b29b      	uxth	r3, r3
 8011270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011278:	82fb      	strh	r3, [r7, #22]
 801127a:	687a      	ldr	r2, [r7, #4]
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	009b      	lsls	r3, r3, #2
 8011282:	441a      	add	r2, r3
 8011284:	8afb      	ldrh	r3, [r7, #22]
 8011286:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801128a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801128e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011296:	b29b      	uxth	r3, r3
 8011298:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	683b      	ldr	r3, [r7, #0]
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	009b      	lsls	r3, r3, #2
 80112a2:	4413      	add	r3, r2
 80112a4:	881b      	ldrh	r3, [r3, #0]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80112ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80112b0:	82bb      	strh	r3, [r7, #20]
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	781b      	ldrb	r3, [r3, #0]
 80112b8:	009b      	lsls	r3, r3, #2
 80112ba:	441a      	add	r2, r3
 80112bc:	8abb      	ldrh	r3, [r7, #20]
 80112be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	8013      	strh	r3, [r2, #0]
 80112d2:	e0a3      	b.n	801141c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	683b      	ldr	r3, [r7, #0]
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	881b      	ldrh	r3, [r3, #0]
 80112e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80112e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80112e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d01b      	beq.n	8011324 <USB_DeactivateEndpoint+0x2d4>
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4413      	add	r3, r2
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80112fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011302:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011304:	687a      	ldr	r2, [r7, #4]
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	441a      	add	r2, r3
 801130e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011318:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801131c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011320:	b29b      	uxth	r3, r3
 8011322:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4413      	add	r3, r2
 801132e:	881b      	ldrh	r3, [r3, #0]
 8011330:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011332:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011338:	2b00      	cmp	r3, #0
 801133a:	d01b      	beq.n	8011374 <USB_DeactivateEndpoint+0x324>
 801133c:	687a      	ldr	r2, [r7, #4]
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	4413      	add	r3, r2
 8011346:	881b      	ldrh	r3, [r3, #0]
 8011348:	b29b      	uxth	r3, r3
 801134a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801134e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011352:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	009b      	lsls	r3, r3, #2
 801135c:	441a      	add	r2, r3
 801135e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801136c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011370:	b29b      	uxth	r3, r3
 8011372:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	4413      	add	r3, r2
 801137e:	881b      	ldrh	r3, [r3, #0]
 8011380:	b29b      	uxth	r3, r3
 8011382:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801138a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	441a      	add	r2, r3
 8011396:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011398:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801139c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80113a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	4413      	add	r3, r2
 80113b6:	881b      	ldrh	r3, [r3, #0]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	009b      	lsls	r3, r3, #2
 80113cc:	441a      	add	r2, r3
 80113ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80113d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4413      	add	r3, r2
 80113ee:	881b      	ldrh	r3, [r3, #0]
 80113f0:	b29b      	uxth	r3, r3
 80113f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80113f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80113fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80113fc:	687a      	ldr	r2, [r7, #4]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	009b      	lsls	r3, r3, #2
 8011404:	441a      	add	r2, r3
 8011406:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011408:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801140c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011418:	b29b      	uxth	r3, r3
 801141a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 801141c:	2300      	movs	r3, #0
}
 801141e:	4618      	mov	r0, r3
 8011420:	3734      	adds	r7, #52	@ 0x34
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr

0801142a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b0ac      	sub	sp, #176	@ 0xb0
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	785b      	ldrb	r3, [r3, #1]
 8011438:	2b01      	cmp	r3, #1
 801143a:	f040 84ca 	bne.w	8011dd2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	699a      	ldr	r2, [r3, #24]
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	691b      	ldr	r3, [r3, #16]
 8011446:	429a      	cmp	r2, r3
 8011448:	d904      	bls.n	8011454 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011452:	e003      	b.n	801145c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011454:	683b      	ldr	r3, [r7, #0]
 8011456:	699b      	ldr	r3, [r3, #24]
 8011458:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	7b1b      	ldrb	r3, [r3, #12]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d122      	bne.n	80114aa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	6959      	ldr	r1, [r3, #20]
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	88da      	ldrh	r2, [r3, #6]
 801146c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011470:	b29b      	uxth	r3, r3
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 febd 	bl	80121f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	613b      	str	r3, [r7, #16]
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011482:	b29b      	uxth	r3, r3
 8011484:	461a      	mov	r2, r3
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	4413      	add	r3, r2
 801148a:	613b      	str	r3, [r7, #16]
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	781b      	ldrb	r3, [r3, #0]
 8011490:	00da      	lsls	r2, r3, #3
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	4413      	add	r3, r2
 8011496:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801149a:	60fb      	str	r3, [r7, #12]
 801149c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114a0:	b29a      	uxth	r2, r3
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	801a      	strh	r2, [r3, #0]
 80114a6:	f000 bc6f 	b.w	8011d88 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	78db      	ldrb	r3, [r3, #3]
 80114ae:	2b02      	cmp	r3, #2
 80114b0:	f040 831e 	bne.w	8011af0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	6a1a      	ldr	r2, [r3, #32]
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	691b      	ldr	r3, [r3, #16]
 80114bc:	429a      	cmp	r2, r3
 80114be:	f240 82cf 	bls.w	8011a60 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	4413      	add	r3, r2
 80114cc:	881b      	ldrh	r3, [r3, #0]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80114d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114d8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	781b      	ldrb	r3, [r3, #0]
 80114e2:	009b      	lsls	r3, r3, #2
 80114e4:	441a      	add	r2, r3
 80114e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80114ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80114f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	6a1a      	ldr	r2, [r3, #32]
 8011502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011506:	1ad2      	subs	r2, r2, r3
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	4413      	add	r3, r2
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	b29b      	uxth	r3, r3
 801151a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801151e:	2b00      	cmp	r3, #0
 8011520:	f000 814f 	beq.w	80117c2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	633b      	str	r3, [r7, #48]	@ 0x30
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	785b      	ldrb	r3, [r3, #1]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d16b      	bne.n	8011608 <USB_EPStartXfer+0x1de>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801153a:	b29b      	uxth	r3, r3
 801153c:	461a      	mov	r2, r3
 801153e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011540:	4413      	add	r3, r2
 8011542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	00da      	lsls	r2, r3, #3
 801154a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801154c:	4413      	add	r3, r2
 801154e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011552:	627b      	str	r3, [r7, #36]	@ 0x24
 8011554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011556:	881b      	ldrh	r3, [r3, #0]
 8011558:	b29b      	uxth	r3, r3
 801155a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801155e:	b29a      	uxth	r2, r3
 8011560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011562:	801a      	strh	r2, [r3, #0]
 8011564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011568:	2b00      	cmp	r3, #0
 801156a:	d10a      	bne.n	8011582 <USB_EPStartXfer+0x158>
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	881b      	ldrh	r3, [r3, #0]
 8011570:	b29b      	uxth	r3, r3
 8011572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801157a:	b29a      	uxth	r2, r3
 801157c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801157e:	801a      	strh	r2, [r3, #0]
 8011580:	e05b      	b.n	801163a <USB_EPStartXfer+0x210>
 8011582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011586:	2b3e      	cmp	r3, #62	@ 0x3e
 8011588:	d81c      	bhi.n	80115c4 <USB_EPStartXfer+0x19a>
 801158a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801158e:	085b      	lsrs	r3, r3, #1
 8011590:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011598:	f003 0301 	and.w	r3, r3, #1
 801159c:	2b00      	cmp	r3, #0
 801159e:	d004      	beq.n	80115aa <USB_EPStartXfer+0x180>
 80115a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80115a4:	3301      	adds	r3, #1
 80115a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80115aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ac:	881b      	ldrh	r3, [r3, #0]
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	029b      	lsls	r3, r3, #10
 80115b8:	b29b      	uxth	r3, r3
 80115ba:	4313      	orrs	r3, r2
 80115bc:	b29a      	uxth	r2, r3
 80115be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c0:	801a      	strh	r2, [r3, #0]
 80115c2:	e03a      	b.n	801163a <USB_EPStartXfer+0x210>
 80115c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115c8:	095b      	lsrs	r3, r3, #5
 80115ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80115ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115d2:	f003 031f 	and.w	r3, r3, #31
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d104      	bne.n	80115e4 <USB_EPStartXfer+0x1ba>
 80115da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80115de:	3b01      	subs	r3, #1
 80115e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80115e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	029b      	lsls	r3, r3, #10
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	4313      	orrs	r3, r2
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80115fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011600:	b29a      	uxth	r2, r3
 8011602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011604:	801a      	strh	r2, [r3, #0]
 8011606:	e018      	b.n	801163a <USB_EPStartXfer+0x210>
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	785b      	ldrb	r3, [r3, #1]
 801160c:	2b01      	cmp	r3, #1
 801160e:	d114      	bne.n	801163a <USB_EPStartXfer+0x210>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011616:	b29b      	uxth	r3, r3
 8011618:	461a      	mov	r2, r3
 801161a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801161c:	4413      	add	r3, r2
 801161e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	00da      	lsls	r2, r3, #3
 8011626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011628:	4413      	add	r3, r2
 801162a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011634:	b29a      	uxth	r2, r3
 8011636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011638:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	895b      	ldrh	r3, [r3, #10]
 801163e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	6959      	ldr	r1, [r3, #20]
 8011646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801164a:	b29b      	uxth	r3, r3
 801164c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f000 fdce 	bl	80121f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	695a      	ldr	r2, [r3, #20]
 801165a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801165e:	441a      	add	r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	6a1a      	ldr	r2, [r3, #32]
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	429a      	cmp	r2, r3
 801166e:	d907      	bls.n	8011680 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	6a1a      	ldr	r2, [r3, #32]
 8011674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011678:	1ad2      	subs	r2, r2, r3
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	621a      	str	r2, [r3, #32]
 801167e:	e006      	b.n	801168e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	6a1b      	ldr	r3, [r3, #32]
 8011684:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	2200      	movs	r2, #0
 801168c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	785b      	ldrb	r3, [r3, #1]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d16b      	bne.n	801176e <USB_EPStartXfer+0x344>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	61bb      	str	r3, [r7, #24]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	461a      	mov	r2, r3
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	4413      	add	r3, r2
 80116a8:	61bb      	str	r3, [r7, #24]
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	00da      	lsls	r2, r3, #3
 80116b0:	69bb      	ldr	r3, [r7, #24]
 80116b2:	4413      	add	r3, r2
 80116b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80116b8:	617b      	str	r3, [r7, #20]
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	b29b      	uxth	r3, r3
 80116c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	801a      	strh	r2, [r3, #0]
 80116ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d10a      	bne.n	80116e8 <USB_EPStartXfer+0x2be>
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	801a      	strh	r2, [r3, #0]
 80116e6:	e05d      	b.n	80117a4 <USB_EPStartXfer+0x37a>
 80116e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80116ee:	d81c      	bhi.n	801172a <USB_EPStartXfer+0x300>
 80116f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116f4:	085b      	lsrs	r3, r3, #1
 80116f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80116fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116fe:	f003 0301 	and.w	r3, r3, #1
 8011702:	2b00      	cmp	r3, #0
 8011704:	d004      	beq.n	8011710 <USB_EPStartXfer+0x2e6>
 8011706:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801170a:	3301      	adds	r3, #1
 801170c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	b29a      	uxth	r2, r3
 8011716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801171a:	b29b      	uxth	r3, r3
 801171c:	029b      	lsls	r3, r3, #10
 801171e:	b29b      	uxth	r3, r3
 8011720:	4313      	orrs	r3, r2
 8011722:	b29a      	uxth	r2, r3
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	801a      	strh	r2, [r3, #0]
 8011728:	e03c      	b.n	80117a4 <USB_EPStartXfer+0x37a>
 801172a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801172e:	095b      	lsrs	r3, r3, #5
 8011730:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011738:	f003 031f 	and.w	r3, r3, #31
 801173c:	2b00      	cmp	r3, #0
 801173e:	d104      	bne.n	801174a <USB_EPStartXfer+0x320>
 8011740:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011744:	3b01      	subs	r3, #1
 8011746:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011754:	b29b      	uxth	r3, r3
 8011756:	029b      	lsls	r3, r3, #10
 8011758:	b29b      	uxth	r3, r3
 801175a:	4313      	orrs	r3, r2
 801175c:	b29b      	uxth	r3, r3
 801175e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011766:	b29a      	uxth	r2, r3
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	801a      	strh	r2, [r3, #0]
 801176c:	e01a      	b.n	80117a4 <USB_EPStartXfer+0x37a>
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	785b      	ldrb	r3, [r3, #1]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d116      	bne.n	80117a4 <USB_EPStartXfer+0x37a>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	623b      	str	r3, [r7, #32]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011780:	b29b      	uxth	r3, r3
 8011782:	461a      	mov	r2, r3
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	4413      	add	r3, r2
 8011788:	623b      	str	r3, [r7, #32]
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	00da      	lsls	r2, r3, #3
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	4413      	add	r3, r2
 8011794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011798:	61fb      	str	r3, [r7, #28]
 801179a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801179e:	b29a      	uxth	r2, r3
 80117a0:	69fb      	ldr	r3, [r7, #28]
 80117a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	891b      	ldrh	r3, [r3, #8]
 80117a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	6959      	ldr	r1, [r3, #20]
 80117b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f000 fd19 	bl	80121f2 <USB_WritePMA>
 80117c0:	e2e2      	b.n	8011d88 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	785b      	ldrb	r3, [r3, #1]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d16b      	bne.n	80118a2 <USB_EPStartXfer+0x478>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	461a      	mov	r2, r3
 80117d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117da:	4413      	add	r3, r2
 80117dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	781b      	ldrb	r3, [r3, #0]
 80117e2:	00da      	lsls	r2, r3, #3
 80117e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117e6:	4413      	add	r3, r2
 80117e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80117ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80117ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117f8:	b29a      	uxth	r2, r3
 80117fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117fc:	801a      	strh	r2, [r3, #0]
 80117fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011802:	2b00      	cmp	r3, #0
 8011804:	d10a      	bne.n	801181c <USB_EPStartXfer+0x3f2>
 8011806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	b29b      	uxth	r3, r3
 801180c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011814:	b29a      	uxth	r2, r3
 8011816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011818:	801a      	strh	r2, [r3, #0]
 801181a:	e05d      	b.n	80118d8 <USB_EPStartXfer+0x4ae>
 801181c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011820:	2b3e      	cmp	r3, #62	@ 0x3e
 8011822:	d81c      	bhi.n	801185e <USB_EPStartXfer+0x434>
 8011824:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011828:	085b      	lsrs	r3, r3, #1
 801182a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801182e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011832:	f003 0301 	and.w	r3, r3, #1
 8011836:	2b00      	cmp	r3, #0
 8011838:	d004      	beq.n	8011844 <USB_EPStartXfer+0x41a>
 801183a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801183e:	3301      	adds	r3, #1
 8011840:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	b29a      	uxth	r2, r3
 801184a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801184e:	b29b      	uxth	r3, r3
 8011850:	029b      	lsls	r3, r3, #10
 8011852:	b29b      	uxth	r3, r3
 8011854:	4313      	orrs	r3, r2
 8011856:	b29a      	uxth	r2, r3
 8011858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801185a:	801a      	strh	r2, [r3, #0]
 801185c:	e03c      	b.n	80118d8 <USB_EPStartXfer+0x4ae>
 801185e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011862:	095b      	lsrs	r3, r3, #5
 8011864:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801186c:	f003 031f 	and.w	r3, r3, #31
 8011870:	2b00      	cmp	r3, #0
 8011872:	d104      	bne.n	801187e <USB_EPStartXfer+0x454>
 8011874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011878:	3b01      	subs	r3, #1
 801187a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801187e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	b29a      	uxth	r2, r3
 8011884:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011888:	b29b      	uxth	r3, r3
 801188a:	029b      	lsls	r3, r3, #10
 801188c:	b29b      	uxth	r3, r3
 801188e:	4313      	orrs	r3, r2
 8011890:	b29b      	uxth	r3, r3
 8011892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801189a:	b29a      	uxth	r2, r3
 801189c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801189e:	801a      	strh	r2, [r3, #0]
 80118a0:	e01a      	b.n	80118d8 <USB_EPStartXfer+0x4ae>
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	785b      	ldrb	r3, [r3, #1]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d116      	bne.n	80118d8 <USB_EPStartXfer+0x4ae>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	461a      	mov	r2, r3
 80118b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118ba:	4413      	add	r3, r2
 80118bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	00da      	lsls	r2, r3, #3
 80118c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118c6:	4413      	add	r3, r2
 80118c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80118cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	891b      	ldrh	r3, [r3, #8]
 80118dc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	6959      	ldr	r1, [r3, #20]
 80118e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118e8:	b29b      	uxth	r3, r3
 80118ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f000 fc7f 	bl	80121f2 <USB_WritePMA>
            ep->xfer_buff += len;
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	695a      	ldr	r2, [r3, #20]
 80118f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118fc:	441a      	add	r2, r3
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	6a1a      	ldr	r2, [r3, #32]
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	691b      	ldr	r3, [r3, #16]
 801190a:	429a      	cmp	r2, r3
 801190c:	d907      	bls.n	801191e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	6a1a      	ldr	r2, [r3, #32]
 8011912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011916:	1ad2      	subs	r2, r2, r3
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	621a      	str	r2, [r3, #32]
 801191c:	e006      	b.n	801192c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	6a1b      	ldr	r3, [r3, #32]
 8011922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8011926:	683b      	ldr	r3, [r7, #0]
 8011928:	2200      	movs	r2, #0
 801192a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	785b      	ldrb	r3, [r3, #1]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d16b      	bne.n	8011a10 <USB_EPStartXfer+0x5e6>
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011942:	b29b      	uxth	r3, r3
 8011944:	461a      	mov	r2, r3
 8011946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011948:	4413      	add	r3, r2
 801194a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	781b      	ldrb	r3, [r3, #0]
 8011950:	00da      	lsls	r2, r3, #3
 8011952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011954:	4413      	add	r3, r2
 8011956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801195a:	637b      	str	r3, [r7, #52]	@ 0x34
 801195c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801195e:	881b      	ldrh	r3, [r3, #0]
 8011960:	b29b      	uxth	r3, r3
 8011962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011966:	b29a      	uxth	r2, r3
 8011968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801196a:	801a      	strh	r2, [r3, #0]
 801196c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011970:	2b00      	cmp	r3, #0
 8011972:	d10a      	bne.n	801198a <USB_EPStartXfer+0x560>
 8011974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011976:	881b      	ldrh	r3, [r3, #0]
 8011978:	b29b      	uxth	r3, r3
 801197a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801197e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011982:	b29a      	uxth	r2, r3
 8011984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011986:	801a      	strh	r2, [r3, #0]
 8011988:	e05b      	b.n	8011a42 <USB_EPStartXfer+0x618>
 801198a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801198e:	2b3e      	cmp	r3, #62	@ 0x3e
 8011990:	d81c      	bhi.n	80119cc <USB_EPStartXfer+0x5a2>
 8011992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011996:	085b      	lsrs	r3, r3, #1
 8011998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801199c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119a0:	f003 0301 	and.w	r3, r3, #1
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d004      	beq.n	80119b2 <USB_EPStartXfer+0x588>
 80119a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80119ac:	3301      	adds	r3, #1
 80119ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	b29a      	uxth	r2, r3
 80119b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80119bc:	b29b      	uxth	r3, r3
 80119be:	029b      	lsls	r3, r3, #10
 80119c0:	b29b      	uxth	r3, r3
 80119c2:	4313      	orrs	r3, r2
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119c8:	801a      	strh	r2, [r3, #0]
 80119ca:	e03a      	b.n	8011a42 <USB_EPStartXfer+0x618>
 80119cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119d0:	095b      	lsrs	r3, r3, #5
 80119d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119da:	f003 031f 	and.w	r3, r3, #31
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d104      	bne.n	80119ec <USB_EPStartXfer+0x5c2>
 80119e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80119e6:	3b01      	subs	r3, #1
 80119e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80119ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119ee:	881b      	ldrh	r3, [r3, #0]
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	029b      	lsls	r3, r3, #10
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	4313      	orrs	r3, r2
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a08:	b29a      	uxth	r2, r3
 8011a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a0c:	801a      	strh	r2, [r3, #0]
 8011a0e:	e018      	b.n	8011a42 <USB_EPStartXfer+0x618>
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	785b      	ldrb	r3, [r3, #1]
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	d114      	bne.n	8011a42 <USB_EPStartXfer+0x618>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	461a      	mov	r2, r3
 8011a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a24:	4413      	add	r3, r2
 8011a26:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	00da      	lsls	r2, r3, #3
 8011a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a30:	4413      	add	r3, r2
 8011a32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011a38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	895b      	ldrh	r3, [r3, #10]
 8011a46:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	6959      	ldr	r1, [r3, #20]
 8011a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fbca 	bl	80121f2 <USB_WritePMA>
 8011a5e:	e193      	b.n	8011d88 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	781b      	ldrb	r3, [r3, #0]
 8011a6e:	009b      	lsls	r3, r3, #2
 8011a70:	4413      	add	r3, r2
 8011a72:	881b      	ldrh	r3, [r3, #0]
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a7e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	781b      	ldrb	r3, [r3, #0]
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	441a      	add	r2, r3
 8011a8c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011a90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	461a      	mov	r2, r3
 8011ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ab4:	4413      	add	r3, r2
 8011ab6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ab8:	683b      	ldr	r3, [r7, #0]
 8011aba:	781b      	ldrb	r3, [r3, #0]
 8011abc:	00da      	lsls	r2, r3, #3
 8011abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ac0:	4413      	add	r3, r2
 8011ac2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ad0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	891b      	ldrh	r3, [r3, #8]
 8011ad6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	6959      	ldr	r1, [r3, #20]
 8011ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011ae8:	6878      	ldr	r0, [r7, #4]
 8011aea:	f000 fb82 	bl	80121f2 <USB_WritePMA>
 8011aee:	e14b      	b.n	8011d88 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	6a1a      	ldr	r2, [r3, #32]
 8011af4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011af8:	1ad2      	subs	r2, r2, r3
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	f000 809a 	beq.w	8011c4a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	673b      	str	r3, [r7, #112]	@ 0x70
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	785b      	ldrb	r3, [r3, #1]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d16b      	bne.n	8011bfa <USB_EPStartXfer+0x7d0>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011b2c:	b29b      	uxth	r3, r3
 8011b2e:	461a      	mov	r2, r3
 8011b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b32:	4413      	add	r3, r2
 8011b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	00da      	lsls	r2, r3, #3
 8011b3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b3e:	4413      	add	r3, r2
 8011b40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8011b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b48:	881b      	ldrh	r3, [r3, #0]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b54:	801a      	strh	r2, [r3, #0]
 8011b56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d10a      	bne.n	8011b74 <USB_EPStartXfer+0x74a>
 8011b5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b60:	881b      	ldrh	r3, [r3, #0]
 8011b62:	b29b      	uxth	r3, r3
 8011b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b70:	801a      	strh	r2, [r3, #0]
 8011b72:	e05b      	b.n	8011c2c <USB_EPStartXfer+0x802>
 8011b74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b78:	2b3e      	cmp	r3, #62	@ 0x3e
 8011b7a:	d81c      	bhi.n	8011bb6 <USB_EPStartXfer+0x78c>
 8011b7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b80:	085b      	lsrs	r3, r3, #1
 8011b82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011b86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b8a:	f003 0301 	and.w	r3, r3, #1
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d004      	beq.n	8011b9c <USB_EPStartXfer+0x772>
 8011b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011b96:	3301      	adds	r3, #1
 8011b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011b9e:	881b      	ldrh	r3, [r3, #0]
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	029b      	lsls	r3, r3, #10
 8011baa:	b29b      	uxth	r3, r3
 8011bac:	4313      	orrs	r3, r2
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bb2:	801a      	strh	r2, [r3, #0]
 8011bb4:	e03a      	b.n	8011c2c <USB_EPStartXfer+0x802>
 8011bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011bba:	095b      	lsrs	r3, r3, #5
 8011bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011bc4:	f003 031f 	and.w	r3, r3, #31
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d104      	bne.n	8011bd6 <USB_EPStartXfer+0x7ac>
 8011bcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011bd0:	3b01      	subs	r3, #1
 8011bd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011bd6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	b29a      	uxth	r2, r3
 8011bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	029b      	lsls	r3, r3, #10
 8011be4:	b29b      	uxth	r3, r3
 8011be6:	4313      	orrs	r3, r2
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011bf6:	801a      	strh	r2, [r3, #0]
 8011bf8:	e018      	b.n	8011c2c <USB_EPStartXfer+0x802>
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	785b      	ldrb	r3, [r3, #1]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d114      	bne.n	8011c2c <USB_EPStartXfer+0x802>
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	461a      	mov	r2, r3
 8011c0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c0e:	4413      	add	r3, r2
 8011c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	00da      	lsls	r2, r3, #3
 8011c18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011c20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	895b      	ldrh	r3, [r3, #10]
 8011c30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	6959      	ldr	r1, [r3, #20]
 8011c38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f000 fad5 	bl	80121f2 <USB_WritePMA>
 8011c48:	e09e      	b.n	8011d88 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	785b      	ldrb	r3, [r3, #1]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d16b      	bne.n	8011d2a <USB_EPStartXfer+0x900>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	461a      	mov	r2, r3
 8011c60:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011c62:	4413      	add	r3, r2
 8011c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	00da      	lsls	r2, r3, #3
 8011c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011c6e:	4413      	add	r3, r2
 8011c70:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c78:	881b      	ldrh	r3, [r3, #0]
 8011c7a:	b29b      	uxth	r3, r3
 8011c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c80:	b29a      	uxth	r2, r3
 8011c82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c84:	801a      	strh	r2, [r3, #0]
 8011c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d10a      	bne.n	8011ca4 <USB_EPStartXfer+0x87a>
 8011c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c90:	881b      	ldrh	r3, [r3, #0]
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ca0:	801a      	strh	r2, [r3, #0]
 8011ca2:	e063      	b.n	8011d6c <USB_EPStartXfer+0x942>
 8011ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ca8:	2b3e      	cmp	r3, #62	@ 0x3e
 8011caa:	d81c      	bhi.n	8011ce6 <USB_EPStartXfer+0x8bc>
 8011cac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cb0:	085b      	lsrs	r3, r3, #1
 8011cb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011cb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cba:	f003 0301 	and.w	r3, r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d004      	beq.n	8011ccc <USB_EPStartXfer+0x8a2>
 8011cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ccc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011cce:	881b      	ldrh	r3, [r3, #0]
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	029b      	lsls	r3, r3, #10
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011ce2:	801a      	strh	r2, [r3, #0]
 8011ce4:	e042      	b.n	8011d6c <USB_EPStartXfer+0x942>
 8011ce6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cea:	095b      	lsrs	r3, r3, #5
 8011cec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cf4:	f003 031f 	and.w	r3, r3, #31
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d104      	bne.n	8011d06 <USB_EPStartXfer+0x8dc>
 8011cfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011d00:	3b01      	subs	r3, #1
 8011d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011d06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d08:	881b      	ldrh	r3, [r3, #0]
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011d10:	b29b      	uxth	r3, r3
 8011d12:	029b      	lsls	r3, r3, #10
 8011d14:	b29b      	uxth	r3, r3
 8011d16:	4313      	orrs	r3, r2
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011d26:	801a      	strh	r2, [r3, #0]
 8011d28:	e020      	b.n	8011d6c <USB_EPStartXfer+0x942>
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	785b      	ldrb	r3, [r3, #1]
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d11c      	bne.n	8011d6c <USB_EPStartXfer+0x942>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	461a      	mov	r2, r3
 8011d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011d46:	4413      	add	r3, r2
 8011d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	00da      	lsls	r2, r3, #3
 8011d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011d56:	4413      	add	r3, r2
 8011d58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011d5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011d60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011d6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	891b      	ldrh	r3, [r3, #8]
 8011d70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	6959      	ldr	r1, [r3, #20]
 8011d78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011d7c:	b29b      	uxth	r3, r3
 8011d7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 fa35 	bl	80121f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	009b      	lsls	r3, r3, #2
 8011d90:	4413      	add	r3, r2
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	b29b      	uxth	r3, r3
 8011d96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d9e:	817b      	strh	r3, [r7, #10]
 8011da0:	897b      	ldrh	r3, [r7, #10]
 8011da2:	f083 0310 	eor.w	r3, r3, #16
 8011da6:	817b      	strh	r3, [r7, #10]
 8011da8:	897b      	ldrh	r3, [r7, #10]
 8011daa:	f083 0320 	eor.w	r3, r3, #32
 8011dae:	817b      	strh	r3, [r7, #10]
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	009b      	lsls	r3, r3, #2
 8011db8:	441a      	add	r2, r3
 8011dba:	897b      	ldrh	r3, [r7, #10]
 8011dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	8013      	strh	r3, [r2, #0]
 8011dd0:	e0d5      	b.n	8011f7e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	7b1b      	ldrb	r3, [r3, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d156      	bne.n	8011e88 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	699b      	ldr	r3, [r3, #24]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d122      	bne.n	8011e28 <USB_EPStartXfer+0x9fe>
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	78db      	ldrb	r3, [r3, #3]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d11e      	bne.n	8011e28 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	4413      	add	r3, r2
 8011df4:	881b      	ldrh	r3, [r3, #0]
 8011df6:	b29b      	uxth	r3, r3
 8011df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e00:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	441a      	add	r2, r3
 8011e0e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e1a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	8013      	strh	r3, [r2, #0]
 8011e26:	e01d      	b.n	8011e64 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	781b      	ldrb	r3, [r3, #0]
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4413      	add	r3, r2
 8011e32:	881b      	ldrh	r3, [r3, #0]
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e3e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	441a      	add	r2, r3
 8011e4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011e50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	699a      	ldr	r2, [r3, #24]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	691b      	ldr	r3, [r3, #16]
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d907      	bls.n	8011e80 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	699a      	ldr	r2, [r3, #24]
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	691b      	ldr	r3, [r3, #16]
 8011e78:	1ad2      	subs	r2, r2, r3
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	619a      	str	r2, [r3, #24]
 8011e7e:	e054      	b.n	8011f2a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2200      	movs	r2, #0
 8011e84:	619a      	str	r2, [r3, #24]
 8011e86:	e050      	b.n	8011f2a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	78db      	ldrb	r3, [r3, #3]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d142      	bne.n	8011f16 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	69db      	ldr	r3, [r3, #28]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d048      	beq.n	8011f2a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	781b      	ldrb	r3, [r3, #0]
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	4413      	add	r3, r2
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011ea8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011eac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d005      	beq.n	8011ec0 <USB_EPStartXfer+0xa96>
 8011eb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d10b      	bne.n	8011ed8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011ec0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d12e      	bne.n	8011f2a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011ecc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d128      	bne.n	8011f2a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011ed8:	687a      	ldr	r2, [r7, #4]
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	009b      	lsls	r3, r3, #2
 8011ee0:	4413      	add	r3, r2
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011eee:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8011ef2:	687a      	ldr	r2, [r7, #4]
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	009b      	lsls	r3, r3, #2
 8011efa:	441a      	add	r2, r3
 8011efc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	8013      	strh	r3, [r2, #0]
 8011f14:	e009      	b.n	8011f2a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	78db      	ldrb	r3, [r3, #3]
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d103      	bne.n	8011f26 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2200      	movs	r2, #0
 8011f22:	619a      	str	r2, [r3, #24]
 8011f24:	e001      	b.n	8011f2a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011f26:	2301      	movs	r3, #1
 8011f28:	e02a      	b.n	8011f80 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	009b      	lsls	r3, r3, #2
 8011f32:	4413      	add	r3, r2
 8011f34:	881b      	ldrh	r3, [r3, #0]
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f40:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011f44:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011f48:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011f4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011f50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011f54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011f58:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011f5c:	687a      	ldr	r2, [r7, #4]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	441a      	add	r2, r3
 8011f66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f7a:	b29b      	uxth	r3, r3
 8011f7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011f7e:	2300      	movs	r3, #0
}
 8011f80:	4618      	mov	r0, r3
 8011f82:	37b0      	adds	r7, #176	@ 0xb0
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}

08011f88 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	785b      	ldrb	r3, [r3, #1]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d020      	beq.n	8011fdc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	009b      	lsls	r3, r3, #2
 8011fa2:	4413      	add	r3, r2
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011fac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011fb0:	81bb      	strh	r3, [r7, #12]
 8011fb2:	89bb      	ldrh	r3, [r7, #12]
 8011fb4:	f083 0310 	eor.w	r3, r3, #16
 8011fb8:	81bb      	strh	r3, [r7, #12]
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	441a      	add	r2, r3
 8011fc4:	89bb      	ldrh	r3, [r7, #12]
 8011fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	8013      	strh	r3, [r2, #0]
 8011fda:	e01f      	b.n	801201c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011fdc:	687a      	ldr	r2, [r7, #4]
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	4413      	add	r3, r2
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ff2:	81fb      	strh	r3, [r7, #14]
 8011ff4:	89fb      	ldrh	r3, [r7, #14]
 8011ff6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011ffa:	81fb      	strh	r3, [r7, #14]
 8011ffc:	687a      	ldr	r2, [r7, #4]
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	781b      	ldrb	r3, [r3, #0]
 8012002:	009b      	lsls	r3, r3, #2
 8012004:	441a      	add	r2, r3
 8012006:	89fb      	ldrh	r3, [r7, #14]
 8012008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801200c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012018:	b29b      	uxth	r3, r3
 801201a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801201c:	2300      	movs	r3, #0
}
 801201e:	4618      	mov	r0, r3
 8012020:	3714      	adds	r7, #20
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr

0801202a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801202a:	b480      	push	{r7}
 801202c:	b087      	sub	sp, #28
 801202e:	af00      	add	r7, sp, #0
 8012030:	6078      	str	r0, [r7, #4]
 8012032:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	785b      	ldrb	r3, [r3, #1]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d04c      	beq.n	80120d6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	009b      	lsls	r3, r3, #2
 8012044:	4413      	add	r3, r2
 8012046:	881b      	ldrh	r3, [r3, #0]
 8012048:	823b      	strh	r3, [r7, #16]
 801204a:	8a3b      	ldrh	r3, [r7, #16]
 801204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012050:	2b00      	cmp	r3, #0
 8012052:	d01b      	beq.n	801208c <USB_EPClearStall+0x62>
 8012054:	687a      	ldr	r2, [r7, #4]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4413      	add	r3, r2
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	b29b      	uxth	r3, r3
 8012062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801206a:	81fb      	strh	r3, [r7, #14]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	781b      	ldrb	r3, [r3, #0]
 8012072:	009b      	lsls	r3, r3, #2
 8012074:	441a      	add	r2, r3
 8012076:	89fb      	ldrh	r3, [r7, #14]
 8012078:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801207c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012080:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012084:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012088:	b29b      	uxth	r3, r3
 801208a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	78db      	ldrb	r3, [r3, #3]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d06c      	beq.n	801216e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	4413      	add	r3, r2
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80120a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80120aa:	81bb      	strh	r3, [r7, #12]
 80120ac:	89bb      	ldrh	r3, [r7, #12]
 80120ae:	f083 0320 	eor.w	r3, r3, #32
 80120b2:	81bb      	strh	r3, [r7, #12]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	441a      	add	r2, r3
 80120be:	89bb      	ldrh	r3, [r7, #12]
 80120c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80120c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80120c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80120cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120d0:	b29b      	uxth	r3, r3
 80120d2:	8013      	strh	r3, [r2, #0]
 80120d4:	e04b      	b.n	801216e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80120d6:	687a      	ldr	r2, [r7, #4]
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	009b      	lsls	r3, r3, #2
 80120de:	4413      	add	r3, r2
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	82fb      	strh	r3, [r7, #22]
 80120e4:	8afb      	ldrh	r3, [r7, #22]
 80120e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d01b      	beq.n	8012126 <USB_EPClearStall+0xfc>
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	4413      	add	r3, r2
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012100:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012104:	82bb      	strh	r3, [r7, #20]
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	781b      	ldrb	r3, [r3, #0]
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	441a      	add	r2, r3
 8012110:	8abb      	ldrh	r3, [r7, #20]
 8012112:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012116:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801211a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801211e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012122:	b29b      	uxth	r3, r3
 8012124:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	4413      	add	r3, r2
 8012130:	881b      	ldrh	r3, [r3, #0]
 8012132:	b29b      	uxth	r3, r3
 8012134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801213c:	827b      	strh	r3, [r7, #18]
 801213e:	8a7b      	ldrh	r3, [r7, #18]
 8012140:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012144:	827b      	strh	r3, [r7, #18]
 8012146:	8a7b      	ldrh	r3, [r7, #18]
 8012148:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 801214c:	827b      	strh	r3, [r7, #18]
 801214e:	687a      	ldr	r2, [r7, #4]
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	441a      	add	r2, r3
 8012158:	8a7b      	ldrh	r3, [r7, #18]
 801215a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801215e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801216a:	b29b      	uxth	r3, r3
 801216c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	371c      	adds	r7, #28
 8012174:	46bd      	mov	sp, r7
 8012176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217a:	4770      	bx	lr

0801217c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	460b      	mov	r3, r1
 8012186:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012188:	78fb      	ldrb	r3, [r7, #3]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d103      	bne.n	8012196 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2280      	movs	r2, #128	@ 0x80
 8012192:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012196:	2300      	movs	r3, #0
}
 8012198:	4618      	mov	r0, r3
 801219a:	370c      	adds	r7, #12
 801219c:	46bd      	mov	sp, r7
 801219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a2:	4770      	bx	lr

080121a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80121a4:	b480      	push	{r7}
 80121a6:	b083      	sub	sp, #12
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80121b2:	b29b      	uxth	r3, r3
 80121b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121bc:	b29a      	uxth	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80121c4:	2300      	movs	r3, #0
}
 80121c6:	4618      	mov	r0, r3
 80121c8:	370c      	adds	r7, #12
 80121ca:	46bd      	mov	sp, r7
 80121cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d0:	4770      	bx	lr

080121d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80121d2:	b480      	push	{r7}
 80121d4:	b085      	sub	sp, #20
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80121e4:	68fb      	ldr	r3, [r7, #12]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3714      	adds	r7, #20
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80121f2:	b480      	push	{r7}
 80121f4:	b08b      	sub	sp, #44	@ 0x2c
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	60f8      	str	r0, [r7, #12]
 80121fa:	60b9      	str	r1, [r7, #8]
 80121fc:	4611      	mov	r1, r2
 80121fe:	461a      	mov	r2, r3
 8012200:	460b      	mov	r3, r1
 8012202:	80fb      	strh	r3, [r7, #6]
 8012204:	4613      	mov	r3, r2
 8012206:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012208:	88bb      	ldrh	r3, [r7, #4]
 801220a:	3301      	adds	r3, #1
 801220c:	085b      	lsrs	r3, r3, #1
 801220e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012218:	88fa      	ldrh	r2, [r7, #6]
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	4413      	add	r3, r2
 801221e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012222:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012224:	69bb      	ldr	r3, [r7, #24]
 8012226:	627b      	str	r3, [r7, #36]	@ 0x24
 8012228:	e01b      	b.n	8012262 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	3301      	adds	r3, #1
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	021b      	lsls	r3, r3, #8
 8012238:	b21a      	sxth	r2, r3
 801223a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801223e:	4313      	orrs	r3, r2
 8012240:	b21b      	sxth	r3, r3
 8012242:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	8a7a      	ldrh	r2, [r7, #18]
 8012248:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 801224a:	6a3b      	ldr	r3, [r7, #32]
 801224c:	3302      	adds	r3, #2
 801224e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	3301      	adds	r3, #1
 8012254:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	3301      	adds	r3, #1
 801225a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801225e:	3b01      	subs	r3, #1
 8012260:	627b      	str	r3, [r7, #36]	@ 0x24
 8012262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012264:	2b00      	cmp	r3, #0
 8012266:	d1e0      	bne.n	801222a <USB_WritePMA+0x38>
  }
}
 8012268:	bf00      	nop
 801226a:	bf00      	nop
 801226c:	372c      	adds	r7, #44	@ 0x2c
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr

08012276 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012276:	b480      	push	{r7}
 8012278:	b08b      	sub	sp, #44	@ 0x2c
 801227a:	af00      	add	r7, sp, #0
 801227c:	60f8      	str	r0, [r7, #12]
 801227e:	60b9      	str	r1, [r7, #8]
 8012280:	4611      	mov	r1, r2
 8012282:	461a      	mov	r2, r3
 8012284:	460b      	mov	r3, r1
 8012286:	80fb      	strh	r3, [r7, #6]
 8012288:	4613      	mov	r3, r2
 801228a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801228c:	88bb      	ldrh	r3, [r7, #4]
 801228e:	085b      	lsrs	r3, r3, #1
 8012290:	b29b      	uxth	r3, r3
 8012292:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 801229c:	88fa      	ldrh	r2, [r7, #6]
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	4413      	add	r3, r2
 80122a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80122a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80122ac:	e018      	b.n	80122e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80122ae:	6a3b      	ldr	r3, [r7, #32]
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80122b6:	6a3b      	ldr	r3, [r7, #32]
 80122b8:	3302      	adds	r3, #2
 80122ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	b2da      	uxtb	r2, r3
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80122c4:	69fb      	ldr	r3, [r7, #28]
 80122c6:	3301      	adds	r3, #1
 80122c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	0a1b      	lsrs	r3, r3, #8
 80122ce:	b2da      	uxtb	r2, r3
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80122d4:	69fb      	ldr	r3, [r7, #28]
 80122d6:	3301      	adds	r3, #1
 80122d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80122da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122dc:	3b01      	subs	r3, #1
 80122de:	627b      	str	r3, [r7, #36]	@ 0x24
 80122e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e3      	bne.n	80122ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80122e6:	88bb      	ldrh	r3, [r7, #4]
 80122e8:	f003 0301 	and.w	r3, r3, #1
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d007      	beq.n	8012302 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80122f2:	6a3b      	ldr	r3, [r7, #32]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	b29b      	uxth	r3, r3
 80122f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	b2da      	uxtb	r2, r3
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	701a      	strb	r2, [r3, #0]
  }
}
 8012302:	bf00      	nop
 8012304:	372c      	adds	r7, #44	@ 0x2c
 8012306:	46bd      	mov	sp, r7
 8012308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230c:	4770      	bx	lr

0801230e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801230e:	b580      	push	{r7, lr}
 8012310:	b084      	sub	sp, #16
 8012312:	af00      	add	r7, sp, #0
 8012314:	6078      	str	r0, [r7, #4]
 8012316:	460b      	mov	r3, r1
 8012318:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801231a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 801231e:	f005 ff6b 	bl	80181f8 <USBD_static_malloc>
 8012322:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d105      	bne.n	8012336 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2200      	movs	r2, #0
 801232e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8012332:	2302      	movs	r3, #2
 8012334:	e066      	b.n	8012404 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	7c1b      	ldrb	r3, [r3, #16]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d119      	bne.n	801237a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801234a:	2202      	movs	r2, #2
 801234c:	2181      	movs	r1, #129	@ 0x81
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f005 fdf9 	bl	8017f46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	2201      	movs	r2, #1
 8012358:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801235a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801235e:	2202      	movs	r2, #2
 8012360:	2101      	movs	r1, #1
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f005 fdef 	bl	8017f46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2201      	movs	r2, #1
 801236c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2210      	movs	r2, #16
 8012374:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8012378:	e016      	b.n	80123a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801237a:	2340      	movs	r3, #64	@ 0x40
 801237c:	2202      	movs	r2, #2
 801237e:	2181      	movs	r1, #129	@ 0x81
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f005 fde0 	bl	8017f46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2201      	movs	r2, #1
 801238a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801238c:	2340      	movs	r3, #64	@ 0x40
 801238e:	2202      	movs	r2, #2
 8012390:	2101      	movs	r1, #1
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f005 fdd7 	bl	8017f46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2201      	movs	r2, #1
 801239c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2210      	movs	r2, #16
 80123a4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80123a8:	2308      	movs	r3, #8
 80123aa:	2203      	movs	r2, #3
 80123ac:	2182      	movs	r1, #130	@ 0x82
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f005 fdc9 	bl	8017f46 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2201      	movs	r2, #1
 80123b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2200      	movs	r2, #0
 80123ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2200      	movs	r2, #0
 80123d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	7c1b      	ldrb	r3, [r3, #16]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d109      	bne.n	80123f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80123e8:	2101      	movs	r1, #1
 80123ea:	6878      	ldr	r0, [r7, #4]
 80123ec:	f005 fe9a 	bl	8018124 <USBD_LL_PrepareReceive>
 80123f0:	e007      	b.n	8012402 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123f8:	2340      	movs	r3, #64	@ 0x40
 80123fa:	2101      	movs	r1, #1
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f005 fe91 	bl	8018124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012402:	2300      	movs	r3, #0
}
 8012404:	4618      	mov	r0, r3
 8012406:	3710      	adds	r7, #16
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	460b      	mov	r3, r1
 8012416:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012418:	2181      	movs	r1, #129	@ 0x81
 801241a:	6878      	ldr	r0, [r7, #4]
 801241c:	f005 fdb9 	bl	8017f92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2200      	movs	r2, #0
 8012424:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012426:	2101      	movs	r1, #1
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f005 fdb2 	bl	8017f92 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2200      	movs	r2, #0
 8012432:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012436:	2182      	movs	r1, #130	@ 0x82
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f005 fdaa 	bl	8017f92 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2200      	movs	r2, #0
 8012442:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00e      	beq.n	8012476 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 801245e:	685b      	ldr	r3, [r3, #4]
 8012460:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012468:	4618      	mov	r0, r3
 801246a:	f005 fed3 	bl	8018214 <USBD_static_free>
    pdev->pClassData = NULL;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2200      	movs	r2, #0
 8012472:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3708      	adds	r7, #8
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b086      	sub	sp, #24
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012490:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012492:	2300      	movs	r3, #0
 8012494:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012496:	2300      	movs	r3, #0
 8012498:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801249a:	2300      	movs	r3, #0
 801249c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d101      	bne.n	80124a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80124a4:	2303      	movs	r3, #3
 80124a6:	e0af      	b.n	8012608 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	781b      	ldrb	r3, [r3, #0]
 80124ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d03f      	beq.n	8012534 <USBD_CDC_Setup+0xb4>
 80124b4:	2b20      	cmp	r3, #32
 80124b6:	f040 809f 	bne.w	80125f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	88db      	ldrh	r3, [r3, #6]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d02e      	beq.n	8012520 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	781b      	ldrb	r3, [r3, #0]
 80124c6:	b25b      	sxtb	r3, r3
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	da16      	bge.n	80124fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80124d2:	689b      	ldr	r3, [r3, #8]
 80124d4:	683a      	ldr	r2, [r7, #0]
 80124d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80124d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124da:	683a      	ldr	r2, [r7, #0]
 80124dc:	88d2      	ldrh	r2, [r2, #6]
 80124de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	88db      	ldrh	r3, [r3, #6]
 80124e4:	2b07      	cmp	r3, #7
 80124e6:	bf28      	it	cs
 80124e8:	2307      	movcs	r3, #7
 80124ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	89fa      	ldrh	r2, [r7, #14]
 80124f0:	4619      	mov	r1, r3
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f001 facd 	bl	8013a92 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80124f8:	e085      	b.n	8012606 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	785a      	ldrb	r2, [r3, #1]
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	88db      	ldrh	r3, [r3, #6]
 8012508:	b2da      	uxtb	r2, r3
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012510:	6939      	ldr	r1, [r7, #16]
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	88db      	ldrh	r3, [r3, #6]
 8012516:	461a      	mov	r2, r3
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f001 fae6 	bl	8013aea <USBD_CtlPrepareRx>
      break;
 801251e:	e072      	b.n	8012606 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012526:	689b      	ldr	r3, [r3, #8]
 8012528:	683a      	ldr	r2, [r7, #0]
 801252a:	7850      	ldrb	r0, [r2, #1]
 801252c:	2200      	movs	r2, #0
 801252e:	6839      	ldr	r1, [r7, #0]
 8012530:	4798      	blx	r3
      break;
 8012532:	e068      	b.n	8012606 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	785b      	ldrb	r3, [r3, #1]
 8012538:	2b0b      	cmp	r3, #11
 801253a:	d852      	bhi.n	80125e2 <USBD_CDC_Setup+0x162>
 801253c:	a201      	add	r2, pc, #4	@ (adr r2, 8012544 <USBD_CDC_Setup+0xc4>)
 801253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012542:	bf00      	nop
 8012544:	08012575 	.word	0x08012575
 8012548:	080125f1 	.word	0x080125f1
 801254c:	080125e3 	.word	0x080125e3
 8012550:	080125e3 	.word	0x080125e3
 8012554:	080125e3 	.word	0x080125e3
 8012558:	080125e3 	.word	0x080125e3
 801255c:	080125e3 	.word	0x080125e3
 8012560:	080125e3 	.word	0x080125e3
 8012564:	080125e3 	.word	0x080125e3
 8012568:	080125e3 	.word	0x080125e3
 801256c:	0801259f 	.word	0x0801259f
 8012570:	080125c9 	.word	0x080125c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801257a:	b2db      	uxtb	r3, r3
 801257c:	2b03      	cmp	r3, #3
 801257e:	d107      	bne.n	8012590 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012580:	f107 030a 	add.w	r3, r7, #10
 8012584:	2202      	movs	r2, #2
 8012586:	4619      	mov	r1, r3
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	f001 fa82 	bl	8013a92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801258e:	e032      	b.n	80125f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012590:	6839      	ldr	r1, [r7, #0]
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f001 fa0c 	bl	80139b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012598:	2303      	movs	r3, #3
 801259a:	75fb      	strb	r3, [r7, #23]
          break;
 801259c:	e02b      	b.n	80125f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	2b03      	cmp	r3, #3
 80125a8:	d107      	bne.n	80125ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80125aa:	f107 030d 	add.w	r3, r7, #13
 80125ae:	2201      	movs	r2, #1
 80125b0:	4619      	mov	r1, r3
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f001 fa6d 	bl	8013a92 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80125b8:	e01d      	b.n	80125f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80125ba:	6839      	ldr	r1, [r7, #0]
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f001 f9f7 	bl	80139b0 <USBD_CtlError>
            ret = USBD_FAIL;
 80125c2:	2303      	movs	r3, #3
 80125c4:	75fb      	strb	r3, [r7, #23]
          break;
 80125c6:	e016      	b.n	80125f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80125ce:	b2db      	uxtb	r3, r3
 80125d0:	2b03      	cmp	r3, #3
 80125d2:	d00f      	beq.n	80125f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80125d4:	6839      	ldr	r1, [r7, #0]
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f001 f9ea 	bl	80139b0 <USBD_CtlError>
            ret = USBD_FAIL;
 80125dc:	2303      	movs	r3, #3
 80125de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80125e0:	e008      	b.n	80125f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80125e2:	6839      	ldr	r1, [r7, #0]
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f001 f9e3 	bl	80139b0 <USBD_CtlError>
          ret = USBD_FAIL;
 80125ea:	2303      	movs	r3, #3
 80125ec:	75fb      	strb	r3, [r7, #23]
          break;
 80125ee:	e002      	b.n	80125f6 <USBD_CDC_Setup+0x176>
          break;
 80125f0:	bf00      	nop
 80125f2:	e008      	b.n	8012606 <USBD_CDC_Setup+0x186>
          break;
 80125f4:	bf00      	nop
      }
      break;
 80125f6:	e006      	b.n	8012606 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80125f8:	6839      	ldr	r1, [r7, #0]
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f001 f9d8 	bl	80139b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8012600:	2303      	movs	r3, #3
 8012602:	75fb      	strb	r3, [r7, #23]
      break;
 8012604:	bf00      	nop
  }

  return (uint8_t)ret;
 8012606:	7dfb      	ldrb	r3, [r7, #23]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3718      	adds	r7, #24
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}

08012610 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
 8012618:	460b      	mov	r3, r1
 801261a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8012622:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801262a:	2b00      	cmp	r3, #0
 801262c:	d101      	bne.n	8012632 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801262e:	2303      	movs	r3, #3
 8012630:	e04f      	b.n	80126d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012638:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801263a:	78fa      	ldrb	r2, [r7, #3]
 801263c:	6879      	ldr	r1, [r7, #4]
 801263e:	4613      	mov	r3, r2
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	4413      	add	r3, r2
 8012644:	009b      	lsls	r3, r3, #2
 8012646:	440b      	add	r3, r1
 8012648:	3318      	adds	r3, #24
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d029      	beq.n	80126a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012650:	78fa      	ldrb	r2, [r7, #3]
 8012652:	6879      	ldr	r1, [r7, #4]
 8012654:	4613      	mov	r3, r2
 8012656:	009b      	lsls	r3, r3, #2
 8012658:	4413      	add	r3, r2
 801265a:	009b      	lsls	r3, r3, #2
 801265c:	440b      	add	r3, r1
 801265e:	3318      	adds	r3, #24
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	78f9      	ldrb	r1, [r7, #3]
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	460b      	mov	r3, r1
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	440b      	add	r3, r1
 801266c:	00db      	lsls	r3, r3, #3
 801266e:	4403      	add	r3, r0
 8012670:	3320      	adds	r3, #32
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	fbb2 f1f3 	udiv	r1, r2, r3
 8012678:	fb01 f303 	mul.w	r3, r1, r3
 801267c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801267e:	2b00      	cmp	r3, #0
 8012680:	d110      	bne.n	80126a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012682:	78fa      	ldrb	r2, [r7, #3]
 8012684:	6879      	ldr	r1, [r7, #4]
 8012686:	4613      	mov	r3, r2
 8012688:	009b      	lsls	r3, r3, #2
 801268a:	4413      	add	r3, r2
 801268c:	009b      	lsls	r3, r3, #2
 801268e:	440b      	add	r3, r1
 8012690:	3318      	adds	r3, #24
 8012692:	2200      	movs	r2, #0
 8012694:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012696:	78f9      	ldrb	r1, [r7, #3]
 8012698:	2300      	movs	r3, #0
 801269a:	2200      	movs	r2, #0
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f005 fd20 	bl	80180e2 <USBD_LL_Transmit>
 80126a2:	e015      	b.n	80126d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	2200      	movs	r2, #0
 80126a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80126b2:	691b      	ldr	r3, [r3, #16]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00b      	beq.n	80126d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80126be:	691b      	ldr	r3, [r3, #16]
 80126c0:	68ba      	ldr	r2, [r7, #8]
 80126c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80126c6:	68ba      	ldr	r2, [r7, #8]
 80126c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80126cc:	78fa      	ldrb	r2, [r7, #3]
 80126ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80126d0:	2300      	movs	r3, #0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b084      	sub	sp, #16
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	460b      	mov	r3, r1
 80126e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80126ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d101      	bne.n	80126fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80126f8:	2303      	movs	r3, #3
 80126fa:	e015      	b.n	8012728 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80126fc:	78fb      	ldrb	r3, [r7, #3]
 80126fe:	4619      	mov	r1, r3
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f005 fd30 	bl	8018166 <USBD_LL_GetRxDataSize>
 8012706:	4602      	mov	r2, r0
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012714:	68db      	ldr	r3, [r3, #12]
 8012716:	68fa      	ldr	r2, [r7, #12]
 8012718:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012722:	4611      	mov	r1, r2
 8012724:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012726:	2300      	movs	r3, #0
}
 8012728:	4618      	mov	r0, r3
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801273e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d101      	bne.n	801274a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012746:	2303      	movs	r3, #3
 8012748:	e01a      	b.n	8012780 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012750:	2b00      	cmp	r3, #0
 8012752:	d014      	beq.n	801277e <USBD_CDC_EP0_RxReady+0x4e>
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801275a:	2bff      	cmp	r3, #255	@ 0xff
 801275c:	d00f      	beq.n	801277e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8012764:	689b      	ldr	r3, [r3, #8]
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 801276c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801276e:	68fa      	ldr	r2, [r7, #12]
 8012770:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012774:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	22ff      	movs	r2, #255	@ 0xff
 801277a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801277e:	2300      	movs	r3, #0
}
 8012780:	4618      	mov	r0, r3
 8012782:	3710      	adds	r7, #16
 8012784:	46bd      	mov	sp, r7
 8012786:	bd80      	pop	{r7, pc}

08012788 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012788:	b480      	push	{r7}
 801278a:	b083      	sub	sp, #12
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2243      	movs	r2, #67	@ 0x43
 8012794:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8012796:	4b03      	ldr	r3, [pc, #12]	@ (80127a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012798:	4618      	mov	r0, r3
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	200000a0 	.word	0x200000a0

080127a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2243      	movs	r2, #67	@ 0x43
 80127b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80127b6:	4b03      	ldr	r3, [pc, #12]	@ (80127c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80127b8:	4618      	mov	r0, r3
 80127ba:	370c      	adds	r7, #12
 80127bc:	46bd      	mov	sp, r7
 80127be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c2:	4770      	bx	lr
 80127c4:	2000005c 	.word	0x2000005c

080127c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80127c8:	b480      	push	{r7}
 80127ca:	b083      	sub	sp, #12
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2243      	movs	r2, #67	@ 0x43
 80127d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80127d6:	4b03      	ldr	r3, [pc, #12]	@ (80127e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80127d8:	4618      	mov	r0, r3
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr
 80127e4:	200000e4 	.word	0x200000e4

080127e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	220a      	movs	r2, #10
 80127f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80127f6:	4b03      	ldr	r3, [pc, #12]	@ (8012804 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	370c      	adds	r7, #12
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr
 8012804:	20000018 	.word	0x20000018

08012808 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012808:	b480      	push	{r7}
 801280a:	b083      	sub	sp, #12
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d101      	bne.n	801281c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012818:	2303      	movs	r3, #3
 801281a:	e004      	b.n	8012826 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	370c      	adds	r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012832:	b480      	push	{r7}
 8012834:	b087      	sub	sp, #28
 8012836:	af00      	add	r7, sp, #0
 8012838:	60f8      	str	r0, [r7, #12]
 801283a:	60b9      	str	r1, [r7, #8]
 801283c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012844:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d101      	bne.n	8012850 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801284c:	2303      	movs	r3, #3
 801284e:	e008      	b.n	8012862 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012850:	697b      	ldr	r3, [r7, #20]
 8012852:	68ba      	ldr	r2, [r7, #8]
 8012854:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	687a      	ldr	r2, [r7, #4]
 801285c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012860:	2300      	movs	r3, #0
}
 8012862:	4618      	mov	r0, r3
 8012864:	371c      	adds	r7, #28
 8012866:	46bd      	mov	sp, r7
 8012868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286c:	4770      	bx	lr

0801286e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801286e:	b480      	push	{r7}
 8012870:	b085      	sub	sp, #20
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801287e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d101      	bne.n	801288a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8012886:	2303      	movs	r3, #3
 8012888:	e004      	b.n	8012894 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	683a      	ldr	r2, [r7, #0]
 801288e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012892:	2300      	movs	r3, #0
}
 8012894:	4618      	mov	r0, r3
 8012896:	3714      	adds	r7, #20
 8012898:	46bd      	mov	sp, r7
 801289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289e:	4770      	bx	lr

080128a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80128ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80128b0:	2301      	movs	r3, #1
 80128b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80128be:	2303      	movs	r3, #3
 80128c0:	e01a      	b.n	80128f8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80128c2:	68bb      	ldr	r3, [r7, #8]
 80128c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d114      	bne.n	80128f6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80128cc:	68bb      	ldr	r3, [r7, #8]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80128de:	68bb      	ldr	r3, [r7, #8]
 80128e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80128ea:	2181      	movs	r1, #129	@ 0x81
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f005 fbf8 	bl	80180e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80128f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3710      	adds	r7, #16
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801290e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012916:	2b00      	cmp	r3, #0
 8012918:	d101      	bne.n	801291e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801291a:	2303      	movs	r3, #3
 801291c:	e016      	b.n	801294c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	7c1b      	ldrb	r3, [r3, #16]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d109      	bne.n	801293a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801292c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012930:	2101      	movs	r1, #1
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f005 fbf6 	bl	8018124 <USBD_LL_PrepareReceive>
 8012938:	e007      	b.n	801294a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012940:	2340      	movs	r3, #64	@ 0x40
 8012942:	2101      	movs	r1, #1
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f005 fbed 	bl	8018124 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801294a:	2300      	movs	r3, #0
}
 801294c:	4618      	mov	r0, r3
 801294e:	3710      	adds	r7, #16
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	4613      	mov	r3, r2
 8012960:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d101      	bne.n	801296c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012968:	2303      	movs	r3, #3
 801296a:	e01f      	b.n	80129ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	2200      	movs	r2, #0
 8012970:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2200      	movs	r2, #0
 8012978:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2200      	movs	r2, #0
 8012980:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012984:	68bb      	ldr	r3, [r7, #8]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d003      	beq.n	8012992 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	68ba      	ldr	r2, [r7, #8]
 801298e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2201      	movs	r2, #1
 8012996:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	79fa      	ldrb	r2, [r7, #7]
 801299e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80129a0:	68f8      	ldr	r0, [r7, #12]
 80129a2:	f005 fa55 	bl	8017e50 <USBD_LL_Init>
 80129a6:	4603      	mov	r3, r0
 80129a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3718      	adds	r7, #24
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80129be:	2300      	movs	r3, #0
 80129c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d101      	bne.n	80129cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80129c8:	2303      	movs	r3, #3
 80129ca:	e016      	b.n	80129fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	683a      	ldr	r2, [r7, #0]
 80129d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d00b      	beq.n	80129f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129e8:	f107 020e 	add.w	r2, r7, #14
 80129ec:	4610      	mov	r0, r2
 80129ee:	4798      	blx	r3
 80129f0:	4602      	mov	r2, r0
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80129f8:	2300      	movs	r3, #0
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3710      	adds	r7, #16
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}

08012a02 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012a02:	b580      	push	{r7, lr}
 8012a04:	b082      	sub	sp, #8
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012a0a:	6878      	ldr	r0, [r7, #4]
 8012a0c:	f005 fa80 	bl	8017f10 <USBD_LL_Start>
 8012a10:	4603      	mov	r3, r0
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3708      	adds	r7, #8
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012a1a:	b480      	push	{r7}
 8012a1c:	b083      	sub	sp, #12
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012a22:	2300      	movs	r3, #0
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	370c      	adds	r7, #12
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr

08012a30 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
 8012a38:	460b      	mov	r3, r1
 8012a3a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012a3c:	2303      	movs	r3, #3
 8012a3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d009      	beq.n	8012a5e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	78fa      	ldrb	r2, [r7, #3]
 8012a54:	4611      	mov	r1, r2
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	4798      	blx	r3
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3710      	adds	r7, #16
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b082      	sub	sp, #8
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d007      	beq.n	8012a8e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	78fa      	ldrb	r2, [r7, #3]
 8012a88:	4611      	mov	r1, r2
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	4798      	blx	r3
  }

  return USBD_OK;
 8012a8e:	2300      	movs	r3, #0
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3708      	adds	r7, #8
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}

08012a98 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
 8012aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012aa8:	6839      	ldr	r1, [r7, #0]
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f000 ff46 	bl	801393c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2201      	movs	r2, #1
 8012ab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012abe:	461a      	mov	r2, r3
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012acc:	f003 031f 	and.w	r3, r3, #31
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	d01a      	beq.n	8012b0a <USBD_LL_SetupStage+0x72>
 8012ad4:	2b02      	cmp	r3, #2
 8012ad6:	d822      	bhi.n	8012b1e <USBD_LL_SetupStage+0x86>
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <USBD_LL_SetupStage+0x4a>
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d00a      	beq.n	8012af6 <USBD_LL_SetupStage+0x5e>
 8012ae0:	e01d      	b.n	8012b1e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012ae8:	4619      	mov	r1, r3
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f000 f9ee 	bl	8012ecc <USBD_StdDevReq>
 8012af0:	4603      	mov	r3, r0
 8012af2:	73fb      	strb	r3, [r7, #15]
      break;
 8012af4:	e020      	b.n	8012b38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012afc:	4619      	mov	r1, r3
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 fa52 	bl	8012fa8 <USBD_StdItfReq>
 8012b04:	4603      	mov	r3, r0
 8012b06:	73fb      	strb	r3, [r7, #15]
      break;
 8012b08:	e016      	b.n	8012b38 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b10:	4619      	mov	r1, r3
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 fa91 	bl	801303a <USBD_StdEPReq>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8012b1c:	e00c      	b.n	8012b38 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b24:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	6878      	ldr	r0, [r7, #4]
 8012b2e:	f005 fa4f 	bl	8017fd0 <USBD_LL_StallEP>
 8012b32:	4603      	mov	r3, r0
 8012b34:	73fb      	strb	r3, [r7, #15]
      break;
 8012b36:	bf00      	nop
  }

  return ret;
 8012b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}

08012b42 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012b42:	b580      	push	{r7, lr}
 8012b44:	b086      	sub	sp, #24
 8012b46:	af00      	add	r7, sp, #0
 8012b48:	60f8      	str	r0, [r7, #12]
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	607a      	str	r2, [r7, #4]
 8012b4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012b50:	7afb      	ldrb	r3, [r7, #11]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d138      	bne.n	8012bc8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012b5c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b64:	2b03      	cmp	r3, #3
 8012b66:	d14a      	bne.n	8012bfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b68:	693b      	ldr	r3, [r7, #16]
 8012b6a:	689a      	ldr	r2, [r3, #8]
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d913      	bls.n	8012b9c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	689a      	ldr	r2, [r3, #8]
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	1ad2      	subs	r2, r2, r3
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012b82:	693b      	ldr	r3, [r7, #16]
 8012b84:	68da      	ldr	r2, [r3, #12]
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	689b      	ldr	r3, [r3, #8]
 8012b8a:	4293      	cmp	r3, r2
 8012b8c:	bf28      	it	cs
 8012b8e:	4613      	movcs	r3, r2
 8012b90:	461a      	mov	r2, r3
 8012b92:	6879      	ldr	r1, [r7, #4]
 8012b94:	68f8      	ldr	r0, [r7, #12]
 8012b96:	f000 ffc5 	bl	8013b24 <USBD_CtlContinueRx>
 8012b9a:	e030      	b.n	8012bfe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ba2:	b2db      	uxtb	r3, r3
 8012ba4:	2b03      	cmp	r3, #3
 8012ba6:	d10b      	bne.n	8012bc0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bae:	691b      	ldr	r3, [r3, #16]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d005      	beq.n	8012bc0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bba:	691b      	ldr	r3, [r3, #16]
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012bc0:	68f8      	ldr	r0, [r7, #12]
 8012bc2:	f000 ffc0 	bl	8013b46 <USBD_CtlSendStatus>
 8012bc6:	e01a      	b.n	8012bfe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	2b03      	cmp	r3, #3
 8012bd2:	d114      	bne.n	8012bfe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bda:	699b      	ldr	r3, [r3, #24]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d00e      	beq.n	8012bfe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012be6:	699b      	ldr	r3, [r3, #24]
 8012be8:	7afa      	ldrb	r2, [r7, #11]
 8012bea:	4611      	mov	r1, r2
 8012bec:	68f8      	ldr	r0, [r7, #12]
 8012bee:	4798      	blx	r3
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012bf4:	7dfb      	ldrb	r3, [r7, #23]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d001      	beq.n	8012bfe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012bfa:	7dfb      	ldrb	r3, [r7, #23]
 8012bfc:	e000      	b.n	8012c00 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012bfe:	2300      	movs	r3, #0
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3718      	adds	r7, #24
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}

08012c08 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b086      	sub	sp, #24
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	60f8      	str	r0, [r7, #12]
 8012c10:	460b      	mov	r3, r1
 8012c12:	607a      	str	r2, [r7, #4]
 8012c14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012c16:	7afb      	ldrb	r3, [r7, #11]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d16b      	bne.n	8012cf4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	3314      	adds	r3, #20
 8012c20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012c28:	2b02      	cmp	r3, #2
 8012c2a:	d156      	bne.n	8012cda <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	689a      	ldr	r2, [r3, #8]
 8012c30:	693b      	ldr	r3, [r7, #16]
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d914      	bls.n	8012c62 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	689a      	ldr	r2, [r3, #8]
 8012c3c:	693b      	ldr	r3, [r7, #16]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	1ad2      	subs	r2, r2, r3
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012c46:	693b      	ldr	r3, [r7, #16]
 8012c48:	689b      	ldr	r3, [r3, #8]
 8012c4a:	461a      	mov	r2, r3
 8012c4c:	6879      	ldr	r1, [r7, #4]
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f000 ff3a 	bl	8013ac8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c54:	2300      	movs	r3, #0
 8012c56:	2200      	movs	r2, #0
 8012c58:	2100      	movs	r1, #0
 8012c5a:	68f8      	ldr	r0, [r7, #12]
 8012c5c:	f005 fa62 	bl	8018124 <USBD_LL_PrepareReceive>
 8012c60:	e03b      	b.n	8012cda <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	68da      	ldr	r2, [r3, #12]
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	689b      	ldr	r3, [r3, #8]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d11c      	bne.n	8012ca8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	685a      	ldr	r2, [r3, #4]
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d316      	bcc.n	8012ca8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d20f      	bcs.n	8012ca8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012c88:	2200      	movs	r2, #0
 8012c8a:	2100      	movs	r1, #0
 8012c8c:	68f8      	ldr	r0, [r7, #12]
 8012c8e:	f000 ff1b 	bl	8013ac8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2200      	movs	r2, #0
 8012c96:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	2100      	movs	r1, #0
 8012ca0:	68f8      	ldr	r0, [r7, #12]
 8012ca2:	f005 fa3f 	bl	8018124 <USBD_LL_PrepareReceive>
 8012ca6:	e018      	b.n	8012cda <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cae:	b2db      	uxtb	r3, r3
 8012cb0:	2b03      	cmp	r3, #3
 8012cb2:	d10b      	bne.n	8012ccc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cba:	68db      	ldr	r3, [r3, #12]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d005      	beq.n	8012ccc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	68f8      	ldr	r0, [r7, #12]
 8012cca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ccc:	2180      	movs	r1, #128	@ 0x80
 8012cce:	68f8      	ldr	r0, [r7, #12]
 8012cd0:	f005 f97e 	bl	8017fd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012cd4:	68f8      	ldr	r0, [r7, #12]
 8012cd6:	f000 ff49 	bl	8013b6c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012ce0:	2b01      	cmp	r3, #1
 8012ce2:	d122      	bne.n	8012d2a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f7ff fe98 	bl	8012a1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	2200      	movs	r2, #0
 8012cee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012cf2:	e01a      	b.n	8012d2a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cfa:	b2db      	uxtb	r3, r3
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d114      	bne.n	8012d2a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d06:	695b      	ldr	r3, [r3, #20]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d00e      	beq.n	8012d2a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d12:	695b      	ldr	r3, [r3, #20]
 8012d14:	7afa      	ldrb	r2, [r7, #11]
 8012d16:	4611      	mov	r1, r2
 8012d18:	68f8      	ldr	r0, [r7, #12]
 8012d1a:	4798      	blx	r3
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012d20:	7dfb      	ldrb	r3, [r7, #23]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d001      	beq.n	8012d2a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012d26:	7dfb      	ldrb	r3, [r7, #23]
 8012d28:	e000      	b.n	8012d2c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012d2a:	2300      	movs	r3, #0
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3718      	adds	r7, #24
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}

08012d34 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	2200      	movs	r2, #0
 8012d48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2200      	movs	r2, #0
 8012d56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d101      	bne.n	8012d68 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012d64:	2303      	movs	r3, #3
 8012d66:	e02f      	b.n	8012dc8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d00f      	beq.n	8012d92 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d78:	685b      	ldr	r3, [r3, #4]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d009      	beq.n	8012d92 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012d84:	685b      	ldr	r3, [r3, #4]
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	6852      	ldr	r2, [r2, #4]
 8012d8a:	b2d2      	uxtb	r2, r2
 8012d8c:	4611      	mov	r1, r2
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d92:	2340      	movs	r3, #64	@ 0x40
 8012d94:	2200      	movs	r2, #0
 8012d96:	2100      	movs	r1, #0
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f005 f8d4 	bl	8017f46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2240      	movs	r2, #64	@ 0x40
 8012daa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012dae:	2340      	movs	r3, #64	@ 0x40
 8012db0:	2200      	movs	r2, #0
 8012db2:	2180      	movs	r1, #128	@ 0x80
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f005 f8c6 	bl	8017f46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	2240      	movs	r2, #64	@ 0x40
 8012dc4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3708      	adds	r7, #8
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	78fa      	ldrb	r2, [r7, #3]
 8012de0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012de2:	2300      	movs	r3, #0
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	370c      	adds	r7, #12
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b083      	sub	sp, #12
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	2204      	movs	r2, #4
 8012e0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr

08012e1c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012e1c:	b480      	push	{r7}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	af00      	add	r7, sp, #0
 8012e22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e2a:	b2db      	uxtb	r3, r3
 8012e2c:	2b04      	cmp	r3, #4
 8012e2e:	d106      	bne.n	8012e3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012e36:	b2da      	uxtb	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012e3e:	2300      	movs	r3, #0
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	370c      	adds	r7, #12
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d101      	bne.n	8012e62 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012e5e:	2303      	movs	r3, #3
 8012e60:	e012      	b.n	8012e88 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e68:	b2db      	uxtb	r3, r3
 8012e6a:	2b03      	cmp	r3, #3
 8012e6c:	d10b      	bne.n	8012e86 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e74:	69db      	ldr	r3, [r3, #28]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d005      	beq.n	8012e86 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e80:	69db      	ldr	r3, [r3, #28]
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e86:	2300      	movs	r3, #0
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b087      	sub	sp, #28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012ea2:	697b      	ldr	r3, [r7, #20]
 8012ea4:	3301      	adds	r3, #1
 8012ea6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012ea8:	697b      	ldr	r3, [r7, #20]
 8012eaa:	781b      	ldrb	r3, [r3, #0]
 8012eac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012eae:	8a3b      	ldrh	r3, [r7, #16]
 8012eb0:	021b      	lsls	r3, r3, #8
 8012eb2:	b21a      	sxth	r2, r3
 8012eb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012eb8:	4313      	orrs	r3, r2
 8012eba:	b21b      	sxth	r3, r3
 8012ebc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012ebe:	89fb      	ldrh	r3, [r7, #14]
}
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	371c      	adds	r7, #28
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eca:	4770      	bx	lr

08012ecc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012ee2:	2b40      	cmp	r3, #64	@ 0x40
 8012ee4:	d005      	beq.n	8012ef2 <USBD_StdDevReq+0x26>
 8012ee6:	2b40      	cmp	r3, #64	@ 0x40
 8012ee8:	d853      	bhi.n	8012f92 <USBD_StdDevReq+0xc6>
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00b      	beq.n	8012f06 <USBD_StdDevReq+0x3a>
 8012eee:	2b20      	cmp	r3, #32
 8012ef0:	d14f      	bne.n	8012f92 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ef8:	689b      	ldr	r3, [r3, #8]
 8012efa:	6839      	ldr	r1, [r7, #0]
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	4798      	blx	r3
 8012f00:	4603      	mov	r3, r0
 8012f02:	73fb      	strb	r3, [r7, #15]
      break;
 8012f04:	e04a      	b.n	8012f9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	785b      	ldrb	r3, [r3, #1]
 8012f0a:	2b09      	cmp	r3, #9
 8012f0c:	d83b      	bhi.n	8012f86 <USBD_StdDevReq+0xba>
 8012f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8012f14 <USBD_StdDevReq+0x48>)
 8012f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f14:	08012f69 	.word	0x08012f69
 8012f18:	08012f7d 	.word	0x08012f7d
 8012f1c:	08012f87 	.word	0x08012f87
 8012f20:	08012f73 	.word	0x08012f73
 8012f24:	08012f87 	.word	0x08012f87
 8012f28:	08012f47 	.word	0x08012f47
 8012f2c:	08012f3d 	.word	0x08012f3d
 8012f30:	08012f87 	.word	0x08012f87
 8012f34:	08012f5f 	.word	0x08012f5f
 8012f38:	08012f51 	.word	0x08012f51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012f3c:	6839      	ldr	r1, [r7, #0]
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f000 f9de 	bl	8013300 <USBD_GetDescriptor>
          break;
 8012f44:	e024      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012f46:	6839      	ldr	r1, [r7, #0]
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f000 fb6d 	bl	8013628 <USBD_SetAddress>
          break;
 8012f4e:	e01f      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012f50:	6839      	ldr	r1, [r7, #0]
 8012f52:	6878      	ldr	r0, [r7, #4]
 8012f54:	f000 fbac 	bl	80136b0 <USBD_SetConfig>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	73fb      	strb	r3, [r7, #15]
          break;
 8012f5c:	e018      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012f5e:	6839      	ldr	r1, [r7, #0]
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f000 fc4b 	bl	80137fc <USBD_GetConfig>
          break;
 8012f66:	e013      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012f68:	6839      	ldr	r1, [r7, #0]
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f000 fc7c 	bl	8013868 <USBD_GetStatus>
          break;
 8012f70:	e00e      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 fcab 	bl	80138d0 <USBD_SetFeature>
          break;
 8012f7a:	e009      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012f7c:	6839      	ldr	r1, [r7, #0]
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 fcba 	bl	80138f8 <USBD_ClrFeature>
          break;
 8012f84:	e004      	b.n	8012f90 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 fd11 	bl	80139b0 <USBD_CtlError>
          break;
 8012f8e:	bf00      	nop
      }
      break;
 8012f90:	e004      	b.n	8012f9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012f92:	6839      	ldr	r1, [r7, #0]
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	f000 fd0b 	bl	80139b0 <USBD_CtlError>
      break;
 8012f9a:	bf00      	nop
  }

  return ret;
 8012f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f9e:	4618      	mov	r0, r3
 8012fa0:	3710      	adds	r7, #16
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	bd80      	pop	{r7, pc}
 8012fa6:	bf00      	nop

08012fa8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012fb6:	683b      	ldr	r3, [r7, #0]
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012fbe:	2b40      	cmp	r3, #64	@ 0x40
 8012fc0:	d005      	beq.n	8012fce <USBD_StdItfReq+0x26>
 8012fc2:	2b40      	cmp	r3, #64	@ 0x40
 8012fc4:	d82f      	bhi.n	8013026 <USBD_StdItfReq+0x7e>
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d001      	beq.n	8012fce <USBD_StdItfReq+0x26>
 8012fca:	2b20      	cmp	r3, #32
 8012fcc:	d12b      	bne.n	8013026 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fd4:	b2db      	uxtb	r3, r3
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	2b02      	cmp	r3, #2
 8012fda:	d81d      	bhi.n	8013018 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	889b      	ldrh	r3, [r3, #4]
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	2b01      	cmp	r3, #1
 8012fe4:	d813      	bhi.n	801300e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fec:	689b      	ldr	r3, [r3, #8]
 8012fee:	6839      	ldr	r1, [r7, #0]
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	4798      	blx	r3
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	88db      	ldrh	r3, [r3, #6]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d110      	bne.n	8013022 <USBD_StdItfReq+0x7a>
 8013000:	7bfb      	ldrb	r3, [r7, #15]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d10d      	bne.n	8013022 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f000 fd9d 	bl	8013b46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801300c:	e009      	b.n	8013022 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801300e:	6839      	ldr	r1, [r7, #0]
 8013010:	6878      	ldr	r0, [r7, #4]
 8013012:	f000 fccd 	bl	80139b0 <USBD_CtlError>
          break;
 8013016:	e004      	b.n	8013022 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013018:	6839      	ldr	r1, [r7, #0]
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 fcc8 	bl	80139b0 <USBD_CtlError>
          break;
 8013020:	e000      	b.n	8013024 <USBD_StdItfReq+0x7c>
          break;
 8013022:	bf00      	nop
      }
      break;
 8013024:	e004      	b.n	8013030 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013026:	6839      	ldr	r1, [r7, #0]
 8013028:	6878      	ldr	r0, [r7, #4]
 801302a:	f000 fcc1 	bl	80139b0 <USBD_CtlError>
      break;
 801302e:	bf00      	nop
  }

  return ret;
 8013030:	7bfb      	ldrb	r3, [r7, #15]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013044:	2300      	movs	r3, #0
 8013046:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	889b      	ldrh	r3, [r3, #4]
 801304c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801304e:	683b      	ldr	r3, [r7, #0]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013056:	2b40      	cmp	r3, #64	@ 0x40
 8013058:	d007      	beq.n	801306a <USBD_StdEPReq+0x30>
 801305a:	2b40      	cmp	r3, #64	@ 0x40
 801305c:	f200 8145 	bhi.w	80132ea <USBD_StdEPReq+0x2b0>
 8013060:	2b00      	cmp	r3, #0
 8013062:	d00c      	beq.n	801307e <USBD_StdEPReq+0x44>
 8013064:	2b20      	cmp	r3, #32
 8013066:	f040 8140 	bne.w	80132ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	6839      	ldr	r1, [r7, #0]
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	4798      	blx	r3
 8013078:	4603      	mov	r3, r0
 801307a:	73fb      	strb	r3, [r7, #15]
      break;
 801307c:	e13a      	b.n	80132f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801307e:	683b      	ldr	r3, [r7, #0]
 8013080:	785b      	ldrb	r3, [r3, #1]
 8013082:	2b03      	cmp	r3, #3
 8013084:	d007      	beq.n	8013096 <USBD_StdEPReq+0x5c>
 8013086:	2b03      	cmp	r3, #3
 8013088:	f300 8129 	bgt.w	80132de <USBD_StdEPReq+0x2a4>
 801308c:	2b00      	cmp	r3, #0
 801308e:	d07f      	beq.n	8013190 <USBD_StdEPReq+0x156>
 8013090:	2b01      	cmp	r3, #1
 8013092:	d03c      	beq.n	801310e <USBD_StdEPReq+0xd4>
 8013094:	e123      	b.n	80132de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801309c:	b2db      	uxtb	r3, r3
 801309e:	2b02      	cmp	r3, #2
 80130a0:	d002      	beq.n	80130a8 <USBD_StdEPReq+0x6e>
 80130a2:	2b03      	cmp	r3, #3
 80130a4:	d016      	beq.n	80130d4 <USBD_StdEPReq+0x9a>
 80130a6:	e02c      	b.n	8013102 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80130a8:	7bbb      	ldrb	r3, [r7, #14]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d00d      	beq.n	80130ca <USBD_StdEPReq+0x90>
 80130ae:	7bbb      	ldrb	r3, [r7, #14]
 80130b0:	2b80      	cmp	r3, #128	@ 0x80
 80130b2:	d00a      	beq.n	80130ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80130b4:	7bbb      	ldrb	r3, [r7, #14]
 80130b6:	4619      	mov	r1, r3
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f004 ff89 	bl	8017fd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80130be:	2180      	movs	r1, #128	@ 0x80
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f004 ff85 	bl	8017fd0 <USBD_LL_StallEP>
 80130c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80130c8:	e020      	b.n	801310c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80130ca:	6839      	ldr	r1, [r7, #0]
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f000 fc6f 	bl	80139b0 <USBD_CtlError>
              break;
 80130d2:	e01b      	b.n	801310c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	885b      	ldrh	r3, [r3, #2]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d10e      	bne.n	80130fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80130dc:	7bbb      	ldrb	r3, [r7, #14]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d00b      	beq.n	80130fa <USBD_StdEPReq+0xc0>
 80130e2:	7bbb      	ldrb	r3, [r7, #14]
 80130e4:	2b80      	cmp	r3, #128	@ 0x80
 80130e6:	d008      	beq.n	80130fa <USBD_StdEPReq+0xc0>
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	88db      	ldrh	r3, [r3, #6]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d104      	bne.n	80130fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80130f0:	7bbb      	ldrb	r3, [r7, #14]
 80130f2:	4619      	mov	r1, r3
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f004 ff6b 	bl	8017fd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80130fa:	6878      	ldr	r0, [r7, #4]
 80130fc:	f000 fd23 	bl	8013b46 <USBD_CtlSendStatus>

              break;
 8013100:	e004      	b.n	801310c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013102:	6839      	ldr	r1, [r7, #0]
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 fc53 	bl	80139b0 <USBD_CtlError>
              break;
 801310a:	bf00      	nop
          }
          break;
 801310c:	e0ec      	b.n	80132e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013114:	b2db      	uxtb	r3, r3
 8013116:	2b02      	cmp	r3, #2
 8013118:	d002      	beq.n	8013120 <USBD_StdEPReq+0xe6>
 801311a:	2b03      	cmp	r3, #3
 801311c:	d016      	beq.n	801314c <USBD_StdEPReq+0x112>
 801311e:	e030      	b.n	8013182 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013120:	7bbb      	ldrb	r3, [r7, #14]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d00d      	beq.n	8013142 <USBD_StdEPReq+0x108>
 8013126:	7bbb      	ldrb	r3, [r7, #14]
 8013128:	2b80      	cmp	r3, #128	@ 0x80
 801312a:	d00a      	beq.n	8013142 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801312c:	7bbb      	ldrb	r3, [r7, #14]
 801312e:	4619      	mov	r1, r3
 8013130:	6878      	ldr	r0, [r7, #4]
 8013132:	f004 ff4d 	bl	8017fd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013136:	2180      	movs	r1, #128	@ 0x80
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f004 ff49 	bl	8017fd0 <USBD_LL_StallEP>
 801313e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013140:	e025      	b.n	801318e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013142:	6839      	ldr	r1, [r7, #0]
 8013144:	6878      	ldr	r0, [r7, #4]
 8013146:	f000 fc33 	bl	80139b0 <USBD_CtlError>
              break;
 801314a:	e020      	b.n	801318e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	885b      	ldrh	r3, [r3, #2]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d11b      	bne.n	801318c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013154:	7bbb      	ldrb	r3, [r7, #14]
 8013156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801315a:	2b00      	cmp	r3, #0
 801315c:	d004      	beq.n	8013168 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801315e:	7bbb      	ldrb	r3, [r7, #14]
 8013160:	4619      	mov	r1, r3
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f004 ff53 	bl	801800e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f000 fcec 	bl	8013b46 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013174:	689b      	ldr	r3, [r3, #8]
 8013176:	6839      	ldr	r1, [r7, #0]
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	4798      	blx	r3
 801317c:	4603      	mov	r3, r0
 801317e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013180:	e004      	b.n	801318c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013182:	6839      	ldr	r1, [r7, #0]
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f000 fc13 	bl	80139b0 <USBD_CtlError>
              break;
 801318a:	e000      	b.n	801318e <USBD_StdEPReq+0x154>
              break;
 801318c:	bf00      	nop
          }
          break;
 801318e:	e0ab      	b.n	80132e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013196:	b2db      	uxtb	r3, r3
 8013198:	2b02      	cmp	r3, #2
 801319a:	d002      	beq.n	80131a2 <USBD_StdEPReq+0x168>
 801319c:	2b03      	cmp	r3, #3
 801319e:	d032      	beq.n	8013206 <USBD_StdEPReq+0x1cc>
 80131a0:	e097      	b.n	80132d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80131a2:	7bbb      	ldrb	r3, [r7, #14]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d007      	beq.n	80131b8 <USBD_StdEPReq+0x17e>
 80131a8:	7bbb      	ldrb	r3, [r7, #14]
 80131aa:	2b80      	cmp	r3, #128	@ 0x80
 80131ac:	d004      	beq.n	80131b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80131ae:	6839      	ldr	r1, [r7, #0]
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f000 fbfd 	bl	80139b0 <USBD_CtlError>
                break;
 80131b6:	e091      	b.n	80132dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	da0b      	bge.n	80131d8 <USBD_StdEPReq+0x19e>
 80131c0:	7bbb      	ldrb	r3, [r7, #14]
 80131c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80131c6:	4613      	mov	r3, r2
 80131c8:	009b      	lsls	r3, r3, #2
 80131ca:	4413      	add	r3, r2
 80131cc:	009b      	lsls	r3, r3, #2
 80131ce:	3310      	adds	r3, #16
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	4413      	add	r3, r2
 80131d4:	3304      	adds	r3, #4
 80131d6:	e00b      	b.n	80131f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80131d8:	7bbb      	ldrb	r3, [r7, #14]
 80131da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80131de:	4613      	mov	r3, r2
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	4413      	add	r3, r2
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	4413      	add	r3, r2
 80131ee:	3304      	adds	r3, #4
 80131f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	2200      	movs	r2, #0
 80131f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	2202      	movs	r2, #2
 80131fc:	4619      	mov	r1, r3
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 fc47 	bl	8013a92 <USBD_CtlSendData>
              break;
 8013204:	e06a      	b.n	80132dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801320a:	2b00      	cmp	r3, #0
 801320c:	da11      	bge.n	8013232 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801320e:	7bbb      	ldrb	r3, [r7, #14]
 8013210:	f003 020f 	and.w	r2, r3, #15
 8013214:	6879      	ldr	r1, [r7, #4]
 8013216:	4613      	mov	r3, r2
 8013218:	009b      	lsls	r3, r3, #2
 801321a:	4413      	add	r3, r2
 801321c:	009b      	lsls	r3, r3, #2
 801321e:	440b      	add	r3, r1
 8013220:	3324      	adds	r3, #36	@ 0x24
 8013222:	881b      	ldrh	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d117      	bne.n	8013258 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013228:	6839      	ldr	r1, [r7, #0]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f000 fbc0 	bl	80139b0 <USBD_CtlError>
                  break;
 8013230:	e054      	b.n	80132dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013232:	7bbb      	ldrb	r3, [r7, #14]
 8013234:	f003 020f 	and.w	r2, r3, #15
 8013238:	6879      	ldr	r1, [r7, #4]
 801323a:	4613      	mov	r3, r2
 801323c:	009b      	lsls	r3, r3, #2
 801323e:	4413      	add	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	440b      	add	r3, r1
 8013244:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d104      	bne.n	8013258 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801324e:	6839      	ldr	r1, [r7, #0]
 8013250:	6878      	ldr	r0, [r7, #4]
 8013252:	f000 fbad 	bl	80139b0 <USBD_CtlError>
                  break;
 8013256:	e041      	b.n	80132dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013258:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801325c:	2b00      	cmp	r3, #0
 801325e:	da0b      	bge.n	8013278 <USBD_StdEPReq+0x23e>
 8013260:	7bbb      	ldrb	r3, [r7, #14]
 8013262:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013266:	4613      	mov	r3, r2
 8013268:	009b      	lsls	r3, r3, #2
 801326a:	4413      	add	r3, r2
 801326c:	009b      	lsls	r3, r3, #2
 801326e:	3310      	adds	r3, #16
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	4413      	add	r3, r2
 8013274:	3304      	adds	r3, #4
 8013276:	e00b      	b.n	8013290 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013278:	7bbb      	ldrb	r3, [r7, #14]
 801327a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801327e:	4613      	mov	r3, r2
 8013280:	009b      	lsls	r3, r3, #2
 8013282:	4413      	add	r3, r2
 8013284:	009b      	lsls	r3, r3, #2
 8013286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	4413      	add	r3, r2
 801328e:	3304      	adds	r3, #4
 8013290:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013292:	7bbb      	ldrb	r3, [r7, #14]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <USBD_StdEPReq+0x264>
 8013298:	7bbb      	ldrb	r3, [r7, #14]
 801329a:	2b80      	cmp	r3, #128	@ 0x80
 801329c:	d103      	bne.n	80132a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	2200      	movs	r2, #0
 80132a2:	601a      	str	r2, [r3, #0]
 80132a4:	e00e      	b.n	80132c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80132a6:	7bbb      	ldrb	r3, [r7, #14]
 80132a8:	4619      	mov	r1, r3
 80132aa:	6878      	ldr	r0, [r7, #4]
 80132ac:	f004 fece 	bl	801804c <USBD_LL_IsStallEP>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d003      	beq.n	80132be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80132b6:	68bb      	ldr	r3, [r7, #8]
 80132b8:	2201      	movs	r2, #1
 80132ba:	601a      	str	r2, [r3, #0]
 80132bc:	e002      	b.n	80132c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80132be:	68bb      	ldr	r3, [r7, #8]
 80132c0:	2200      	movs	r2, #0
 80132c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	2202      	movs	r2, #2
 80132c8:	4619      	mov	r1, r3
 80132ca:	6878      	ldr	r0, [r7, #4]
 80132cc:	f000 fbe1 	bl	8013a92 <USBD_CtlSendData>
              break;
 80132d0:	e004      	b.n	80132dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80132d2:	6839      	ldr	r1, [r7, #0]
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f000 fb6b 	bl	80139b0 <USBD_CtlError>
              break;
 80132da:	bf00      	nop
          }
          break;
 80132dc:	e004      	b.n	80132e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80132de:	6839      	ldr	r1, [r7, #0]
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f000 fb65 	bl	80139b0 <USBD_CtlError>
          break;
 80132e6:	bf00      	nop
      }
      break;
 80132e8:	e004      	b.n	80132f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80132ea:	6839      	ldr	r1, [r7, #0]
 80132ec:	6878      	ldr	r0, [r7, #4]
 80132ee:	f000 fb5f 	bl	80139b0 <USBD_CtlError>
      break;
 80132f2:	bf00      	nop
  }

  return ret;
 80132f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3710      	adds	r7, #16
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
	...

08013300 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b084      	sub	sp, #16
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
 8013308:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801330a:	2300      	movs	r3, #0
 801330c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801330e:	2300      	movs	r3, #0
 8013310:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013312:	2300      	movs	r3, #0
 8013314:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	885b      	ldrh	r3, [r3, #2]
 801331a:	0a1b      	lsrs	r3, r3, #8
 801331c:	b29b      	uxth	r3, r3
 801331e:	3b01      	subs	r3, #1
 8013320:	2b0e      	cmp	r3, #14
 8013322:	f200 8152 	bhi.w	80135ca <USBD_GetDescriptor+0x2ca>
 8013326:	a201      	add	r2, pc, #4	@ (adr r2, 801332c <USBD_GetDescriptor+0x2c>)
 8013328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801332c:	0801339d 	.word	0x0801339d
 8013330:	080133b5 	.word	0x080133b5
 8013334:	080133f5 	.word	0x080133f5
 8013338:	080135cb 	.word	0x080135cb
 801333c:	080135cb 	.word	0x080135cb
 8013340:	0801356b 	.word	0x0801356b
 8013344:	08013597 	.word	0x08013597
 8013348:	080135cb 	.word	0x080135cb
 801334c:	080135cb 	.word	0x080135cb
 8013350:	080135cb 	.word	0x080135cb
 8013354:	080135cb 	.word	0x080135cb
 8013358:	080135cb 	.word	0x080135cb
 801335c:	080135cb 	.word	0x080135cb
 8013360:	080135cb 	.word	0x080135cb
 8013364:	08013369 	.word	0x08013369
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801336e:	69db      	ldr	r3, [r3, #28]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d00b      	beq.n	801338c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801337a:	69db      	ldr	r3, [r3, #28]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	7c12      	ldrb	r2, [r2, #16]
 8013380:	f107 0108 	add.w	r1, r7, #8
 8013384:	4610      	mov	r0, r2
 8013386:	4798      	blx	r3
 8013388:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801338a:	e126      	b.n	80135da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801338c:	6839      	ldr	r1, [r7, #0]
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 fb0e 	bl	80139b0 <USBD_CtlError>
        err++;
 8013394:	7afb      	ldrb	r3, [r7, #11]
 8013396:	3301      	adds	r3, #1
 8013398:	72fb      	strb	r3, [r7, #11]
      break;
 801339a:	e11e      	b.n	80135da <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	687a      	ldr	r2, [r7, #4]
 80133a6:	7c12      	ldrb	r2, [r2, #16]
 80133a8:	f107 0108 	add.w	r1, r7, #8
 80133ac:	4610      	mov	r0, r2
 80133ae:	4798      	blx	r3
 80133b0:	60f8      	str	r0, [r7, #12]
      break;
 80133b2:	e112      	b.n	80135da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	7c1b      	ldrb	r3, [r3, #16]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10d      	bne.n	80133d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133c4:	f107 0208 	add.w	r2, r7, #8
 80133c8:	4610      	mov	r0, r2
 80133ca:	4798      	blx	r3
 80133cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	3301      	adds	r3, #1
 80133d2:	2202      	movs	r2, #2
 80133d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80133d6:	e100      	b.n	80135da <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80133de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80133e0:	f107 0208 	add.w	r2, r7, #8
 80133e4:	4610      	mov	r0, r2
 80133e6:	4798      	blx	r3
 80133e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	3301      	adds	r3, #1
 80133ee:	2202      	movs	r2, #2
 80133f0:	701a      	strb	r2, [r3, #0]
      break;
 80133f2:	e0f2      	b.n	80135da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	885b      	ldrh	r3, [r3, #2]
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	2b05      	cmp	r3, #5
 80133fc:	f200 80ac 	bhi.w	8013558 <USBD_GetDescriptor+0x258>
 8013400:	a201      	add	r2, pc, #4	@ (adr r2, 8013408 <USBD_GetDescriptor+0x108>)
 8013402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013406:	bf00      	nop
 8013408:	08013421 	.word	0x08013421
 801340c:	08013455 	.word	0x08013455
 8013410:	08013489 	.word	0x08013489
 8013414:	080134bd 	.word	0x080134bd
 8013418:	080134f1 	.word	0x080134f1
 801341c:	08013525 	.word	0x08013525
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013426:	685b      	ldr	r3, [r3, #4]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00b      	beq.n	8013444 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	687a      	ldr	r2, [r7, #4]
 8013436:	7c12      	ldrb	r2, [r2, #16]
 8013438:	f107 0108 	add.w	r1, r7, #8
 801343c:	4610      	mov	r0, r2
 801343e:	4798      	blx	r3
 8013440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013442:	e091      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013444:	6839      	ldr	r1, [r7, #0]
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 fab2 	bl	80139b0 <USBD_CtlError>
            err++;
 801344c:	7afb      	ldrb	r3, [r7, #11]
 801344e:	3301      	adds	r3, #1
 8013450:	72fb      	strb	r3, [r7, #11]
          break;
 8013452:	e089      	b.n	8013568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801345a:	689b      	ldr	r3, [r3, #8]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00b      	beq.n	8013478 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	687a      	ldr	r2, [r7, #4]
 801346a:	7c12      	ldrb	r2, [r2, #16]
 801346c:	f107 0108 	add.w	r1, r7, #8
 8013470:	4610      	mov	r0, r2
 8013472:	4798      	blx	r3
 8013474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013476:	e077      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013478:	6839      	ldr	r1, [r7, #0]
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f000 fa98 	bl	80139b0 <USBD_CtlError>
            err++;
 8013480:	7afb      	ldrb	r3, [r7, #11]
 8013482:	3301      	adds	r3, #1
 8013484:	72fb      	strb	r3, [r7, #11]
          break;
 8013486:	e06f      	b.n	8013568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801348e:	68db      	ldr	r3, [r3, #12]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d00b      	beq.n	80134ac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	7c12      	ldrb	r2, [r2, #16]
 80134a0:	f107 0108 	add.w	r1, r7, #8
 80134a4:	4610      	mov	r0, r2
 80134a6:	4798      	blx	r3
 80134a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134aa:	e05d      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80134ac:	6839      	ldr	r1, [r7, #0]
 80134ae:	6878      	ldr	r0, [r7, #4]
 80134b0:	f000 fa7e 	bl	80139b0 <USBD_CtlError>
            err++;
 80134b4:	7afb      	ldrb	r3, [r7, #11]
 80134b6:	3301      	adds	r3, #1
 80134b8:	72fb      	strb	r3, [r7, #11]
          break;
 80134ba:	e055      	b.n	8013568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134c2:	691b      	ldr	r3, [r3, #16]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d00b      	beq.n	80134e0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134ce:	691b      	ldr	r3, [r3, #16]
 80134d0:	687a      	ldr	r2, [r7, #4]
 80134d2:	7c12      	ldrb	r2, [r2, #16]
 80134d4:	f107 0108 	add.w	r1, r7, #8
 80134d8:	4610      	mov	r0, r2
 80134da:	4798      	blx	r3
 80134dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134de:	e043      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80134e0:	6839      	ldr	r1, [r7, #0]
 80134e2:	6878      	ldr	r0, [r7, #4]
 80134e4:	f000 fa64 	bl	80139b0 <USBD_CtlError>
            err++;
 80134e8:	7afb      	ldrb	r3, [r7, #11]
 80134ea:	3301      	adds	r3, #1
 80134ec:	72fb      	strb	r3, [r7, #11]
          break;
 80134ee:	e03b      	b.n	8013568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80134f6:	695b      	ldr	r3, [r3, #20]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d00b      	beq.n	8013514 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	687a      	ldr	r2, [r7, #4]
 8013506:	7c12      	ldrb	r2, [r2, #16]
 8013508:	f107 0108 	add.w	r1, r7, #8
 801350c:	4610      	mov	r0, r2
 801350e:	4798      	blx	r3
 8013510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013512:	e029      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013514:	6839      	ldr	r1, [r7, #0]
 8013516:	6878      	ldr	r0, [r7, #4]
 8013518:	f000 fa4a 	bl	80139b0 <USBD_CtlError>
            err++;
 801351c:	7afb      	ldrb	r3, [r7, #11]
 801351e:	3301      	adds	r3, #1
 8013520:	72fb      	strb	r3, [r7, #11]
          break;
 8013522:	e021      	b.n	8013568 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801352a:	699b      	ldr	r3, [r3, #24]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00b      	beq.n	8013548 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	7c12      	ldrb	r2, [r2, #16]
 801353c:	f107 0108 	add.w	r1, r7, #8
 8013540:	4610      	mov	r0, r2
 8013542:	4798      	blx	r3
 8013544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013546:	e00f      	b.n	8013568 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013548:	6839      	ldr	r1, [r7, #0]
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f000 fa30 	bl	80139b0 <USBD_CtlError>
            err++;
 8013550:	7afb      	ldrb	r3, [r7, #11]
 8013552:	3301      	adds	r3, #1
 8013554:	72fb      	strb	r3, [r7, #11]
          break;
 8013556:	e007      	b.n	8013568 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013558:	6839      	ldr	r1, [r7, #0]
 801355a:	6878      	ldr	r0, [r7, #4]
 801355c:	f000 fa28 	bl	80139b0 <USBD_CtlError>
          err++;
 8013560:	7afb      	ldrb	r3, [r7, #11]
 8013562:	3301      	adds	r3, #1
 8013564:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013566:	bf00      	nop
      }
      break;
 8013568:	e037      	b.n	80135da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	7c1b      	ldrb	r3, [r3, #16]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d109      	bne.n	8013586 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801357a:	f107 0208 	add.w	r2, r7, #8
 801357e:	4610      	mov	r0, r2
 8013580:	4798      	blx	r3
 8013582:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013584:	e029      	b.n	80135da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013586:	6839      	ldr	r1, [r7, #0]
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f000 fa11 	bl	80139b0 <USBD_CtlError>
        err++;
 801358e:	7afb      	ldrb	r3, [r7, #11]
 8013590:	3301      	adds	r3, #1
 8013592:	72fb      	strb	r3, [r7, #11]
      break;
 8013594:	e021      	b.n	80135da <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	7c1b      	ldrb	r3, [r3, #16]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10d      	bne.n	80135ba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135a6:	f107 0208 	add.w	r2, r7, #8
 80135aa:	4610      	mov	r0, r2
 80135ac:	4798      	blx	r3
 80135ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	3301      	adds	r3, #1
 80135b4:	2207      	movs	r2, #7
 80135b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80135b8:	e00f      	b.n	80135da <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80135ba:	6839      	ldr	r1, [r7, #0]
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 f9f7 	bl	80139b0 <USBD_CtlError>
        err++;
 80135c2:	7afb      	ldrb	r3, [r7, #11]
 80135c4:	3301      	adds	r3, #1
 80135c6:	72fb      	strb	r3, [r7, #11]
      break;
 80135c8:	e007      	b.n	80135da <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f000 f9ef 	bl	80139b0 <USBD_CtlError>
      err++;
 80135d2:	7afb      	ldrb	r3, [r7, #11]
 80135d4:	3301      	adds	r3, #1
 80135d6:	72fb      	strb	r3, [r7, #11]
      break;
 80135d8:	bf00      	nop
  }

  if (err != 0U)
 80135da:	7afb      	ldrb	r3, [r7, #11]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d11e      	bne.n	801361e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	88db      	ldrh	r3, [r3, #6]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d016      	beq.n	8013616 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80135e8:	893b      	ldrh	r3, [r7, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00e      	beq.n	801360c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	88da      	ldrh	r2, [r3, #6]
 80135f2:	893b      	ldrh	r3, [r7, #8]
 80135f4:	4293      	cmp	r3, r2
 80135f6:	bf28      	it	cs
 80135f8:	4613      	movcs	r3, r2
 80135fa:	b29b      	uxth	r3, r3
 80135fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80135fe:	893b      	ldrh	r3, [r7, #8]
 8013600:	461a      	mov	r2, r3
 8013602:	68f9      	ldr	r1, [r7, #12]
 8013604:	6878      	ldr	r0, [r7, #4]
 8013606:	f000 fa44 	bl	8013a92 <USBD_CtlSendData>
 801360a:	e009      	b.n	8013620 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801360c:	6839      	ldr	r1, [r7, #0]
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f000 f9ce 	bl	80139b0 <USBD_CtlError>
 8013614:	e004      	b.n	8013620 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f000 fa95 	bl	8013b46 <USBD_CtlSendStatus>
 801361c:	e000      	b.n	8013620 <USBD_GetDescriptor+0x320>
    return;
 801361e:	bf00      	nop
  }
}
 8013620:	3710      	adds	r7, #16
 8013622:	46bd      	mov	sp, r7
 8013624:	bd80      	pop	{r7, pc}
 8013626:	bf00      	nop

08013628 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b084      	sub	sp, #16
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	889b      	ldrh	r3, [r3, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d131      	bne.n	801369e <USBD_SetAddress+0x76>
 801363a:	683b      	ldr	r3, [r7, #0]
 801363c:	88db      	ldrh	r3, [r3, #6]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d12d      	bne.n	801369e <USBD_SetAddress+0x76>
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	885b      	ldrh	r3, [r3, #2]
 8013646:	2b7f      	cmp	r3, #127	@ 0x7f
 8013648:	d829      	bhi.n	801369e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	885b      	ldrh	r3, [r3, #2]
 801364e:	b2db      	uxtb	r3, r3
 8013650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013654:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801365c:	b2db      	uxtb	r3, r3
 801365e:	2b03      	cmp	r3, #3
 8013660:	d104      	bne.n	801366c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	6878      	ldr	r0, [r7, #4]
 8013666:	f000 f9a3 	bl	80139b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801366a:	e01d      	b.n	80136a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	7bfa      	ldrb	r2, [r7, #15]
 8013670:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013674:	7bfb      	ldrb	r3, [r7, #15]
 8013676:	4619      	mov	r1, r3
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f004 fd13 	bl	80180a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 fa61 	bl	8013b46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013684:	7bfb      	ldrb	r3, [r7, #15]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d004      	beq.n	8013694 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2202      	movs	r2, #2
 801368e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013692:	e009      	b.n	80136a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	2201      	movs	r2, #1
 8013698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801369c:	e004      	b.n	80136a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801369e:	6839      	ldr	r1, [r7, #0]
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f000 f985 	bl	80139b0 <USBD_CtlError>
  }
}
 80136a6:	bf00      	nop
 80136a8:	bf00      	nop
 80136aa:	3710      	adds	r7, #16
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}

080136b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80136ba:	2300      	movs	r3, #0
 80136bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	b2da      	uxtb	r2, r3
 80136c4:	4b4c      	ldr	r3, [pc, #304]	@ (80137f8 <USBD_SetConfig+0x148>)
 80136c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80136c8:	4b4b      	ldr	r3, [pc, #300]	@ (80137f8 <USBD_SetConfig+0x148>)
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	2b01      	cmp	r3, #1
 80136ce:	d905      	bls.n	80136dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80136d0:	6839      	ldr	r1, [r7, #0]
 80136d2:	6878      	ldr	r0, [r7, #4]
 80136d4:	f000 f96c 	bl	80139b0 <USBD_CtlError>
    return USBD_FAIL;
 80136d8:	2303      	movs	r3, #3
 80136da:	e088      	b.n	80137ee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136e2:	b2db      	uxtb	r3, r3
 80136e4:	2b02      	cmp	r3, #2
 80136e6:	d002      	beq.n	80136ee <USBD_SetConfig+0x3e>
 80136e8:	2b03      	cmp	r3, #3
 80136ea:	d025      	beq.n	8013738 <USBD_SetConfig+0x88>
 80136ec:	e071      	b.n	80137d2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80136ee:	4b42      	ldr	r3, [pc, #264]	@ (80137f8 <USBD_SetConfig+0x148>)
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d01c      	beq.n	8013730 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80136f6:	4b40      	ldr	r3, [pc, #256]	@ (80137f8 <USBD_SetConfig+0x148>)
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	461a      	mov	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013700:	4b3d      	ldr	r3, [pc, #244]	@ (80137f8 <USBD_SetConfig+0x148>)
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	4619      	mov	r1, r3
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f7ff f992 	bl	8012a30 <USBD_SetClassConfig>
 801370c:	4603      	mov	r3, r0
 801370e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013710:	7bfb      	ldrb	r3, [r7, #15]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d004      	beq.n	8013720 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013716:	6839      	ldr	r1, [r7, #0]
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f000 f949 	bl	80139b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801371e:	e065      	b.n	80137ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f000 fa10 	bl	8013b46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	2203      	movs	r2, #3
 801372a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801372e:	e05d      	b.n	80137ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f000 fa08 	bl	8013b46 <USBD_CtlSendStatus>
      break;
 8013736:	e059      	b.n	80137ec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013738:	4b2f      	ldr	r3, [pc, #188]	@ (80137f8 <USBD_SetConfig+0x148>)
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d112      	bne.n	8013766 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2202      	movs	r2, #2
 8013744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013748:	4b2b      	ldr	r3, [pc, #172]	@ (80137f8 <USBD_SetConfig+0x148>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	461a      	mov	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013752:	4b29      	ldr	r3, [pc, #164]	@ (80137f8 <USBD_SetConfig+0x148>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	4619      	mov	r1, r3
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7ff f985 	bl	8012a68 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 f9f1 	bl	8013b46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013764:	e042      	b.n	80137ec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013766:	4b24      	ldr	r3, [pc, #144]	@ (80137f8 <USBD_SetConfig+0x148>)
 8013768:	781b      	ldrb	r3, [r3, #0]
 801376a:	461a      	mov	r2, r3
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	685b      	ldr	r3, [r3, #4]
 8013770:	429a      	cmp	r2, r3
 8013772:	d02a      	beq.n	80137ca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	b2db      	uxtb	r3, r3
 801377a:	4619      	mov	r1, r3
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f7ff f973 	bl	8012a68 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013782:	4b1d      	ldr	r3, [pc, #116]	@ (80137f8 <USBD_SetConfig+0x148>)
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	461a      	mov	r2, r3
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801378c:	4b1a      	ldr	r3, [pc, #104]	@ (80137f8 <USBD_SetConfig+0x148>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	4619      	mov	r1, r3
 8013792:	6878      	ldr	r0, [r7, #4]
 8013794:	f7ff f94c 	bl	8012a30 <USBD_SetClassConfig>
 8013798:	4603      	mov	r3, r0
 801379a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801379c:	7bfb      	ldrb	r3, [r7, #15]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d00f      	beq.n	80137c2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80137a2:	6839      	ldr	r1, [r7, #0]
 80137a4:	6878      	ldr	r0, [r7, #4]
 80137a6:	f000 f903 	bl	80139b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	b2db      	uxtb	r3, r3
 80137b0:	4619      	mov	r1, r3
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f7ff f958 	bl	8012a68 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2202      	movs	r2, #2
 80137bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80137c0:	e014      	b.n	80137ec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f000 f9bf 	bl	8013b46 <USBD_CtlSendStatus>
      break;
 80137c8:	e010      	b.n	80137ec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 f9bb 	bl	8013b46 <USBD_CtlSendStatus>
      break;
 80137d0:	e00c      	b.n	80137ec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80137d2:	6839      	ldr	r1, [r7, #0]
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f000 f8eb 	bl	80139b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80137da:	4b07      	ldr	r3, [pc, #28]	@ (80137f8 <USBD_SetConfig+0x148>)
 80137dc:	781b      	ldrb	r3, [r3, #0]
 80137de:	4619      	mov	r1, r3
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f7ff f941 	bl	8012a68 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80137e6:	2303      	movs	r3, #3
 80137e8:	73fb      	strb	r3, [r7, #15]
      break;
 80137ea:	bf00      	nop
  }

  return ret;
 80137ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3710      	adds	r7, #16
 80137f2:	46bd      	mov	sp, r7
 80137f4:	bd80      	pop	{r7, pc}
 80137f6:	bf00      	nop
 80137f8:	20006990 	.word	0x20006990

080137fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137fc:	b580      	push	{r7, lr}
 80137fe:	b082      	sub	sp, #8
 8013800:	af00      	add	r7, sp, #0
 8013802:	6078      	str	r0, [r7, #4]
 8013804:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	88db      	ldrh	r3, [r3, #6]
 801380a:	2b01      	cmp	r3, #1
 801380c:	d004      	beq.n	8013818 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801380e:	6839      	ldr	r1, [r7, #0]
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f000 f8cd 	bl	80139b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013816:	e023      	b.n	8013860 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801381e:	b2db      	uxtb	r3, r3
 8013820:	2b02      	cmp	r3, #2
 8013822:	dc02      	bgt.n	801382a <USBD_GetConfig+0x2e>
 8013824:	2b00      	cmp	r3, #0
 8013826:	dc03      	bgt.n	8013830 <USBD_GetConfig+0x34>
 8013828:	e015      	b.n	8013856 <USBD_GetConfig+0x5a>
 801382a:	2b03      	cmp	r3, #3
 801382c:	d00b      	beq.n	8013846 <USBD_GetConfig+0x4a>
 801382e:	e012      	b.n	8013856 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	2200      	movs	r2, #0
 8013834:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	3308      	adds	r3, #8
 801383a:	2201      	movs	r2, #1
 801383c:	4619      	mov	r1, r3
 801383e:	6878      	ldr	r0, [r7, #4]
 8013840:	f000 f927 	bl	8013a92 <USBD_CtlSendData>
        break;
 8013844:	e00c      	b.n	8013860 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	3304      	adds	r3, #4
 801384a:	2201      	movs	r2, #1
 801384c:	4619      	mov	r1, r3
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f91f 	bl	8013a92 <USBD_CtlSendData>
        break;
 8013854:	e004      	b.n	8013860 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013856:	6839      	ldr	r1, [r7, #0]
 8013858:	6878      	ldr	r0, [r7, #4]
 801385a:	f000 f8a9 	bl	80139b0 <USBD_CtlError>
        break;
 801385e:	bf00      	nop
}
 8013860:	bf00      	nop
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b082      	sub	sp, #8
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013878:	b2db      	uxtb	r3, r3
 801387a:	3b01      	subs	r3, #1
 801387c:	2b02      	cmp	r3, #2
 801387e:	d81e      	bhi.n	80138be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	2b02      	cmp	r3, #2
 8013886:	d004      	beq.n	8013892 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013888:	6839      	ldr	r1, [r7, #0]
 801388a:	6878      	ldr	r0, [r7, #4]
 801388c:	f000 f890 	bl	80139b0 <USBD_CtlError>
        break;
 8013890:	e01a      	b.n	80138c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	2201      	movs	r2, #1
 8013896:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d005      	beq.n	80138ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	68db      	ldr	r3, [r3, #12]
 80138a6:	f043 0202 	orr.w	r2, r3, #2
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	330c      	adds	r3, #12
 80138b2:	2202      	movs	r2, #2
 80138b4:	4619      	mov	r1, r3
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f000 f8eb 	bl	8013a92 <USBD_CtlSendData>
      break;
 80138bc:	e004      	b.n	80138c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80138be:	6839      	ldr	r1, [r7, #0]
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f000 f875 	bl	80139b0 <USBD_CtlError>
      break;
 80138c6:	bf00      	nop
  }
}
 80138c8:	bf00      	nop
 80138ca:	3708      	adds	r7, #8
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
 80138d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	885b      	ldrh	r3, [r3, #2]
 80138de:	2b01      	cmp	r3, #1
 80138e0:	d106      	bne.n	80138f0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2201      	movs	r2, #1
 80138e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f000 f92b 	bl	8013b46 <USBD_CtlSendStatus>
  }
}
 80138f0:	bf00      	nop
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}

080138f8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013908:	b2db      	uxtb	r3, r3
 801390a:	3b01      	subs	r3, #1
 801390c:	2b02      	cmp	r3, #2
 801390e:	d80b      	bhi.n	8013928 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	885b      	ldrh	r3, [r3, #2]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d10c      	bne.n	8013932 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2200      	movs	r2, #0
 801391c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f910 	bl	8013b46 <USBD_CtlSendStatus>
      }
      break;
 8013926:	e004      	b.n	8013932 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013928:	6839      	ldr	r1, [r7, #0]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 f840 	bl	80139b0 <USBD_CtlError>
      break;
 8013930:	e000      	b.n	8013934 <USBD_ClrFeature+0x3c>
      break;
 8013932:	bf00      	nop
  }
}
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b084      	sub	sp, #16
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013946:	683b      	ldr	r3, [r7, #0]
 8013948:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	781a      	ldrb	r2, [r3, #0]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	3301      	adds	r3, #1
 8013956:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	781a      	ldrb	r2, [r3, #0]
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	3301      	adds	r3, #1
 8013964:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013966:	68f8      	ldr	r0, [r7, #12]
 8013968:	f7ff fa92 	bl	8012e90 <SWAPBYTE>
 801396c:	4603      	mov	r3, r0
 801396e:	461a      	mov	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013974:	68fb      	ldr	r3, [r7, #12]
 8013976:	3301      	adds	r3, #1
 8013978:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	3301      	adds	r3, #1
 801397e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f7ff fa85 	bl	8012e90 <SWAPBYTE>
 8013986:	4603      	mov	r3, r0
 8013988:	461a      	mov	r2, r3
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	3301      	adds	r3, #1
 8013992:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3301      	adds	r3, #1
 8013998:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801399a:	68f8      	ldr	r0, [r7, #12]
 801399c:	f7ff fa78 	bl	8012e90 <SWAPBYTE>
 80139a0:	4603      	mov	r3, r0
 80139a2:	461a      	mov	r2, r3
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	80da      	strh	r2, [r3, #6]
}
 80139a8:	bf00      	nop
 80139aa:	3710      	adds	r7, #16
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80139ba:	2180      	movs	r1, #128	@ 0x80
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f004 fb07 	bl	8017fd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80139c2:	2100      	movs	r1, #0
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f004 fb03 	bl	8017fd0 <USBD_LL_StallEP>
}
 80139ca:	bf00      	nop
 80139cc:	3708      	adds	r7, #8
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b086      	sub	sp, #24
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	60f8      	str	r0, [r7, #12]
 80139da:	60b9      	str	r1, [r7, #8]
 80139dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80139de:	2300      	movs	r3, #0
 80139e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d036      	beq.n	8013a56 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80139ec:	6938      	ldr	r0, [r7, #16]
 80139ee:	f000 f836 	bl	8013a5e <USBD_GetLen>
 80139f2:	4603      	mov	r3, r0
 80139f4:	3301      	adds	r3, #1
 80139f6:	b29b      	uxth	r3, r3
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	b29a      	uxth	r2, r3
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013a00:	7dfb      	ldrb	r3, [r7, #23]
 8013a02:	68ba      	ldr	r2, [r7, #8]
 8013a04:	4413      	add	r3, r2
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	7812      	ldrb	r2, [r2, #0]
 8013a0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8013a0c:	7dfb      	ldrb	r3, [r7, #23]
 8013a0e:	3301      	adds	r3, #1
 8013a10:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013a12:	7dfb      	ldrb	r3, [r7, #23]
 8013a14:	68ba      	ldr	r2, [r7, #8]
 8013a16:	4413      	add	r3, r2
 8013a18:	2203      	movs	r2, #3
 8013a1a:	701a      	strb	r2, [r3, #0]
  idx++;
 8013a1c:	7dfb      	ldrb	r3, [r7, #23]
 8013a1e:	3301      	adds	r3, #1
 8013a20:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013a22:	e013      	b.n	8013a4c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013a24:	7dfb      	ldrb	r3, [r7, #23]
 8013a26:	68ba      	ldr	r2, [r7, #8]
 8013a28:	4413      	add	r3, r2
 8013a2a:	693a      	ldr	r2, [r7, #16]
 8013a2c:	7812      	ldrb	r2, [r2, #0]
 8013a2e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013a30:	693b      	ldr	r3, [r7, #16]
 8013a32:	3301      	adds	r3, #1
 8013a34:	613b      	str	r3, [r7, #16]
    idx++;
 8013a36:	7dfb      	ldrb	r3, [r7, #23]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013a3c:	7dfb      	ldrb	r3, [r7, #23]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	4413      	add	r3, r2
 8013a42:	2200      	movs	r2, #0
 8013a44:	701a      	strb	r2, [r3, #0]
    idx++;
 8013a46:	7dfb      	ldrb	r3, [r7, #23]
 8013a48:	3301      	adds	r3, #1
 8013a4a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d1e7      	bne.n	8013a24 <USBD_GetString+0x52>
 8013a54:	e000      	b.n	8013a58 <USBD_GetString+0x86>
    return;
 8013a56:	bf00      	nop
  }
}
 8013a58:	3718      	adds	r7, #24
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}

08013a5e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013a5e:	b480      	push	{r7}
 8013a60:	b085      	sub	sp, #20
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013a66:	2300      	movs	r3, #0
 8013a68:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013a6e:	e005      	b.n	8013a7c <USBD_GetLen+0x1e>
  {
    len++;
 8013a70:	7bfb      	ldrb	r3, [r7, #15]
 8013a72:	3301      	adds	r3, #1
 8013a74:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	3301      	adds	r3, #1
 8013a7a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d1f5      	bne.n	8013a70 <USBD_GetLen+0x12>
  }

  return len;
 8013a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3714      	adds	r7, #20
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr

08013a92 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013a92:	b580      	push	{r7, lr}
 8013a94:	b084      	sub	sp, #16
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	60f8      	str	r0, [r7, #12]
 8013a9a:	60b9      	str	r1, [r7, #8]
 8013a9c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2202      	movs	r2, #2
 8013aa2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	687a      	ldr	r2, [r7, #4]
 8013ab0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	68ba      	ldr	r2, [r7, #8]
 8013ab6:	2100      	movs	r1, #0
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f004 fb12 	bl	80180e2 <USBD_LL_Transmit>

  return USBD_OK;
 8013abe:	2300      	movs	r3, #0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3710      	adds	r7, #16
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	60b9      	str	r1, [r7, #8]
 8013ad2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	2100      	movs	r1, #0
 8013ada:	68f8      	ldr	r0, [r7, #12]
 8013adc:	f004 fb01 	bl	80180e2 <USBD_LL_Transmit>

  return USBD_OK;
 8013ae0:	2300      	movs	r3, #0
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}

08013aea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013aea:	b580      	push	{r7, lr}
 8013aec:	b084      	sub	sp, #16
 8013aee:	af00      	add	r7, sp, #0
 8013af0:	60f8      	str	r0, [r7, #12]
 8013af2:	60b9      	str	r1, [r7, #8]
 8013af4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2203      	movs	r2, #3
 8013afa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	687a      	ldr	r2, [r7, #4]
 8013b02:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	687a      	ldr	r2, [r7, #4]
 8013b0a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	68ba      	ldr	r2, [r7, #8]
 8013b12:	2100      	movs	r1, #0
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f004 fb05 	bl	8018124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b1a:	2300      	movs	r3, #0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b084      	sub	sp, #16
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	68ba      	ldr	r2, [r7, #8]
 8013b34:	2100      	movs	r1, #0
 8013b36:	68f8      	ldr	r0, [r7, #12]
 8013b38:	f004 faf4 	bl	8018124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b3c:	2300      	movs	r3, #0
}
 8013b3e:	4618      	mov	r0, r3
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}

08013b46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013b46:	b580      	push	{r7, lr}
 8013b48:	b082      	sub	sp, #8
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2204      	movs	r2, #4
 8013b52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013b56:	2300      	movs	r3, #0
 8013b58:	2200      	movs	r2, #0
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f004 fac0 	bl	80180e2 <USBD_LL_Transmit>

  return USBD_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2205      	movs	r2, #5
 8013b78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	2200      	movs	r2, #0
 8013b80:	2100      	movs	r1, #0
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f004 face 	bl	8018124 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
	...

08013b94 <__NVIC_SetPriority>:
{
 8013b94:	b480      	push	{r7}
 8013b96:	b083      	sub	sp, #12
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	6039      	str	r1, [r7, #0]
 8013b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	db0a      	blt.n	8013bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013ba8:	683b      	ldr	r3, [r7, #0]
 8013baa:	b2da      	uxtb	r2, r3
 8013bac:	490c      	ldr	r1, [pc, #48]	@ (8013be0 <__NVIC_SetPriority+0x4c>)
 8013bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bb2:	0112      	lsls	r2, r2, #4
 8013bb4:	b2d2      	uxtb	r2, r2
 8013bb6:	440b      	add	r3, r1
 8013bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013bbc:	e00a      	b.n	8013bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	b2da      	uxtb	r2, r3
 8013bc2:	4908      	ldr	r1, [pc, #32]	@ (8013be4 <__NVIC_SetPriority+0x50>)
 8013bc4:	79fb      	ldrb	r3, [r7, #7]
 8013bc6:	f003 030f 	and.w	r3, r3, #15
 8013bca:	3b04      	subs	r3, #4
 8013bcc:	0112      	lsls	r2, r2, #4
 8013bce:	b2d2      	uxtb	r2, r2
 8013bd0:	440b      	add	r3, r1
 8013bd2:	761a      	strb	r2, [r3, #24]
}
 8013bd4:	bf00      	nop
 8013bd6:	370c      	adds	r7, #12
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bde:	4770      	bx	lr
 8013be0:	e000e100 	.word	0xe000e100
 8013be4:	e000ed00 	.word	0xe000ed00

08013be8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013be8:	b580      	push	{r7, lr}
 8013bea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013bec:	4b05      	ldr	r3, [pc, #20]	@ (8013c04 <SysTick_Handler+0x1c>)
 8013bee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013bf0:	f002 fac0 	bl	8016174 <xTaskGetSchedulerState>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b01      	cmp	r3, #1
 8013bf8:	d001      	beq.n	8013bfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013bfa:	f003 fbbd 	bl	8017378 <xPortSysTickHandler>
  }
}
 8013bfe:	bf00      	nop
 8013c00:	bd80      	pop	{r7, pc}
 8013c02:	bf00      	nop
 8013c04:	e000e010 	.word	0xe000e010

08013c08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	f06f 0004 	mvn.w	r0, #4
 8013c12:	f7ff ffbf 	bl	8013b94 <__NVIC_SetPriority>
#endif
}
 8013c16:	bf00      	nop
 8013c18:	bd80      	pop	{r7, pc}
	...

08013c1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013c1c:	b480      	push	{r7}
 8013c1e:	b083      	sub	sp, #12
 8013c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c22:	f3ef 8305 	mrs	r3, IPSR
 8013c26:	603b      	str	r3, [r7, #0]
  return(result);
 8013c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d003      	beq.n	8013c36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013c2e:	f06f 0305 	mvn.w	r3, #5
 8013c32:	607b      	str	r3, [r7, #4]
 8013c34:	e00c      	b.n	8013c50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013c36:	4b0a      	ldr	r3, [pc, #40]	@ (8013c60 <osKernelInitialize+0x44>)
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d105      	bne.n	8013c4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013c3e:	4b08      	ldr	r3, [pc, #32]	@ (8013c60 <osKernelInitialize+0x44>)
 8013c40:	2201      	movs	r2, #1
 8013c42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013c44:	2300      	movs	r3, #0
 8013c46:	607b      	str	r3, [r7, #4]
 8013c48:	e002      	b.n	8013c50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013c4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013c50:	687b      	ldr	r3, [r7, #4]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	370c      	adds	r7, #12
 8013c56:	46bd      	mov	sp, r7
 8013c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop
 8013c60:	20006994 	.word	0x20006994

08013c64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c6a:	f3ef 8305 	mrs	r3, IPSR
 8013c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8013c70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d003      	beq.n	8013c7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8013c76:	f06f 0305 	mvn.w	r3, #5
 8013c7a:	607b      	str	r3, [r7, #4]
 8013c7c:	e010      	b.n	8013ca0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8013cac <osKernelStart+0x48>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	2b01      	cmp	r3, #1
 8013c84:	d109      	bne.n	8013c9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013c86:	f7ff ffbf 	bl	8013c08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013c8a:	4b08      	ldr	r3, [pc, #32]	@ (8013cac <osKernelStart+0x48>)
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013c90:	f001 fdce 	bl	8015830 <vTaskStartScheduler>
      stat = osOK;
 8013c94:	2300      	movs	r3, #0
 8013c96:	607b      	str	r3, [r7, #4]
 8013c98:	e002      	b.n	8013ca0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013c9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013ca0:	687b      	ldr	r3, [r7, #4]
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3708      	adds	r7, #8
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	20006994 	.word	0x20006994

08013cb0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cb6:	f3ef 8305 	mrs	r3, IPSR
 8013cba:	603b      	str	r3, [r7, #0]
  return(result);
 8013cbc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d003      	beq.n	8013cca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8013cc2:	f001 fee3 	bl	8015a8c <xTaskGetTickCountFromISR>
 8013cc6:	6078      	str	r0, [r7, #4]
 8013cc8:	e002      	b.n	8013cd0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8013cca:	f001 fecf 	bl	8015a6c <xTaskGetTickCount>
 8013cce:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8013cd0:	687b      	ldr	r3, [r7, #4]
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3708      	adds	r7, #8
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	bd80      	pop	{r7, pc}

08013cda <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8013cda:	b480      	push	{r7}
 8013cdc:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8013cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b08e      	sub	sp, #56	@ 0x38
 8013cf0:	af04      	add	r7, sp, #16
 8013cf2:	60f8      	str	r0, [r7, #12]
 8013cf4:	60b9      	str	r1, [r7, #8]
 8013cf6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013cfc:	f3ef 8305 	mrs	r3, IPSR
 8013d00:	617b      	str	r3, [r7, #20]
  return(result);
 8013d02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d17f      	bne.n	8013e08 <osThreadNew+0x11c>
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d07c      	beq.n	8013e08 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8013d0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8013d12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013d14:	2318      	movs	r3, #24
 8013d16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013d1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013d20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d045      	beq.n	8013db4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d002      	beq.n	8013d36 <osThreadNew+0x4a>
        name = attr->name;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	699b      	ldr	r3, [r3, #24]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d002      	beq.n	8013d44 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013d44:	69fb      	ldr	r3, [r7, #28]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d008      	beq.n	8013d5c <osThreadNew+0x70>
 8013d4a:	69fb      	ldr	r3, [r7, #28]
 8013d4c:	2b38      	cmp	r3, #56	@ 0x38
 8013d4e:	d805      	bhi.n	8013d5c <osThreadNew+0x70>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	f003 0301 	and.w	r3, r3, #1
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d001      	beq.n	8013d60 <osThreadNew+0x74>
        return (NULL);
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	e054      	b.n	8013e0a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	695b      	ldr	r3, [r3, #20]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d003      	beq.n	8013d70 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	695b      	ldr	r3, [r3, #20]
 8013d6c:	089b      	lsrs	r3, r3, #2
 8013d6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d00e      	beq.n	8013d96 <osThreadNew+0xaa>
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	2bbb      	cmp	r3, #187	@ 0xbb
 8013d7e:	d90a      	bls.n	8013d96 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d006      	beq.n	8013d96 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	695b      	ldr	r3, [r3, #20]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d002      	beq.n	8013d96 <osThreadNew+0xaa>
        mem = 1;
 8013d90:	2301      	movs	r3, #1
 8013d92:	61bb      	str	r3, [r7, #24]
 8013d94:	e010      	b.n	8013db8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	689b      	ldr	r3, [r3, #8]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d10c      	bne.n	8013db8 <osThreadNew+0xcc>
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	68db      	ldr	r3, [r3, #12]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d108      	bne.n	8013db8 <osThreadNew+0xcc>
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	691b      	ldr	r3, [r3, #16]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d104      	bne.n	8013db8 <osThreadNew+0xcc>
          mem = 0;
 8013dae:	2300      	movs	r3, #0
 8013db0:	61bb      	str	r3, [r7, #24]
 8013db2:	e001      	b.n	8013db8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	2b01      	cmp	r3, #1
 8013dbc:	d110      	bne.n	8013de0 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013dc6:	9202      	str	r2, [sp, #8]
 8013dc8:	9301      	str	r3, [sp, #4]
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	9300      	str	r3, [sp, #0]
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	6a3a      	ldr	r2, [r7, #32]
 8013dd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f001 fa41 	bl	801525c <xTaskCreateStatic>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	613b      	str	r3, [r7, #16]
 8013dde:	e013      	b.n	8013e08 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8013de0:	69bb      	ldr	r3, [r7, #24]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d110      	bne.n	8013e08 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013de6:	6a3b      	ldr	r3, [r7, #32]
 8013de8:	b29a      	uxth	r2, r3
 8013dea:	f107 0310 	add.w	r3, r7, #16
 8013dee:	9301      	str	r3, [sp, #4]
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	9300      	str	r3, [sp, #0]
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013df8:	68f8      	ldr	r0, [r7, #12]
 8013dfa:	f001 fa8f 	bl	801531c <xTaskCreate>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	2b01      	cmp	r3, #1
 8013e02:	d001      	beq.n	8013e08 <osThreadNew+0x11c>
            hTask = NULL;
 8013e04:	2300      	movs	r3, #0
 8013e06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013e08:	693b      	ldr	r3, [r7, #16]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3728      	adds	r7, #40	@ 0x28
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
	...

08013e14 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b088      	sub	sp, #32
 8013e18:	af02      	add	r7, sp, #8
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8013e22:	697b      	ldr	r3, [r7, #20]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <osThreadFlagsSet+0x1a>
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	da03      	bge.n	8013e36 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8013e2e:	f06f 0303 	mvn.w	r3, #3
 8013e32:	60fb      	str	r3, [r7, #12]
 8013e34:	e035      	b.n	8013ea2 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8013e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013e3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e3c:	f3ef 8305 	mrs	r3, IPSR
 8013e40:	613b      	str	r3, [r7, #16]
  return(result);
 8013e42:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d01f      	beq.n	8013e88 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8013e4c:	f107 0308 	add.w	r3, r7, #8
 8013e50:	9300      	str	r3, [sp, #0]
 8013e52:	2300      	movs	r3, #0
 8013e54:	2201      	movs	r2, #1
 8013e56:	6839      	ldr	r1, [r7, #0]
 8013e58:	6978      	ldr	r0, [r7, #20]
 8013e5a:	f002 fc3b 	bl	80166d4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8013e5e:	f107 030c 	add.w	r3, r7, #12
 8013e62:	2200      	movs	r2, #0
 8013e64:	9200      	str	r2, [sp, #0]
 8013e66:	2200      	movs	r2, #0
 8013e68:	2100      	movs	r1, #0
 8013e6a:	6978      	ldr	r0, [r7, #20]
 8013e6c:	f002 fc32 	bl	80166d4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d015      	beq.n	8013ea2 <osThreadFlagsSet+0x8e>
 8013e76:	4b0d      	ldr	r3, [pc, #52]	@ (8013eac <osThreadFlagsSet+0x98>)
 8013e78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e7c:	601a      	str	r2, [r3, #0]
 8013e7e:	f3bf 8f4f 	dsb	sy
 8013e82:	f3bf 8f6f 	isb	sy
 8013e86:	e00c      	b.n	8013ea2 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8013e88:	2300      	movs	r3, #0
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	6839      	ldr	r1, [r7, #0]
 8013e8e:	6978      	ldr	r0, [r7, #20]
 8013e90:	f002 fb5e 	bl	8016550 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8013e94:	f107 030c 	add.w	r3, r7, #12
 8013e98:	2200      	movs	r2, #0
 8013e9a:	2100      	movs	r1, #0
 8013e9c:	6978      	ldr	r0, [r7, #20]
 8013e9e:	f002 fb57 	bl	8016550 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8013ea2:	68fb      	ldr	r3, [r7, #12]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3718      	adds	r7, #24
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	e000ed04 	.word	0xe000ed04

08013eb0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b08c      	sub	sp, #48	@ 0x30
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	60f8      	str	r0, [r7, #12]
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ebc:	f3ef 8305 	mrs	r3, IPSR
 8013ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8013ec2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d003      	beq.n	8013ed0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8013ec8:	f06f 0305 	mvn.w	r3, #5
 8013ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013ece:	e06b      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	da03      	bge.n	8013ede <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8013ed6:	f06f 0303 	mvn.w	r3, #3
 8013eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013edc:	e064      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8013ede:	68bb      	ldr	r3, [r7, #8]
 8013ee0:	f003 0302 	and.w	r3, r3, #2
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d002      	beq.n	8013eee <osThreadFlagsWait+0x3e>
      clear = 0U;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013eec:	e001      	b.n	8013ef2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    rflags = 0U;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tout   = timeout;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	627b      	str	r3, [r7, #36]	@ 0x24

    t0 = xTaskGetTickCount();
 8013efa:	f001 fdb7 	bl	8015a6c <xTaskGetTickCount>
 8013efe:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8013f00:	f107 0210 	add.w	r2, r7, #16
 8013f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013f08:	2000      	movs	r0, #0
 8013f0a:	f002 fac1 	bl	8016490 <xTaskNotifyWait>
 8013f0e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	2b01      	cmp	r3, #1
 8013f14:	d137      	bne.n	8013f86 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8013f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	4013      	ands	r3, r2
 8013f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        rflags |= nval;
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013f22:	4313      	orrs	r3, r2
 8013f24:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	f003 0301 	and.w	r3, r3, #1
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d00c      	beq.n	8013f4a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8013f30:	68fa      	ldr	r2, [r7, #12]
 8013f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f34:	4013      	ands	r3, r2
 8013f36:	68fa      	ldr	r2, [r7, #12]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d032      	beq.n	8013fa2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d10f      	bne.n	8013f62 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8013f42:	f06f 0302 	mvn.w	r3, #2
 8013f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8013f48:	e02e      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f4e:	4013      	ands	r3, r2
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d128      	bne.n	8013fa6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d103      	bne.n	8013f62 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8013f5a:	f06f 0302 	mvn.w	r3, #2
 8013f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
              break;
 8013f60:	e022      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8013f62:	f001 fd83 	bl	8015a6c <xTaskGetTickCount>
 8013f66:	4602      	mov	r2, r0
 8013f68:	6a3b      	ldr	r3, [r7, #32]
 8013f6a:	1ad3      	subs	r3, r2, r3
 8013f6c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8013f6e:	69ba      	ldr	r2, [r7, #24]
 8013f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f72:	429a      	cmp	r2, r3
 8013f74:	d902      	bls.n	8013f7c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f7a:	e00e      	b.n	8013f9a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8013f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	1ad3      	subs	r3, r2, r3
 8013f82:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f84:	e009      	b.n	8013f9a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d103      	bne.n	8013f94 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8013f8c:	f06f 0302 	mvn.w	r3, #2
 8013f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f92:	e002      	b.n	8013f9a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8013f94:	f06f 0301 	mvn.w	r3, #1
 8013f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8013f9a:	69fb      	ldr	r3, [r7, #28]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d1af      	bne.n	8013f00 <osThreadFlagsWait+0x50>
 8013fa0:	e002      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
            break;
 8013fa2:	bf00      	nop
 8013fa4:	e000      	b.n	8013fa8 <osThreadFlagsWait+0xf8>
            break;
 8013fa6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8013fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3730      	adds	r7, #48	@ 0x30
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}

08013fb2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013fb2:	b580      	push	{r7, lr}
 8013fb4:	b084      	sub	sp, #16
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013fba:	f3ef 8305 	mrs	r3, IPSR
 8013fbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8013fc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d003      	beq.n	8013fce <osDelay+0x1c>
    stat = osErrorISR;
 8013fc6:	f06f 0305 	mvn.w	r3, #5
 8013fca:	60fb      	str	r3, [r7, #12]
 8013fcc:	e007      	b.n	8013fde <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d002      	beq.n	8013fde <osDelay+0x2c>
      vTaskDelay(ticks);
 8013fd8:	6878      	ldr	r0, [r7, #4]
 8013fda:	f001 fbf3 	bl	80157c4 <vTaskDelay>
    }
  }

  return (stat);
 8013fde:	68fb      	ldr	r3, [r7, #12]
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	3710      	adds	r7, #16
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	bd80      	pop	{r7, pc}

08013fe8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013ff0:	f3ef 8305 	mrs	r3, IPSR
 8013ff4:	60fb      	str	r3, [r7, #12]
  return(result);
 8013ff6:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d003      	beq.n	8014004 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8013ffc:	f06f 0305 	mvn.w	r3, #5
 8014000:	617b      	str	r3, [r7, #20]
 8014002:	e019      	b.n	8014038 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8014004:	2300      	movs	r3, #0
 8014006:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8014008:	f001 fd30 	bl	8015a6c <xTaskGetTickCount>
 801400c:	4603      	mov	r3, r0
 801400e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	687a      	ldr	r2, [r7, #4]
 8014014:	1ad3      	subs	r3, r2, r3
 8014016:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d009      	beq.n	8014032 <osDelayUntil+0x4a>
 801401e:	693b      	ldr	r3, [r7, #16]
 8014020:	2b00      	cmp	r3, #0
 8014022:	db06      	blt.n	8014032 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8014024:	f107 0308 	add.w	r3, r7, #8
 8014028:	6939      	ldr	r1, [r7, #16]
 801402a:	4618      	mov	r0, r3
 801402c:	f001 fb4a 	bl	80156c4 <vTaskDelayUntil>
 8014030:	e002      	b.n	8014038 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8014032:	f06f 0303 	mvn.w	r3, #3
 8014036:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8014038:	697b      	ldr	r3, [r7, #20]
}
 801403a:	4618      	mov	r0, r3
 801403c:	3718      	adds	r7, #24
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8014042:	b580      	push	{r7, lr}
 8014044:	b088      	sub	sp, #32
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801404a:	2300      	movs	r3, #0
 801404c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801404e:	f3ef 8305 	mrs	r3, IPSR
 8014052:	60bb      	str	r3, [r7, #8]
  return(result);
 8014054:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8014056:	2b00      	cmp	r3, #0
 8014058:	d174      	bne.n	8014144 <osMutexNew+0x102>
    if (attr != NULL) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d003      	beq.n	8014068 <osMutexNew+0x26>
      type = attr->attr_bits;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	61bb      	str	r3, [r7, #24]
 8014066:	e001      	b.n	801406c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8014068:	2300      	movs	r3, #0
 801406a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801406c:	69bb      	ldr	r3, [r7, #24]
 801406e:	f003 0301 	and.w	r3, r3, #1
 8014072:	2b00      	cmp	r3, #0
 8014074:	d002      	beq.n	801407c <osMutexNew+0x3a>
      rmtx = 1U;
 8014076:	2301      	movs	r3, #1
 8014078:	617b      	str	r3, [r7, #20]
 801407a:	e001      	b.n	8014080 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 801407c:	2300      	movs	r3, #0
 801407e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	f003 0308 	and.w	r3, r3, #8
 8014086:	2b00      	cmp	r3, #0
 8014088:	d15c      	bne.n	8014144 <osMutexNew+0x102>
      mem = -1;
 801408a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801408e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d015      	beq.n	80140c2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	689b      	ldr	r3, [r3, #8]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d006      	beq.n	80140ac <osMutexNew+0x6a>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80140a4:	d902      	bls.n	80140ac <osMutexNew+0x6a>
          mem = 1;
 80140a6:	2301      	movs	r3, #1
 80140a8:	613b      	str	r3, [r7, #16]
 80140aa:	e00c      	b.n	80140c6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	689b      	ldr	r3, [r3, #8]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d108      	bne.n	80140c6 <osMutexNew+0x84>
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d104      	bne.n	80140c6 <osMutexNew+0x84>
            mem = 0;
 80140bc:	2300      	movs	r3, #0
 80140be:	613b      	str	r3, [r7, #16]
 80140c0:	e001      	b.n	80140c6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80140c6:	693b      	ldr	r3, [r7, #16]
 80140c8:	2b01      	cmp	r3, #1
 80140ca:	d112      	bne.n	80140f2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d007      	beq.n	80140e2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	689b      	ldr	r3, [r3, #8]
 80140d6:	4619      	mov	r1, r3
 80140d8:	2004      	movs	r0, #4
 80140da:	f000 fb20 	bl	801471e <xQueueCreateMutexStatic>
 80140de:	61f8      	str	r0, [r7, #28]
 80140e0:	e016      	b.n	8014110 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	689b      	ldr	r3, [r3, #8]
 80140e6:	4619      	mov	r1, r3
 80140e8:	2001      	movs	r0, #1
 80140ea:	f000 fb18 	bl	801471e <xQueueCreateMutexStatic>
 80140ee:	61f8      	str	r0, [r7, #28]
 80140f0:	e00e      	b.n	8014110 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d10b      	bne.n	8014110 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d004      	beq.n	8014108 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80140fe:	2004      	movs	r0, #4
 8014100:	f000 faf5 	bl	80146ee <xQueueCreateMutex>
 8014104:	61f8      	str	r0, [r7, #28]
 8014106:	e003      	b.n	8014110 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8014108:	2001      	movs	r0, #1
 801410a:	f000 faf0 	bl	80146ee <xQueueCreateMutex>
 801410e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8014110:	69fb      	ldr	r3, [r7, #28]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d00c      	beq.n	8014130 <osMutexNew+0xee>
        if (attr != NULL) {
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d003      	beq.n	8014124 <osMutexNew+0xe2>
          name = attr->name;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	60fb      	str	r3, [r7, #12]
 8014122:	e001      	b.n	8014128 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8014124:	2300      	movs	r3, #0
 8014126:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8014128:	68f9      	ldr	r1, [r7, #12]
 801412a:	69f8      	ldr	r0, [r7, #28]
 801412c:	f001 f838 	bl	80151a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d006      	beq.n	8014144 <osMutexNew+0x102>
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d003      	beq.n	8014144 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	f043 0301 	orr.w	r3, r3, #1
 8014142:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8014144:	69fb      	ldr	r3, [r7, #28]
}
 8014146:	4618      	mov	r0, r3
 8014148:	3720      	adds	r7, #32
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}

0801414e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801414e:	b580      	push	{r7, lr}
 8014150:	b086      	sub	sp, #24
 8014152:	af00      	add	r7, sp, #0
 8014154:	6078      	str	r0, [r7, #4]
 8014156:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f023 0301 	bic.w	r3, r3, #1
 801415e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8014168:	2300      	movs	r3, #0
 801416a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801416c:	f3ef 8305 	mrs	r3, IPSR
 8014170:	60bb      	str	r3, [r7, #8]
  return(result);
 8014172:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014174:	2b00      	cmp	r3, #0
 8014176:	d003      	beq.n	8014180 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8014178:	f06f 0305 	mvn.w	r3, #5
 801417c:	617b      	str	r3, [r7, #20]
 801417e:	e02c      	b.n	80141da <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d103      	bne.n	801418e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8014186:	f06f 0303 	mvn.w	r3, #3
 801418a:	617b      	str	r3, [r7, #20]
 801418c:	e025      	b.n	80141da <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d011      	beq.n	80141b8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8014194:	6839      	ldr	r1, [r7, #0]
 8014196:	6938      	ldr	r0, [r7, #16]
 8014198:	f000 fb11 	bl	80147be <xQueueTakeMutexRecursive>
 801419c:	4603      	mov	r3, r0
 801419e:	2b01      	cmp	r3, #1
 80141a0:	d01b      	beq.n	80141da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d003      	beq.n	80141b0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80141a8:	f06f 0301 	mvn.w	r3, #1
 80141ac:	617b      	str	r3, [r7, #20]
 80141ae:	e014      	b.n	80141da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80141b0:	f06f 0302 	mvn.w	r3, #2
 80141b4:	617b      	str	r3, [r7, #20]
 80141b6:	e010      	b.n	80141da <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80141b8:	6839      	ldr	r1, [r7, #0]
 80141ba:	6938      	ldr	r0, [r7, #16]
 80141bc:	f000 fdb8 	bl	8014d30 <xQueueSemaphoreTake>
 80141c0:	4603      	mov	r3, r0
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d009      	beq.n	80141da <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80141c6:	683b      	ldr	r3, [r7, #0]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d003      	beq.n	80141d4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80141cc:	f06f 0301 	mvn.w	r3, #1
 80141d0:	617b      	str	r3, [r7, #20]
 80141d2:	e002      	b.n	80141da <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80141d4:	f06f 0302 	mvn.w	r3, #2
 80141d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80141da:	697b      	ldr	r3, [r7, #20]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	3718      	adds	r7, #24
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}

080141e4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b086      	sub	sp, #24
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f023 0301 	bic.w	r3, r3, #1
 80141f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f003 0301 	and.w	r3, r3, #1
 80141fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80141fc:	2300      	movs	r3, #0
 80141fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014200:	f3ef 8305 	mrs	r3, IPSR
 8014204:	60bb      	str	r3, [r7, #8]
  return(result);
 8014206:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8014208:	2b00      	cmp	r3, #0
 801420a:	d003      	beq.n	8014214 <osMutexRelease+0x30>
    stat = osErrorISR;
 801420c:	f06f 0305 	mvn.w	r3, #5
 8014210:	617b      	str	r3, [r7, #20]
 8014212:	e01f      	b.n	8014254 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8014214:	693b      	ldr	r3, [r7, #16]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d103      	bne.n	8014222 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801421a:	f06f 0303 	mvn.w	r3, #3
 801421e:	617b      	str	r3, [r7, #20]
 8014220:	e018      	b.n	8014254 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d009      	beq.n	801423c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8014228:	6938      	ldr	r0, [r7, #16]
 801422a:	f000 fa93 	bl	8014754 <xQueueGiveMutexRecursive>
 801422e:	4603      	mov	r3, r0
 8014230:	2b01      	cmp	r3, #1
 8014232:	d00f      	beq.n	8014254 <osMutexRelease+0x70>
        stat = osErrorResource;
 8014234:	f06f 0302 	mvn.w	r3, #2
 8014238:	617b      	str	r3, [r7, #20]
 801423a:	e00b      	b.n	8014254 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801423c:	2300      	movs	r3, #0
 801423e:	2200      	movs	r2, #0
 8014240:	2100      	movs	r1, #0
 8014242:	6938      	ldr	r0, [r7, #16]
 8014244:	f000 faf2 	bl	801482c <xQueueGenericSend>
 8014248:	4603      	mov	r3, r0
 801424a:	2b01      	cmp	r3, #1
 801424c:	d002      	beq.n	8014254 <osMutexRelease+0x70>
        stat = osErrorResource;
 801424e:	f06f 0302 	mvn.w	r3, #2
 8014252:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8014254:	697b      	ldr	r3, [r7, #20]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3718      	adds	r7, #24
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
	...

08014260 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014260:	b480      	push	{r7}
 8014262:	b085      	sub	sp, #20
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	4a07      	ldr	r2, [pc, #28]	@ (801428c <vApplicationGetIdleTaskMemory+0x2c>)
 8014270:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	4a06      	ldr	r2, [pc, #24]	@ (8014290 <vApplicationGetIdleTaskMemory+0x30>)
 8014276:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801427e:	601a      	str	r2, [r3, #0]
}
 8014280:	bf00      	nop
 8014282:	3714      	adds	r7, #20
 8014284:	46bd      	mov	sp, r7
 8014286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428a:	4770      	bx	lr
 801428c:	20006998 	.word	0x20006998
 8014290:	20006a54 	.word	0x20006a54

08014294 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	60f8      	str	r0, [r7, #12]
 801429c:	60b9      	str	r1, [r7, #8]
 801429e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	4a07      	ldr	r2, [pc, #28]	@ (80142c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80142a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	4a06      	ldr	r2, [pc, #24]	@ (80142c4 <vApplicationGetTimerTaskMemory+0x30>)
 80142aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80142b2:	601a      	str	r2, [r3, #0]
}
 80142b4:	bf00      	nop
 80142b6:	3714      	adds	r7, #20
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr
 80142c0:	20006e54 	.word	0x20006e54
 80142c4:	20006f10 	.word	0x20006f10

080142c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80142c8:	b480      	push	{r7}
 80142ca:	b083      	sub	sp, #12
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f103 0208 	add.w	r2, r3, #8
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80142e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f103 0208 	add.w	r2, r3, #8
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f103 0208 	add.w	r2, r3, #8
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2200      	movs	r2, #0
 80142fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80142fc:	bf00      	nop
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014308:	b480      	push	{r7}
 801430a:	b083      	sub	sp, #12
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2200      	movs	r2, #0
 8014314:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014316:	bf00      	nop
 8014318:	370c      	adds	r7, #12
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr

08014322 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014322:	b480      	push	{r7}
 8014324:	b085      	sub	sp, #20
 8014326:	af00      	add	r7, sp, #0
 8014328:	6078      	str	r0, [r7, #4]
 801432a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	685b      	ldr	r3, [r3, #4]
 8014330:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	68fa      	ldr	r2, [r7, #12]
 8014336:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	689a      	ldr	r2, [r3, #8]
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	689b      	ldr	r3, [r3, #8]
 8014344:	683a      	ldr	r2, [r7, #0]
 8014346:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	683a      	ldr	r2, [r7, #0]
 801434c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	687a      	ldr	r2, [r7, #4]
 8014352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	681b      	ldr	r3, [r3, #0]
 8014358:	1c5a      	adds	r2, r3, #1
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	601a      	str	r2, [r3, #0]
}
 801435e:	bf00      	nop
 8014360:	3714      	adds	r7, #20
 8014362:	46bd      	mov	sp, r7
 8014364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014368:	4770      	bx	lr

0801436a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801436a:	b480      	push	{r7}
 801436c:	b085      	sub	sp, #20
 801436e:	af00      	add	r7, sp, #0
 8014370:	6078      	str	r0, [r7, #4]
 8014372:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014380:	d103      	bne.n	801438a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	60fb      	str	r3, [r7, #12]
 8014388:	e00c      	b.n	80143a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	3308      	adds	r3, #8
 801438e:	60fb      	str	r3, [r7, #12]
 8014390:	e002      	b.n	8014398 <vListInsert+0x2e>
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	60fb      	str	r3, [r7, #12]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	685b      	ldr	r3, [r3, #4]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	68ba      	ldr	r2, [r7, #8]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	d2f6      	bcs.n	8014392 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	685a      	ldr	r2, [r3, #4]
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	685b      	ldr	r3, [r3, #4]
 80143b0:	683a      	ldr	r2, [r7, #0]
 80143b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	68fa      	ldr	r2, [r7, #12]
 80143b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	683a      	ldr	r2, [r7, #0]
 80143be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	687a      	ldr	r2, [r7, #4]
 80143c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	1c5a      	adds	r2, r3, #1
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	601a      	str	r2, [r3, #0]
}
 80143d0:	bf00      	nop
 80143d2:	3714      	adds	r7, #20
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr

080143dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80143dc:	b480      	push	{r7}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	691b      	ldr	r3, [r3, #16]
 80143e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	687a      	ldr	r2, [r7, #4]
 80143f0:	6892      	ldr	r2, [r2, #8]
 80143f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	689b      	ldr	r3, [r3, #8]
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	6852      	ldr	r2, [r2, #4]
 80143fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	685b      	ldr	r3, [r3, #4]
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	429a      	cmp	r2, r3
 8014406:	d103      	bne.n	8014410 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	689a      	ldr	r2, [r3, #8]
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	2200      	movs	r2, #0
 8014414:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	1e5a      	subs	r2, r3, #1
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
}
 8014424:	4618      	mov	r0, r3
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr

08014430 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	2b00      	cmp	r3, #0
 8014442:	d10b      	bne.n	801445c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014448:	f383 8811 	msr	BASEPRI, r3
 801444c:	f3bf 8f6f 	isb	sy
 8014450:	f3bf 8f4f 	dsb	sy
 8014454:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014456:	bf00      	nop
 8014458:	bf00      	nop
 801445a:	e7fd      	b.n	8014458 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801445c:	f002 fefc 	bl	8017258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014468:	68f9      	ldr	r1, [r7, #12]
 801446a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801446c:	fb01 f303 	mul.w	r3, r1, r3
 8014470:	441a      	add	r2, r3
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	2200      	movs	r2, #0
 801447a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801448c:	3b01      	subs	r3, #1
 801448e:	68f9      	ldr	r1, [r7, #12]
 8014490:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014492:	fb01 f303 	mul.w	r3, r1, r3
 8014496:	441a      	add	r2, r3
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	22ff      	movs	r2, #255	@ 0xff
 80144a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	22ff      	movs	r2, #255	@ 0xff
 80144a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d114      	bne.n	80144dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	691b      	ldr	r3, [r3, #16]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d01a      	beq.n	80144f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	3310      	adds	r3, #16
 80144be:	4618      	mov	r0, r3
 80144c0:	f001 fc82 	bl	8015dc8 <xTaskRemoveFromEventList>
 80144c4:	4603      	mov	r3, r0
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d012      	beq.n	80144f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80144ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014500 <xQueueGenericReset+0xd0>)
 80144cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144d0:	601a      	str	r2, [r3, #0]
 80144d2:	f3bf 8f4f 	dsb	sy
 80144d6:	f3bf 8f6f 	isb	sy
 80144da:	e009      	b.n	80144f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	3310      	adds	r3, #16
 80144e0:	4618      	mov	r0, r3
 80144e2:	f7ff fef1 	bl	80142c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	3324      	adds	r3, #36	@ 0x24
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7ff feec 	bl	80142c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80144f0:	f002 fee4 	bl	80172bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80144f4:	2301      	movs	r3, #1
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
 80144fe:	bf00      	nop
 8014500:	e000ed04 	.word	0xe000ed04

08014504 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014504:	b580      	push	{r7, lr}
 8014506:	b08e      	sub	sp, #56	@ 0x38
 8014508:	af02      	add	r7, sp, #8
 801450a:	60f8      	str	r0, [r7, #12]
 801450c:	60b9      	str	r1, [r7, #8]
 801450e:	607a      	str	r2, [r7, #4]
 8014510:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d10b      	bne.n	8014530 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801451c:	f383 8811 	msr	BASEPRI, r3
 8014520:	f3bf 8f6f 	isb	sy
 8014524:	f3bf 8f4f 	dsb	sy
 8014528:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801452a:	bf00      	nop
 801452c:	bf00      	nop
 801452e:	e7fd      	b.n	801452c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10b      	bne.n	801454e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801453a:	f383 8811 	msr	BASEPRI, r3
 801453e:	f3bf 8f6f 	isb	sy
 8014542:	f3bf 8f4f 	dsb	sy
 8014546:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014548:	bf00      	nop
 801454a:	bf00      	nop
 801454c:	e7fd      	b.n	801454a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	2b00      	cmp	r3, #0
 8014552:	d002      	beq.n	801455a <xQueueGenericCreateStatic+0x56>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d001      	beq.n	801455e <xQueueGenericCreateStatic+0x5a>
 801455a:	2301      	movs	r3, #1
 801455c:	e000      	b.n	8014560 <xQueueGenericCreateStatic+0x5c>
 801455e:	2300      	movs	r3, #0
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10b      	bne.n	801457c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014568:	f383 8811 	msr	BASEPRI, r3
 801456c:	f3bf 8f6f 	isb	sy
 8014570:	f3bf 8f4f 	dsb	sy
 8014574:	623b      	str	r3, [r7, #32]
}
 8014576:	bf00      	nop
 8014578:	bf00      	nop
 801457a:	e7fd      	b.n	8014578 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d102      	bne.n	8014588 <xQueueGenericCreateStatic+0x84>
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d101      	bne.n	801458c <xQueueGenericCreateStatic+0x88>
 8014588:	2301      	movs	r3, #1
 801458a:	e000      	b.n	801458e <xQueueGenericCreateStatic+0x8a>
 801458c:	2300      	movs	r3, #0
 801458e:	2b00      	cmp	r3, #0
 8014590:	d10b      	bne.n	80145aa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014596:	f383 8811 	msr	BASEPRI, r3
 801459a:	f3bf 8f6f 	isb	sy
 801459e:	f3bf 8f4f 	dsb	sy
 80145a2:	61fb      	str	r3, [r7, #28]
}
 80145a4:	bf00      	nop
 80145a6:	bf00      	nop
 80145a8:	e7fd      	b.n	80145a6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80145aa:	2350      	movs	r3, #80	@ 0x50
 80145ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	2b50      	cmp	r3, #80	@ 0x50
 80145b2:	d00b      	beq.n	80145cc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80145b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145b8:	f383 8811 	msr	BASEPRI, r3
 80145bc:	f3bf 8f6f 	isb	sy
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	61bb      	str	r3, [r7, #24]
}
 80145c6:	bf00      	nop
 80145c8:	bf00      	nop
 80145ca:	e7fd      	b.n	80145c8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80145cc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80145d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d00d      	beq.n	80145f4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80145d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145da:	2201      	movs	r2, #1
 80145dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80145e0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80145e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e6:	9300      	str	r3, [sp, #0]
 80145e8:	4613      	mov	r3, r2
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	68b9      	ldr	r1, [r7, #8]
 80145ee:	68f8      	ldr	r0, [r7, #12]
 80145f0:	f000 f840 	bl	8014674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80145f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3730      	adds	r7, #48	@ 0x30
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}

080145fe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80145fe:	b580      	push	{r7, lr}
 8014600:	b08a      	sub	sp, #40	@ 0x28
 8014602:	af02      	add	r7, sp, #8
 8014604:	60f8      	str	r0, [r7, #12]
 8014606:	60b9      	str	r1, [r7, #8]
 8014608:	4613      	mov	r3, r2
 801460a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d10b      	bne.n	801462a <xQueueGenericCreate+0x2c>
	__asm volatile
 8014612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014616:	f383 8811 	msr	BASEPRI, r3
 801461a:	f3bf 8f6f 	isb	sy
 801461e:	f3bf 8f4f 	dsb	sy
 8014622:	613b      	str	r3, [r7, #16]
}
 8014624:	bf00      	nop
 8014626:	bf00      	nop
 8014628:	e7fd      	b.n	8014626 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	68ba      	ldr	r2, [r7, #8]
 801462e:	fb02 f303 	mul.w	r3, r2, r3
 8014632:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	3350      	adds	r3, #80	@ 0x50
 8014638:	4618      	mov	r0, r3
 801463a:	f002 ff2f 	bl	801749c <pvPortMalloc>
 801463e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014640:	69bb      	ldr	r3, [r7, #24]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d011      	beq.n	801466a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801464a:	697b      	ldr	r3, [r7, #20]
 801464c:	3350      	adds	r3, #80	@ 0x50
 801464e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	2200      	movs	r2, #0
 8014654:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014658:	79fa      	ldrb	r2, [r7, #7]
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	9300      	str	r3, [sp, #0]
 801465e:	4613      	mov	r3, r2
 8014660:	697a      	ldr	r2, [r7, #20]
 8014662:	68b9      	ldr	r1, [r7, #8]
 8014664:	68f8      	ldr	r0, [r7, #12]
 8014666:	f000 f805 	bl	8014674 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801466a:	69bb      	ldr	r3, [r7, #24]
	}
 801466c:	4618      	mov	r0, r3
 801466e:	3720      	adds	r7, #32
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	60f8      	str	r0, [r7, #12]
 801467c:	60b9      	str	r1, [r7, #8]
 801467e:	607a      	str	r2, [r7, #4]
 8014680:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014682:	68bb      	ldr	r3, [r7, #8]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d103      	bne.n	8014690 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	69ba      	ldr	r2, [r7, #24]
 801468c:	601a      	str	r2, [r3, #0]
 801468e:	e002      	b.n	8014696 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014690:	69bb      	ldr	r3, [r7, #24]
 8014692:	687a      	ldr	r2, [r7, #4]
 8014694:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014696:	69bb      	ldr	r3, [r7, #24]
 8014698:	68fa      	ldr	r2, [r7, #12]
 801469a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801469c:	69bb      	ldr	r3, [r7, #24]
 801469e:	68ba      	ldr	r2, [r7, #8]
 80146a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80146a2:	2101      	movs	r1, #1
 80146a4:	69b8      	ldr	r0, [r7, #24]
 80146a6:	f7ff fec3 	bl	8014430 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	78fa      	ldrb	r2, [r7, #3]
 80146ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80146b2:	bf00      	nop
 80146b4:	3710      	adds	r7, #16
 80146b6:	46bd      	mov	sp, r7
 80146b8:	bd80      	pop	{r7, pc}

080146ba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b082      	sub	sp, #8
 80146be:	af00      	add	r7, sp, #0
 80146c0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d00e      	beq.n	80146e6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	2200      	movs	r2, #0
 80146d2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2200      	movs	r2, #0
 80146d8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80146da:	2300      	movs	r3, #0
 80146dc:	2200      	movs	r2, #0
 80146de:	2100      	movs	r1, #0
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f000 f8a3 	bl	801482c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80146e6:	bf00      	nop
 80146e8:	3708      	adds	r7, #8
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}

080146ee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b086      	sub	sp, #24
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	4603      	mov	r3, r0
 80146f6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80146f8:	2301      	movs	r3, #1
 80146fa:	617b      	str	r3, [r7, #20]
 80146fc:	2300      	movs	r3, #0
 80146fe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014700:	79fb      	ldrb	r3, [r7, #7]
 8014702:	461a      	mov	r2, r3
 8014704:	6939      	ldr	r1, [r7, #16]
 8014706:	6978      	ldr	r0, [r7, #20]
 8014708:	f7ff ff79 	bl	80145fe <xQueueGenericCreate>
 801470c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801470e:	68f8      	ldr	r0, [r7, #12]
 8014710:	f7ff ffd3 	bl	80146ba <prvInitialiseMutex>

		return xNewQueue;
 8014714:	68fb      	ldr	r3, [r7, #12]
	}
 8014716:	4618      	mov	r0, r3
 8014718:	3718      	adds	r7, #24
 801471a:	46bd      	mov	sp, r7
 801471c:	bd80      	pop	{r7, pc}

0801471e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801471e:	b580      	push	{r7, lr}
 8014720:	b088      	sub	sp, #32
 8014722:	af02      	add	r7, sp, #8
 8014724:	4603      	mov	r3, r0
 8014726:	6039      	str	r1, [r7, #0]
 8014728:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 801472a:	2301      	movs	r3, #1
 801472c:	617b      	str	r3, [r7, #20]
 801472e:	2300      	movs	r3, #0
 8014730:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8014732:	79fb      	ldrb	r3, [r7, #7]
 8014734:	9300      	str	r3, [sp, #0]
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	2200      	movs	r2, #0
 801473a:	6939      	ldr	r1, [r7, #16]
 801473c:	6978      	ldr	r0, [r7, #20]
 801473e:	f7ff fee1 	bl	8014504 <xQueueGenericCreateStatic>
 8014742:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff ffb8 	bl	80146ba <prvInitialiseMutex>

		return xNewQueue;
 801474a:	68fb      	ldr	r3, [r7, #12]
	}
 801474c:	4618      	mov	r0, r3
 801474e:	3718      	adds	r7, #24
 8014750:	46bd      	mov	sp, r7
 8014752:	bd80      	pop	{r7, pc}

08014754 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b087      	sub	sp, #28
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d10b      	bne.n	801477e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8014766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801476a:	f383 8811 	msr	BASEPRI, r3
 801476e:	f3bf 8f6f 	isb	sy
 8014772:	f3bf 8f4f 	dsb	sy
 8014776:	60fb      	str	r3, [r7, #12]
}
 8014778:	bf00      	nop
 801477a:	bf00      	nop
 801477c:	e7fd      	b.n	801477a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	689c      	ldr	r4, [r3, #8]
 8014782:	f001 fce7 	bl	8016154 <xTaskGetCurrentTaskHandle>
 8014786:	4603      	mov	r3, r0
 8014788:	429c      	cmp	r4, r3
 801478a:	d111      	bne.n	80147b0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	68db      	ldr	r3, [r3, #12]
 8014790:	1e5a      	subs	r2, r3, #1
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	68db      	ldr	r3, [r3, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d105      	bne.n	80147aa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 801479e:	2300      	movs	r3, #0
 80147a0:	2200      	movs	r2, #0
 80147a2:	2100      	movs	r1, #0
 80147a4:	6938      	ldr	r0, [r7, #16]
 80147a6:	f000 f841 	bl	801482c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80147aa:	2301      	movs	r3, #1
 80147ac:	617b      	str	r3, [r7, #20]
 80147ae:	e001      	b.n	80147b4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80147b0:	2300      	movs	r3, #0
 80147b2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80147b4:	697b      	ldr	r3, [r7, #20]
	}
 80147b6:	4618      	mov	r0, r3
 80147b8:	371c      	adds	r7, #28
 80147ba:	46bd      	mov	sp, r7
 80147bc:	bd90      	pop	{r4, r7, pc}

080147be <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80147be:	b590      	push	{r4, r7, lr}
 80147c0:	b087      	sub	sp, #28
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d10b      	bne.n	80147ea <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 80147d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	60fb      	str	r3, [r7, #12]
}
 80147e4:	bf00      	nop
 80147e6:	bf00      	nop
 80147e8:	e7fd      	b.n	80147e6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	689c      	ldr	r4, [r3, #8]
 80147ee:	f001 fcb1 	bl	8016154 <xTaskGetCurrentTaskHandle>
 80147f2:	4603      	mov	r3, r0
 80147f4:	429c      	cmp	r4, r3
 80147f6:	d107      	bne.n	8014808 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	68db      	ldr	r3, [r3, #12]
 80147fc:	1c5a      	adds	r2, r3, #1
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8014802:	2301      	movs	r3, #1
 8014804:	617b      	str	r3, [r7, #20]
 8014806:	e00c      	b.n	8014822 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8014808:	6839      	ldr	r1, [r7, #0]
 801480a:	6938      	ldr	r0, [r7, #16]
 801480c:	f000 fa90 	bl	8014d30 <xQueueSemaphoreTake>
 8014810:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d004      	beq.n	8014822 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8014818:	693b      	ldr	r3, [r7, #16]
 801481a:	68db      	ldr	r3, [r3, #12]
 801481c:	1c5a      	adds	r2, r3, #1
 801481e:	693b      	ldr	r3, [r7, #16]
 8014820:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8014822:	697b      	ldr	r3, [r7, #20]
	}
 8014824:	4618      	mov	r0, r3
 8014826:	371c      	adds	r7, #28
 8014828:	46bd      	mov	sp, r7
 801482a:	bd90      	pop	{r4, r7, pc}

0801482c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801482c:	b580      	push	{r7, lr}
 801482e:	b08e      	sub	sp, #56	@ 0x38
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801483a:	2300      	movs	r3, #0
 801483c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801483e:	68fb      	ldr	r3, [r7, #12]
 8014840:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014844:	2b00      	cmp	r3, #0
 8014846:	d10b      	bne.n	8014860 <xQueueGenericSend+0x34>
	__asm volatile
 8014848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801484c:	f383 8811 	msr	BASEPRI, r3
 8014850:	f3bf 8f6f 	isb	sy
 8014854:	f3bf 8f4f 	dsb	sy
 8014858:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801485a:	bf00      	nop
 801485c:	bf00      	nop
 801485e:	e7fd      	b.n	801485c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d103      	bne.n	801486e <xQueueGenericSend+0x42>
 8014866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801486a:	2b00      	cmp	r3, #0
 801486c:	d101      	bne.n	8014872 <xQueueGenericSend+0x46>
 801486e:	2301      	movs	r3, #1
 8014870:	e000      	b.n	8014874 <xQueueGenericSend+0x48>
 8014872:	2300      	movs	r3, #0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d10b      	bne.n	8014890 <xQueueGenericSend+0x64>
	__asm volatile
 8014878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801487c:	f383 8811 	msr	BASEPRI, r3
 8014880:	f3bf 8f6f 	isb	sy
 8014884:	f3bf 8f4f 	dsb	sy
 8014888:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801488a:	bf00      	nop
 801488c:	bf00      	nop
 801488e:	e7fd      	b.n	801488c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	2b02      	cmp	r3, #2
 8014894:	d103      	bne.n	801489e <xQueueGenericSend+0x72>
 8014896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801489a:	2b01      	cmp	r3, #1
 801489c:	d101      	bne.n	80148a2 <xQueueGenericSend+0x76>
 801489e:	2301      	movs	r3, #1
 80148a0:	e000      	b.n	80148a4 <xQueueGenericSend+0x78>
 80148a2:	2300      	movs	r3, #0
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d10b      	bne.n	80148c0 <xQueueGenericSend+0x94>
	__asm volatile
 80148a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ac:	f383 8811 	msr	BASEPRI, r3
 80148b0:	f3bf 8f6f 	isb	sy
 80148b4:	f3bf 8f4f 	dsb	sy
 80148b8:	623b      	str	r3, [r7, #32]
}
 80148ba:	bf00      	nop
 80148bc:	bf00      	nop
 80148be:	e7fd      	b.n	80148bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148c0:	f001 fc58 	bl	8016174 <xTaskGetSchedulerState>
 80148c4:	4603      	mov	r3, r0
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d102      	bne.n	80148d0 <xQueueGenericSend+0xa4>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d101      	bne.n	80148d4 <xQueueGenericSend+0xa8>
 80148d0:	2301      	movs	r3, #1
 80148d2:	e000      	b.n	80148d6 <xQueueGenericSend+0xaa>
 80148d4:	2300      	movs	r3, #0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d10b      	bne.n	80148f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80148da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148de:	f383 8811 	msr	BASEPRI, r3
 80148e2:	f3bf 8f6f 	isb	sy
 80148e6:	f3bf 8f4f 	dsb	sy
 80148ea:	61fb      	str	r3, [r7, #28]
}
 80148ec:	bf00      	nop
 80148ee:	bf00      	nop
 80148f0:	e7fd      	b.n	80148ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80148f2:	f002 fcb1 	bl	8017258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80148f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80148fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80148fe:	429a      	cmp	r2, r3
 8014900:	d302      	bcc.n	8014908 <xQueueGenericSend+0xdc>
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	2b02      	cmp	r3, #2
 8014906:	d129      	bne.n	801495c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014908:	683a      	ldr	r2, [r7, #0]
 801490a:	68b9      	ldr	r1, [r7, #8]
 801490c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801490e:	f000 fb37 	bl	8014f80 <prvCopyDataToQueue>
 8014912:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014918:	2b00      	cmp	r3, #0
 801491a:	d010      	beq.n	801493e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801491c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801491e:	3324      	adds	r3, #36	@ 0x24
 8014920:	4618      	mov	r0, r3
 8014922:	f001 fa51 	bl	8015dc8 <xTaskRemoveFromEventList>
 8014926:	4603      	mov	r3, r0
 8014928:	2b00      	cmp	r3, #0
 801492a:	d013      	beq.n	8014954 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801492c:	4b3f      	ldr	r3, [pc, #252]	@ (8014a2c <xQueueGenericSend+0x200>)
 801492e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014932:	601a      	str	r2, [r3, #0]
 8014934:	f3bf 8f4f 	dsb	sy
 8014938:	f3bf 8f6f 	isb	sy
 801493c:	e00a      	b.n	8014954 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801493e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014940:	2b00      	cmp	r3, #0
 8014942:	d007      	beq.n	8014954 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014944:	4b39      	ldr	r3, [pc, #228]	@ (8014a2c <xQueueGenericSend+0x200>)
 8014946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801494a:	601a      	str	r2, [r3, #0]
 801494c:	f3bf 8f4f 	dsb	sy
 8014950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014954:	f002 fcb2 	bl	80172bc <vPortExitCritical>
				return pdPASS;
 8014958:	2301      	movs	r3, #1
 801495a:	e063      	b.n	8014a24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d103      	bne.n	801496a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014962:	f002 fcab 	bl	80172bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014966:	2300      	movs	r3, #0
 8014968:	e05c      	b.n	8014a24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801496a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801496c:	2b00      	cmp	r3, #0
 801496e:	d106      	bne.n	801497e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014970:	f107 0314 	add.w	r3, r7, #20
 8014974:	4618      	mov	r0, r3
 8014976:	f001 fa8b 	bl	8015e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801497a:	2301      	movs	r3, #1
 801497c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801497e:	f002 fc9d 	bl	80172bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014982:	f000 ffc7 	bl	8015914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014986:	f002 fc67 	bl	8017258 <vPortEnterCritical>
 801498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801498c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014990:	b25b      	sxtb	r3, r3
 8014992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014996:	d103      	bne.n	80149a0 <xQueueGenericSend+0x174>
 8014998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801499a:	2200      	movs	r2, #0
 801499c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80149a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80149a6:	b25b      	sxtb	r3, r3
 80149a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80149ac:	d103      	bne.n	80149b6 <xQueueGenericSend+0x18a>
 80149ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149b0:	2200      	movs	r2, #0
 80149b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80149b6:	f002 fc81 	bl	80172bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80149ba:	1d3a      	adds	r2, r7, #4
 80149bc:	f107 0314 	add.w	r3, r7, #20
 80149c0:	4611      	mov	r1, r2
 80149c2:	4618      	mov	r0, r3
 80149c4:	f001 fa7a 	bl	8015ebc <xTaskCheckForTimeOut>
 80149c8:	4603      	mov	r3, r0
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d124      	bne.n	8014a18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80149ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80149d0:	f000 fbce 	bl	8015170 <prvIsQueueFull>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d018      	beq.n	8014a0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80149da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149dc:	3310      	adds	r3, #16
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	4611      	mov	r1, r2
 80149e2:	4618      	mov	r0, r3
 80149e4:	f001 f99e 	bl	8015d24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80149e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80149ea:	f000 fb59 	bl	80150a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80149ee:	f000 ff9f 	bl	8015930 <xTaskResumeAll>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	f47f af7c 	bne.w	80148f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80149fa:	4b0c      	ldr	r3, [pc, #48]	@ (8014a2c <xQueueGenericSend+0x200>)
 80149fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014a00:	601a      	str	r2, [r3, #0]
 8014a02:	f3bf 8f4f 	dsb	sy
 8014a06:	f3bf 8f6f 	isb	sy
 8014a0a:	e772      	b.n	80148f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a0e:	f000 fb47 	bl	80150a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014a12:	f000 ff8d 	bl	8015930 <xTaskResumeAll>
 8014a16:	e76c      	b.n	80148f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014a18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a1a:	f000 fb41 	bl	80150a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014a1e:	f000 ff87 	bl	8015930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014a22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	3738      	adds	r7, #56	@ 0x38
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	e000ed04 	.word	0xe000ed04

08014a30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b090      	sub	sp, #64	@ 0x40
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60f8      	str	r0, [r7, #12]
 8014a38:	60b9      	str	r1, [r7, #8]
 8014a3a:	607a      	str	r2, [r7, #4]
 8014a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d10b      	bne.n	8014a60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a4c:	f383 8811 	msr	BASEPRI, r3
 8014a50:	f3bf 8f6f 	isb	sy
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014a5a:	bf00      	nop
 8014a5c:	bf00      	nop
 8014a5e:	e7fd      	b.n	8014a5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014a60:	68bb      	ldr	r3, [r7, #8]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d103      	bne.n	8014a6e <xQueueGenericSendFromISR+0x3e>
 8014a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d101      	bne.n	8014a72 <xQueueGenericSendFromISR+0x42>
 8014a6e:	2301      	movs	r3, #1
 8014a70:	e000      	b.n	8014a74 <xQueueGenericSendFromISR+0x44>
 8014a72:	2300      	movs	r3, #0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d10b      	bne.n	8014a90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a7c:	f383 8811 	msr	BASEPRI, r3
 8014a80:	f3bf 8f6f 	isb	sy
 8014a84:	f3bf 8f4f 	dsb	sy
 8014a88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014a8a:	bf00      	nop
 8014a8c:	bf00      	nop
 8014a8e:	e7fd      	b.n	8014a8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	2b02      	cmp	r3, #2
 8014a94:	d103      	bne.n	8014a9e <xQueueGenericSendFromISR+0x6e>
 8014a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a9a:	2b01      	cmp	r3, #1
 8014a9c:	d101      	bne.n	8014aa2 <xQueueGenericSendFromISR+0x72>
 8014a9e:	2301      	movs	r3, #1
 8014aa0:	e000      	b.n	8014aa4 <xQueueGenericSendFromISR+0x74>
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d10b      	bne.n	8014ac0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aac:	f383 8811 	msr	BASEPRI, r3
 8014ab0:	f3bf 8f6f 	isb	sy
 8014ab4:	f3bf 8f4f 	dsb	sy
 8014ab8:	623b      	str	r3, [r7, #32]
}
 8014aba:	bf00      	nop
 8014abc:	bf00      	nop
 8014abe:	e7fd      	b.n	8014abc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ac0:	f002 fcaa 	bl	8017418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014ac4:	f3ef 8211 	mrs	r2, BASEPRI
 8014ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014acc:	f383 8811 	msr	BASEPRI, r3
 8014ad0:	f3bf 8f6f 	isb	sy
 8014ad4:	f3bf 8f4f 	dsb	sy
 8014ad8:	61fa      	str	r2, [r7, #28]
 8014ada:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014adc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014ade:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014ae8:	429a      	cmp	r2, r3
 8014aea:	d302      	bcc.n	8014af2 <xQueueGenericSendFromISR+0xc2>
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	2b02      	cmp	r3, #2
 8014af0:	d12f      	bne.n	8014b52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014af4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014af8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	68b9      	ldr	r1, [r7, #8]
 8014b06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8014b08:	f000 fa3a 	bl	8014f80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014b0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8014b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014b14:	d112      	bne.n	8014b3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d016      	beq.n	8014b4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b20:	3324      	adds	r3, #36	@ 0x24
 8014b22:	4618      	mov	r0, r3
 8014b24:	f001 f950 	bl	8015dc8 <xTaskRemoveFromEventList>
 8014b28:	4603      	mov	r3, r0
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d00e      	beq.n	8014b4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d00b      	beq.n	8014b4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	2201      	movs	r2, #1
 8014b38:	601a      	str	r2, [r3, #0]
 8014b3a:	e007      	b.n	8014b4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014b40:	3301      	adds	r3, #1
 8014b42:	b2db      	uxtb	r3, r3
 8014b44:	b25a      	sxtb	r2, r3
 8014b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014b4c:	2301      	movs	r3, #1
 8014b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014b50:	e001      	b.n	8014b56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014b52:	2300      	movs	r3, #0
 8014b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014b5a:	697b      	ldr	r3, [r7, #20]
 8014b5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014b60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	3740      	adds	r7, #64	@ 0x40
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	bd80      	pop	{r7, pc}

08014b6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b08c      	sub	sp, #48	@ 0x30
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014b78:	2300      	movs	r3, #0
 8014b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d10b      	bne.n	8014b9e <xQueueReceive+0x32>
	__asm volatile
 8014b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	623b      	str	r3, [r7, #32]
}
 8014b98:	bf00      	nop
 8014b9a:	bf00      	nop
 8014b9c:	e7fd      	b.n	8014b9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d103      	bne.n	8014bac <xQueueReceive+0x40>
 8014ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d101      	bne.n	8014bb0 <xQueueReceive+0x44>
 8014bac:	2301      	movs	r3, #1
 8014bae:	e000      	b.n	8014bb2 <xQueueReceive+0x46>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d10b      	bne.n	8014bce <xQueueReceive+0x62>
	__asm volatile
 8014bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bba:	f383 8811 	msr	BASEPRI, r3
 8014bbe:	f3bf 8f6f 	isb	sy
 8014bc2:	f3bf 8f4f 	dsb	sy
 8014bc6:	61fb      	str	r3, [r7, #28]
}
 8014bc8:	bf00      	nop
 8014bca:	bf00      	nop
 8014bcc:	e7fd      	b.n	8014bca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014bce:	f001 fad1 	bl	8016174 <xTaskGetSchedulerState>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d102      	bne.n	8014bde <xQueueReceive+0x72>
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d101      	bne.n	8014be2 <xQueueReceive+0x76>
 8014bde:	2301      	movs	r3, #1
 8014be0:	e000      	b.n	8014be4 <xQueueReceive+0x78>
 8014be2:	2300      	movs	r3, #0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d10b      	bne.n	8014c00 <xQueueReceive+0x94>
	__asm volatile
 8014be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bec:	f383 8811 	msr	BASEPRI, r3
 8014bf0:	f3bf 8f6f 	isb	sy
 8014bf4:	f3bf 8f4f 	dsb	sy
 8014bf8:	61bb      	str	r3, [r7, #24]
}
 8014bfa:	bf00      	nop
 8014bfc:	bf00      	nop
 8014bfe:	e7fd      	b.n	8014bfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014c00:	f002 fb2a 	bl	8017258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d01f      	beq.n	8014c50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014c10:	68b9      	ldr	r1, [r7, #8]
 8014c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014c14:	f000 fa1e 	bl	8015054 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c1a:	1e5a      	subs	r2, r3, #1
 8014c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c22:	691b      	ldr	r3, [r3, #16]
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d00f      	beq.n	8014c48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c2a:	3310      	adds	r3, #16
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f001 f8cb 	bl	8015dc8 <xTaskRemoveFromEventList>
 8014c32:	4603      	mov	r3, r0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d007      	beq.n	8014c48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014c38:	4b3c      	ldr	r3, [pc, #240]	@ (8014d2c <xQueueReceive+0x1c0>)
 8014c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014c3e:	601a      	str	r2, [r3, #0]
 8014c40:	f3bf 8f4f 	dsb	sy
 8014c44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014c48:	f002 fb38 	bl	80172bc <vPortExitCritical>
				return pdPASS;
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e069      	b.n	8014d24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d103      	bne.n	8014c5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014c56:	f002 fb31 	bl	80172bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	e062      	b.n	8014d24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d106      	bne.n	8014c72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014c64:	f107 0310 	add.w	r3, r7, #16
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f001 f911 	bl	8015e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014c6e:	2301      	movs	r3, #1
 8014c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014c72:	f002 fb23 	bl	80172bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014c76:	f000 fe4d 	bl	8015914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014c7a:	f002 faed 	bl	8017258 <vPortEnterCritical>
 8014c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014c84:	b25b      	sxtb	r3, r3
 8014c86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014c8a:	d103      	bne.n	8014c94 <xQueueReceive+0x128>
 8014c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c8e:	2200      	movs	r2, #0
 8014c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014c9a:	b25b      	sxtb	r3, r3
 8014c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014ca0:	d103      	bne.n	8014caa <xQueueReceive+0x13e>
 8014ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014caa:	f002 fb07 	bl	80172bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014cae:	1d3a      	adds	r2, r7, #4
 8014cb0:	f107 0310 	add.w	r3, r7, #16
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f001 f900 	bl	8015ebc <xTaskCheckForTimeOut>
 8014cbc:	4603      	mov	r3, r0
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d123      	bne.n	8014d0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014cc4:	f000 fa3e 	bl	8015144 <prvIsQueueEmpty>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d017      	beq.n	8014cfe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd0:	3324      	adds	r3, #36	@ 0x24
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	4611      	mov	r1, r2
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f001 f824 	bl	8015d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014cdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014cde:	f000 f9df 	bl	80150a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014ce2:	f000 fe25 	bl	8015930 <xTaskResumeAll>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d189      	bne.n	8014c00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8014cec:	4b0f      	ldr	r3, [pc, #60]	@ (8014d2c <xQueueReceive+0x1c0>)
 8014cee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014cf2:	601a      	str	r2, [r3, #0]
 8014cf4:	f3bf 8f4f 	dsb	sy
 8014cf8:	f3bf 8f6f 	isb	sy
 8014cfc:	e780      	b.n	8014c00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8014cfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d00:	f000 f9ce 	bl	80150a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014d04:	f000 fe14 	bl	8015930 <xTaskResumeAll>
 8014d08:	e77a      	b.n	8014c00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8014d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d0c:	f000 f9c8 	bl	80150a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014d10:	f000 fe0e 	bl	8015930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014d14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d16:	f000 fa15 	bl	8015144 <prvIsQueueEmpty>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f43f af6f 	beq.w	8014c00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014d22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014d24:	4618      	mov	r0, r3
 8014d26:	3730      	adds	r7, #48	@ 0x30
 8014d28:	46bd      	mov	sp, r7
 8014d2a:	bd80      	pop	{r7, pc}
 8014d2c:	e000ed04 	.word	0xe000ed04

08014d30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b08e      	sub	sp, #56	@ 0x38
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
 8014d38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014d42:	2300      	movs	r3, #0
 8014d44:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d10b      	bne.n	8014d64 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d50:	f383 8811 	msr	BASEPRI, r3
 8014d54:	f3bf 8f6f 	isb	sy
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	623b      	str	r3, [r7, #32]
}
 8014d5e:	bf00      	nop
 8014d60:	bf00      	nop
 8014d62:	e7fd      	b.n	8014d60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d00b      	beq.n	8014d84 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d70:	f383 8811 	msr	BASEPRI, r3
 8014d74:	f3bf 8f6f 	isb	sy
 8014d78:	f3bf 8f4f 	dsb	sy
 8014d7c:	61fb      	str	r3, [r7, #28]
}
 8014d7e:	bf00      	nop
 8014d80:	bf00      	nop
 8014d82:	e7fd      	b.n	8014d80 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014d84:	f001 f9f6 	bl	8016174 <xTaskGetSchedulerState>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d102      	bne.n	8014d94 <xQueueSemaphoreTake+0x64>
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d101      	bne.n	8014d98 <xQueueSemaphoreTake+0x68>
 8014d94:	2301      	movs	r3, #1
 8014d96:	e000      	b.n	8014d9a <xQueueSemaphoreTake+0x6a>
 8014d98:	2300      	movs	r3, #0
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d10b      	bne.n	8014db6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014da2:	f383 8811 	msr	BASEPRI, r3
 8014da6:	f3bf 8f6f 	isb	sy
 8014daa:	f3bf 8f4f 	dsb	sy
 8014dae:	61bb      	str	r3, [r7, #24]
}
 8014db0:	bf00      	nop
 8014db2:	bf00      	nop
 8014db4:	e7fd      	b.n	8014db2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014db6:	f002 fa4f 	bl	8017258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d024      	beq.n	8014e10 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dc8:	1e5a      	subs	r2, r3, #1
 8014dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dcc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d104      	bne.n	8014de0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014dd6:	f001 fb47 	bl	8016468 <pvTaskIncrementMutexHeldCount>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dde:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014de2:	691b      	ldr	r3, [r3, #16]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d00f      	beq.n	8014e08 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dea:	3310      	adds	r3, #16
 8014dec:	4618      	mov	r0, r3
 8014dee:	f000 ffeb 	bl	8015dc8 <xTaskRemoveFromEventList>
 8014df2:	4603      	mov	r3, r0
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d007      	beq.n	8014e08 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014df8:	4b54      	ldr	r3, [pc, #336]	@ (8014f4c <xQueueSemaphoreTake+0x21c>)
 8014dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014dfe:	601a      	str	r2, [r3, #0]
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014e08:	f002 fa58 	bl	80172bc <vPortExitCritical>
				return pdPASS;
 8014e0c:	2301      	movs	r3, #1
 8014e0e:	e098      	b.n	8014f42 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d112      	bne.n	8014e3c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00b      	beq.n	8014e34 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8014e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e20:	f383 8811 	msr	BASEPRI, r3
 8014e24:	f3bf 8f6f 	isb	sy
 8014e28:	f3bf 8f4f 	dsb	sy
 8014e2c:	617b      	str	r3, [r7, #20]
}
 8014e2e:	bf00      	nop
 8014e30:	bf00      	nop
 8014e32:	e7fd      	b.n	8014e30 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014e34:	f002 fa42 	bl	80172bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014e38:	2300      	movs	r3, #0
 8014e3a:	e082      	b.n	8014f42 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d106      	bne.n	8014e50 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014e42:	f107 030c 	add.w	r3, r7, #12
 8014e46:	4618      	mov	r0, r3
 8014e48:	f001 f822 	bl	8015e90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014e50:	f002 fa34 	bl	80172bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014e54:	f000 fd5e 	bl	8015914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014e58:	f002 f9fe 	bl	8017258 <vPortEnterCritical>
 8014e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014e62:	b25b      	sxtb	r3, r3
 8014e64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014e68:	d103      	bne.n	8014e72 <xQueueSemaphoreTake+0x142>
 8014e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014e78:	b25b      	sxtb	r3, r3
 8014e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014e7e:	d103      	bne.n	8014e88 <xQueueSemaphoreTake+0x158>
 8014e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e82:	2200      	movs	r2, #0
 8014e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014e88:	f002 fa18 	bl	80172bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014e8c:	463a      	mov	r2, r7
 8014e8e:	f107 030c 	add.w	r3, r7, #12
 8014e92:	4611      	mov	r1, r2
 8014e94:	4618      	mov	r0, r3
 8014e96:	f001 f811 	bl	8015ebc <xTaskCheckForTimeOut>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d132      	bne.n	8014f06 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014ea0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ea2:	f000 f94f 	bl	8015144 <prvIsQueueEmpty>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d026      	beq.n	8014efa <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d109      	bne.n	8014ec8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014eb4:	f002 f9d0 	bl	8017258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eba:	689b      	ldr	r3, [r3, #8]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f001 f977 	bl	80161b0 <xTaskPriorityInherit>
 8014ec2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014ec4:	f002 f9fa 	bl	80172bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014eca:	3324      	adds	r3, #36	@ 0x24
 8014ecc:	683a      	ldr	r2, [r7, #0]
 8014ece:	4611      	mov	r1, r2
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	f000 ff27 	bl	8015d24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014ed6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ed8:	f000 f8e2 	bl	80150a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014edc:	f000 fd28 	bl	8015930 <xTaskResumeAll>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f47f af67 	bne.w	8014db6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014ee8:	4b18      	ldr	r3, [pc, #96]	@ (8014f4c <xQueueSemaphoreTake+0x21c>)
 8014eea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014eee:	601a      	str	r2, [r3, #0]
 8014ef0:	f3bf 8f4f 	dsb	sy
 8014ef4:	f3bf 8f6f 	isb	sy
 8014ef8:	e75d      	b.n	8014db6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014efa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014efc:	f000 f8d0 	bl	80150a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f00:	f000 fd16 	bl	8015930 <xTaskResumeAll>
 8014f04:	e757      	b.n	8014db6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014f06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f08:	f000 f8ca 	bl	80150a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f0c:	f000 fd10 	bl	8015930 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014f10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f12:	f000 f917 	bl	8015144 <prvIsQueueEmpty>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f43f af4c 	beq.w	8014db6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d00d      	beq.n	8014f40 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014f24:	f002 f998 	bl	8017258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014f28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f2a:	f000 f811 	bl	8014f50 <prvGetDisinheritPriorityAfterTimeout>
 8014f2e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f32:	689b      	ldr	r3, [r3, #8]
 8014f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f36:	4618      	mov	r0, r3
 8014f38:	f001 fa12 	bl	8016360 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014f3c:	f002 f9be 	bl	80172bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014f40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014f42:	4618      	mov	r0, r3
 8014f44:	3738      	adds	r7, #56	@ 0x38
 8014f46:	46bd      	mov	sp, r7
 8014f48:	bd80      	pop	{r7, pc}
 8014f4a:	bf00      	nop
 8014f4c:	e000ed04 	.word	0xe000ed04

08014f50 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014f50:	b480      	push	{r7}
 8014f52:	b085      	sub	sp, #20
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d006      	beq.n	8014f6e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014f6a:	60fb      	str	r3, [r7, #12]
 8014f6c:	e001      	b.n	8014f72 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014f72:	68fb      	ldr	r3, [r7, #12]
	}
 8014f74:	4618      	mov	r0, r3
 8014f76:	3714      	adds	r7, #20
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7e:	4770      	bx	lr

08014f80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b086      	sub	sp, #24
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	60f8      	str	r0, [r7, #12]
 8014f88:	60b9      	str	r1, [r7, #8]
 8014f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d10d      	bne.n	8014fba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d14d      	bne.n	8015042 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	4618      	mov	r0, r3
 8014fac:	f001 f968 	bl	8016280 <xTaskPriorityDisinherit>
 8014fb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	609a      	str	r2, [r3, #8]
 8014fb8:	e043      	b.n	8015042 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d119      	bne.n	8014ff4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	6858      	ldr	r0, [r3, #4]
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fc8:	461a      	mov	r2, r3
 8014fca:	68b9      	ldr	r1, [r7, #8]
 8014fcc:	f010 f82f 	bl	802502e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	685a      	ldr	r2, [r3, #4]
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fd8:	441a      	add	r2, r3
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	685a      	ldr	r2, [r3, #4]
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	689b      	ldr	r3, [r3, #8]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d32b      	bcc.n	8015042 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	681a      	ldr	r2, [r3, #0]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	605a      	str	r2, [r3, #4]
 8014ff2:	e026      	b.n	8015042 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	68d8      	ldr	r0, [r3, #12]
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ffc:	461a      	mov	r2, r3
 8014ffe:	68b9      	ldr	r1, [r7, #8]
 8015000:	f010 f815 	bl	802502e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	68da      	ldr	r2, [r3, #12]
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801500c:	425b      	negs	r3, r3
 801500e:	441a      	add	r2, r3
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	68da      	ldr	r2, [r3, #12]
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	d207      	bcs.n	8015030 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	689a      	ldr	r2, [r3, #8]
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015028:	425b      	negs	r3, r3
 801502a:	441a      	add	r2, r3
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2b02      	cmp	r3, #2
 8015034:	d105      	bne.n	8015042 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015036:	693b      	ldr	r3, [r7, #16]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d002      	beq.n	8015042 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	3b01      	subs	r3, #1
 8015040:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	1c5a      	adds	r2, r3, #1
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801504a:	697b      	ldr	r3, [r7, #20]
}
 801504c:	4618      	mov	r0, r3
 801504e:	3718      	adds	r7, #24
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
 801505c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015062:	2b00      	cmp	r3, #0
 8015064:	d018      	beq.n	8015098 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	68da      	ldr	r2, [r3, #12]
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801506e:	441a      	add	r2, r3
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	68da      	ldr	r2, [r3, #12]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	689b      	ldr	r3, [r3, #8]
 801507c:	429a      	cmp	r2, r3
 801507e:	d303      	bcc.n	8015088 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	68d9      	ldr	r1, [r3, #12]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015090:	461a      	mov	r2, r3
 8015092:	6838      	ldr	r0, [r7, #0]
 8015094:	f00f ffcb 	bl	802502e <memcpy>
	}
}
 8015098:	bf00      	nop
 801509a:	3708      	adds	r7, #8
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80150a8:	f002 f8d6 	bl	8017258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80150b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80150b4:	e011      	b.n	80150da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d012      	beq.n	80150e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	3324      	adds	r3, #36	@ 0x24
 80150c2:	4618      	mov	r0, r3
 80150c4:	f000 fe80 	bl	8015dc8 <xTaskRemoveFromEventList>
 80150c8:	4603      	mov	r3, r0
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d001      	beq.n	80150d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80150ce:	f000 ff59 	bl	8015f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80150d2:	7bfb      	ldrb	r3, [r7, #15]
 80150d4:	3b01      	subs	r3, #1
 80150d6:	b2db      	uxtb	r3, r3
 80150d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80150da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	dce9      	bgt.n	80150b6 <prvUnlockQueue+0x16>
 80150e2:	e000      	b.n	80150e6 <prvUnlockQueue+0x46>
					break;
 80150e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	22ff      	movs	r2, #255	@ 0xff
 80150ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80150ee:	f002 f8e5 	bl	80172bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80150f2:	f002 f8b1 	bl	8017258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80150fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80150fe:	e011      	b.n	8015124 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	691b      	ldr	r3, [r3, #16]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d012      	beq.n	801512e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	3310      	adds	r3, #16
 801510c:	4618      	mov	r0, r3
 801510e:	f000 fe5b 	bl	8015dc8 <xTaskRemoveFromEventList>
 8015112:	4603      	mov	r3, r0
 8015114:	2b00      	cmp	r3, #0
 8015116:	d001      	beq.n	801511c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015118:	f000 ff34 	bl	8015f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801511c:	7bbb      	ldrb	r3, [r7, #14]
 801511e:	3b01      	subs	r3, #1
 8015120:	b2db      	uxtb	r3, r3
 8015122:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015128:	2b00      	cmp	r3, #0
 801512a:	dce9      	bgt.n	8015100 <prvUnlockQueue+0x60>
 801512c:	e000      	b.n	8015130 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801512e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	22ff      	movs	r2, #255	@ 0xff
 8015134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015138:	f002 f8c0 	bl	80172bc <vPortExitCritical>
}
 801513c:	bf00      	nop
 801513e:	3710      	adds	r7, #16
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}

08015144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801514c:	f002 f884 	bl	8017258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015154:	2b00      	cmp	r3, #0
 8015156:	d102      	bne.n	801515e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015158:	2301      	movs	r3, #1
 801515a:	60fb      	str	r3, [r7, #12]
 801515c:	e001      	b.n	8015162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801515e:	2300      	movs	r3, #0
 8015160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015162:	f002 f8ab 	bl	80172bc <vPortExitCritical>

	return xReturn;
 8015166:	68fb      	ldr	r3, [r7, #12]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b084      	sub	sp, #16
 8015174:	af00      	add	r7, sp, #0
 8015176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015178:	f002 f86e 	bl	8017258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015184:	429a      	cmp	r2, r3
 8015186:	d102      	bne.n	801518e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015188:	2301      	movs	r3, #1
 801518a:	60fb      	str	r3, [r7, #12]
 801518c:	e001      	b.n	8015192 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801518e:	2300      	movs	r3, #0
 8015190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015192:	f002 f893 	bl	80172bc <vPortExitCritical>

	return xReturn;
 8015196:	68fb      	ldr	r3, [r7, #12]
}
 8015198:	4618      	mov	r0, r3
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}

080151a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80151a0:	b480      	push	{r7}
 80151a2:	b085      	sub	sp, #20
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	6078      	str	r0, [r7, #4]
 80151a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80151aa:	2300      	movs	r3, #0
 80151ac:	60fb      	str	r3, [r7, #12]
 80151ae:	e014      	b.n	80151da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80151b0:	4a0f      	ldr	r2, [pc, #60]	@ (80151f0 <vQueueAddToRegistry+0x50>)
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d10b      	bne.n	80151d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80151bc:	490c      	ldr	r1, [pc, #48]	@ (80151f0 <vQueueAddToRegistry+0x50>)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	683a      	ldr	r2, [r7, #0]
 80151c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80151c6:	4a0a      	ldr	r2, [pc, #40]	@ (80151f0 <vQueueAddToRegistry+0x50>)
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	00db      	lsls	r3, r3, #3
 80151cc:	4413      	add	r3, r2
 80151ce:	687a      	ldr	r2, [r7, #4]
 80151d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80151d2:	e006      	b.n	80151e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	3301      	adds	r3, #1
 80151d8:	60fb      	str	r3, [r7, #12]
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	2b07      	cmp	r3, #7
 80151de:	d9e7      	bls.n	80151b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80151e0:	bf00      	nop
 80151e2:	bf00      	nop
 80151e4:	3714      	adds	r7, #20
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr
 80151ee:	bf00      	nop
 80151f0:	20007710 	.word	0x20007710

080151f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b086      	sub	sp, #24
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015204:	f002 f828 	bl	8017258 <vPortEnterCritical>
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801520e:	b25b      	sxtb	r3, r3
 8015210:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015214:	d103      	bne.n	801521e <vQueueWaitForMessageRestricted+0x2a>
 8015216:	697b      	ldr	r3, [r7, #20]
 8015218:	2200      	movs	r2, #0
 801521a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801521e:	697b      	ldr	r3, [r7, #20]
 8015220:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015224:	b25b      	sxtb	r3, r3
 8015226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801522a:	d103      	bne.n	8015234 <vQueueWaitForMessageRestricted+0x40>
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	2200      	movs	r2, #0
 8015230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015234:	f002 f842 	bl	80172bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015238:	697b      	ldr	r3, [r7, #20]
 801523a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801523c:	2b00      	cmp	r3, #0
 801523e:	d106      	bne.n	801524e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	3324      	adds	r3, #36	@ 0x24
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	68b9      	ldr	r1, [r7, #8]
 8015248:	4618      	mov	r0, r3
 801524a:	f000 fd91 	bl	8015d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801524e:	6978      	ldr	r0, [r7, #20]
 8015250:	f7ff ff26 	bl	80150a0 <prvUnlockQueue>
	}
 8015254:	bf00      	nop
 8015256:	3718      	adds	r7, #24
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801525c:	b580      	push	{r7, lr}
 801525e:	b08e      	sub	sp, #56	@ 0x38
 8015260:	af04      	add	r7, sp, #16
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
 8015268:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801526a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10b      	bne.n	8015288 <xTaskCreateStatic+0x2c>
	__asm volatile
 8015270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	623b      	str	r3, [r7, #32]
}
 8015282:	bf00      	nop
 8015284:	bf00      	nop
 8015286:	e7fd      	b.n	8015284 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801528a:	2b00      	cmp	r3, #0
 801528c:	d10b      	bne.n	80152a6 <xTaskCreateStatic+0x4a>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	61fb      	str	r3, [r7, #28]
}
 80152a0:	bf00      	nop
 80152a2:	bf00      	nop
 80152a4:	e7fd      	b.n	80152a2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80152a6:	23bc      	movs	r3, #188	@ 0xbc
 80152a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	2bbc      	cmp	r3, #188	@ 0xbc
 80152ae:	d00b      	beq.n	80152c8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80152b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	61bb      	str	r3, [r7, #24]
}
 80152c2:	bf00      	nop
 80152c4:	bf00      	nop
 80152c6:	e7fd      	b.n	80152c4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80152c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80152ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d01e      	beq.n	801530e <xTaskCreateStatic+0xb2>
 80152d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d01b      	beq.n	801530e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80152d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80152d8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80152da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80152de:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80152e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152e2:	2202      	movs	r2, #2
 80152e4:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80152e8:	2300      	movs	r3, #0
 80152ea:	9303      	str	r3, [sp, #12]
 80152ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152ee:	9302      	str	r3, [sp, #8]
 80152f0:	f107 0314 	add.w	r3, r7, #20
 80152f4:	9301      	str	r3, [sp, #4]
 80152f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152f8:	9300      	str	r3, [sp, #0]
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	68b9      	ldr	r1, [r7, #8]
 8015300:	68f8      	ldr	r0, [r7, #12]
 8015302:	f000 f851 	bl	80153a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015308:	f000 f8f8 	bl	80154fc <prvAddNewTaskToReadyList>
 801530c:	e001      	b.n	8015312 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801530e:	2300      	movs	r3, #0
 8015310:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015312:	697b      	ldr	r3, [r7, #20]
	}
 8015314:	4618      	mov	r0, r3
 8015316:	3728      	adds	r7, #40	@ 0x28
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}

0801531c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801531c:	b580      	push	{r7, lr}
 801531e:	b08c      	sub	sp, #48	@ 0x30
 8015320:	af04      	add	r7, sp, #16
 8015322:	60f8      	str	r0, [r7, #12]
 8015324:	60b9      	str	r1, [r7, #8]
 8015326:	603b      	str	r3, [r7, #0]
 8015328:	4613      	mov	r3, r2
 801532a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801532c:	88fb      	ldrh	r3, [r7, #6]
 801532e:	009b      	lsls	r3, r3, #2
 8015330:	4618      	mov	r0, r3
 8015332:	f002 f8b3 	bl	801749c <pvPortMalloc>
 8015336:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d00e      	beq.n	801535c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801533e:	20bc      	movs	r0, #188	@ 0xbc
 8015340:	f002 f8ac 	bl	801749c <pvPortMalloc>
 8015344:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015346:	69fb      	ldr	r3, [r7, #28]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d003      	beq.n	8015354 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801534c:	69fb      	ldr	r3, [r7, #28]
 801534e:	697a      	ldr	r2, [r7, #20]
 8015350:	631a      	str	r2, [r3, #48]	@ 0x30
 8015352:	e005      	b.n	8015360 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015354:	6978      	ldr	r0, [r7, #20]
 8015356:	f002 f96f 	bl	8017638 <vPortFree>
 801535a:	e001      	b.n	8015360 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801535c:	2300      	movs	r3, #0
 801535e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d017      	beq.n	8015396 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015366:	69fb      	ldr	r3, [r7, #28]
 8015368:	2200      	movs	r2, #0
 801536a:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801536e:	88fa      	ldrh	r2, [r7, #6]
 8015370:	2300      	movs	r3, #0
 8015372:	9303      	str	r3, [sp, #12]
 8015374:	69fb      	ldr	r3, [r7, #28]
 8015376:	9302      	str	r3, [sp, #8]
 8015378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801537a:	9301      	str	r3, [sp, #4]
 801537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	683b      	ldr	r3, [r7, #0]
 8015382:	68b9      	ldr	r1, [r7, #8]
 8015384:	68f8      	ldr	r0, [r7, #12]
 8015386:	f000 f80f 	bl	80153a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801538a:	69f8      	ldr	r0, [r7, #28]
 801538c:	f000 f8b6 	bl	80154fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015390:	2301      	movs	r3, #1
 8015392:	61bb      	str	r3, [r7, #24]
 8015394:	e002      	b.n	801539c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015396:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801539a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801539c:	69bb      	ldr	r3, [r7, #24]
	}
 801539e:	4618      	mov	r0, r3
 80153a0:	3720      	adds	r7, #32
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
	...

080153a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b088      	sub	sp, #32
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	60f8      	str	r0, [r7, #12]
 80153b0:	60b9      	str	r1, [r7, #8]
 80153b2:	607a      	str	r2, [r7, #4]
 80153b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80153b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	009b      	lsls	r3, r3, #2
 80153be:	461a      	mov	r2, r3
 80153c0:	21a5      	movs	r1, #165	@ 0xa5
 80153c2:	f00f fd0a 	bl	8024dda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80153c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80153d0:	3b01      	subs	r3, #1
 80153d2:	009b      	lsls	r3, r3, #2
 80153d4:	4413      	add	r3, r2
 80153d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	f023 0307 	bic.w	r3, r3, #7
 80153de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80153e0:	69bb      	ldr	r3, [r7, #24]
 80153e2:	f003 0307 	and.w	r3, r3, #7
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d00b      	beq.n	8015402 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80153ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153ee:	f383 8811 	msr	BASEPRI, r3
 80153f2:	f3bf 8f6f 	isb	sy
 80153f6:	f3bf 8f4f 	dsb	sy
 80153fa:	617b      	str	r3, [r7, #20]
}
 80153fc:	bf00      	nop
 80153fe:	bf00      	nop
 8015400:	e7fd      	b.n	80153fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d01f      	beq.n	8015448 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015408:	2300      	movs	r3, #0
 801540a:	61fb      	str	r3, [r7, #28]
 801540c:	e012      	b.n	8015434 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801540e:	68ba      	ldr	r2, [r7, #8]
 8015410:	69fb      	ldr	r3, [r7, #28]
 8015412:	4413      	add	r3, r2
 8015414:	7819      	ldrb	r1, [r3, #0]
 8015416:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	4413      	add	r3, r2
 801541c:	3334      	adds	r3, #52	@ 0x34
 801541e:	460a      	mov	r2, r1
 8015420:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015422:	68ba      	ldr	r2, [r7, #8]
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	4413      	add	r3, r2
 8015428:	781b      	ldrb	r3, [r3, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d006      	beq.n	801543c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801542e:	69fb      	ldr	r3, [r7, #28]
 8015430:	3301      	adds	r3, #1
 8015432:	61fb      	str	r3, [r7, #28]
 8015434:	69fb      	ldr	r3, [r7, #28]
 8015436:	2b1d      	cmp	r3, #29
 8015438:	d9e9      	bls.n	801540e <prvInitialiseNewTask+0x66>
 801543a:	e000      	b.n	801543e <prvInitialiseNewTask+0x96>
			{
				break;
 801543c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015440:	2200      	movs	r2, #0
 8015442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8015446:	e003      	b.n	8015450 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801544a:	2200      	movs	r2, #0
 801544c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015452:	2b37      	cmp	r3, #55	@ 0x37
 8015454:	d901      	bls.n	801545a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015456:	2337      	movs	r3, #55	@ 0x37
 8015458:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801545c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801545e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015464:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8015466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015468:	2200      	movs	r2, #0
 801546a:	661a      	str	r2, [r3, #96]	@ 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801546e:	3304      	adds	r3, #4
 8015470:	4618      	mov	r0, r3
 8015472:	f7fe ff49 	bl	8014308 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015478:	3318      	adds	r3, #24
 801547a:	4618      	mov	r0, r3
 801547c:	f7fe ff44 	bl	8014308 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015484:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015488:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801548e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015494:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8015496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015498:	2200      	movs	r2, #0
 801549a:	665a      	str	r2, [r3, #100]	@ 0x64
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549e:	2200      	movs	r2, #0
 80154a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80154a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a6:	2200      	movs	r2, #0
 80154a8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80154ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ae:	3368      	adds	r3, #104	@ 0x68
 80154b0:	224c      	movs	r2, #76	@ 0x4c
 80154b2:	2100      	movs	r1, #0
 80154b4:	4618      	mov	r0, r3
 80154b6:	f00f fc90 	bl	8024dda <memset>
 80154ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154bc:	4a0c      	ldr	r2, [pc, #48]	@ (80154f0 <prvInitialiseNewTask+0x148>)
 80154be:	66da      	str	r2, [r3, #108]	@ 0x6c
 80154c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c2:	4a0c      	ldr	r2, [pc, #48]	@ (80154f4 <prvInitialiseNewTask+0x14c>)
 80154c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80154c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154c8:	4a0b      	ldr	r2, [pc, #44]	@ (80154f8 <prvInitialiseNewTask+0x150>)
 80154ca:	675a      	str	r2, [r3, #116]	@ 0x74
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80154cc:	683a      	ldr	r2, [r7, #0]
 80154ce:	68f9      	ldr	r1, [r7, #12]
 80154d0:	69b8      	ldr	r0, [r7, #24]
 80154d2:	f001 fd93 	bl	8016ffc <pxPortInitialiseStack>
 80154d6:	4602      	mov	r2, r0
 80154d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80154dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d002      	beq.n	80154e8 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80154e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80154e8:	bf00      	nop
 80154ea:	3720      	adds	r7, #32
 80154ec:	46bd      	mov	sp, r7
 80154ee:	bd80      	pop	{r7, pc}
 80154f0:	20019784 	.word	0x20019784
 80154f4:	200197ec 	.word	0x200197ec
 80154f8:	20019854 	.word	0x20019854

080154fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b082      	sub	sp, #8
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015504:	f001 fea8 	bl	8017258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015508:	4b2d      	ldr	r3, [pc, #180]	@ (80155c0 <prvAddNewTaskToReadyList+0xc4>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	3301      	adds	r3, #1
 801550e:	4a2c      	ldr	r2, [pc, #176]	@ (80155c0 <prvAddNewTaskToReadyList+0xc4>)
 8015510:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015512:	4b2c      	ldr	r3, [pc, #176]	@ (80155c4 <prvAddNewTaskToReadyList+0xc8>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d109      	bne.n	801552e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801551a:	4a2a      	ldr	r2, [pc, #168]	@ (80155c4 <prvAddNewTaskToReadyList+0xc8>)
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015520:	4b27      	ldr	r3, [pc, #156]	@ (80155c0 <prvAddNewTaskToReadyList+0xc4>)
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	2b01      	cmp	r3, #1
 8015526:	d110      	bne.n	801554a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015528:	f000 fd50 	bl	8015fcc <prvInitialiseTaskLists>
 801552c:	e00d      	b.n	801554a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801552e:	4b26      	ldr	r3, [pc, #152]	@ (80155c8 <prvAddNewTaskToReadyList+0xcc>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d109      	bne.n	801554a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015536:	4b23      	ldr	r3, [pc, #140]	@ (80155c4 <prvAddNewTaskToReadyList+0xc8>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015540:	429a      	cmp	r2, r3
 8015542:	d802      	bhi.n	801554a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015544:	4a1f      	ldr	r2, [pc, #124]	@ (80155c4 <prvAddNewTaskToReadyList+0xc8>)
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801554a:	4b20      	ldr	r3, [pc, #128]	@ (80155cc <prvAddNewTaskToReadyList+0xd0>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	3301      	adds	r3, #1
 8015550:	4a1e      	ldr	r2, [pc, #120]	@ (80155cc <prvAddNewTaskToReadyList+0xd0>)
 8015552:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015554:	4b1d      	ldr	r3, [pc, #116]	@ (80155cc <prvAddNewTaskToReadyList+0xd0>)
 8015556:	681a      	ldr	r2, [r3, #0]
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	655a      	str	r2, [r3, #84]	@ 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015560:	4b1b      	ldr	r3, [pc, #108]	@ (80155d0 <prvAddNewTaskToReadyList+0xd4>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	429a      	cmp	r2, r3
 8015566:	d903      	bls.n	8015570 <prvAddNewTaskToReadyList+0x74>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801556c:	4a18      	ldr	r2, [pc, #96]	@ (80155d0 <prvAddNewTaskToReadyList+0xd4>)
 801556e:	6013      	str	r3, [r2, #0]
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015574:	4613      	mov	r3, r2
 8015576:	009b      	lsls	r3, r3, #2
 8015578:	4413      	add	r3, r2
 801557a:	009b      	lsls	r3, r3, #2
 801557c:	4a15      	ldr	r2, [pc, #84]	@ (80155d4 <prvAddNewTaskToReadyList+0xd8>)
 801557e:	441a      	add	r2, r3
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	3304      	adds	r3, #4
 8015584:	4619      	mov	r1, r3
 8015586:	4610      	mov	r0, r2
 8015588:	f7fe fecb 	bl	8014322 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801558c:	f001 fe96 	bl	80172bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015590:	4b0d      	ldr	r3, [pc, #52]	@ (80155c8 <prvAddNewTaskToReadyList+0xcc>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d00e      	beq.n	80155b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015598:	4b0a      	ldr	r3, [pc, #40]	@ (80155c4 <prvAddNewTaskToReadyList+0xc8>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d207      	bcs.n	80155b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80155a6:	4b0c      	ldr	r3, [pc, #48]	@ (80155d8 <prvAddNewTaskToReadyList+0xdc>)
 80155a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80155ac:	601a      	str	r2, [r3, #0]
 80155ae:	f3bf 8f4f 	dsb	sy
 80155b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80155b6:	bf00      	nop
 80155b8:	3708      	adds	r7, #8
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	20007c24 	.word	0x20007c24
 80155c4:	20007750 	.word	0x20007750
 80155c8:	20007c30 	.word	0x20007c30
 80155cc:	20007c40 	.word	0x20007c40
 80155d0:	20007c2c 	.word	0x20007c2c
 80155d4:	20007754 	.word	0x20007754
 80155d8:	e000ed04 	.word	0xe000ed04

080155dc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b084      	sub	sp, #16
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80155e4:	f001 fe38 	bl	8017258 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d102      	bne.n	80155f4 <vTaskDelete+0x18>
 80155ee:	4b2d      	ldr	r3, [pc, #180]	@ (80156a4 <vTaskDelete+0xc8>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	e000      	b.n	80155f6 <vTaskDelete+0x1a>
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	3304      	adds	r3, #4
 80155fc:	4618      	mov	r0, r3
 80155fe:	f7fe feed 	bl	80143dc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015606:	2b00      	cmp	r3, #0
 8015608:	d004      	beq.n	8015614 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	3318      	adds	r3, #24
 801560e:	4618      	mov	r0, r3
 8015610:	f7fe fee4 	bl	80143dc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8015614:	4b24      	ldr	r3, [pc, #144]	@ (80156a8 <vTaskDelete+0xcc>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	3301      	adds	r3, #1
 801561a:	4a23      	ldr	r2, [pc, #140]	@ (80156a8 <vTaskDelete+0xcc>)
 801561c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801561e:	4b21      	ldr	r3, [pc, #132]	@ (80156a4 <vTaskDelete+0xc8>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	68fa      	ldr	r2, [r7, #12]
 8015624:	429a      	cmp	r2, r3
 8015626:	d10b      	bne.n	8015640 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	3304      	adds	r3, #4
 801562c:	4619      	mov	r1, r3
 801562e:	481f      	ldr	r0, [pc, #124]	@ (80156ac <vTaskDelete+0xd0>)
 8015630:	f7fe fe77 	bl	8014322 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8015634:	4b1e      	ldr	r3, [pc, #120]	@ (80156b0 <vTaskDelete+0xd4>)
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	3301      	adds	r3, #1
 801563a:	4a1d      	ldr	r2, [pc, #116]	@ (80156b0 <vTaskDelete+0xd4>)
 801563c:	6013      	str	r3, [r2, #0]
 801563e:	e009      	b.n	8015654 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8015640:	4b1c      	ldr	r3, [pc, #112]	@ (80156b4 <vTaskDelete+0xd8>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	3b01      	subs	r3, #1
 8015646:	4a1b      	ldr	r2, [pc, #108]	@ (80156b4 <vTaskDelete+0xd8>)
 8015648:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 801564a:	68f8      	ldr	r0, [r7, #12]
 801564c:	f000 fd2c 	bl	80160a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8015650:	f000 fd60 	bl	8016114 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8015654:	f001 fe32 	bl	80172bc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8015658:	4b17      	ldr	r3, [pc, #92]	@ (80156b8 <vTaskDelete+0xdc>)
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d01c      	beq.n	801569a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8015660:	4b10      	ldr	r3, [pc, #64]	@ (80156a4 <vTaskDelete+0xc8>)
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	68fa      	ldr	r2, [r7, #12]
 8015666:	429a      	cmp	r2, r3
 8015668:	d117      	bne.n	801569a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801566a:	4b14      	ldr	r3, [pc, #80]	@ (80156bc <vTaskDelete+0xe0>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d00b      	beq.n	801568a <vTaskDelete+0xae>
	__asm volatile
 8015672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015676:	f383 8811 	msr	BASEPRI, r3
 801567a:	f3bf 8f6f 	isb	sy
 801567e:	f3bf 8f4f 	dsb	sy
 8015682:	60bb      	str	r3, [r7, #8]
}
 8015684:	bf00      	nop
 8015686:	bf00      	nop
 8015688:	e7fd      	b.n	8015686 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 801568a:	4b0d      	ldr	r3, [pc, #52]	@ (80156c0 <vTaskDelete+0xe4>)
 801568c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015690:	601a      	str	r2, [r3, #0]
 8015692:	f3bf 8f4f 	dsb	sy
 8015696:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801569a:	bf00      	nop
 801569c:	3710      	adds	r7, #16
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
 80156a2:	bf00      	nop
 80156a4:	20007750 	.word	0x20007750
 80156a8:	20007c40 	.word	0x20007c40
 80156ac:	20007bf8 	.word	0x20007bf8
 80156b0:	20007c0c 	.word	0x20007c0c
 80156b4:	20007c24 	.word	0x20007c24
 80156b8:	20007c30 	.word	0x20007c30
 80156bc:	20007c4c 	.word	0x20007c4c
 80156c0:	e000ed04 	.word	0xe000ed04

080156c4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08a      	sub	sp, #40	@ 0x28
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80156ce:	2300      	movs	r3, #0
 80156d0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d10b      	bne.n	80156f0 <vTaskDelayUntil+0x2c>
	__asm volatile
 80156d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156dc:	f383 8811 	msr	BASEPRI, r3
 80156e0:	f3bf 8f6f 	isb	sy
 80156e4:	f3bf 8f4f 	dsb	sy
 80156e8:	617b      	str	r3, [r7, #20]
}
 80156ea:	bf00      	nop
 80156ec:	bf00      	nop
 80156ee:	e7fd      	b.n	80156ec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d10b      	bne.n	801570e <vTaskDelayUntil+0x4a>
	__asm volatile
 80156f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156fa:	f383 8811 	msr	BASEPRI, r3
 80156fe:	f3bf 8f6f 	isb	sy
 8015702:	f3bf 8f4f 	dsb	sy
 8015706:	613b      	str	r3, [r7, #16]
}
 8015708:	bf00      	nop
 801570a:	bf00      	nop
 801570c:	e7fd      	b.n	801570a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 801570e:	4b2a      	ldr	r3, [pc, #168]	@ (80157b8 <vTaskDelayUntil+0xf4>)
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00b      	beq.n	801572e <vTaskDelayUntil+0x6a>
	__asm volatile
 8015716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801571a:	f383 8811 	msr	BASEPRI, r3
 801571e:	f3bf 8f6f 	isb	sy
 8015722:	f3bf 8f4f 	dsb	sy
 8015726:	60fb      	str	r3, [r7, #12]
}
 8015728:	bf00      	nop
 801572a:	bf00      	nop
 801572c:	e7fd      	b.n	801572a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 801572e:	f000 f8f1 	bl	8015914 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8015732:	4b22      	ldr	r3, [pc, #136]	@ (80157bc <vTaskDelayUntil+0xf8>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	4413      	add	r3, r2
 8015740:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	6a3a      	ldr	r2, [r7, #32]
 8015748:	429a      	cmp	r2, r3
 801574a:	d20b      	bcs.n	8015764 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	69fa      	ldr	r2, [r7, #28]
 8015752:	429a      	cmp	r2, r3
 8015754:	d211      	bcs.n	801577a <vTaskDelayUntil+0xb6>
 8015756:	69fa      	ldr	r2, [r7, #28]
 8015758:	6a3b      	ldr	r3, [r7, #32]
 801575a:	429a      	cmp	r2, r3
 801575c:	d90d      	bls.n	801577a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 801575e:	2301      	movs	r3, #1
 8015760:	627b      	str	r3, [r7, #36]	@ 0x24
 8015762:	e00a      	b.n	801577a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	69fa      	ldr	r2, [r7, #28]
 801576a:	429a      	cmp	r2, r3
 801576c:	d303      	bcc.n	8015776 <vTaskDelayUntil+0xb2>
 801576e:	69fa      	ldr	r2, [r7, #28]
 8015770:	6a3b      	ldr	r3, [r7, #32]
 8015772:	429a      	cmp	r2, r3
 8015774:	d901      	bls.n	801577a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8015776:	2301      	movs	r3, #1
 8015778:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	69fa      	ldr	r2, [r7, #28]
 801577e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8015780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015782:	2b00      	cmp	r3, #0
 8015784:	d006      	beq.n	8015794 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8015786:	69fa      	ldr	r2, [r7, #28]
 8015788:	6a3b      	ldr	r3, [r7, #32]
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	2100      	movs	r1, #0
 801578e:	4618      	mov	r0, r3
 8015790:	f001 f886 	bl	80168a0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8015794:	f000 f8cc 	bl	8015930 <xTaskResumeAll>
 8015798:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801579a:	69bb      	ldr	r3, [r7, #24]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d107      	bne.n	80157b0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80157a0:	4b07      	ldr	r3, [pc, #28]	@ (80157c0 <vTaskDelayUntil+0xfc>)
 80157a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157a6:	601a      	str	r2, [r3, #0]
 80157a8:	f3bf 8f4f 	dsb	sy
 80157ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80157b0:	bf00      	nop
 80157b2:	3728      	adds	r7, #40	@ 0x28
 80157b4:	46bd      	mov	sp, r7
 80157b6:	bd80      	pop	{r7, pc}
 80157b8:	20007c4c 	.word	0x20007c4c
 80157bc:	20007c28 	.word	0x20007c28
 80157c0:	e000ed04 	.word	0xe000ed04

080157c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80157cc:	2300      	movs	r3, #0
 80157ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d018      	beq.n	8015808 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80157d6:	4b14      	ldr	r3, [pc, #80]	@ (8015828 <vTaskDelay+0x64>)
 80157d8:	681b      	ldr	r3, [r3, #0]
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d00b      	beq.n	80157f6 <vTaskDelay+0x32>
	__asm volatile
 80157de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157e2:	f383 8811 	msr	BASEPRI, r3
 80157e6:	f3bf 8f6f 	isb	sy
 80157ea:	f3bf 8f4f 	dsb	sy
 80157ee:	60bb      	str	r3, [r7, #8]
}
 80157f0:	bf00      	nop
 80157f2:	bf00      	nop
 80157f4:	e7fd      	b.n	80157f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80157f6:	f000 f88d 	bl	8015914 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80157fa:	2100      	movs	r1, #0
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f001 f84f 	bl	80168a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015802:	f000 f895 	bl	8015930 <xTaskResumeAll>
 8015806:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d107      	bne.n	801581e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801580e:	4b07      	ldr	r3, [pc, #28]	@ (801582c <vTaskDelay+0x68>)
 8015810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015814:	601a      	str	r2, [r3, #0]
 8015816:	f3bf 8f4f 	dsb	sy
 801581a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801581e:	bf00      	nop
 8015820:	3710      	adds	r7, #16
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	20007c4c 	.word	0x20007c4c
 801582c:	e000ed04 	.word	0xe000ed04

08015830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b08a      	sub	sp, #40	@ 0x28
 8015834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015836:	2300      	movs	r3, #0
 8015838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801583a:	2300      	movs	r3, #0
 801583c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801583e:	463a      	mov	r2, r7
 8015840:	1d39      	adds	r1, r7, #4
 8015842:	f107 0308 	add.w	r3, r7, #8
 8015846:	4618      	mov	r0, r3
 8015848:	f7fe fd0a 	bl	8014260 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801584c:	6839      	ldr	r1, [r7, #0]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	68ba      	ldr	r2, [r7, #8]
 8015852:	9202      	str	r2, [sp, #8]
 8015854:	9301      	str	r3, [sp, #4]
 8015856:	2300      	movs	r3, #0
 8015858:	9300      	str	r3, [sp, #0]
 801585a:	2300      	movs	r3, #0
 801585c:	460a      	mov	r2, r1
 801585e:	4925      	ldr	r1, [pc, #148]	@ (80158f4 <vTaskStartScheduler+0xc4>)
 8015860:	4825      	ldr	r0, [pc, #148]	@ (80158f8 <vTaskStartScheduler+0xc8>)
 8015862:	f7ff fcfb 	bl	801525c <xTaskCreateStatic>
 8015866:	4603      	mov	r3, r0
 8015868:	4a24      	ldr	r2, [pc, #144]	@ (80158fc <vTaskStartScheduler+0xcc>)
 801586a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801586c:	4b23      	ldr	r3, [pc, #140]	@ (80158fc <vTaskStartScheduler+0xcc>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d002      	beq.n	801587a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015874:	2301      	movs	r3, #1
 8015876:	617b      	str	r3, [r7, #20]
 8015878:	e001      	b.n	801587e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801587a:	2300      	movs	r3, #0
 801587c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	2b01      	cmp	r3, #1
 8015882:	d102      	bne.n	801588a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015884:	f001 f860 	bl	8016948 <xTimerCreateTimerTask>
 8015888:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	2b01      	cmp	r3, #1
 801588e:	d11d      	bne.n	80158cc <vTaskStartScheduler+0x9c>
	__asm volatile
 8015890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	613b      	str	r3, [r7, #16]
}
 80158a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80158a4:	4b16      	ldr	r3, [pc, #88]	@ (8015900 <vTaskStartScheduler+0xd0>)
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	3368      	adds	r3, #104	@ 0x68
 80158aa:	4a16      	ldr	r2, [pc, #88]	@ (8015904 <vTaskStartScheduler+0xd4>)
 80158ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80158ae:	4b16      	ldr	r3, [pc, #88]	@ (8015908 <vTaskStartScheduler+0xd8>)
 80158b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80158b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80158b6:	4b15      	ldr	r3, [pc, #84]	@ (801590c <vTaskStartScheduler+0xdc>)
 80158b8:	2201      	movs	r2, #1
 80158ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80158bc:	4b14      	ldr	r3, [pc, #80]	@ (8015910 <vTaskStartScheduler+0xe0>)
 80158be:	2200      	movs	r2, #0
 80158c0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80158c2:	f7f3 f81d 	bl	8008900 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80158c6:	f001 fc23 	bl	8017110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80158ca:	e00f      	b.n	80158ec <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80158d2:	d10b      	bne.n	80158ec <vTaskStartScheduler+0xbc>
	__asm volatile
 80158d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158d8:	f383 8811 	msr	BASEPRI, r3
 80158dc:	f3bf 8f6f 	isb	sy
 80158e0:	f3bf 8f4f 	dsb	sy
 80158e4:	60fb      	str	r3, [r7, #12]
}
 80158e6:	bf00      	nop
 80158e8:	bf00      	nop
 80158ea:	e7fd      	b.n	80158e8 <vTaskStartScheduler+0xb8>
}
 80158ec:	bf00      	nop
 80158ee:	3718      	adds	r7, #24
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	08027818 	.word	0x08027818
 80158f8:	08015f9d 	.word	0x08015f9d
 80158fc:	20007c48 	.word	0x20007c48
 8015900:	20007750 	.word	0x20007750
 8015904:	200001b4 	.word	0x200001b4
 8015908:	20007c44 	.word	0x20007c44
 801590c:	20007c30 	.word	0x20007c30
 8015910:	20007c28 	.word	0x20007c28

08015914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015914:	b480      	push	{r7}
 8015916:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015918:	4b04      	ldr	r3, [pc, #16]	@ (801592c <vTaskSuspendAll+0x18>)
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	3301      	adds	r3, #1
 801591e:	4a03      	ldr	r2, [pc, #12]	@ (801592c <vTaskSuspendAll+0x18>)
 8015920:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015922:	bf00      	nop
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr
 801592c:	20007c4c 	.word	0x20007c4c

08015930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b084      	sub	sp, #16
 8015934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015936:	2300      	movs	r3, #0
 8015938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801593a:	2300      	movs	r3, #0
 801593c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801593e:	4b42      	ldr	r3, [pc, #264]	@ (8015a48 <xTaskResumeAll+0x118>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d10b      	bne.n	801595e <xTaskResumeAll+0x2e>
	__asm volatile
 8015946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801594a:	f383 8811 	msr	BASEPRI, r3
 801594e:	f3bf 8f6f 	isb	sy
 8015952:	f3bf 8f4f 	dsb	sy
 8015956:	603b      	str	r3, [r7, #0]
}
 8015958:	bf00      	nop
 801595a:	bf00      	nop
 801595c:	e7fd      	b.n	801595a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801595e:	f001 fc7b 	bl	8017258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015962:	4b39      	ldr	r3, [pc, #228]	@ (8015a48 <xTaskResumeAll+0x118>)
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	3b01      	subs	r3, #1
 8015968:	4a37      	ldr	r2, [pc, #220]	@ (8015a48 <xTaskResumeAll+0x118>)
 801596a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801596c:	4b36      	ldr	r3, [pc, #216]	@ (8015a48 <xTaskResumeAll+0x118>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d162      	bne.n	8015a3a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015974:	4b35      	ldr	r3, [pc, #212]	@ (8015a4c <xTaskResumeAll+0x11c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d05e      	beq.n	8015a3a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801597c:	e02f      	b.n	80159de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801597e:	4b34      	ldr	r3, [pc, #208]	@ (8015a50 <xTaskResumeAll+0x120>)
 8015980:	68db      	ldr	r3, [r3, #12]
 8015982:	68db      	ldr	r3, [r3, #12]
 8015984:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	3318      	adds	r3, #24
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe fd26 	bl	80143dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	3304      	adds	r3, #4
 8015994:	4618      	mov	r0, r3
 8015996:	f7fe fd21 	bl	80143dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801599e:	4b2d      	ldr	r3, [pc, #180]	@ (8015a54 <xTaskResumeAll+0x124>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	429a      	cmp	r2, r3
 80159a4:	d903      	bls.n	80159ae <xTaskResumeAll+0x7e>
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159aa:	4a2a      	ldr	r2, [pc, #168]	@ (8015a54 <xTaskResumeAll+0x124>)
 80159ac:	6013      	str	r3, [r2, #0]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159b2:	4613      	mov	r3, r2
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	4413      	add	r3, r2
 80159b8:	009b      	lsls	r3, r3, #2
 80159ba:	4a27      	ldr	r2, [pc, #156]	@ (8015a58 <xTaskResumeAll+0x128>)
 80159bc:	441a      	add	r2, r3
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	3304      	adds	r3, #4
 80159c2:	4619      	mov	r1, r3
 80159c4:	4610      	mov	r0, r2
 80159c6:	f7fe fcac 	bl	8014322 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159ce:	4b23      	ldr	r3, [pc, #140]	@ (8015a5c <xTaskResumeAll+0x12c>)
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d302      	bcc.n	80159de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80159d8:	4b21      	ldr	r3, [pc, #132]	@ (8015a60 <xTaskResumeAll+0x130>)
 80159da:	2201      	movs	r2, #1
 80159dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80159de:	4b1c      	ldr	r3, [pc, #112]	@ (8015a50 <xTaskResumeAll+0x120>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d1cb      	bne.n	801597e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d001      	beq.n	80159f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80159ec:	f000 fb92 	bl	8016114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80159f0:	4b1c      	ldr	r3, [pc, #112]	@ (8015a64 <xTaskResumeAll+0x134>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d010      	beq.n	8015a1e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80159fc:	f000 f858 	bl	8015ab0 <xTaskIncrementTick>
 8015a00:	4603      	mov	r3, r0
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d002      	beq.n	8015a0c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015a06:	4b16      	ldr	r3, [pc, #88]	@ (8015a60 <xTaskResumeAll+0x130>)
 8015a08:	2201      	movs	r2, #1
 8015a0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	3b01      	subs	r3, #1
 8015a10:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d1f1      	bne.n	80159fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015a18:	4b12      	ldr	r3, [pc, #72]	@ (8015a64 <xTaskResumeAll+0x134>)
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015a1e:	4b10      	ldr	r3, [pc, #64]	@ (8015a60 <xTaskResumeAll+0x130>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d009      	beq.n	8015a3a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015a26:	2301      	movs	r3, #1
 8015a28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8015a68 <xTaskResumeAll+0x138>)
 8015a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a30:	601a      	str	r2, [r3, #0]
 8015a32:	f3bf 8f4f 	dsb	sy
 8015a36:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015a3a:	f001 fc3f 	bl	80172bc <vPortExitCritical>

	return xAlreadyYielded;
 8015a3e:	68bb      	ldr	r3, [r7, #8]
}
 8015a40:	4618      	mov	r0, r3
 8015a42:	3710      	adds	r7, #16
 8015a44:	46bd      	mov	sp, r7
 8015a46:	bd80      	pop	{r7, pc}
 8015a48:	20007c4c 	.word	0x20007c4c
 8015a4c:	20007c24 	.word	0x20007c24
 8015a50:	20007be4 	.word	0x20007be4
 8015a54:	20007c2c 	.word	0x20007c2c
 8015a58:	20007754 	.word	0x20007754
 8015a5c:	20007750 	.word	0x20007750
 8015a60:	20007c38 	.word	0x20007c38
 8015a64:	20007c34 	.word	0x20007c34
 8015a68:	e000ed04 	.word	0xe000ed04

08015a6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015a6c:	b480      	push	{r7}
 8015a6e:	b083      	sub	sp, #12
 8015a70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015a72:	4b05      	ldr	r3, [pc, #20]	@ (8015a88 <xTaskGetTickCount+0x1c>)
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015a78:	687b      	ldr	r3, [r7, #4]
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	370c      	adds	r7, #12
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop
 8015a88:	20007c28 	.word	0x20007c28

08015a8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015a92:	f001 fcc1 	bl	8017418 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015a96:	2300      	movs	r3, #0
 8015a98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015a9a:	4b04      	ldr	r3, [pc, #16]	@ (8015aac <xTaskGetTickCountFromISR+0x20>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015aa0:	683b      	ldr	r3, [r7, #0]
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3708      	adds	r7, #8
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	bd80      	pop	{r7, pc}
 8015aaa:	bf00      	nop
 8015aac:	20007c28 	.word	0x20007c28

08015ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b086      	sub	sp, #24
 8015ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015aba:	4b4f      	ldr	r3, [pc, #316]	@ (8015bf8 <xTaskIncrementTick+0x148>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	f040 8090 	bne.w	8015be4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8015bfc <xTaskIncrementTick+0x14c>)
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	3301      	adds	r3, #1
 8015aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015acc:	4a4b      	ldr	r2, [pc, #300]	@ (8015bfc <xTaskIncrementTick+0x14c>)
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d121      	bne.n	8015b1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015ad8:	4b49      	ldr	r3, [pc, #292]	@ (8015c00 <xTaskIncrementTick+0x150>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d00b      	beq.n	8015afa <xTaskIncrementTick+0x4a>
	__asm volatile
 8015ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ae6:	f383 8811 	msr	BASEPRI, r3
 8015aea:	f3bf 8f6f 	isb	sy
 8015aee:	f3bf 8f4f 	dsb	sy
 8015af2:	603b      	str	r3, [r7, #0]
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop
 8015af8:	e7fd      	b.n	8015af6 <xTaskIncrementTick+0x46>
 8015afa:	4b41      	ldr	r3, [pc, #260]	@ (8015c00 <xTaskIncrementTick+0x150>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	60fb      	str	r3, [r7, #12]
 8015b00:	4b40      	ldr	r3, [pc, #256]	@ (8015c04 <xTaskIncrementTick+0x154>)
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	4a3e      	ldr	r2, [pc, #248]	@ (8015c00 <xTaskIncrementTick+0x150>)
 8015b06:	6013      	str	r3, [r2, #0]
 8015b08:	4a3e      	ldr	r2, [pc, #248]	@ (8015c04 <xTaskIncrementTick+0x154>)
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	6013      	str	r3, [r2, #0]
 8015b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8015c08 <xTaskIncrementTick+0x158>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	3301      	adds	r3, #1
 8015b14:	4a3c      	ldr	r2, [pc, #240]	@ (8015c08 <xTaskIncrementTick+0x158>)
 8015b16:	6013      	str	r3, [r2, #0]
 8015b18:	f000 fafc 	bl	8016114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8015c0c <xTaskIncrementTick+0x15c>)
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	693a      	ldr	r2, [r7, #16]
 8015b22:	429a      	cmp	r2, r3
 8015b24:	d349      	bcc.n	8015bba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015b26:	4b36      	ldr	r3, [pc, #216]	@ (8015c00 <xTaskIncrementTick+0x150>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	681b      	ldr	r3, [r3, #0]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d104      	bne.n	8015b3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b30:	4b36      	ldr	r3, [pc, #216]	@ (8015c0c <xTaskIncrementTick+0x15c>)
 8015b32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8015b36:	601a      	str	r2, [r3, #0]
					break;
 8015b38:	e03f      	b.n	8015bba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015b3a:	4b31      	ldr	r3, [pc, #196]	@ (8015c00 <xTaskIncrementTick+0x150>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	68db      	ldr	r3, [r3, #12]
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	685b      	ldr	r3, [r3, #4]
 8015b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015b4a:	693a      	ldr	r2, [r7, #16]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d203      	bcs.n	8015b5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015b52:	4a2e      	ldr	r2, [pc, #184]	@ (8015c0c <xTaskIncrementTick+0x15c>)
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015b58:	e02f      	b.n	8015bba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	3304      	adds	r3, #4
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7fe fc3c 	bl	80143dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d004      	beq.n	8015b76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	3318      	adds	r3, #24
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fe fc33 	bl	80143dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b7a:	4b25      	ldr	r3, [pc, #148]	@ (8015c10 <xTaskIncrementTick+0x160>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d903      	bls.n	8015b8a <xTaskIncrementTick+0xda>
 8015b82:	68bb      	ldr	r3, [r7, #8]
 8015b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b86:	4a22      	ldr	r2, [pc, #136]	@ (8015c10 <xTaskIncrementTick+0x160>)
 8015b88:	6013      	str	r3, [r2, #0]
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b8e:	4613      	mov	r3, r2
 8015b90:	009b      	lsls	r3, r3, #2
 8015b92:	4413      	add	r3, r2
 8015b94:	009b      	lsls	r3, r3, #2
 8015b96:	4a1f      	ldr	r2, [pc, #124]	@ (8015c14 <xTaskIncrementTick+0x164>)
 8015b98:	441a      	add	r2, r3
 8015b9a:	68bb      	ldr	r3, [r7, #8]
 8015b9c:	3304      	adds	r3, #4
 8015b9e:	4619      	mov	r1, r3
 8015ba0:	4610      	mov	r0, r2
 8015ba2:	f7fe fbbe 	bl	8014322 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015ba6:	68bb      	ldr	r3, [r7, #8]
 8015ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015baa:	4b1b      	ldr	r3, [pc, #108]	@ (8015c18 <xTaskIncrementTick+0x168>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015bb0:	429a      	cmp	r2, r3
 8015bb2:	d3b8      	bcc.n	8015b26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015bb8:	e7b5      	b.n	8015b26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015bba:	4b17      	ldr	r3, [pc, #92]	@ (8015c18 <xTaskIncrementTick+0x168>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015bc0:	4914      	ldr	r1, [pc, #80]	@ (8015c14 <xTaskIncrementTick+0x164>)
 8015bc2:	4613      	mov	r3, r2
 8015bc4:	009b      	lsls	r3, r3, #2
 8015bc6:	4413      	add	r3, r2
 8015bc8:	009b      	lsls	r3, r3, #2
 8015bca:	440b      	add	r3, r1
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d901      	bls.n	8015bd6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015bd6:	4b11      	ldr	r3, [pc, #68]	@ (8015c1c <xTaskIncrementTick+0x16c>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d007      	beq.n	8015bee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8015bde:	2301      	movs	r3, #1
 8015be0:	617b      	str	r3, [r7, #20]
 8015be2:	e004      	b.n	8015bee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015be4:	4b0e      	ldr	r3, [pc, #56]	@ (8015c20 <xTaskIncrementTick+0x170>)
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	3301      	adds	r3, #1
 8015bea:	4a0d      	ldr	r2, [pc, #52]	@ (8015c20 <xTaskIncrementTick+0x170>)
 8015bec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015bee:	697b      	ldr	r3, [r7, #20]
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3718      	adds	r7, #24
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd80      	pop	{r7, pc}
 8015bf8:	20007c4c 	.word	0x20007c4c
 8015bfc:	20007c28 	.word	0x20007c28
 8015c00:	20007bdc 	.word	0x20007bdc
 8015c04:	20007be0 	.word	0x20007be0
 8015c08:	20007c3c 	.word	0x20007c3c
 8015c0c:	20007c44 	.word	0x20007c44
 8015c10:	20007c2c 	.word	0x20007c2c
 8015c14:	20007754 	.word	0x20007754
 8015c18:	20007750 	.word	0x20007750
 8015c1c:	20007c38 	.word	0x20007c38
 8015c20:	20007c34 	.word	0x20007c34

08015c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015c2a:	4b36      	ldr	r3, [pc, #216]	@ (8015d04 <vTaskSwitchContext+0xe0>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d003      	beq.n	8015c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015c32:	4b35      	ldr	r3, [pc, #212]	@ (8015d08 <vTaskSwitchContext+0xe4>)
 8015c34:	2201      	movs	r2, #1
 8015c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015c38:	e060      	b.n	8015cfc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 8015c3a:	4b33      	ldr	r3, [pc, #204]	@ (8015d08 <vTaskSwitchContext+0xe4>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015c40:	f7f2 fe6c 	bl	800891c <getRunTimeCounterValue>
 8015c44:	4603      	mov	r3, r0
 8015c46:	4a31      	ldr	r2, [pc, #196]	@ (8015d0c <vTaskSwitchContext+0xe8>)
 8015c48:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8015c4a:	4b30      	ldr	r3, [pc, #192]	@ (8015d0c <vTaskSwitchContext+0xe8>)
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	4b30      	ldr	r3, [pc, #192]	@ (8015d10 <vTaskSwitchContext+0xec>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d909      	bls.n	8015c6a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015c56:	4b2f      	ldr	r3, [pc, #188]	@ (8015d14 <vTaskSwitchContext+0xf0>)
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8015c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8015d0c <vTaskSwitchContext+0xe8>)
 8015c5e:	6810      	ldr	r0, [r2, #0]
 8015c60:	4a2b      	ldr	r2, [pc, #172]	@ (8015d10 <vTaskSwitchContext+0xec>)
 8015c62:	6812      	ldr	r2, [r2, #0]
 8015c64:	1a82      	subs	r2, r0, r2
 8015c66:	440a      	add	r2, r1
 8015c68:	665a      	str	r2, [r3, #100]	@ 0x64
			ulTaskSwitchedInTime = ulTotalRunTime;
 8015c6a:	4b28      	ldr	r3, [pc, #160]	@ (8015d0c <vTaskSwitchContext+0xe8>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	4a28      	ldr	r2, [pc, #160]	@ (8015d10 <vTaskSwitchContext+0xec>)
 8015c70:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015c72:	4b29      	ldr	r3, [pc, #164]	@ (8015d18 <vTaskSwitchContext+0xf4>)
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	60fb      	str	r3, [r7, #12]
 8015c78:	e011      	b.n	8015c9e <vTaskSwitchContext+0x7a>
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d10b      	bne.n	8015c98 <vTaskSwitchContext+0x74>
	__asm volatile
 8015c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c84:	f383 8811 	msr	BASEPRI, r3
 8015c88:	f3bf 8f6f 	isb	sy
 8015c8c:	f3bf 8f4f 	dsb	sy
 8015c90:	607b      	str	r3, [r7, #4]
}
 8015c92:	bf00      	nop
 8015c94:	bf00      	nop
 8015c96:	e7fd      	b.n	8015c94 <vTaskSwitchContext+0x70>
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	3b01      	subs	r3, #1
 8015c9c:	60fb      	str	r3, [r7, #12]
 8015c9e:	491f      	ldr	r1, [pc, #124]	@ (8015d1c <vTaskSwitchContext+0xf8>)
 8015ca0:	68fa      	ldr	r2, [r7, #12]
 8015ca2:	4613      	mov	r3, r2
 8015ca4:	009b      	lsls	r3, r3, #2
 8015ca6:	4413      	add	r3, r2
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	440b      	add	r3, r1
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d0e3      	beq.n	8015c7a <vTaskSwitchContext+0x56>
 8015cb2:	68fa      	ldr	r2, [r7, #12]
 8015cb4:	4613      	mov	r3, r2
 8015cb6:	009b      	lsls	r3, r3, #2
 8015cb8:	4413      	add	r3, r2
 8015cba:	009b      	lsls	r3, r3, #2
 8015cbc:	4a17      	ldr	r2, [pc, #92]	@ (8015d1c <vTaskSwitchContext+0xf8>)
 8015cbe:	4413      	add	r3, r2
 8015cc0:	60bb      	str	r3, [r7, #8]
 8015cc2:	68bb      	ldr	r3, [r7, #8]
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	685a      	ldr	r2, [r3, #4]
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	605a      	str	r2, [r3, #4]
 8015ccc:	68bb      	ldr	r3, [r7, #8]
 8015cce:	685a      	ldr	r2, [r3, #4]
 8015cd0:	68bb      	ldr	r3, [r7, #8]
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d104      	bne.n	8015ce2 <vTaskSwitchContext+0xbe>
 8015cd8:	68bb      	ldr	r3, [r7, #8]
 8015cda:	685b      	ldr	r3, [r3, #4]
 8015cdc:	685a      	ldr	r2, [r3, #4]
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	605a      	str	r2, [r3, #4]
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	685b      	ldr	r3, [r3, #4]
 8015ce6:	68db      	ldr	r3, [r3, #12]
 8015ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8015d14 <vTaskSwitchContext+0xf0>)
 8015cea:	6013      	str	r3, [r2, #0]
 8015cec:	4a0a      	ldr	r2, [pc, #40]	@ (8015d18 <vTaskSwitchContext+0xf4>)
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015cf2:	4b08      	ldr	r3, [pc, #32]	@ (8015d14 <vTaskSwitchContext+0xf0>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	3368      	adds	r3, #104	@ 0x68
 8015cf8:	4a09      	ldr	r2, [pc, #36]	@ (8015d20 <vTaskSwitchContext+0xfc>)
 8015cfa:	6013      	str	r3, [r2, #0]
}
 8015cfc:	bf00      	nop
 8015cfe:	3710      	adds	r7, #16
 8015d00:	46bd      	mov	sp, r7
 8015d02:	bd80      	pop	{r7, pc}
 8015d04:	20007c4c 	.word	0x20007c4c
 8015d08:	20007c38 	.word	0x20007c38
 8015d0c:	20007c54 	.word	0x20007c54
 8015d10:	20007c50 	.word	0x20007c50
 8015d14:	20007750 	.word	0x20007750
 8015d18:	20007c2c 	.word	0x20007c2c
 8015d1c:	20007754 	.word	0x20007754
 8015d20:	200001b4 	.word	0x200001b4

08015d24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d10b      	bne.n	8015d4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8015d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d38:	f383 8811 	msr	BASEPRI, r3
 8015d3c:	f3bf 8f6f 	isb	sy
 8015d40:	f3bf 8f4f 	dsb	sy
 8015d44:	60fb      	str	r3, [r7, #12]
}
 8015d46:	bf00      	nop
 8015d48:	bf00      	nop
 8015d4a:	e7fd      	b.n	8015d48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d4c:	4b07      	ldr	r3, [pc, #28]	@ (8015d6c <vTaskPlaceOnEventList+0x48>)
 8015d4e:	681b      	ldr	r3, [r3, #0]
 8015d50:	3318      	adds	r3, #24
 8015d52:	4619      	mov	r1, r3
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	f7fe fb08 	bl	801436a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015d5a:	2101      	movs	r1, #1
 8015d5c:	6838      	ldr	r0, [r7, #0]
 8015d5e:	f000 fd9f 	bl	80168a0 <prvAddCurrentTaskToDelayedList>
}
 8015d62:	bf00      	nop
 8015d64:	3710      	adds	r7, #16
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	20007750 	.word	0x20007750

08015d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b086      	sub	sp, #24
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10b      	bne.n	8015d9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d86:	f383 8811 	msr	BASEPRI, r3
 8015d8a:	f3bf 8f6f 	isb	sy
 8015d8e:	f3bf 8f4f 	dsb	sy
 8015d92:	617b      	str	r3, [r7, #20]
}
 8015d94:	bf00      	nop
 8015d96:	bf00      	nop
 8015d98:	e7fd      	b.n	8015d96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8015dc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	3318      	adds	r3, #24
 8015da0:	4619      	mov	r1, r3
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f7fe fabd 	bl	8014322 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d002      	beq.n	8015db4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8015dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015db2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015db4:	6879      	ldr	r1, [r7, #4]
 8015db6:	68b8      	ldr	r0, [r7, #8]
 8015db8:	f000 fd72 	bl	80168a0 <prvAddCurrentTaskToDelayedList>
	}
 8015dbc:	bf00      	nop
 8015dbe:	3718      	adds	r7, #24
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}
 8015dc4:	20007750 	.word	0x20007750

08015dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b086      	sub	sp, #24
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d10b      	bne.n	8015df6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8015dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015de2:	f383 8811 	msr	BASEPRI, r3
 8015de6:	f3bf 8f6f 	isb	sy
 8015dea:	f3bf 8f4f 	dsb	sy
 8015dee:	60fb      	str	r3, [r7, #12]
}
 8015df0:	bf00      	nop
 8015df2:	bf00      	nop
 8015df4:	e7fd      	b.n	8015df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	3318      	adds	r3, #24
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fe faee 	bl	80143dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e00:	4b1d      	ldr	r3, [pc, #116]	@ (8015e78 <xTaskRemoveFromEventList+0xb0>)
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d11d      	bne.n	8015e44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7fe fae5 	bl	80143dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e16:	4b19      	ldr	r3, [pc, #100]	@ (8015e7c <xTaskRemoveFromEventList+0xb4>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	429a      	cmp	r2, r3
 8015e1c:	d903      	bls.n	8015e26 <xTaskRemoveFromEventList+0x5e>
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e22:	4a16      	ldr	r2, [pc, #88]	@ (8015e7c <xTaskRemoveFromEventList+0xb4>)
 8015e24:	6013      	str	r3, [r2, #0]
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e2a:	4613      	mov	r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	4413      	add	r3, r2
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	4a13      	ldr	r2, [pc, #76]	@ (8015e80 <xTaskRemoveFromEventList+0xb8>)
 8015e34:	441a      	add	r2, r3
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	3304      	adds	r3, #4
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	4610      	mov	r0, r2
 8015e3e:	f7fe fa70 	bl	8014322 <vListInsertEnd>
 8015e42:	e005      	b.n	8015e50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	3318      	adds	r3, #24
 8015e48:	4619      	mov	r1, r3
 8015e4a:	480e      	ldr	r0, [pc, #56]	@ (8015e84 <xTaskRemoveFromEventList+0xbc>)
 8015e4c:	f7fe fa69 	bl	8014322 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015e50:	693b      	ldr	r3, [r7, #16]
 8015e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e54:	4b0c      	ldr	r3, [pc, #48]	@ (8015e88 <xTaskRemoveFromEventList+0xc0>)
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d905      	bls.n	8015e6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015e5e:	2301      	movs	r3, #1
 8015e60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015e62:	4b0a      	ldr	r3, [pc, #40]	@ (8015e8c <xTaskRemoveFromEventList+0xc4>)
 8015e64:	2201      	movs	r2, #1
 8015e66:	601a      	str	r2, [r3, #0]
 8015e68:	e001      	b.n	8015e6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015e6e:	697b      	ldr	r3, [r7, #20]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3718      	adds	r7, #24
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}
 8015e78:	20007c4c 	.word	0x20007c4c
 8015e7c:	20007c2c 	.word	0x20007c2c
 8015e80:	20007754 	.word	0x20007754
 8015e84:	20007be4 	.word	0x20007be4
 8015e88:	20007750 	.word	0x20007750
 8015e8c:	20007c38 	.word	0x20007c38

08015e90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015e90:	b480      	push	{r7}
 8015e92:	b083      	sub	sp, #12
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015e98:	4b06      	ldr	r3, [pc, #24]	@ (8015eb4 <vTaskInternalSetTimeOutState+0x24>)
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015ea0:	4b05      	ldr	r3, [pc, #20]	@ (8015eb8 <vTaskInternalSetTimeOutState+0x28>)
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	605a      	str	r2, [r3, #4]
}
 8015ea8:	bf00      	nop
 8015eaa:	370c      	adds	r7, #12
 8015eac:	46bd      	mov	sp, r7
 8015eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb2:	4770      	bx	lr
 8015eb4:	20007c3c 	.word	0x20007c3c
 8015eb8:	20007c28 	.word	0x20007c28

08015ebc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b088      	sub	sp, #32
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d10b      	bne.n	8015ee4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ed0:	f383 8811 	msr	BASEPRI, r3
 8015ed4:	f3bf 8f6f 	isb	sy
 8015ed8:	f3bf 8f4f 	dsb	sy
 8015edc:	613b      	str	r3, [r7, #16]
}
 8015ede:	bf00      	nop
 8015ee0:	bf00      	nop
 8015ee2:	e7fd      	b.n	8015ee0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d10b      	bne.n	8015f02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015eee:	f383 8811 	msr	BASEPRI, r3
 8015ef2:	f3bf 8f6f 	isb	sy
 8015ef6:	f3bf 8f4f 	dsb	sy
 8015efa:	60fb      	str	r3, [r7, #12]
}
 8015efc:	bf00      	nop
 8015efe:	bf00      	nop
 8015f00:	e7fd      	b.n	8015efe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015f02:	f001 f9a9 	bl	8017258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015f06:	4b1d      	ldr	r3, [pc, #116]	@ (8015f7c <xTaskCheckForTimeOut+0xc0>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	69ba      	ldr	r2, [r7, #24]
 8015f12:	1ad3      	subs	r3, r2, r3
 8015f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015f1e:	d102      	bne.n	8015f26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015f20:	2300      	movs	r3, #0
 8015f22:	61fb      	str	r3, [r7, #28]
 8015f24:	e023      	b.n	8015f6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	4b15      	ldr	r3, [pc, #84]	@ (8015f80 <xTaskCheckForTimeOut+0xc4>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d007      	beq.n	8015f42 <xTaskCheckForTimeOut+0x86>
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	685b      	ldr	r3, [r3, #4]
 8015f36:	69ba      	ldr	r2, [r7, #24]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d302      	bcc.n	8015f42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	61fb      	str	r3, [r7, #28]
 8015f40:	e015      	b.n	8015f6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	429a      	cmp	r2, r3
 8015f4a:	d20b      	bcs.n	8015f64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	681a      	ldr	r2, [r3, #0]
 8015f50:	697b      	ldr	r3, [r7, #20]
 8015f52:	1ad2      	subs	r2, r2, r3
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff ff99 	bl	8015e90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8015f5e:	2300      	movs	r3, #0
 8015f60:	61fb      	str	r3, [r7, #28]
 8015f62:	e004      	b.n	8015f6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	2200      	movs	r2, #0
 8015f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015f6e:	f001 f9a5 	bl	80172bc <vPortExitCritical>

	return xReturn;
 8015f72:	69fb      	ldr	r3, [r7, #28]
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3720      	adds	r7, #32
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	20007c28 	.word	0x20007c28
 8015f80:	20007c3c 	.word	0x20007c3c

08015f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015f84:	b480      	push	{r7}
 8015f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015f88:	4b03      	ldr	r3, [pc, #12]	@ (8015f98 <vTaskMissedYield+0x14>)
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	601a      	str	r2, [r3, #0]
}
 8015f8e:	bf00      	nop
 8015f90:	46bd      	mov	sp, r7
 8015f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f96:	4770      	bx	lr
 8015f98:	20007c38 	.word	0x20007c38

08015f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015fa4:	f000 f852 	bl	801604c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015fa8:	4b06      	ldr	r3, [pc, #24]	@ (8015fc4 <prvIdleTask+0x28>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	2b01      	cmp	r3, #1
 8015fae:	d9f9      	bls.n	8015fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015fb0:	4b05      	ldr	r3, [pc, #20]	@ (8015fc8 <prvIdleTask+0x2c>)
 8015fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015fb6:	601a      	str	r2, [r3, #0]
 8015fb8:	f3bf 8f4f 	dsb	sy
 8015fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015fc0:	e7f0      	b.n	8015fa4 <prvIdleTask+0x8>
 8015fc2:	bf00      	nop
 8015fc4:	20007754 	.word	0x20007754
 8015fc8:	e000ed04 	.word	0xe000ed04

08015fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b082      	sub	sp, #8
 8015fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fd2:	2300      	movs	r3, #0
 8015fd4:	607b      	str	r3, [r7, #4]
 8015fd6:	e00c      	b.n	8015ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	4613      	mov	r3, r2
 8015fdc:	009b      	lsls	r3, r3, #2
 8015fde:	4413      	add	r3, r2
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	4a12      	ldr	r2, [pc, #72]	@ (801602c <prvInitialiseTaskLists+0x60>)
 8015fe4:	4413      	add	r3, r2
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fe f96e 	bl	80142c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	3301      	adds	r3, #1
 8015ff0:	607b      	str	r3, [r7, #4]
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b37      	cmp	r3, #55	@ 0x37
 8015ff6:	d9ef      	bls.n	8015fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015ff8:	480d      	ldr	r0, [pc, #52]	@ (8016030 <prvInitialiseTaskLists+0x64>)
 8015ffa:	f7fe f965 	bl	80142c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015ffe:	480d      	ldr	r0, [pc, #52]	@ (8016034 <prvInitialiseTaskLists+0x68>)
 8016000:	f7fe f962 	bl	80142c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016004:	480c      	ldr	r0, [pc, #48]	@ (8016038 <prvInitialiseTaskLists+0x6c>)
 8016006:	f7fe f95f 	bl	80142c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801600a:	480c      	ldr	r0, [pc, #48]	@ (801603c <prvInitialiseTaskLists+0x70>)
 801600c:	f7fe f95c 	bl	80142c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016010:	480b      	ldr	r0, [pc, #44]	@ (8016040 <prvInitialiseTaskLists+0x74>)
 8016012:	f7fe f959 	bl	80142c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016016:	4b0b      	ldr	r3, [pc, #44]	@ (8016044 <prvInitialiseTaskLists+0x78>)
 8016018:	4a05      	ldr	r2, [pc, #20]	@ (8016030 <prvInitialiseTaskLists+0x64>)
 801601a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801601c:	4b0a      	ldr	r3, [pc, #40]	@ (8016048 <prvInitialiseTaskLists+0x7c>)
 801601e:	4a05      	ldr	r2, [pc, #20]	@ (8016034 <prvInitialiseTaskLists+0x68>)
 8016020:	601a      	str	r2, [r3, #0]
}
 8016022:	bf00      	nop
 8016024:	3708      	adds	r7, #8
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	20007754 	.word	0x20007754
 8016030:	20007bb4 	.word	0x20007bb4
 8016034:	20007bc8 	.word	0x20007bc8
 8016038:	20007be4 	.word	0x20007be4
 801603c:	20007bf8 	.word	0x20007bf8
 8016040:	20007c10 	.word	0x20007c10
 8016044:	20007bdc 	.word	0x20007bdc
 8016048:	20007be0 	.word	0x20007be0

0801604c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016052:	e019      	b.n	8016088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016054:	f001 f900 	bl	8017258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016058:	4b10      	ldr	r3, [pc, #64]	@ (801609c <prvCheckTasksWaitingTermination+0x50>)
 801605a:	68db      	ldr	r3, [r3, #12]
 801605c:	68db      	ldr	r3, [r3, #12]
 801605e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	3304      	adds	r3, #4
 8016064:	4618      	mov	r0, r3
 8016066:	f7fe f9b9 	bl	80143dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801606a:	4b0d      	ldr	r3, [pc, #52]	@ (80160a0 <prvCheckTasksWaitingTermination+0x54>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	3b01      	subs	r3, #1
 8016070:	4a0b      	ldr	r2, [pc, #44]	@ (80160a0 <prvCheckTasksWaitingTermination+0x54>)
 8016072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016074:	4b0b      	ldr	r3, [pc, #44]	@ (80160a4 <prvCheckTasksWaitingTermination+0x58>)
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	3b01      	subs	r3, #1
 801607a:	4a0a      	ldr	r2, [pc, #40]	@ (80160a4 <prvCheckTasksWaitingTermination+0x58>)
 801607c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801607e:	f001 f91d 	bl	80172bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f000 f810 	bl	80160a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016088:	4b06      	ldr	r3, [pc, #24]	@ (80160a4 <prvCheckTasksWaitingTermination+0x58>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d1e1      	bne.n	8016054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016090:	bf00      	nop
 8016092:	bf00      	nop
 8016094:	3708      	adds	r7, #8
 8016096:	46bd      	mov	sp, r7
 8016098:	bd80      	pop	{r7, pc}
 801609a:	bf00      	nop
 801609c:	20007bf8 	.word	0x20007bf8
 80160a0:	20007c24 	.word	0x20007c24
 80160a4:	20007c0c 	.word	0x20007c0c

080160a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	3368      	adds	r3, #104	@ 0x68
 80160b4:	4618      	mov	r0, r3
 80160b6:	f00e fedd 	bl	8024e74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d108      	bne.n	80160d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80160c8:	4618      	mov	r0, r3
 80160ca:	f001 fab5 	bl	8017638 <vPortFree>
				vPortFree( pxTCB );
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f001 fab2 	bl	8017638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80160d4:	e019      	b.n	801610a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80160dc:	2b01      	cmp	r3, #1
 80160de:	d103      	bne.n	80160e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f001 faa9 	bl	8017638 <vPortFree>
	}
 80160e6:	e010      	b.n	801610a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	@ 0xb9
 80160ee:	2b02      	cmp	r3, #2
 80160f0:	d00b      	beq.n	801610a <prvDeleteTCB+0x62>
	__asm volatile
 80160f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160f6:	f383 8811 	msr	BASEPRI, r3
 80160fa:	f3bf 8f6f 	isb	sy
 80160fe:	f3bf 8f4f 	dsb	sy
 8016102:	60fb      	str	r3, [r7, #12]
}
 8016104:	bf00      	nop
 8016106:	bf00      	nop
 8016108:	e7fd      	b.n	8016106 <prvDeleteTCB+0x5e>
	}
 801610a:	bf00      	nop
 801610c:	3710      	adds	r7, #16
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
	...

08016114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801611a:	4b0c      	ldr	r3, [pc, #48]	@ (801614c <prvResetNextTaskUnblockTime+0x38>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d104      	bne.n	801612e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016124:	4b0a      	ldr	r3, [pc, #40]	@ (8016150 <prvResetNextTaskUnblockTime+0x3c>)
 8016126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801612a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801612c:	e008      	b.n	8016140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801612e:	4b07      	ldr	r3, [pc, #28]	@ (801614c <prvResetNextTaskUnblockTime+0x38>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	68db      	ldr	r3, [r3, #12]
 8016136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	685b      	ldr	r3, [r3, #4]
 801613c:	4a04      	ldr	r2, [pc, #16]	@ (8016150 <prvResetNextTaskUnblockTime+0x3c>)
 801613e:	6013      	str	r3, [r2, #0]
}
 8016140:	bf00      	nop
 8016142:	370c      	adds	r7, #12
 8016144:	46bd      	mov	sp, r7
 8016146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614a:	4770      	bx	lr
 801614c:	20007bdc 	.word	0x20007bdc
 8016150:	20007c44 	.word	0x20007c44

08016154 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016154:	b480      	push	{r7}
 8016156:	b083      	sub	sp, #12
 8016158:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801615a:	4b05      	ldr	r3, [pc, #20]	@ (8016170 <xTaskGetCurrentTaskHandle+0x1c>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016160:	687b      	ldr	r3, [r7, #4]
	}
 8016162:	4618      	mov	r0, r3
 8016164:	370c      	adds	r7, #12
 8016166:	46bd      	mov	sp, r7
 8016168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801616c:	4770      	bx	lr
 801616e:	bf00      	nop
 8016170:	20007750 	.word	0x20007750

08016174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016174:	b480      	push	{r7}
 8016176:	b083      	sub	sp, #12
 8016178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801617a:	4b0b      	ldr	r3, [pc, #44]	@ (80161a8 <xTaskGetSchedulerState+0x34>)
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d102      	bne.n	8016188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016182:	2301      	movs	r3, #1
 8016184:	607b      	str	r3, [r7, #4]
 8016186:	e008      	b.n	801619a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016188:	4b08      	ldr	r3, [pc, #32]	@ (80161ac <xTaskGetSchedulerState+0x38>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d102      	bne.n	8016196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016190:	2302      	movs	r3, #2
 8016192:	607b      	str	r3, [r7, #4]
 8016194:	e001      	b.n	801619a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016196:	2300      	movs	r3, #0
 8016198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801619a:	687b      	ldr	r3, [r7, #4]
	}
 801619c:	4618      	mov	r0, r3
 801619e:	370c      	adds	r7, #12
 80161a0:	46bd      	mov	sp, r7
 80161a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a6:	4770      	bx	lr
 80161a8:	20007c30 	.word	0x20007c30
 80161ac:	20007c4c 	.word	0x20007c4c

080161b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80161bc:	2300      	movs	r3, #0
 80161be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d051      	beq.n	801626a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80161c6:	68bb      	ldr	r3, [r7, #8]
 80161c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161ca:	4b2a      	ldr	r3, [pc, #168]	@ (8016274 <xTaskPriorityInherit+0xc4>)
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d241      	bcs.n	8016258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	699b      	ldr	r3, [r3, #24]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	db06      	blt.n	80161ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161dc:	4b25      	ldr	r3, [pc, #148]	@ (8016274 <xTaskPriorityInherit+0xc4>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80161e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	6959      	ldr	r1, [r3, #20]
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80161f2:	4613      	mov	r3, r2
 80161f4:	009b      	lsls	r3, r3, #2
 80161f6:	4413      	add	r3, r2
 80161f8:	009b      	lsls	r3, r3, #2
 80161fa:	4a1f      	ldr	r2, [pc, #124]	@ (8016278 <xTaskPriorityInherit+0xc8>)
 80161fc:	4413      	add	r3, r2
 80161fe:	4299      	cmp	r1, r3
 8016200:	d122      	bne.n	8016248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	3304      	adds	r3, #4
 8016206:	4618      	mov	r0, r3
 8016208:	f7fe f8e8 	bl	80143dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801620c:	4b19      	ldr	r3, [pc, #100]	@ (8016274 <xTaskPriorityInherit+0xc4>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016216:	68bb      	ldr	r3, [r7, #8]
 8016218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801621a:	4b18      	ldr	r3, [pc, #96]	@ (801627c <xTaskPriorityInherit+0xcc>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	429a      	cmp	r2, r3
 8016220:	d903      	bls.n	801622a <xTaskPriorityInherit+0x7a>
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016226:	4a15      	ldr	r2, [pc, #84]	@ (801627c <xTaskPriorityInherit+0xcc>)
 8016228:	6013      	str	r3, [r2, #0]
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801622e:	4613      	mov	r3, r2
 8016230:	009b      	lsls	r3, r3, #2
 8016232:	4413      	add	r3, r2
 8016234:	009b      	lsls	r3, r3, #2
 8016236:	4a10      	ldr	r2, [pc, #64]	@ (8016278 <xTaskPriorityInherit+0xc8>)
 8016238:	441a      	add	r2, r3
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	3304      	adds	r3, #4
 801623e:	4619      	mov	r1, r3
 8016240:	4610      	mov	r0, r2
 8016242:	f7fe f86e 	bl	8014322 <vListInsertEnd>
 8016246:	e004      	b.n	8016252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016248:	4b0a      	ldr	r3, [pc, #40]	@ (8016274 <xTaskPriorityInherit+0xc4>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016252:	2301      	movs	r3, #1
 8016254:	60fb      	str	r3, [r7, #12]
 8016256:	e008      	b.n	801626a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016258:	68bb      	ldr	r3, [r7, #8]
 801625a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801625c:	4b05      	ldr	r3, [pc, #20]	@ (8016274 <xTaskPriorityInherit+0xc4>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016262:	429a      	cmp	r2, r3
 8016264:	d201      	bcs.n	801626a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016266:	2301      	movs	r3, #1
 8016268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801626a:	68fb      	ldr	r3, [r7, #12]
	}
 801626c:	4618      	mov	r0, r3
 801626e:	3710      	adds	r7, #16
 8016270:	46bd      	mov	sp, r7
 8016272:	bd80      	pop	{r7, pc}
 8016274:	20007750 	.word	0x20007750
 8016278:	20007754 	.word	0x20007754
 801627c:	20007c2c 	.word	0x20007c2c

08016280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016280:	b580      	push	{r7, lr}
 8016282:	b086      	sub	sp, #24
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801628c:	2300      	movs	r3, #0
 801628e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d058      	beq.n	8016348 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016296:	4b2f      	ldr	r3, [pc, #188]	@ (8016354 <xTaskPriorityDisinherit+0xd4>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	693a      	ldr	r2, [r7, #16]
 801629c:	429a      	cmp	r2, r3
 801629e:	d00b      	beq.n	80162b8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80162a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162a4:	f383 8811 	msr	BASEPRI, r3
 80162a8:	f3bf 8f6f 	isb	sy
 80162ac:	f3bf 8f4f 	dsb	sy
 80162b0:	60fb      	str	r3, [r7, #12]
}
 80162b2:	bf00      	nop
 80162b4:	bf00      	nop
 80162b6:	e7fd      	b.n	80162b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d10b      	bne.n	80162d8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80162c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162c4:	f383 8811 	msr	BASEPRI, r3
 80162c8:	f3bf 8f6f 	isb	sy
 80162cc:	f3bf 8f4f 	dsb	sy
 80162d0:	60bb      	str	r3, [r7, #8]
}
 80162d2:	bf00      	nop
 80162d4:	bf00      	nop
 80162d6:	e7fd      	b.n	80162d4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80162dc:	1e5a      	subs	r2, r3, #1
 80162de:	693b      	ldr	r3, [r7, #16]
 80162e0:	661a      	str	r2, [r3, #96]	@ 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80162ea:	429a      	cmp	r2, r3
 80162ec:	d02c      	beq.n	8016348 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d128      	bne.n	8016348 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	3304      	adds	r3, #4
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7fe f86e 	bl	80143dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016300:	693b      	ldr	r3, [r7, #16]
 8016302:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801630c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016310:	693b      	ldr	r3, [r7, #16]
 8016312:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016314:	693b      	ldr	r3, [r7, #16]
 8016316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016318:	4b0f      	ldr	r3, [pc, #60]	@ (8016358 <xTaskPriorityDisinherit+0xd8>)
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	429a      	cmp	r2, r3
 801631e:	d903      	bls.n	8016328 <xTaskPriorityDisinherit+0xa8>
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016324:	4a0c      	ldr	r2, [pc, #48]	@ (8016358 <xTaskPriorityDisinherit+0xd8>)
 8016326:	6013      	str	r3, [r2, #0]
 8016328:	693b      	ldr	r3, [r7, #16]
 801632a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801632c:	4613      	mov	r3, r2
 801632e:	009b      	lsls	r3, r3, #2
 8016330:	4413      	add	r3, r2
 8016332:	009b      	lsls	r3, r3, #2
 8016334:	4a09      	ldr	r2, [pc, #36]	@ (801635c <xTaskPriorityDisinherit+0xdc>)
 8016336:	441a      	add	r2, r3
 8016338:	693b      	ldr	r3, [r7, #16]
 801633a:	3304      	adds	r3, #4
 801633c:	4619      	mov	r1, r3
 801633e:	4610      	mov	r0, r2
 8016340:	f7fd ffef 	bl	8014322 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016344:	2301      	movs	r3, #1
 8016346:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016348:	697b      	ldr	r3, [r7, #20]
	}
 801634a:	4618      	mov	r0, r3
 801634c:	3718      	adds	r7, #24
 801634e:	46bd      	mov	sp, r7
 8016350:	bd80      	pop	{r7, pc}
 8016352:	bf00      	nop
 8016354:	20007750 	.word	0x20007750
 8016358:	20007c2c 	.word	0x20007c2c
 801635c:	20007754 	.word	0x20007754

08016360 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016360:	b580      	push	{r7, lr}
 8016362:	b088      	sub	sp, #32
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801636e:	2301      	movs	r3, #1
 8016370:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	2b00      	cmp	r3, #0
 8016376:	d06c      	beq.n	8016452 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016378:	69bb      	ldr	r3, [r7, #24]
 801637a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801637c:	2b00      	cmp	r3, #0
 801637e:	d10b      	bne.n	8016398 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8016380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016384:	f383 8811 	msr	BASEPRI, r3
 8016388:	f3bf 8f6f 	isb	sy
 801638c:	f3bf 8f4f 	dsb	sy
 8016390:	60fb      	str	r3, [r7, #12]
}
 8016392:	bf00      	nop
 8016394:	bf00      	nop
 8016396:	e7fd      	b.n	8016394 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801639c:	683a      	ldr	r2, [r7, #0]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d902      	bls.n	80163a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	61fb      	str	r3, [r7, #28]
 80163a6:	e002      	b.n	80163ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80163a8:	69bb      	ldr	r3, [r7, #24]
 80163aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80163ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163b2:	69fa      	ldr	r2, [r7, #28]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d04c      	beq.n	8016452 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80163b8:	69bb      	ldr	r3, [r7, #24]
 80163ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80163bc:	697a      	ldr	r2, [r7, #20]
 80163be:	429a      	cmp	r2, r3
 80163c0:	d147      	bne.n	8016452 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80163c2:	4b26      	ldr	r3, [pc, #152]	@ (801645c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	69ba      	ldr	r2, [r7, #24]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d10b      	bne.n	80163e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80163cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163d0:	f383 8811 	msr	BASEPRI, r3
 80163d4:	f3bf 8f6f 	isb	sy
 80163d8:	f3bf 8f4f 	dsb	sy
 80163dc:	60bb      	str	r3, [r7, #8]
}
 80163de:	bf00      	nop
 80163e0:	bf00      	nop
 80163e2:	e7fd      	b.n	80163e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80163e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	69fa      	ldr	r2, [r7, #28]
 80163ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	699b      	ldr	r3, [r3, #24]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	db04      	blt.n	8016402 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80163fe:	69bb      	ldr	r3, [r7, #24]
 8016400:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016402:	69bb      	ldr	r3, [r7, #24]
 8016404:	6959      	ldr	r1, [r3, #20]
 8016406:	693a      	ldr	r2, [r7, #16]
 8016408:	4613      	mov	r3, r2
 801640a:	009b      	lsls	r3, r3, #2
 801640c:	4413      	add	r3, r2
 801640e:	009b      	lsls	r3, r3, #2
 8016410:	4a13      	ldr	r2, [pc, #76]	@ (8016460 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016412:	4413      	add	r3, r2
 8016414:	4299      	cmp	r1, r3
 8016416:	d11c      	bne.n	8016452 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016418:	69bb      	ldr	r3, [r7, #24]
 801641a:	3304      	adds	r3, #4
 801641c:	4618      	mov	r0, r3
 801641e:	f7fd ffdd 	bl	80143dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016426:	4b0f      	ldr	r3, [pc, #60]	@ (8016464 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	429a      	cmp	r2, r3
 801642c:	d903      	bls.n	8016436 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016432:	4a0c      	ldr	r2, [pc, #48]	@ (8016464 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016434:	6013      	str	r3, [r2, #0]
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801643a:	4613      	mov	r3, r2
 801643c:	009b      	lsls	r3, r3, #2
 801643e:	4413      	add	r3, r2
 8016440:	009b      	lsls	r3, r3, #2
 8016442:	4a07      	ldr	r2, [pc, #28]	@ (8016460 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016444:	441a      	add	r2, r3
 8016446:	69bb      	ldr	r3, [r7, #24]
 8016448:	3304      	adds	r3, #4
 801644a:	4619      	mov	r1, r3
 801644c:	4610      	mov	r0, r2
 801644e:	f7fd ff68 	bl	8014322 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016452:	bf00      	nop
 8016454:	3720      	adds	r7, #32
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	20007750 	.word	0x20007750
 8016460:	20007754 	.word	0x20007754
 8016464:	20007c2c 	.word	0x20007c2c

08016468 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016468:	b480      	push	{r7}
 801646a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801646c:	4b07      	ldr	r3, [pc, #28]	@ (801648c <pvTaskIncrementMutexHeldCount+0x24>)
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d004      	beq.n	801647e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016474:	4b05      	ldr	r3, [pc, #20]	@ (801648c <pvTaskIncrementMutexHeldCount+0x24>)
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 801647a:	3201      	adds	r2, #1
 801647c:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		return pxCurrentTCB;
 801647e:	4b03      	ldr	r3, [pc, #12]	@ (801648c <pvTaskIncrementMutexHeldCount+0x24>)
 8016480:	681b      	ldr	r3, [r3, #0]
	}
 8016482:	4618      	mov	r0, r3
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr
 801648c:	20007750 	.word	0x20007750

08016490 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8016490:	b580      	push	{r7, lr}
 8016492:	b086      	sub	sp, #24
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
 801649c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801649e:	f000 fedb 	bl	8017258 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80164a2:	4b29      	ldr	r3, [pc, #164]	@ (8016548 <xTaskNotifyWait+0xb8>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b02      	cmp	r3, #2
 80164ae:	d01c      	beq.n	80164ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80164b0:	4b25      	ldr	r3, [pc, #148]	@ (8016548 <xTaskNotifyWait+0xb8>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 80164b8:	68fa      	ldr	r2, [r7, #12]
 80164ba:	43d2      	mvns	r2, r2
 80164bc:	400a      	ands	r2, r1
 80164be:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80164c2:	4b21      	ldr	r3, [pc, #132]	@ (8016548 <xTaskNotifyWait+0xb8>)
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	2201      	movs	r2, #1
 80164c8:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d00b      	beq.n	80164ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80164d2:	2101      	movs	r1, #1
 80164d4:	6838      	ldr	r0, [r7, #0]
 80164d6:	f000 f9e3 	bl	80168a0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80164da:	4b1c      	ldr	r3, [pc, #112]	@ (801654c <xTaskNotifyWait+0xbc>)
 80164dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164e0:	601a      	str	r2, [r3, #0]
 80164e2:	f3bf 8f4f 	dsb	sy
 80164e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80164ea:	f000 fee7 	bl	80172bc <vPortExitCritical>

		taskENTER_CRITICAL();
 80164ee:	f000 feb3 	bl	8017258 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d005      	beq.n	8016504 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80164f8:	4b13      	ldr	r3, [pc, #76]	@ (8016548 <xTaskNotifyWait+0xb8>)
 80164fa:	681b      	ldr	r3, [r3, #0]
 80164fc:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8016504:	4b10      	ldr	r3, [pc, #64]	@ (8016548 <xTaskNotifyWait+0xb8>)
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 801650c:	b2db      	uxtb	r3, r3
 801650e:	2b02      	cmp	r3, #2
 8016510:	d002      	beq.n	8016518 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8016512:	2300      	movs	r3, #0
 8016514:	617b      	str	r3, [r7, #20]
 8016516:	e00a      	b.n	801652e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8016518:	4b0b      	ldr	r3, [pc, #44]	@ (8016548 <xTaskNotifyWait+0xb8>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	@ 0xb4
 8016520:	68ba      	ldr	r2, [r7, #8]
 8016522:	43d2      	mvns	r2, r2
 8016524:	400a      	ands	r2, r1
 8016526:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
				xReturn = pdTRUE;
 801652a:	2301      	movs	r3, #1
 801652c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801652e:	4b06      	ldr	r3, [pc, #24]	@ (8016548 <xTaskNotifyWait+0xb8>)
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2200      	movs	r2, #0
 8016534:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
		}
		taskEXIT_CRITICAL();
 8016538:	f000 fec0 	bl	80172bc <vPortExitCritical>

		return xReturn;
 801653c:	697b      	ldr	r3, [r7, #20]
	}
 801653e:	4618      	mov	r0, r3
 8016540:	3718      	adds	r7, #24
 8016542:	46bd      	mov	sp, r7
 8016544:	bd80      	pop	{r7, pc}
 8016546:	bf00      	nop
 8016548:	20007750 	.word	0x20007750
 801654c:	e000ed04 	.word	0xe000ed04

08016550 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8016550:	b580      	push	{r7, lr}
 8016552:	b08a      	sub	sp, #40	@ 0x28
 8016554:	af00      	add	r7, sp, #0
 8016556:	60f8      	str	r0, [r7, #12]
 8016558:	60b9      	str	r1, [r7, #8]
 801655a:	603b      	str	r3, [r7, #0]
 801655c:	4613      	mov	r3, r2
 801655e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8016560:	2301      	movs	r3, #1
 8016562:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d10b      	bne.n	8016582 <xTaskGenericNotify+0x32>
	__asm volatile
 801656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801656e:	f383 8811 	msr	BASEPRI, r3
 8016572:	f3bf 8f6f 	isb	sy
 8016576:	f3bf 8f4f 	dsb	sy
 801657a:	61bb      	str	r3, [r7, #24]
}
 801657c:	bf00      	nop
 801657e:	bf00      	nop
 8016580:	e7fd      	b.n	801657e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8016586:	f000 fe67 	bl	8017258 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d004      	beq.n	801659a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016590:	6a3b      	ldr	r3, [r7, #32]
 8016592:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 80165a0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80165a2:	6a3b      	ldr	r3, [r7, #32]
 80165a4:	2202      	movs	r2, #2
 80165a6:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 80165aa:	79fb      	ldrb	r3, [r7, #7]
 80165ac:	2b04      	cmp	r3, #4
 80165ae:	d82e      	bhi.n	801660e <xTaskGenericNotify+0xbe>
 80165b0:	a201      	add	r2, pc, #4	@ (adr r2, 80165b8 <xTaskGenericNotify+0x68>)
 80165b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b6:	bf00      	nop
 80165b8:	08016633 	.word	0x08016633
 80165bc:	080165cd 	.word	0x080165cd
 80165c0:	080165df 	.word	0x080165df
 80165c4:	080165ef 	.word	0x080165ef
 80165c8:	080165f9 	.word	0x080165f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80165cc:	6a3b      	ldr	r3, [r7, #32]
 80165ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 80165d2:	68bb      	ldr	r3, [r7, #8]
 80165d4:	431a      	orrs	r2, r3
 80165d6:	6a3b      	ldr	r3, [r7, #32]
 80165d8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80165dc:	e02c      	b.n	8016638 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80165de:	6a3b      	ldr	r3, [r7, #32]
 80165e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80165e4:	1c5a      	adds	r2, r3, #1
 80165e6:	6a3b      	ldr	r3, [r7, #32]
 80165e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80165ec:	e024      	b.n	8016638 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80165ee:	6a3b      	ldr	r3, [r7, #32]
 80165f0:	68ba      	ldr	r2, [r7, #8]
 80165f2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 80165f6:	e01f      	b.n	8016638 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80165f8:	7ffb      	ldrb	r3, [r7, #31]
 80165fa:	2b02      	cmp	r3, #2
 80165fc:	d004      	beq.n	8016608 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80165fe:	6a3b      	ldr	r3, [r7, #32]
 8016600:	68ba      	ldr	r2, [r7, #8]
 8016602:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8016606:	e017      	b.n	8016638 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8016608:	2300      	movs	r3, #0
 801660a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801660c:	e014      	b.n	8016638 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801660e:	6a3b      	ldr	r3, [r7, #32]
 8016610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016618:	d00d      	beq.n	8016636 <xTaskGenericNotify+0xe6>
	__asm volatile
 801661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801661e:	f383 8811 	msr	BASEPRI, r3
 8016622:	f3bf 8f6f 	isb	sy
 8016626:	f3bf 8f4f 	dsb	sy
 801662a:	617b      	str	r3, [r7, #20]
}
 801662c:	bf00      	nop
 801662e:	bf00      	nop
 8016630:	e7fd      	b.n	801662e <xTaskGenericNotify+0xde>
					break;
 8016632:	bf00      	nop
 8016634:	e000      	b.n	8016638 <xTaskGenericNotify+0xe8>

					break;
 8016636:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016638:	7ffb      	ldrb	r3, [r7, #31]
 801663a:	2b01      	cmp	r3, #1
 801663c:	d13b      	bne.n	80166b6 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801663e:	6a3b      	ldr	r3, [r7, #32]
 8016640:	3304      	adds	r3, #4
 8016642:	4618      	mov	r0, r3
 8016644:	f7fd feca 	bl	80143dc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8016648:	6a3b      	ldr	r3, [r7, #32]
 801664a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801664c:	4b1d      	ldr	r3, [pc, #116]	@ (80166c4 <xTaskGenericNotify+0x174>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d903      	bls.n	801665c <xTaskGenericNotify+0x10c>
 8016654:	6a3b      	ldr	r3, [r7, #32]
 8016656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016658:	4a1a      	ldr	r2, [pc, #104]	@ (80166c4 <xTaskGenericNotify+0x174>)
 801665a:	6013      	str	r3, [r2, #0]
 801665c:	6a3b      	ldr	r3, [r7, #32]
 801665e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016660:	4613      	mov	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	4413      	add	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4a17      	ldr	r2, [pc, #92]	@ (80166c8 <xTaskGenericNotify+0x178>)
 801666a:	441a      	add	r2, r3
 801666c:	6a3b      	ldr	r3, [r7, #32]
 801666e:	3304      	adds	r3, #4
 8016670:	4619      	mov	r1, r3
 8016672:	4610      	mov	r0, r2
 8016674:	f7fd fe55 	bl	8014322 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016678:	6a3b      	ldr	r3, [r7, #32]
 801667a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801667c:	2b00      	cmp	r3, #0
 801667e:	d00b      	beq.n	8016698 <xTaskGenericNotify+0x148>
	__asm volatile
 8016680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016684:	f383 8811 	msr	BASEPRI, r3
 8016688:	f3bf 8f6f 	isb	sy
 801668c:	f3bf 8f4f 	dsb	sy
 8016690:	613b      	str	r3, [r7, #16]
}
 8016692:	bf00      	nop
 8016694:	bf00      	nop
 8016696:	e7fd      	b.n	8016694 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016698:	6a3b      	ldr	r3, [r7, #32]
 801669a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801669c:	4b0b      	ldr	r3, [pc, #44]	@ (80166cc <xTaskGenericNotify+0x17c>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166a2:	429a      	cmp	r2, r3
 80166a4:	d907      	bls.n	80166b6 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80166a6:	4b0a      	ldr	r3, [pc, #40]	@ (80166d0 <xTaskGenericNotify+0x180>)
 80166a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80166ac:	601a      	str	r2, [r3, #0]
 80166ae:	f3bf 8f4f 	dsb	sy
 80166b2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80166b6:	f000 fe01 	bl	80172bc <vPortExitCritical>

		return xReturn;
 80166ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80166bc:	4618      	mov	r0, r3
 80166be:	3728      	adds	r7, #40	@ 0x28
 80166c0:	46bd      	mov	sp, r7
 80166c2:	bd80      	pop	{r7, pc}
 80166c4:	20007c2c 	.word	0x20007c2c
 80166c8:	20007754 	.word	0x20007754
 80166cc:	20007750 	.word	0x20007750
 80166d0:	e000ed04 	.word	0xe000ed04

080166d4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b08e      	sub	sp, #56	@ 0x38
 80166d8:	af00      	add	r7, sp, #0
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	60b9      	str	r1, [r7, #8]
 80166de:	603b      	str	r3, [r7, #0]
 80166e0:	4613      	mov	r3, r2
 80166e2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80166e4:	2301      	movs	r3, #1
 80166e6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d10b      	bne.n	8016706 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80166ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016700:	bf00      	nop
 8016702:	bf00      	nop
 8016704:	e7fd      	b.n	8016702 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016706:	f000 fe87 	bl	8017418 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 801670e:	f3ef 8211 	mrs	r2, BASEPRI
 8016712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016716:	f383 8811 	msr	BASEPRI, r3
 801671a:	f3bf 8f6f 	isb	sy
 801671e:	f3bf 8f4f 	dsb	sy
 8016722:	623a      	str	r2, [r7, #32]
 8016724:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8016726:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016728:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d004      	beq.n	801673a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8016730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016732:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801673a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801673c:	f893 30b8 	ldrb.w	r3, [r3, #184]	@ 0xb8
 8016740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016746:	2202      	movs	r2, #2
 8016748:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

			switch( eAction )
 801674c:	79fb      	ldrb	r3, [r7, #7]
 801674e:	2b04      	cmp	r3, #4
 8016750:	d82e      	bhi.n	80167b0 <xTaskGenericNotifyFromISR+0xdc>
 8016752:	a201      	add	r2, pc, #4	@ (adr r2, 8016758 <xTaskGenericNotifyFromISR+0x84>)
 8016754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016758:	080167d5 	.word	0x080167d5
 801675c:	0801676d 	.word	0x0801676d
 8016760:	0801677f 	.word	0x0801677f
 8016764:	0801678f 	.word	0x0801678f
 8016768:	08016799 	.word	0x08016799
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801676c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801676e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 8016772:	68bb      	ldr	r3, [r7, #8]
 8016774:	431a      	orrs	r2, r3
 8016776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016778:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 801677c:	e02d      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016780:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8016784:	1c5a      	adds	r2, r3, #1
 8016786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016788:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 801678c:	e025      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016790:	68ba      	ldr	r2, [r7, #8]
 8016792:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					break;
 8016796:	e020      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8016798:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801679c:	2b02      	cmp	r3, #2
 801679e:	d004      	beq.n	80167aa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80167a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167a2:	68ba      	ldr	r2, [r7, #8]
 80167a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80167a8:	e017      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80167aa:	2300      	movs	r3, #0
 80167ac:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80167ae:	e014      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80167b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80167b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80167ba:	d00d      	beq.n	80167d8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80167bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c0:	f383 8811 	msr	BASEPRI, r3
 80167c4:	f3bf 8f6f 	isb	sy
 80167c8:	f3bf 8f4f 	dsb	sy
 80167cc:	61bb      	str	r3, [r7, #24]
}
 80167ce:	bf00      	nop
 80167d0:	bf00      	nop
 80167d2:	e7fd      	b.n	80167d0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80167d4:	bf00      	nop
 80167d6:	e000      	b.n	80167da <xTaskGenericNotifyFromISR+0x106>
					break;
 80167d8:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80167da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80167de:	2b01      	cmp	r3, #1
 80167e0:	d147      	bne.n	8016872 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80167e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00b      	beq.n	8016802 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80167ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167ee:	f383 8811 	msr	BASEPRI, r3
 80167f2:	f3bf 8f6f 	isb	sy
 80167f6:	f3bf 8f4f 	dsb	sy
 80167fa:	617b      	str	r3, [r7, #20]
}
 80167fc:	bf00      	nop
 80167fe:	bf00      	nop
 8016800:	e7fd      	b.n	80167fe <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016802:	4b21      	ldr	r3, [pc, #132]	@ (8016888 <xTaskGenericNotifyFromISR+0x1b4>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d11d      	bne.n	8016846 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801680c:	3304      	adds	r3, #4
 801680e:	4618      	mov	r0, r3
 8016810:	f7fd fde4 	bl	80143dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016816:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016818:	4b1c      	ldr	r3, [pc, #112]	@ (801688c <xTaskGenericNotifyFromISR+0x1b8>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	429a      	cmp	r2, r3
 801681e:	d903      	bls.n	8016828 <xTaskGenericNotifyFromISR+0x154>
 8016820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016824:	4a19      	ldr	r2, [pc, #100]	@ (801688c <xTaskGenericNotifyFromISR+0x1b8>)
 8016826:	6013      	str	r3, [r2, #0]
 8016828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801682a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801682c:	4613      	mov	r3, r2
 801682e:	009b      	lsls	r3, r3, #2
 8016830:	4413      	add	r3, r2
 8016832:	009b      	lsls	r3, r3, #2
 8016834:	4a16      	ldr	r2, [pc, #88]	@ (8016890 <xTaskGenericNotifyFromISR+0x1bc>)
 8016836:	441a      	add	r2, r3
 8016838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801683a:	3304      	adds	r3, #4
 801683c:	4619      	mov	r1, r3
 801683e:	4610      	mov	r0, r2
 8016840:	f7fd fd6f 	bl	8014322 <vListInsertEnd>
 8016844:	e005      	b.n	8016852 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016848:	3318      	adds	r3, #24
 801684a:	4619      	mov	r1, r3
 801684c:	4811      	ldr	r0, [pc, #68]	@ (8016894 <xTaskGenericNotifyFromISR+0x1c0>)
 801684e:	f7fd fd68 	bl	8014322 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016856:	4b10      	ldr	r3, [pc, #64]	@ (8016898 <xTaskGenericNotifyFromISR+0x1c4>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801685c:	429a      	cmp	r2, r3
 801685e:	d908      	bls.n	8016872 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8016860:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016862:	2b00      	cmp	r3, #0
 8016864:	d002      	beq.n	801686c <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016866:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016868:	2201      	movs	r2, #1
 801686a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801686c:	4b0b      	ldr	r3, [pc, #44]	@ (801689c <xTaskGenericNotifyFromISR+0x1c8>)
 801686e:	2201      	movs	r2, #1
 8016870:	601a      	str	r2, [r3, #0]
 8016872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016874:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	f383 8811 	msr	BASEPRI, r3
}
 801687c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 801687e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8016880:	4618      	mov	r0, r3
 8016882:	3738      	adds	r7, #56	@ 0x38
 8016884:	46bd      	mov	sp, r7
 8016886:	bd80      	pop	{r7, pc}
 8016888:	20007c4c 	.word	0x20007c4c
 801688c:	20007c2c 	.word	0x20007c2c
 8016890:	20007754 	.word	0x20007754
 8016894:	20007be4 	.word	0x20007be4
 8016898:	20007750 	.word	0x20007750
 801689c:	20007c38 	.word	0x20007c38

080168a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80168a0:	b580      	push	{r7, lr}
 80168a2:	b084      	sub	sp, #16
 80168a4:	af00      	add	r7, sp, #0
 80168a6:	6078      	str	r0, [r7, #4]
 80168a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80168aa:	4b21      	ldr	r3, [pc, #132]	@ (8016930 <prvAddCurrentTaskToDelayedList+0x90>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80168b0:	4b20      	ldr	r3, [pc, #128]	@ (8016934 <prvAddCurrentTaskToDelayedList+0x94>)
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	3304      	adds	r3, #4
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7fd fd90 	bl	80143dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80168c2:	d10a      	bne.n	80168da <prvAddCurrentTaskToDelayedList+0x3a>
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d007      	beq.n	80168da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80168ca:	4b1a      	ldr	r3, [pc, #104]	@ (8016934 <prvAddCurrentTaskToDelayedList+0x94>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	3304      	adds	r3, #4
 80168d0:	4619      	mov	r1, r3
 80168d2:	4819      	ldr	r0, [pc, #100]	@ (8016938 <prvAddCurrentTaskToDelayedList+0x98>)
 80168d4:	f7fd fd25 	bl	8014322 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80168d8:	e026      	b.n	8016928 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80168da:	68fa      	ldr	r2, [r7, #12]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	4413      	add	r3, r2
 80168e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80168e2:	4b14      	ldr	r3, [pc, #80]	@ (8016934 <prvAddCurrentTaskToDelayedList+0x94>)
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	68ba      	ldr	r2, [r7, #8]
 80168e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80168ea:	68ba      	ldr	r2, [r7, #8]
 80168ec:	68fb      	ldr	r3, [r7, #12]
 80168ee:	429a      	cmp	r2, r3
 80168f0:	d209      	bcs.n	8016906 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80168f2:	4b12      	ldr	r3, [pc, #72]	@ (801693c <prvAddCurrentTaskToDelayedList+0x9c>)
 80168f4:	681a      	ldr	r2, [r3, #0]
 80168f6:	4b0f      	ldr	r3, [pc, #60]	@ (8016934 <prvAddCurrentTaskToDelayedList+0x94>)
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	3304      	adds	r3, #4
 80168fc:	4619      	mov	r1, r3
 80168fe:	4610      	mov	r0, r2
 8016900:	f7fd fd33 	bl	801436a <vListInsert>
}
 8016904:	e010      	b.n	8016928 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016906:	4b0e      	ldr	r3, [pc, #56]	@ (8016940 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016908:	681a      	ldr	r2, [r3, #0]
 801690a:	4b0a      	ldr	r3, [pc, #40]	@ (8016934 <prvAddCurrentTaskToDelayedList+0x94>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	3304      	adds	r3, #4
 8016910:	4619      	mov	r1, r3
 8016912:	4610      	mov	r0, r2
 8016914:	f7fd fd29 	bl	801436a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016918:	4b0a      	ldr	r3, [pc, #40]	@ (8016944 <prvAddCurrentTaskToDelayedList+0xa4>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	68ba      	ldr	r2, [r7, #8]
 801691e:	429a      	cmp	r2, r3
 8016920:	d202      	bcs.n	8016928 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016922:	4a08      	ldr	r2, [pc, #32]	@ (8016944 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	6013      	str	r3, [r2, #0]
}
 8016928:	bf00      	nop
 801692a:	3710      	adds	r7, #16
 801692c:	46bd      	mov	sp, r7
 801692e:	bd80      	pop	{r7, pc}
 8016930:	20007c28 	.word	0x20007c28
 8016934:	20007750 	.word	0x20007750
 8016938:	20007c10 	.word	0x20007c10
 801693c:	20007be0 	.word	0x20007be0
 8016940:	20007bdc 	.word	0x20007bdc
 8016944:	20007c44 	.word	0x20007c44

08016948 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b08a      	sub	sp, #40	@ 0x28
 801694c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801694e:	2300      	movs	r3, #0
 8016950:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016952:	f000 fb13 	bl	8016f7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016956:	4b1d      	ldr	r3, [pc, #116]	@ (80169cc <xTimerCreateTimerTask+0x84>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d021      	beq.n	80169a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801695e:	2300      	movs	r3, #0
 8016960:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016962:	2300      	movs	r3, #0
 8016964:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016966:	1d3a      	adds	r2, r7, #4
 8016968:	f107 0108 	add.w	r1, r7, #8
 801696c:	f107 030c 	add.w	r3, r7, #12
 8016970:	4618      	mov	r0, r3
 8016972:	f7fd fc8f 	bl	8014294 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016976:	6879      	ldr	r1, [r7, #4]
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	68fa      	ldr	r2, [r7, #12]
 801697c:	9202      	str	r2, [sp, #8]
 801697e:	9301      	str	r3, [sp, #4]
 8016980:	2302      	movs	r3, #2
 8016982:	9300      	str	r3, [sp, #0]
 8016984:	2300      	movs	r3, #0
 8016986:	460a      	mov	r2, r1
 8016988:	4911      	ldr	r1, [pc, #68]	@ (80169d0 <xTimerCreateTimerTask+0x88>)
 801698a:	4812      	ldr	r0, [pc, #72]	@ (80169d4 <xTimerCreateTimerTask+0x8c>)
 801698c:	f7fe fc66 	bl	801525c <xTaskCreateStatic>
 8016990:	4603      	mov	r3, r0
 8016992:	4a11      	ldr	r2, [pc, #68]	@ (80169d8 <xTimerCreateTimerTask+0x90>)
 8016994:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016996:	4b10      	ldr	r3, [pc, #64]	@ (80169d8 <xTimerCreateTimerTask+0x90>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	2b00      	cmp	r3, #0
 801699c:	d001      	beq.n	80169a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801699e:	2301      	movs	r3, #1
 80169a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d10b      	bne.n	80169c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80169a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169ac:	f383 8811 	msr	BASEPRI, r3
 80169b0:	f3bf 8f6f 	isb	sy
 80169b4:	f3bf 8f4f 	dsb	sy
 80169b8:	613b      	str	r3, [r7, #16]
}
 80169ba:	bf00      	nop
 80169bc:	bf00      	nop
 80169be:	e7fd      	b.n	80169bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80169c0:	697b      	ldr	r3, [r7, #20]
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3718      	adds	r7, #24
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}
 80169ca:	bf00      	nop
 80169cc:	20007c88 	.word	0x20007c88
 80169d0:	08027848 	.word	0x08027848
 80169d4:	08016b15 	.word	0x08016b15
 80169d8:	20007c8c 	.word	0x20007c8c

080169dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b08a      	sub	sp, #40	@ 0x28
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
 80169e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80169ea:	2300      	movs	r3, #0
 80169ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d10b      	bne.n	8016a0c <xTimerGenericCommand+0x30>
	__asm volatile
 80169f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169f8:	f383 8811 	msr	BASEPRI, r3
 80169fc:	f3bf 8f6f 	isb	sy
 8016a00:	f3bf 8f4f 	dsb	sy
 8016a04:	623b      	str	r3, [r7, #32]
}
 8016a06:	bf00      	nop
 8016a08:	bf00      	nop
 8016a0a:	e7fd      	b.n	8016a08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016a0c:	4b19      	ldr	r3, [pc, #100]	@ (8016a74 <xTimerGenericCommand+0x98>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d02a      	beq.n	8016a6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	2b05      	cmp	r3, #5
 8016a24:	dc18      	bgt.n	8016a58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016a26:	f7ff fba5 	bl	8016174 <xTaskGetSchedulerState>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d109      	bne.n	8016a44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016a30:	4b10      	ldr	r3, [pc, #64]	@ (8016a74 <xTimerGenericCommand+0x98>)
 8016a32:	6818      	ldr	r0, [r3, #0]
 8016a34:	f107 0110 	add.w	r1, r7, #16
 8016a38:	2300      	movs	r3, #0
 8016a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016a3c:	f7fd fef6 	bl	801482c <xQueueGenericSend>
 8016a40:	6278      	str	r0, [r7, #36]	@ 0x24
 8016a42:	e012      	b.n	8016a6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016a44:	4b0b      	ldr	r3, [pc, #44]	@ (8016a74 <xTimerGenericCommand+0x98>)
 8016a46:	6818      	ldr	r0, [r3, #0]
 8016a48:	f107 0110 	add.w	r1, r7, #16
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	2200      	movs	r2, #0
 8016a50:	f7fd feec 	bl	801482c <xQueueGenericSend>
 8016a54:	6278      	str	r0, [r7, #36]	@ 0x24
 8016a56:	e008      	b.n	8016a6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016a58:	4b06      	ldr	r3, [pc, #24]	@ (8016a74 <xTimerGenericCommand+0x98>)
 8016a5a:	6818      	ldr	r0, [r3, #0]
 8016a5c:	f107 0110 	add.w	r1, r7, #16
 8016a60:	2300      	movs	r3, #0
 8016a62:	683a      	ldr	r2, [r7, #0]
 8016a64:	f7fd ffe4 	bl	8014a30 <xQueueGenericSendFromISR>
 8016a68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3728      	adds	r7, #40	@ 0x28
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	20007c88 	.word	0x20007c88

08016a78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b088      	sub	sp, #32
 8016a7c:	af02      	add	r7, sp, #8
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a82:	4b23      	ldr	r3, [pc, #140]	@ (8016b10 <prvProcessExpiredTimer+0x98>)
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	68db      	ldr	r3, [r3, #12]
 8016a88:	68db      	ldr	r3, [r3, #12]
 8016a8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016a8c:	697b      	ldr	r3, [r7, #20]
 8016a8e:	3304      	adds	r3, #4
 8016a90:	4618      	mov	r0, r3
 8016a92:	f7fd fca3 	bl	80143dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016a9c:	f003 0304 	and.w	r3, r3, #4
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d023      	beq.n	8016aec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	699a      	ldr	r2, [r3, #24]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	18d1      	adds	r1, r2, r3
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	683a      	ldr	r2, [r7, #0]
 8016ab0:	6978      	ldr	r0, [r7, #20]
 8016ab2:	f000 f8d5 	bl	8016c60 <prvInsertTimerInActiveList>
 8016ab6:	4603      	mov	r3, r0
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d020      	beq.n	8016afe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016abc:	2300      	movs	r3, #0
 8016abe:	9300      	str	r3, [sp, #0]
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	687a      	ldr	r2, [r7, #4]
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	6978      	ldr	r0, [r7, #20]
 8016ac8:	f7ff ff88 	bl	80169dc <xTimerGenericCommand>
 8016acc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016ace:	693b      	ldr	r3, [r7, #16]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d114      	bne.n	8016afe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ad8:	f383 8811 	msr	BASEPRI, r3
 8016adc:	f3bf 8f6f 	isb	sy
 8016ae0:	f3bf 8f4f 	dsb	sy
 8016ae4:	60fb      	str	r3, [r7, #12]
}
 8016ae6:	bf00      	nop
 8016ae8:	bf00      	nop
 8016aea:	e7fd      	b.n	8016ae8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016af2:	f023 0301 	bic.w	r3, r3, #1
 8016af6:	b2da      	uxtb	r2, r3
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	6a1b      	ldr	r3, [r3, #32]
 8016b02:	6978      	ldr	r0, [r7, #20]
 8016b04:	4798      	blx	r3
}
 8016b06:	bf00      	nop
 8016b08:	3718      	adds	r7, #24
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}
 8016b0e:	bf00      	nop
 8016b10:	20007c80 	.word	0x20007c80

08016b14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016b1c:	f107 0308 	add.w	r3, r7, #8
 8016b20:	4618      	mov	r0, r3
 8016b22:	f000 f859 	bl	8016bd8 <prvGetNextExpireTime>
 8016b26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016b28:	68bb      	ldr	r3, [r7, #8]
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f000 f805 	bl	8016b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016b32:	f000 f8d7 	bl	8016ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016b36:	bf00      	nop
 8016b38:	e7f0      	b.n	8016b1c <prvTimerTask+0x8>
	...

08016b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b084      	sub	sp, #16
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
 8016b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016b46:	f7fe fee5 	bl	8015914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016b4a:	f107 0308 	add.w	r3, r7, #8
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f000 f866 	bl	8016c20 <prvSampleTimeNow>
 8016b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d130      	bne.n	8016bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d10a      	bne.n	8016b78 <prvProcessTimerOrBlockTask+0x3c>
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d806      	bhi.n	8016b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016b6a:	f7fe fee1 	bl	8015930 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016b6e:	68f9      	ldr	r1, [r7, #12]
 8016b70:	6878      	ldr	r0, [r7, #4]
 8016b72:	f7ff ff81 	bl	8016a78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016b76:	e024      	b.n	8016bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d008      	beq.n	8016b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016b7e:	4b13      	ldr	r3, [pc, #76]	@ (8016bcc <prvProcessTimerOrBlockTask+0x90>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d101      	bne.n	8016b8c <prvProcessTimerOrBlockTask+0x50>
 8016b88:	2301      	movs	r3, #1
 8016b8a:	e000      	b.n	8016b8e <prvProcessTimerOrBlockTask+0x52>
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016b90:	4b0f      	ldr	r3, [pc, #60]	@ (8016bd0 <prvProcessTimerOrBlockTask+0x94>)
 8016b92:	6818      	ldr	r0, [r3, #0]
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	1ad3      	subs	r3, r2, r3
 8016b9a:	683a      	ldr	r2, [r7, #0]
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	f7fe fb29 	bl	80151f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016ba2:	f7fe fec5 	bl	8015930 <xTaskResumeAll>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d10a      	bne.n	8016bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016bac:	4b09      	ldr	r3, [pc, #36]	@ (8016bd4 <prvProcessTimerOrBlockTask+0x98>)
 8016bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016bb2:	601a      	str	r2, [r3, #0]
 8016bb4:	f3bf 8f4f 	dsb	sy
 8016bb8:	f3bf 8f6f 	isb	sy
}
 8016bbc:	e001      	b.n	8016bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016bbe:	f7fe feb7 	bl	8015930 <xTaskResumeAll>
}
 8016bc2:	bf00      	nop
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
 8016bca:	bf00      	nop
 8016bcc:	20007c84 	.word	0x20007c84
 8016bd0:	20007c88 	.word	0x20007c88
 8016bd4:	e000ed04 	.word	0xe000ed04

08016bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b085      	sub	sp, #20
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016be0:	4b0e      	ldr	r3, [pc, #56]	@ (8016c1c <prvGetNextExpireTime+0x44>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d101      	bne.n	8016bee <prvGetNextExpireTime+0x16>
 8016bea:	2201      	movs	r2, #1
 8016bec:	e000      	b.n	8016bf0 <prvGetNextExpireTime+0x18>
 8016bee:	2200      	movs	r2, #0
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d105      	bne.n	8016c08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016bfc:	4b07      	ldr	r3, [pc, #28]	@ (8016c1c <prvGetNextExpireTime+0x44>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	68db      	ldr	r3, [r3, #12]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	60fb      	str	r3, [r7, #12]
 8016c06:	e001      	b.n	8016c0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3714      	adds	r7, #20
 8016c12:	46bd      	mov	sp, r7
 8016c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	20007c80 	.word	0x20007c80

08016c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016c20:	b580      	push	{r7, lr}
 8016c22:	b084      	sub	sp, #16
 8016c24:	af00      	add	r7, sp, #0
 8016c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016c28:	f7fe ff20 	bl	8015a6c <xTaskGetTickCount>
 8016c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8016c5c <prvSampleTimeNow+0x3c>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	429a      	cmp	r2, r3
 8016c36:	d205      	bcs.n	8016c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016c38:	f000 f93a 	bl	8016eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2201      	movs	r2, #1
 8016c40:	601a      	str	r2, [r3, #0]
 8016c42:	e002      	b.n	8016c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2200      	movs	r2, #0
 8016c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016c4a:	4a04      	ldr	r2, [pc, #16]	@ (8016c5c <prvSampleTimeNow+0x3c>)
 8016c4c:	68fb      	ldr	r3, [r7, #12]
 8016c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016c50:	68fb      	ldr	r3, [r7, #12]
}
 8016c52:	4618      	mov	r0, r3
 8016c54:	3710      	adds	r7, #16
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	20007c90 	.word	0x20007c90

08016c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b086      	sub	sp, #24
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	60f8      	str	r0, [r7, #12]
 8016c68:	60b9      	str	r1, [r7, #8]
 8016c6a:	607a      	str	r2, [r7, #4]
 8016c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016c6e:	2300      	movs	r3, #0
 8016c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	68ba      	ldr	r2, [r7, #8]
 8016c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	68fa      	ldr	r2, [r7, #12]
 8016c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016c7e:	68ba      	ldr	r2, [r7, #8]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	429a      	cmp	r2, r3
 8016c84:	d812      	bhi.n	8016cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c86:	687a      	ldr	r2, [r7, #4]
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	1ad2      	subs	r2, r2, r3
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	699b      	ldr	r3, [r3, #24]
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d302      	bcc.n	8016c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016c94:	2301      	movs	r3, #1
 8016c96:	617b      	str	r3, [r7, #20]
 8016c98:	e01b      	b.n	8016cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016c9a:	4b10      	ldr	r3, [pc, #64]	@ (8016cdc <prvInsertTimerInActiveList+0x7c>)
 8016c9c:	681a      	ldr	r2, [r3, #0]
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	3304      	adds	r3, #4
 8016ca2:	4619      	mov	r1, r3
 8016ca4:	4610      	mov	r0, r2
 8016ca6:	f7fd fb60 	bl	801436a <vListInsert>
 8016caa:	e012      	b.n	8016cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d206      	bcs.n	8016cc2 <prvInsertTimerInActiveList+0x62>
 8016cb4:	68ba      	ldr	r2, [r7, #8]
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d302      	bcc.n	8016cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	617b      	str	r3, [r7, #20]
 8016cc0:	e007      	b.n	8016cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016cc2:	4b07      	ldr	r3, [pc, #28]	@ (8016ce0 <prvInsertTimerInActiveList+0x80>)
 8016cc4:	681a      	ldr	r2, [r3, #0]
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	4619      	mov	r1, r3
 8016ccc:	4610      	mov	r0, r2
 8016cce:	f7fd fb4c 	bl	801436a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016cd2:	697b      	ldr	r3, [r7, #20]
}
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	3718      	adds	r7, #24
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	20007c84 	.word	0x20007c84
 8016ce0:	20007c80 	.word	0x20007c80

08016ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016ce4:	b580      	push	{r7, lr}
 8016ce6:	b08e      	sub	sp, #56	@ 0x38
 8016ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016cea:	e0ce      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	da19      	bge.n	8016d26 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016cf2:	1d3b      	adds	r3, r7, #4
 8016cf4:	3304      	adds	r3, #4
 8016cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d10b      	bne.n	8016d16 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d02:	f383 8811 	msr	BASEPRI, r3
 8016d06:	f3bf 8f6f 	isb	sy
 8016d0a:	f3bf 8f4f 	dsb	sy
 8016d0e:	61fb      	str	r3, [r7, #28]
}
 8016d10:	bf00      	nop
 8016d12:	bf00      	nop
 8016d14:	e7fd      	b.n	8016d12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016d1c:	6850      	ldr	r0, [r2, #4]
 8016d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016d20:	6892      	ldr	r2, [r2, #8]
 8016d22:	4611      	mov	r1, r2
 8016d24:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	f2c0 80ae 	blt.w	8016e8a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d34:	695b      	ldr	r3, [r3, #20]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d004      	beq.n	8016d44 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d3c:	3304      	adds	r3, #4
 8016d3e:	4618      	mov	r0, r3
 8016d40:	f7fd fb4c 	bl	80143dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016d44:	463b      	mov	r3, r7
 8016d46:	4618      	mov	r0, r3
 8016d48:	f7ff ff6a 	bl	8016c20 <prvSampleTimeNow>
 8016d4c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2b09      	cmp	r3, #9
 8016d52:	f200 8097 	bhi.w	8016e84 <prvProcessReceivedCommands+0x1a0>
 8016d56:	a201      	add	r2, pc, #4	@ (adr r2, 8016d5c <prvProcessReceivedCommands+0x78>)
 8016d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d5c:	08016d85 	.word	0x08016d85
 8016d60:	08016d85 	.word	0x08016d85
 8016d64:	08016d85 	.word	0x08016d85
 8016d68:	08016dfb 	.word	0x08016dfb
 8016d6c:	08016e0f 	.word	0x08016e0f
 8016d70:	08016e5b 	.word	0x08016e5b
 8016d74:	08016d85 	.word	0x08016d85
 8016d78:	08016d85 	.word	0x08016d85
 8016d7c:	08016dfb 	.word	0x08016dfb
 8016d80:	08016e0f 	.word	0x08016e0f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016d8a:	f043 0301 	orr.w	r3, r3, #1
 8016d8e:	b2da      	uxtb	r2, r3
 8016d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d92:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016d96:	68ba      	ldr	r2, [r7, #8]
 8016d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d9a:	699b      	ldr	r3, [r3, #24]
 8016d9c:	18d1      	adds	r1, r2, r3
 8016d9e:	68bb      	ldr	r3, [r7, #8]
 8016da0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016da2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016da4:	f7ff ff5c 	bl	8016c60 <prvInsertTimerInActiveList>
 8016da8:	4603      	mov	r3, r0
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d06c      	beq.n	8016e88 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db0:	6a1b      	ldr	r3, [r3, #32]
 8016db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016db4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016db8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016dbc:	f003 0304 	and.w	r3, r3, #4
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d061      	beq.n	8016e88 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016dc4:	68ba      	ldr	r2, [r7, #8]
 8016dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dc8:	699b      	ldr	r3, [r3, #24]
 8016dca:	441a      	add	r2, r3
 8016dcc:	2300      	movs	r3, #0
 8016dce:	9300      	str	r3, [sp, #0]
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	2100      	movs	r1, #0
 8016dd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016dd6:	f7ff fe01 	bl	80169dc <xTimerGenericCommand>
 8016dda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016ddc:	6a3b      	ldr	r3, [r7, #32]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d152      	bne.n	8016e88 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8016de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016de6:	f383 8811 	msr	BASEPRI, r3
 8016dea:	f3bf 8f6f 	isb	sy
 8016dee:	f3bf 8f4f 	dsb	sy
 8016df2:	61bb      	str	r3, [r7, #24]
}
 8016df4:	bf00      	nop
 8016df6:	bf00      	nop
 8016df8:	e7fd      	b.n	8016df6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016e00:	f023 0301 	bic.w	r3, r3, #1
 8016e04:	b2da      	uxtb	r2, r3
 8016e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016e0c:	e03d      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016e14:	f043 0301 	orr.w	r3, r3, #1
 8016e18:	b2da      	uxtb	r2, r3
 8016e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016e20:	68ba      	ldr	r2, [r7, #8]
 8016e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e28:	699b      	ldr	r3, [r3, #24]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d10b      	bne.n	8016e46 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8016e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e32:	f383 8811 	msr	BASEPRI, r3
 8016e36:	f3bf 8f6f 	isb	sy
 8016e3a:	f3bf 8f4f 	dsb	sy
 8016e3e:	617b      	str	r3, [r7, #20]
}
 8016e40:	bf00      	nop
 8016e42:	bf00      	nop
 8016e44:	e7fd      	b.n	8016e42 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e48:	699a      	ldr	r2, [r3, #24]
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4c:	18d1      	adds	r1, r2, r3
 8016e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016e54:	f7ff ff04 	bl	8016c60 <prvInsertTimerInActiveList>
					break;
 8016e58:	e017      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016e60:	f003 0302 	and.w	r3, r3, #2
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d103      	bne.n	8016e70 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016e6a:	f000 fbe5 	bl	8017638 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8016e6e:	e00c      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016e76:	f023 0301 	bic.w	r3, r3, #1
 8016e7a:	b2da      	uxtb	r2, r3
 8016e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016e7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016e82:	e002      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8016e84:	bf00      	nop
 8016e86:	e000      	b.n	8016e8a <prvProcessReceivedCommands+0x1a6>
					break;
 8016e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016e8a:	4b08      	ldr	r3, [pc, #32]	@ (8016eac <prvProcessReceivedCommands+0x1c8>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	1d39      	adds	r1, r7, #4
 8016e90:	2200      	movs	r2, #0
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7fd fe6a 	bl	8014b6c <xQueueReceive>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	f47f af26 	bne.w	8016cec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8016ea0:	bf00      	nop
 8016ea2:	bf00      	nop
 8016ea4:	3730      	adds	r7, #48	@ 0x30
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	20007c88 	.word	0x20007c88

08016eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b088      	sub	sp, #32
 8016eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016eb6:	e049      	b.n	8016f4c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	68db      	ldr	r3, [r3, #12]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016ec4:	681b      	ldr	r3, [r3, #0]
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	68db      	ldr	r3, [r3, #12]
 8016eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	3304      	adds	r3, #4
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7fd fa83 	bl	80143dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016ed6:	68fb      	ldr	r3, [r7, #12]
 8016ed8:	6a1b      	ldr	r3, [r3, #32]
 8016eda:	68f8      	ldr	r0, [r7, #12]
 8016edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016ee4:	f003 0304 	and.w	r3, r3, #4
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d02f      	beq.n	8016f4c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	699b      	ldr	r3, [r3, #24]
 8016ef0:	693a      	ldr	r2, [r7, #16]
 8016ef2:	4413      	add	r3, r2
 8016ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016ef6:	68ba      	ldr	r2, [r7, #8]
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d90e      	bls.n	8016f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	68ba      	ldr	r2, [r7, #8]
 8016f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	68fa      	ldr	r2, [r7, #12]
 8016f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016f0c:	681a      	ldr	r2, [r3, #0]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	3304      	adds	r3, #4
 8016f12:	4619      	mov	r1, r3
 8016f14:	4610      	mov	r0, r2
 8016f16:	f7fd fa28 	bl	801436a <vListInsert>
 8016f1a:	e017      	b.n	8016f4c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	9300      	str	r3, [sp, #0]
 8016f20:	2300      	movs	r3, #0
 8016f22:	693a      	ldr	r2, [r7, #16]
 8016f24:	2100      	movs	r1, #0
 8016f26:	68f8      	ldr	r0, [r7, #12]
 8016f28:	f7ff fd58 	bl	80169dc <xTimerGenericCommand>
 8016f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d10b      	bne.n	8016f4c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f38:	f383 8811 	msr	BASEPRI, r3
 8016f3c:	f3bf 8f6f 	isb	sy
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	603b      	str	r3, [r7, #0]
}
 8016f46:	bf00      	nop
 8016f48:	bf00      	nop
 8016f4a:	e7fd      	b.n	8016f48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016f4c:	4b09      	ldr	r3, [pc, #36]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d1b0      	bne.n	8016eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016f56:	4b07      	ldr	r3, [pc, #28]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016f5c:	4b06      	ldr	r3, [pc, #24]	@ (8016f78 <prvSwitchTimerLists+0xc8>)
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	4a04      	ldr	r2, [pc, #16]	@ (8016f74 <prvSwitchTimerLists+0xc4>)
 8016f62:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016f64:	4a04      	ldr	r2, [pc, #16]	@ (8016f78 <prvSwitchTimerLists+0xc8>)
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	6013      	str	r3, [r2, #0]
}
 8016f6a:	bf00      	nop
 8016f6c:	3718      	adds	r7, #24
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	bd80      	pop	{r7, pc}
 8016f72:	bf00      	nop
 8016f74:	20007c80 	.word	0x20007c80
 8016f78:	20007c84 	.word	0x20007c84

08016f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b082      	sub	sp, #8
 8016f80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016f82:	f000 f969 	bl	8017258 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016f86:	4b15      	ldr	r3, [pc, #84]	@ (8016fdc <prvCheckForValidListAndQueue+0x60>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d120      	bne.n	8016fd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016f8e:	4814      	ldr	r0, [pc, #80]	@ (8016fe0 <prvCheckForValidListAndQueue+0x64>)
 8016f90:	f7fd f99a 	bl	80142c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016f94:	4813      	ldr	r0, [pc, #76]	@ (8016fe4 <prvCheckForValidListAndQueue+0x68>)
 8016f96:	f7fd f997 	bl	80142c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016f9a:	4b13      	ldr	r3, [pc, #76]	@ (8016fe8 <prvCheckForValidListAndQueue+0x6c>)
 8016f9c:	4a10      	ldr	r2, [pc, #64]	@ (8016fe0 <prvCheckForValidListAndQueue+0x64>)
 8016f9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016fa0:	4b12      	ldr	r3, [pc, #72]	@ (8016fec <prvCheckForValidListAndQueue+0x70>)
 8016fa2:	4a10      	ldr	r2, [pc, #64]	@ (8016fe4 <prvCheckForValidListAndQueue+0x68>)
 8016fa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016fa6:	2300      	movs	r3, #0
 8016fa8:	9300      	str	r3, [sp, #0]
 8016faa:	4b11      	ldr	r3, [pc, #68]	@ (8016ff0 <prvCheckForValidListAndQueue+0x74>)
 8016fac:	4a11      	ldr	r2, [pc, #68]	@ (8016ff4 <prvCheckForValidListAndQueue+0x78>)
 8016fae:	2110      	movs	r1, #16
 8016fb0:	200a      	movs	r0, #10
 8016fb2:	f7fd faa7 	bl	8014504 <xQueueGenericCreateStatic>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	4a08      	ldr	r2, [pc, #32]	@ (8016fdc <prvCheckForValidListAndQueue+0x60>)
 8016fba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8016fbc:	4b07      	ldr	r3, [pc, #28]	@ (8016fdc <prvCheckForValidListAndQueue+0x60>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d005      	beq.n	8016fd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016fc4:	4b05      	ldr	r3, [pc, #20]	@ (8016fdc <prvCheckForValidListAndQueue+0x60>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	490b      	ldr	r1, [pc, #44]	@ (8016ff8 <prvCheckForValidListAndQueue+0x7c>)
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fe f8e8 	bl	80151a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8016fd0:	f000 f974 	bl	80172bc <vPortExitCritical>
}
 8016fd4:	bf00      	nop
 8016fd6:	46bd      	mov	sp, r7
 8016fd8:	bd80      	pop	{r7, pc}
 8016fda:	bf00      	nop
 8016fdc:	20007c88 	.word	0x20007c88
 8016fe0:	20007c58 	.word	0x20007c58
 8016fe4:	20007c6c 	.word	0x20007c6c
 8016fe8:	20007c80 	.word	0x20007c80
 8016fec:	20007c84 	.word	0x20007c84
 8016ff0:	20007d34 	.word	0x20007d34
 8016ff4:	20007c94 	.word	0x20007c94
 8016ff8:	08027850 	.word	0x08027850

08016ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b085      	sub	sp, #20
 8017000:	af00      	add	r7, sp, #0
 8017002:	60f8      	str	r0, [r7, #12]
 8017004:	60b9      	str	r1, [r7, #8]
 8017006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	3b04      	subs	r3, #4
 801700c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8017014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	3b04      	subs	r3, #4
 801701a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	f023 0201 	bic.w	r2, r3, #1
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	3b04      	subs	r3, #4
 801702a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801702c:	4a0c      	ldr	r2, [pc, #48]	@ (8017060 <pxPortInitialiseStack+0x64>)
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017032:	68fb      	ldr	r3, [r7, #12]
 8017034:	3b14      	subs	r3, #20
 8017036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017038:	687a      	ldr	r2, [r7, #4]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	3b04      	subs	r3, #4
 8017042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	f06f 0202 	mvn.w	r2, #2
 801704a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	3b20      	subs	r3, #32
 8017050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8017052:	68fb      	ldr	r3, [r7, #12]
}
 8017054:	4618      	mov	r0, r3
 8017056:	3714      	adds	r7, #20
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr
 8017060:	08017065 	.word	0x08017065

08017064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017064:	b480      	push	{r7}
 8017066:	b085      	sub	sp, #20
 8017068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801706a:	2300      	movs	r3, #0
 801706c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801706e:	4b13      	ldr	r3, [pc, #76]	@ (80170bc <prvTaskExitError+0x58>)
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017076:	d00b      	beq.n	8017090 <prvTaskExitError+0x2c>
	__asm volatile
 8017078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801707c:	f383 8811 	msr	BASEPRI, r3
 8017080:	f3bf 8f6f 	isb	sy
 8017084:	f3bf 8f4f 	dsb	sy
 8017088:	60fb      	str	r3, [r7, #12]
}
 801708a:	bf00      	nop
 801708c:	bf00      	nop
 801708e:	e7fd      	b.n	801708c <prvTaskExitError+0x28>
	__asm volatile
 8017090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017094:	f383 8811 	msr	BASEPRI, r3
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	f3bf 8f4f 	dsb	sy
 80170a0:	60bb      	str	r3, [r7, #8]
}
 80170a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80170a4:	bf00      	nop
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d0fc      	beq.n	80170a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80170ac:	bf00      	nop
 80170ae:	bf00      	nop
 80170b0:	3714      	adds	r7, #20
 80170b2:	46bd      	mov	sp, r7
 80170b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b8:	4770      	bx	lr
 80170ba:	bf00      	nop
 80170bc:	20000128 	.word	0x20000128

080170c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80170c0:	4b07      	ldr	r3, [pc, #28]	@ (80170e0 <pxCurrentTCBConst2>)
 80170c2:	6819      	ldr	r1, [r3, #0]
 80170c4:	6808      	ldr	r0, [r1, #0]
 80170c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ca:	f380 8809 	msr	PSP, r0
 80170ce:	f3bf 8f6f 	isb	sy
 80170d2:	f04f 0000 	mov.w	r0, #0
 80170d6:	f380 8811 	msr	BASEPRI, r0
 80170da:	4770      	bx	lr
 80170dc:	f3af 8000 	nop.w

080170e0 <pxCurrentTCBConst2>:
 80170e0:	20007750 	.word	0x20007750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80170e4:	bf00      	nop
 80170e6:	bf00      	nop

080170e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80170e8:	4808      	ldr	r0, [pc, #32]	@ (801710c <prvPortStartFirstTask+0x24>)
 80170ea:	6800      	ldr	r0, [r0, #0]
 80170ec:	6800      	ldr	r0, [r0, #0]
 80170ee:	f380 8808 	msr	MSP, r0
 80170f2:	f04f 0000 	mov.w	r0, #0
 80170f6:	f380 8814 	msr	CONTROL, r0
 80170fa:	b662      	cpsie	i
 80170fc:	b661      	cpsie	f
 80170fe:	f3bf 8f4f 	dsb	sy
 8017102:	f3bf 8f6f 	isb	sy
 8017106:	df00      	svc	0
 8017108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801710a:	bf00      	nop
 801710c:	e000ed08 	.word	0xe000ed08

08017110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b086      	sub	sp, #24
 8017114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017116:	4b47      	ldr	r3, [pc, #284]	@ (8017234 <xPortStartScheduler+0x124>)
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	4a47      	ldr	r2, [pc, #284]	@ (8017238 <xPortStartScheduler+0x128>)
 801711c:	4293      	cmp	r3, r2
 801711e:	d10b      	bne.n	8017138 <xPortStartScheduler+0x28>
	__asm volatile
 8017120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017124:	f383 8811 	msr	BASEPRI, r3
 8017128:	f3bf 8f6f 	isb	sy
 801712c:	f3bf 8f4f 	dsb	sy
 8017130:	613b      	str	r3, [r7, #16]
}
 8017132:	bf00      	nop
 8017134:	bf00      	nop
 8017136:	e7fd      	b.n	8017134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017138:	4b3e      	ldr	r3, [pc, #248]	@ (8017234 <xPortStartScheduler+0x124>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	4a3f      	ldr	r2, [pc, #252]	@ (801723c <xPortStartScheduler+0x12c>)
 801713e:	4293      	cmp	r3, r2
 8017140:	d10b      	bne.n	801715a <xPortStartScheduler+0x4a>
	__asm volatile
 8017142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017146:	f383 8811 	msr	BASEPRI, r3
 801714a:	f3bf 8f6f 	isb	sy
 801714e:	f3bf 8f4f 	dsb	sy
 8017152:	60fb      	str	r3, [r7, #12]
}
 8017154:	bf00      	nop
 8017156:	bf00      	nop
 8017158:	e7fd      	b.n	8017156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801715a:	4b39      	ldr	r3, [pc, #228]	@ (8017240 <xPortStartScheduler+0x130>)
 801715c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	781b      	ldrb	r3, [r3, #0]
 8017162:	b2db      	uxtb	r3, r3
 8017164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017166:	697b      	ldr	r3, [r7, #20]
 8017168:	22ff      	movs	r2, #255	@ 0xff
 801716a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	781b      	ldrb	r3, [r3, #0]
 8017170:	b2db      	uxtb	r3, r3
 8017172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017174:	78fb      	ldrb	r3, [r7, #3]
 8017176:	b2db      	uxtb	r3, r3
 8017178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801717c:	b2da      	uxtb	r2, r3
 801717e:	4b31      	ldr	r3, [pc, #196]	@ (8017244 <xPortStartScheduler+0x134>)
 8017180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017182:	4b31      	ldr	r3, [pc, #196]	@ (8017248 <xPortStartScheduler+0x138>)
 8017184:	2207      	movs	r2, #7
 8017186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017188:	e009      	b.n	801719e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801718a:	4b2f      	ldr	r3, [pc, #188]	@ (8017248 <xPortStartScheduler+0x138>)
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	3b01      	subs	r3, #1
 8017190:	4a2d      	ldr	r2, [pc, #180]	@ (8017248 <xPortStartScheduler+0x138>)
 8017192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017194:	78fb      	ldrb	r3, [r7, #3]
 8017196:	b2db      	uxtb	r3, r3
 8017198:	005b      	lsls	r3, r3, #1
 801719a:	b2db      	uxtb	r3, r3
 801719c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801719e:	78fb      	ldrb	r3, [r7, #3]
 80171a0:	b2db      	uxtb	r3, r3
 80171a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80171a6:	2b80      	cmp	r3, #128	@ 0x80
 80171a8:	d0ef      	beq.n	801718a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80171aa:	4b27      	ldr	r3, [pc, #156]	@ (8017248 <xPortStartScheduler+0x138>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	f1c3 0307 	rsb	r3, r3, #7
 80171b2:	2b04      	cmp	r3, #4
 80171b4:	d00b      	beq.n	80171ce <xPortStartScheduler+0xbe>
	__asm volatile
 80171b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171ba:	f383 8811 	msr	BASEPRI, r3
 80171be:	f3bf 8f6f 	isb	sy
 80171c2:	f3bf 8f4f 	dsb	sy
 80171c6:	60bb      	str	r3, [r7, #8]
}
 80171c8:	bf00      	nop
 80171ca:	bf00      	nop
 80171cc:	e7fd      	b.n	80171ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80171ce:	4b1e      	ldr	r3, [pc, #120]	@ (8017248 <xPortStartScheduler+0x138>)
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	021b      	lsls	r3, r3, #8
 80171d4:	4a1c      	ldr	r2, [pc, #112]	@ (8017248 <xPortStartScheduler+0x138>)
 80171d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80171d8:	4b1b      	ldr	r3, [pc, #108]	@ (8017248 <xPortStartScheduler+0x138>)
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80171e0:	4a19      	ldr	r2, [pc, #100]	@ (8017248 <xPortStartScheduler+0x138>)
 80171e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	b2da      	uxtb	r2, r3
 80171e8:	697b      	ldr	r3, [r7, #20]
 80171ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80171ec:	4b17      	ldr	r3, [pc, #92]	@ (801724c <xPortStartScheduler+0x13c>)
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	4a16      	ldr	r2, [pc, #88]	@ (801724c <xPortStartScheduler+0x13c>)
 80171f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80171f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80171f8:	4b14      	ldr	r3, [pc, #80]	@ (801724c <xPortStartScheduler+0x13c>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	4a13      	ldr	r2, [pc, #76]	@ (801724c <xPortStartScheduler+0x13c>)
 80171fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017204:	f000 f8da 	bl	80173bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017208:	4b11      	ldr	r3, [pc, #68]	@ (8017250 <xPortStartScheduler+0x140>)
 801720a:	2200      	movs	r2, #0
 801720c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801720e:	f000 f8f9 	bl	8017404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017212:	4b10      	ldr	r3, [pc, #64]	@ (8017254 <xPortStartScheduler+0x144>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	4a0f      	ldr	r2, [pc, #60]	@ (8017254 <xPortStartScheduler+0x144>)
 8017218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801721c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801721e:	f7ff ff63 	bl	80170e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017222:	f7fe fcff 	bl	8015c24 <vTaskSwitchContext>
	prvTaskExitError();
 8017226:	f7ff ff1d 	bl	8017064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801722a:	2300      	movs	r3, #0
}
 801722c:	4618      	mov	r0, r3
 801722e:	3718      	adds	r7, #24
 8017230:	46bd      	mov	sp, r7
 8017232:	bd80      	pop	{r7, pc}
 8017234:	e000ed00 	.word	0xe000ed00
 8017238:	410fc271 	.word	0x410fc271
 801723c:	410fc270 	.word	0x410fc270
 8017240:	e000e400 	.word	0xe000e400
 8017244:	20007d84 	.word	0x20007d84
 8017248:	20007d88 	.word	0x20007d88
 801724c:	e000ed20 	.word	0xe000ed20
 8017250:	20000128 	.word	0x20000128
 8017254:	e000ef34 	.word	0xe000ef34

08017258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
	__asm volatile
 801725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017262:	f383 8811 	msr	BASEPRI, r3
 8017266:	f3bf 8f6f 	isb	sy
 801726a:	f3bf 8f4f 	dsb	sy
 801726e:	607b      	str	r3, [r7, #4]
}
 8017270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017272:	4b10      	ldr	r3, [pc, #64]	@ (80172b4 <vPortEnterCritical+0x5c>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	3301      	adds	r3, #1
 8017278:	4a0e      	ldr	r2, [pc, #56]	@ (80172b4 <vPortEnterCritical+0x5c>)
 801727a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801727c:	4b0d      	ldr	r3, [pc, #52]	@ (80172b4 <vPortEnterCritical+0x5c>)
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	2b01      	cmp	r3, #1
 8017282:	d110      	bne.n	80172a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017284:	4b0c      	ldr	r3, [pc, #48]	@ (80172b8 <vPortEnterCritical+0x60>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	b2db      	uxtb	r3, r3
 801728a:	2b00      	cmp	r3, #0
 801728c:	d00b      	beq.n	80172a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017292:	f383 8811 	msr	BASEPRI, r3
 8017296:	f3bf 8f6f 	isb	sy
 801729a:	f3bf 8f4f 	dsb	sy
 801729e:	603b      	str	r3, [r7, #0]
}
 80172a0:	bf00      	nop
 80172a2:	bf00      	nop
 80172a4:	e7fd      	b.n	80172a2 <vPortEnterCritical+0x4a>
	}
}
 80172a6:	bf00      	nop
 80172a8:	370c      	adds	r7, #12
 80172aa:	46bd      	mov	sp, r7
 80172ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b0:	4770      	bx	lr
 80172b2:	bf00      	nop
 80172b4:	20000128 	.word	0x20000128
 80172b8:	e000ed04 	.word	0xe000ed04

080172bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80172bc:	b480      	push	{r7}
 80172be:	b083      	sub	sp, #12
 80172c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80172c2:	4b12      	ldr	r3, [pc, #72]	@ (801730c <vPortExitCritical+0x50>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d10b      	bne.n	80172e2 <vPortExitCritical+0x26>
	__asm volatile
 80172ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172ce:	f383 8811 	msr	BASEPRI, r3
 80172d2:	f3bf 8f6f 	isb	sy
 80172d6:	f3bf 8f4f 	dsb	sy
 80172da:	607b      	str	r3, [r7, #4]
}
 80172dc:	bf00      	nop
 80172de:	bf00      	nop
 80172e0:	e7fd      	b.n	80172de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80172e2:	4b0a      	ldr	r3, [pc, #40]	@ (801730c <vPortExitCritical+0x50>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	3b01      	subs	r3, #1
 80172e8:	4a08      	ldr	r2, [pc, #32]	@ (801730c <vPortExitCritical+0x50>)
 80172ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80172ec:	4b07      	ldr	r3, [pc, #28]	@ (801730c <vPortExitCritical+0x50>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d105      	bne.n	8017300 <vPortExitCritical+0x44>
 80172f4:	2300      	movs	r3, #0
 80172f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	f383 8811 	msr	BASEPRI, r3
}
 80172fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017300:	bf00      	nop
 8017302:	370c      	adds	r7, #12
 8017304:	46bd      	mov	sp, r7
 8017306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730a:	4770      	bx	lr
 801730c:	20000128 	.word	0x20000128

08017310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017310:	f3ef 8009 	mrs	r0, PSP
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	4b15      	ldr	r3, [pc, #84]	@ (8017370 <pxCurrentTCBConst>)
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	f01e 0f10 	tst.w	lr, #16
 8017320:	bf08      	it	eq
 8017322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801732a:	6010      	str	r0, [r2, #0]
 801732c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017334:	f380 8811 	msr	BASEPRI, r0
 8017338:	f3bf 8f4f 	dsb	sy
 801733c:	f3bf 8f6f 	isb	sy
 8017340:	f7fe fc70 	bl	8015c24 <vTaskSwitchContext>
 8017344:	f04f 0000 	mov.w	r0, #0
 8017348:	f380 8811 	msr	BASEPRI, r0
 801734c:	bc09      	pop	{r0, r3}
 801734e:	6819      	ldr	r1, [r3, #0]
 8017350:	6808      	ldr	r0, [r1, #0]
 8017352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017356:	f01e 0f10 	tst.w	lr, #16
 801735a:	bf08      	it	eq
 801735c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017360:	f380 8809 	msr	PSP, r0
 8017364:	f3bf 8f6f 	isb	sy
 8017368:	4770      	bx	lr
 801736a:	bf00      	nop
 801736c:	f3af 8000 	nop.w

08017370 <pxCurrentTCBConst>:
 8017370:	20007750 	.word	0x20007750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017374:	bf00      	nop
 8017376:	bf00      	nop

08017378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017378:	b580      	push	{r7, lr}
 801737a:	b082      	sub	sp, #8
 801737c:	af00      	add	r7, sp, #0
	__asm volatile
 801737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017382:	f383 8811 	msr	BASEPRI, r3
 8017386:	f3bf 8f6f 	isb	sy
 801738a:	f3bf 8f4f 	dsb	sy
 801738e:	607b      	str	r3, [r7, #4]
}
 8017390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017392:	f7fe fb8d 	bl	8015ab0 <xTaskIncrementTick>
 8017396:	4603      	mov	r3, r0
 8017398:	2b00      	cmp	r3, #0
 801739a:	d003      	beq.n	80173a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801739c:	4b06      	ldr	r3, [pc, #24]	@ (80173b8 <xPortSysTickHandler+0x40>)
 801739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	2300      	movs	r3, #0
 80173a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	f383 8811 	msr	BASEPRI, r3
}
 80173ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80173b0:	bf00      	nop
 80173b2:	3708      	adds	r7, #8
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	e000ed04 	.word	0xe000ed04

080173bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80173bc:	b480      	push	{r7}
 80173be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80173c0:	4b0b      	ldr	r3, [pc, #44]	@ (80173f0 <vPortSetupTimerInterrupt+0x34>)
 80173c2:	2200      	movs	r2, #0
 80173c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80173c6:	4b0b      	ldr	r3, [pc, #44]	@ (80173f4 <vPortSetupTimerInterrupt+0x38>)
 80173c8:	2200      	movs	r2, #0
 80173ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80173cc:	4b0a      	ldr	r3, [pc, #40]	@ (80173f8 <vPortSetupTimerInterrupt+0x3c>)
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4a0a      	ldr	r2, [pc, #40]	@ (80173fc <vPortSetupTimerInterrupt+0x40>)
 80173d2:	fba2 2303 	umull	r2, r3, r2, r3
 80173d6:	099b      	lsrs	r3, r3, #6
 80173d8:	4a09      	ldr	r2, [pc, #36]	@ (8017400 <vPortSetupTimerInterrupt+0x44>)
 80173da:	3b01      	subs	r3, #1
 80173dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80173de:	4b04      	ldr	r3, [pc, #16]	@ (80173f0 <vPortSetupTimerInterrupt+0x34>)
 80173e0:	2207      	movs	r2, #7
 80173e2:	601a      	str	r2, [r3, #0]
}
 80173e4:	bf00      	nop
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	e000e010 	.word	0xe000e010
 80173f4:	e000e018 	.word	0xe000e018
 80173f8:	2000000c 	.word	0x2000000c
 80173fc:	10624dd3 	.word	0x10624dd3
 8017400:	e000e014 	.word	0xe000e014

08017404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017414 <vPortEnableVFP+0x10>
 8017408:	6801      	ldr	r1, [r0, #0]
 801740a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801740e:	6001      	str	r1, [r0, #0]
 8017410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017412:	bf00      	nop
 8017414:	e000ed88 	.word	0xe000ed88

08017418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017418:	b480      	push	{r7}
 801741a:	b085      	sub	sp, #20
 801741c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801741e:	f3ef 8305 	mrs	r3, IPSR
 8017422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	2b0f      	cmp	r3, #15
 8017428:	d915      	bls.n	8017456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801742a:	4a18      	ldr	r2, [pc, #96]	@ (801748c <vPortValidateInterruptPriority+0x74>)
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	4413      	add	r3, r2
 8017430:	781b      	ldrb	r3, [r3, #0]
 8017432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017434:	4b16      	ldr	r3, [pc, #88]	@ (8017490 <vPortValidateInterruptPriority+0x78>)
 8017436:	781b      	ldrb	r3, [r3, #0]
 8017438:	7afa      	ldrb	r2, [r7, #11]
 801743a:	429a      	cmp	r2, r3
 801743c:	d20b      	bcs.n	8017456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017442:	f383 8811 	msr	BASEPRI, r3
 8017446:	f3bf 8f6f 	isb	sy
 801744a:	f3bf 8f4f 	dsb	sy
 801744e:	607b      	str	r3, [r7, #4]
}
 8017450:	bf00      	nop
 8017452:	bf00      	nop
 8017454:	e7fd      	b.n	8017452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017456:	4b0f      	ldr	r3, [pc, #60]	@ (8017494 <vPortValidateInterruptPriority+0x7c>)
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801745e:	4b0e      	ldr	r3, [pc, #56]	@ (8017498 <vPortValidateInterruptPriority+0x80>)
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	429a      	cmp	r2, r3
 8017464:	d90b      	bls.n	801747e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8017466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801746a:	f383 8811 	msr	BASEPRI, r3
 801746e:	f3bf 8f6f 	isb	sy
 8017472:	f3bf 8f4f 	dsb	sy
 8017476:	603b      	str	r3, [r7, #0]
}
 8017478:	bf00      	nop
 801747a:	bf00      	nop
 801747c:	e7fd      	b.n	801747a <vPortValidateInterruptPriority+0x62>
	}
 801747e:	bf00      	nop
 8017480:	3714      	adds	r7, #20
 8017482:	46bd      	mov	sp, r7
 8017484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop
 801748c:	e000e3f0 	.word	0xe000e3f0
 8017490:	20007d84 	.word	0x20007d84
 8017494:	e000ed0c 	.word	0xe000ed0c
 8017498:	20007d88 	.word	0x20007d88

0801749c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b08a      	sub	sp, #40	@ 0x28
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80174a4:	2300      	movs	r3, #0
 80174a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80174a8:	f7fe fa34 	bl	8015914 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80174ac:	4b5c      	ldr	r3, [pc, #368]	@ (8017620 <pvPortMalloc+0x184>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d101      	bne.n	80174b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80174b4:	f000 f924 	bl	8017700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80174b8:	4b5a      	ldr	r3, [pc, #360]	@ (8017624 <pvPortMalloc+0x188>)
 80174ba:	681a      	ldr	r2, [r3, #0]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	4013      	ands	r3, r2
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	f040 8095 	bne.w	80175f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d01e      	beq.n	801750a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80174cc:	2208      	movs	r2, #8
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	4413      	add	r3, r2
 80174d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f003 0307 	and.w	r3, r3, #7
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d015      	beq.n	801750a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	f023 0307 	bic.w	r3, r3, #7
 80174e4:	3308      	adds	r3, #8
 80174e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f003 0307 	and.w	r3, r3, #7
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d00b      	beq.n	801750a <pvPortMalloc+0x6e>
	__asm volatile
 80174f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174f6:	f383 8811 	msr	BASEPRI, r3
 80174fa:	f3bf 8f6f 	isb	sy
 80174fe:	f3bf 8f4f 	dsb	sy
 8017502:	617b      	str	r3, [r7, #20]
}
 8017504:	bf00      	nop
 8017506:	bf00      	nop
 8017508:	e7fd      	b.n	8017506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d06f      	beq.n	80175f0 <pvPortMalloc+0x154>
 8017510:	4b45      	ldr	r3, [pc, #276]	@ (8017628 <pvPortMalloc+0x18c>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	687a      	ldr	r2, [r7, #4]
 8017516:	429a      	cmp	r2, r3
 8017518:	d86a      	bhi.n	80175f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801751a:	4b44      	ldr	r3, [pc, #272]	@ (801762c <pvPortMalloc+0x190>)
 801751c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801751e:	4b43      	ldr	r3, [pc, #268]	@ (801762c <pvPortMalloc+0x190>)
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017524:	e004      	b.n	8017530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8017526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017532:	685b      	ldr	r3, [r3, #4]
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	429a      	cmp	r2, r3
 8017538:	d903      	bls.n	8017542 <pvPortMalloc+0xa6>
 801753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d1f1      	bne.n	8017526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017542:	4b37      	ldr	r3, [pc, #220]	@ (8017620 <pvPortMalloc+0x184>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017548:	429a      	cmp	r2, r3
 801754a:	d051      	beq.n	80175f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801754c:	6a3b      	ldr	r3, [r7, #32]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2208      	movs	r2, #8
 8017552:	4413      	add	r3, r2
 8017554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017558:	681a      	ldr	r2, [r3, #0]
 801755a:	6a3b      	ldr	r3, [r7, #32]
 801755c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017560:	685a      	ldr	r2, [r3, #4]
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	1ad2      	subs	r2, r2, r3
 8017566:	2308      	movs	r3, #8
 8017568:	005b      	lsls	r3, r3, #1
 801756a:	429a      	cmp	r2, r3
 801756c:	d920      	bls.n	80175b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	4413      	add	r3, r2
 8017574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017576:	69bb      	ldr	r3, [r7, #24]
 8017578:	f003 0307 	and.w	r3, r3, #7
 801757c:	2b00      	cmp	r3, #0
 801757e:	d00b      	beq.n	8017598 <pvPortMalloc+0xfc>
	__asm volatile
 8017580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017584:	f383 8811 	msr	BASEPRI, r3
 8017588:	f3bf 8f6f 	isb	sy
 801758c:	f3bf 8f4f 	dsb	sy
 8017590:	613b      	str	r3, [r7, #16]
}
 8017592:	bf00      	nop
 8017594:	bf00      	nop
 8017596:	e7fd      	b.n	8017594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801759a:	685a      	ldr	r2, [r3, #4]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	1ad2      	subs	r2, r2, r3
 80175a0:	69bb      	ldr	r3, [r7, #24]
 80175a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80175a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80175aa:	69b8      	ldr	r0, [r7, #24]
 80175ac:	f000 f90a 	bl	80177c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80175b0:	4b1d      	ldr	r3, [pc, #116]	@ (8017628 <pvPortMalloc+0x18c>)
 80175b2:	681a      	ldr	r2, [r3, #0]
 80175b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175b6:	685b      	ldr	r3, [r3, #4]
 80175b8:	1ad3      	subs	r3, r2, r3
 80175ba:	4a1b      	ldr	r2, [pc, #108]	@ (8017628 <pvPortMalloc+0x18c>)
 80175bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80175be:	4b1a      	ldr	r3, [pc, #104]	@ (8017628 <pvPortMalloc+0x18c>)
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	4b1b      	ldr	r3, [pc, #108]	@ (8017630 <pvPortMalloc+0x194>)
 80175c4:	681b      	ldr	r3, [r3, #0]
 80175c6:	429a      	cmp	r2, r3
 80175c8:	d203      	bcs.n	80175d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80175ca:	4b17      	ldr	r3, [pc, #92]	@ (8017628 <pvPortMalloc+0x18c>)
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	4a18      	ldr	r2, [pc, #96]	@ (8017630 <pvPortMalloc+0x194>)
 80175d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80175d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175d4:	685a      	ldr	r2, [r3, #4]
 80175d6:	4b13      	ldr	r3, [pc, #76]	@ (8017624 <pvPortMalloc+0x188>)
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	431a      	orrs	r2, r3
 80175dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80175e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175e2:	2200      	movs	r2, #0
 80175e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80175e6:	4b13      	ldr	r3, [pc, #76]	@ (8017634 <pvPortMalloc+0x198>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	3301      	adds	r3, #1
 80175ec:	4a11      	ldr	r2, [pc, #68]	@ (8017634 <pvPortMalloc+0x198>)
 80175ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80175f0:	f7fe f99e 	bl	8015930 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	f003 0307 	and.w	r3, r3, #7
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d00b      	beq.n	8017616 <pvPortMalloc+0x17a>
	__asm volatile
 80175fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017602:	f383 8811 	msr	BASEPRI, r3
 8017606:	f3bf 8f6f 	isb	sy
 801760a:	f3bf 8f4f 	dsb	sy
 801760e:	60fb      	str	r3, [r7, #12]
}
 8017610:	bf00      	nop
 8017612:	bf00      	nop
 8017614:	e7fd      	b.n	8017612 <pvPortMalloc+0x176>
	return pvReturn;
 8017616:	69fb      	ldr	r3, [r7, #28]
}
 8017618:	4618      	mov	r0, r3
 801761a:	3728      	adds	r7, #40	@ 0x28
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	20017d94 	.word	0x20017d94
 8017624:	20017da8 	.word	0x20017da8
 8017628:	20017d98 	.word	0x20017d98
 801762c:	20017d8c 	.word	0x20017d8c
 8017630:	20017d9c 	.word	0x20017d9c
 8017634:	20017da0 	.word	0x20017da0

08017638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b086      	sub	sp, #24
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d04f      	beq.n	80176ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801764a:	2308      	movs	r3, #8
 801764c:	425b      	negs	r3, r3
 801764e:	697a      	ldr	r2, [r7, #20]
 8017650:	4413      	add	r3, r2
 8017652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017658:	693b      	ldr	r3, [r7, #16]
 801765a:	685a      	ldr	r2, [r3, #4]
 801765c:	4b25      	ldr	r3, [pc, #148]	@ (80176f4 <vPortFree+0xbc>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	4013      	ands	r3, r2
 8017662:	2b00      	cmp	r3, #0
 8017664:	d10b      	bne.n	801767e <vPortFree+0x46>
	__asm volatile
 8017666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801766a:	f383 8811 	msr	BASEPRI, r3
 801766e:	f3bf 8f6f 	isb	sy
 8017672:	f3bf 8f4f 	dsb	sy
 8017676:	60fb      	str	r3, [r7, #12]
}
 8017678:	bf00      	nop
 801767a:	bf00      	nop
 801767c:	e7fd      	b.n	801767a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d00b      	beq.n	801769e <vPortFree+0x66>
	__asm volatile
 8017686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801768a:	f383 8811 	msr	BASEPRI, r3
 801768e:	f3bf 8f6f 	isb	sy
 8017692:	f3bf 8f4f 	dsb	sy
 8017696:	60bb      	str	r3, [r7, #8]
}
 8017698:	bf00      	nop
 801769a:	bf00      	nop
 801769c:	e7fd      	b.n	801769a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801769e:	693b      	ldr	r3, [r7, #16]
 80176a0:	685a      	ldr	r2, [r3, #4]
 80176a2:	4b14      	ldr	r3, [pc, #80]	@ (80176f4 <vPortFree+0xbc>)
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	4013      	ands	r3, r2
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d01e      	beq.n	80176ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80176ac:	693b      	ldr	r3, [r7, #16]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d11a      	bne.n	80176ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80176b4:	693b      	ldr	r3, [r7, #16]
 80176b6:	685a      	ldr	r2, [r3, #4]
 80176b8:	4b0e      	ldr	r3, [pc, #56]	@ (80176f4 <vPortFree+0xbc>)
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	43db      	mvns	r3, r3
 80176be:	401a      	ands	r2, r3
 80176c0:	693b      	ldr	r3, [r7, #16]
 80176c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80176c4:	f7fe f926 	bl	8015914 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80176c8:	693b      	ldr	r3, [r7, #16]
 80176ca:	685a      	ldr	r2, [r3, #4]
 80176cc:	4b0a      	ldr	r3, [pc, #40]	@ (80176f8 <vPortFree+0xc0>)
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	4413      	add	r3, r2
 80176d2:	4a09      	ldr	r2, [pc, #36]	@ (80176f8 <vPortFree+0xc0>)
 80176d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80176d6:	6938      	ldr	r0, [r7, #16]
 80176d8:	f000 f874 	bl	80177c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80176dc:	4b07      	ldr	r3, [pc, #28]	@ (80176fc <vPortFree+0xc4>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	3301      	adds	r3, #1
 80176e2:	4a06      	ldr	r2, [pc, #24]	@ (80176fc <vPortFree+0xc4>)
 80176e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80176e6:	f7fe f923 	bl	8015930 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80176ea:	bf00      	nop
 80176ec:	3718      	adds	r7, #24
 80176ee:	46bd      	mov	sp, r7
 80176f0:	bd80      	pop	{r7, pc}
 80176f2:	bf00      	nop
 80176f4:	20017da8 	.word	0x20017da8
 80176f8:	20017d98 	.word	0x20017d98
 80176fc:	20017da4 	.word	0x20017da4

08017700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017700:	b480      	push	{r7}
 8017702:	b085      	sub	sp, #20
 8017704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017706:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801770a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801770c:	4b27      	ldr	r3, [pc, #156]	@ (80177ac <prvHeapInit+0xac>)
 801770e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	f003 0307 	and.w	r3, r3, #7
 8017716:	2b00      	cmp	r3, #0
 8017718:	d00c      	beq.n	8017734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	3307      	adds	r3, #7
 801771e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	f023 0307 	bic.w	r3, r3, #7
 8017726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017728:	68ba      	ldr	r2, [r7, #8]
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	1ad3      	subs	r3, r2, r3
 801772e:	4a1f      	ldr	r2, [pc, #124]	@ (80177ac <prvHeapInit+0xac>)
 8017730:	4413      	add	r3, r2
 8017732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017738:	4a1d      	ldr	r2, [pc, #116]	@ (80177b0 <prvHeapInit+0xb0>)
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801773e:	4b1c      	ldr	r3, [pc, #112]	@ (80177b0 <prvHeapInit+0xb0>)
 8017740:	2200      	movs	r2, #0
 8017742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	68ba      	ldr	r2, [r7, #8]
 8017748:	4413      	add	r3, r2
 801774a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801774c:	2208      	movs	r2, #8
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	1a9b      	subs	r3, r3, r2
 8017752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	f023 0307 	bic.w	r3, r3, #7
 801775a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801775c:	68fb      	ldr	r3, [r7, #12]
 801775e:	4a15      	ldr	r2, [pc, #84]	@ (80177b4 <prvHeapInit+0xb4>)
 8017760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017762:	4b14      	ldr	r3, [pc, #80]	@ (80177b4 <prvHeapInit+0xb4>)
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	2200      	movs	r2, #0
 8017768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801776a:	4b12      	ldr	r3, [pc, #72]	@ (80177b4 <prvHeapInit+0xb4>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	2200      	movs	r2, #0
 8017770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017776:	683b      	ldr	r3, [r7, #0]
 8017778:	68fa      	ldr	r2, [r7, #12]
 801777a:	1ad2      	subs	r2, r2, r3
 801777c:	683b      	ldr	r3, [r7, #0]
 801777e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017780:	4b0c      	ldr	r3, [pc, #48]	@ (80177b4 <prvHeapInit+0xb4>)
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017788:	683b      	ldr	r3, [r7, #0]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	4a0a      	ldr	r2, [pc, #40]	@ (80177b8 <prvHeapInit+0xb8>)
 801778e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017790:	683b      	ldr	r3, [r7, #0]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	4a09      	ldr	r2, [pc, #36]	@ (80177bc <prvHeapInit+0xbc>)
 8017796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017798:	4b09      	ldr	r3, [pc, #36]	@ (80177c0 <prvHeapInit+0xc0>)
 801779a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801779e:	601a      	str	r2, [r3, #0]
}
 80177a0:	bf00      	nop
 80177a2:	3714      	adds	r7, #20
 80177a4:	46bd      	mov	sp, r7
 80177a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177aa:	4770      	bx	lr
 80177ac:	20007d8c 	.word	0x20007d8c
 80177b0:	20017d8c 	.word	0x20017d8c
 80177b4:	20017d94 	.word	0x20017d94
 80177b8:	20017d9c 	.word	0x20017d9c
 80177bc:	20017d98 	.word	0x20017d98
 80177c0:	20017da8 	.word	0x20017da8

080177c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80177c4:	b480      	push	{r7}
 80177c6:	b085      	sub	sp, #20
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80177cc:	4b28      	ldr	r3, [pc, #160]	@ (8017870 <prvInsertBlockIntoFreeList+0xac>)
 80177ce:	60fb      	str	r3, [r7, #12]
 80177d0:	e002      	b.n	80177d8 <prvInsertBlockIntoFreeList+0x14>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d8f7      	bhi.n	80177d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	685b      	ldr	r3, [r3, #4]
 80177ea:	68ba      	ldr	r2, [r7, #8]
 80177ec:	4413      	add	r3, r2
 80177ee:	687a      	ldr	r2, [r7, #4]
 80177f0:	429a      	cmp	r2, r3
 80177f2:	d108      	bne.n	8017806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80177f4:	68fb      	ldr	r3, [r7, #12]
 80177f6:	685a      	ldr	r2, [r3, #4]
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	685b      	ldr	r3, [r3, #4]
 80177fc:	441a      	add	r2, r3
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	685b      	ldr	r3, [r3, #4]
 801780e:	68ba      	ldr	r2, [r7, #8]
 8017810:	441a      	add	r2, r3
 8017812:	68fb      	ldr	r3, [r7, #12]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	429a      	cmp	r2, r3
 8017818:	d118      	bne.n	801784c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	681a      	ldr	r2, [r3, #0]
 801781e:	4b15      	ldr	r3, [pc, #84]	@ (8017874 <prvInsertBlockIntoFreeList+0xb0>)
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	429a      	cmp	r2, r3
 8017824:	d00d      	beq.n	8017842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	685a      	ldr	r2, [r3, #4]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	685b      	ldr	r3, [r3, #4]
 8017830:	441a      	add	r2, r3
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	681a      	ldr	r2, [r3, #0]
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	601a      	str	r2, [r3, #0]
 8017840:	e008      	b.n	8017854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017842:	4b0c      	ldr	r3, [pc, #48]	@ (8017874 <prvInsertBlockIntoFreeList+0xb0>)
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	601a      	str	r2, [r3, #0]
 801784a:	e003      	b.n	8017854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	681a      	ldr	r2, [r3, #0]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	429a      	cmp	r2, r3
 801785a:	d002      	beq.n	8017862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	687a      	ldr	r2, [r7, #4]
 8017860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017862:	bf00      	nop
 8017864:	3714      	adds	r7, #20
 8017866:	46bd      	mov	sp, r7
 8017868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801786c:	4770      	bx	lr
 801786e:	bf00      	nop
 8017870:	20017d8c 	.word	0x20017d8c
 8017874:	20017d94 	.word	0x20017d94

08017878 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801787c:	2200      	movs	r2, #0
 801787e:	4912      	ldr	r1, [pc, #72]	@ (80178c8 <MX_USB_Device_Init+0x50>)
 8017880:	4812      	ldr	r0, [pc, #72]	@ (80178cc <MX_USB_Device_Init+0x54>)
 8017882:	f7fb f867 	bl	8012954 <USBD_Init>
 8017886:	4603      	mov	r3, r0
 8017888:	2b00      	cmp	r3, #0
 801788a:	d001      	beq.n	8017890 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801788c:	f7f1 f864 	bl	8008958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8017890:	490f      	ldr	r1, [pc, #60]	@ (80178d0 <MX_USB_Device_Init+0x58>)
 8017892:	480e      	ldr	r0, [pc, #56]	@ (80178cc <MX_USB_Device_Init+0x54>)
 8017894:	f7fb f88e 	bl	80129b4 <USBD_RegisterClass>
 8017898:	4603      	mov	r3, r0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d001      	beq.n	80178a2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801789e:	f7f1 f85b 	bl	8008958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80178a2:	490c      	ldr	r1, [pc, #48]	@ (80178d4 <MX_USB_Device_Init+0x5c>)
 80178a4:	4809      	ldr	r0, [pc, #36]	@ (80178cc <MX_USB_Device_Init+0x54>)
 80178a6:	f7fa ffaf 	bl	8012808 <USBD_CDC_RegisterInterface>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d001      	beq.n	80178b4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80178b0:	f7f1 f852 	bl	8008958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80178b4:	4805      	ldr	r0, [pc, #20]	@ (80178cc <MX_USB_Device_Init+0x54>)
 80178b6:	f7fb f8a4 	bl	8012a02 <USBD_Start>
 80178ba:	4603      	mov	r3, r0
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d001      	beq.n	80178c4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80178c0:	f7f1 f84a 	bl	8008958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80178c4:	bf00      	nop
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	20000140 	.word	0x20000140
 80178cc:	20017dac 	.word	0x20017dac
 80178d0:	20000024 	.word	0x20000024
 80178d4:	2000012c 	.word	0x2000012c

080178d8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80178dc:	2200      	movs	r2, #0
 80178de:	4905      	ldr	r1, [pc, #20]	@ (80178f4 <CDC_Init_FS+0x1c>)
 80178e0:	4805      	ldr	r0, [pc, #20]	@ (80178f8 <CDC_Init_FS+0x20>)
 80178e2:	f7fa ffa6 	bl	8012832 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80178e6:	4905      	ldr	r1, [pc, #20]	@ (80178fc <CDC_Init_FS+0x24>)
 80178e8:	4803      	ldr	r0, [pc, #12]	@ (80178f8 <CDC_Init_FS+0x20>)
 80178ea:	f7fa ffc0 	bl	801286e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80178ee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	bd80      	pop	{r7, pc}
 80178f4:	2001887c 	.word	0x2001887c
 80178f8:	20017dac 	.word	0x20017dac
 80178fc:	2001807c 	.word	0x2001807c

08017900 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017900:	b480      	push	{r7}
 8017902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017904:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017906:	4618      	mov	r0, r3
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017910:	b480      	push	{r7}
 8017912:	b083      	sub	sp, #12
 8017914:	af00      	add	r7, sp, #0
 8017916:	4603      	mov	r3, r0
 8017918:	6039      	str	r1, [r7, #0]
 801791a:	71fb      	strb	r3, [r7, #7]
 801791c:	4613      	mov	r3, r2
 801791e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017920:	79fb      	ldrb	r3, [r7, #7]
 8017922:	2b23      	cmp	r3, #35	@ 0x23
 8017924:	d84a      	bhi.n	80179bc <CDC_Control_FS+0xac>
 8017926:	a201      	add	r2, pc, #4	@ (adr r2, 801792c <CDC_Control_FS+0x1c>)
 8017928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801792c:	080179bd 	.word	0x080179bd
 8017930:	080179bd 	.word	0x080179bd
 8017934:	080179bd 	.word	0x080179bd
 8017938:	080179bd 	.word	0x080179bd
 801793c:	080179bd 	.word	0x080179bd
 8017940:	080179bd 	.word	0x080179bd
 8017944:	080179bd 	.word	0x080179bd
 8017948:	080179bd 	.word	0x080179bd
 801794c:	080179bd 	.word	0x080179bd
 8017950:	080179bd 	.word	0x080179bd
 8017954:	080179bd 	.word	0x080179bd
 8017958:	080179bd 	.word	0x080179bd
 801795c:	080179bd 	.word	0x080179bd
 8017960:	080179bd 	.word	0x080179bd
 8017964:	080179bd 	.word	0x080179bd
 8017968:	080179bd 	.word	0x080179bd
 801796c:	080179bd 	.word	0x080179bd
 8017970:	080179bd 	.word	0x080179bd
 8017974:	080179bd 	.word	0x080179bd
 8017978:	080179bd 	.word	0x080179bd
 801797c:	080179bd 	.word	0x080179bd
 8017980:	080179bd 	.word	0x080179bd
 8017984:	080179bd 	.word	0x080179bd
 8017988:	080179bd 	.word	0x080179bd
 801798c:	080179bd 	.word	0x080179bd
 8017990:	080179bd 	.word	0x080179bd
 8017994:	080179bd 	.word	0x080179bd
 8017998:	080179bd 	.word	0x080179bd
 801799c:	080179bd 	.word	0x080179bd
 80179a0:	080179bd 	.word	0x080179bd
 80179a4:	080179bd 	.word	0x080179bd
 80179a8:	080179bd 	.word	0x080179bd
 80179ac:	080179bd 	.word	0x080179bd
 80179b0:	080179bd 	.word	0x080179bd
 80179b4:	080179bd 	.word	0x080179bd
 80179b8:	080179bd 	.word	0x080179bd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80179bc:	bf00      	nop
  }

  return (USBD_OK);
 80179be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80179c0:	4618      	mov	r0, r3
 80179c2:	370c      	adds	r7, #12
 80179c4:	46bd      	mov	sp, r7
 80179c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ca:	4770      	bx	lr

080179cc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80179d6:	6879      	ldr	r1, [r7, #4]
 80179d8:	4805      	ldr	r0, [pc, #20]	@ (80179f0 <CDC_Receive_FS+0x24>)
 80179da:	f7fa ff48 	bl	801286e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80179de:	4804      	ldr	r0, [pc, #16]	@ (80179f0 <CDC_Receive_FS+0x24>)
 80179e0:	f7fa ff8e 	bl	8012900 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80179e4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3708      	adds	r7, #8
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	20017dac 	.word	0x20017dac

080179f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80179f4:	b580      	push	{r7, lr}
 80179f6:	b084      	sub	sp, #16
 80179f8:	af00      	add	r7, sp, #0
 80179fa:	6078      	str	r0, [r7, #4]
 80179fc:	460b      	mov	r3, r1
 80179fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017a00:	2300      	movs	r3, #0
 8017a02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017a04:	4b0d      	ldr	r3, [pc, #52]	@ (8017a3c <CDC_Transmit_FS+0x48>)
 8017a06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017a0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017a12:	2b00      	cmp	r3, #0
 8017a14:	d001      	beq.n	8017a1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017a16:	2301      	movs	r3, #1
 8017a18:	e00b      	b.n	8017a32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017a1a:	887b      	ldrh	r3, [r7, #2]
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	6879      	ldr	r1, [r7, #4]
 8017a20:	4806      	ldr	r0, [pc, #24]	@ (8017a3c <CDC_Transmit_FS+0x48>)
 8017a22:	f7fa ff06 	bl	8012832 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017a26:	4805      	ldr	r0, [pc, #20]	@ (8017a3c <CDC_Transmit_FS+0x48>)
 8017a28:	f7fa ff3a 	bl	80128a0 <USBD_CDC_TransmitPacket>
 8017a2c:	4603      	mov	r3, r0
 8017a2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3710      	adds	r7, #16
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	20017dac 	.word	0x20017dac

08017a40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017a40:	b480      	push	{r7}
 8017a42:	b087      	sub	sp, #28
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	4613      	mov	r3, r2
 8017a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017a52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	371c      	adds	r7, #28
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a60:	4770      	bx	lr
	...

08017a64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a64:	b480      	push	{r7}
 8017a66:	b083      	sub	sp, #12
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	6039      	str	r1, [r7, #0]
 8017a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	2212      	movs	r2, #18
 8017a74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8017a76:	4b03      	ldr	r3, [pc, #12]	@ (8017a84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	370c      	adds	r7, #12
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a82:	4770      	bx	lr
 8017a84:	20000160 	.word	0x20000160

08017a88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017a88:	b480      	push	{r7}
 8017a8a:	b083      	sub	sp, #12
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	4603      	mov	r3, r0
 8017a90:	6039      	str	r1, [r7, #0]
 8017a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	2204      	movs	r2, #4
 8017a98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017a9a:	4b03      	ldr	r3, [pc, #12]	@ (8017aa8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	370c      	adds	r7, #12
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa6:	4770      	bx	lr
 8017aa8:	20000174 	.word	0x20000174

08017aac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b082      	sub	sp, #8
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	6039      	str	r1, [r7, #0]
 8017ab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ab8:	79fb      	ldrb	r3, [r7, #7]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d105      	bne.n	8017aca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017abe:	683a      	ldr	r2, [r7, #0]
 8017ac0:	4907      	ldr	r1, [pc, #28]	@ (8017ae0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017ac2:	4808      	ldr	r0, [pc, #32]	@ (8017ae4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017ac4:	f7fb ff85 	bl	80139d2 <USBD_GetString>
 8017ac8:	e004      	b.n	8017ad4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8017aca:	683a      	ldr	r2, [r7, #0]
 8017acc:	4904      	ldr	r1, [pc, #16]	@ (8017ae0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8017ace:	4805      	ldr	r0, [pc, #20]	@ (8017ae4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8017ad0:	f7fb ff7f 	bl	80139d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017ad4:	4b02      	ldr	r3, [pc, #8]	@ (8017ae0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	3708      	adds	r7, #8
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bd80      	pop	{r7, pc}
 8017ade:	bf00      	nop
 8017ae0:	2001907c 	.word	0x2001907c
 8017ae4:	08027858 	.word	0x08027858

08017ae8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b082      	sub	sp, #8
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	4603      	mov	r3, r0
 8017af0:	6039      	str	r1, [r7, #0]
 8017af2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017af4:	683a      	ldr	r2, [r7, #0]
 8017af6:	4904      	ldr	r1, [pc, #16]	@ (8017b08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8017af8:	4804      	ldr	r0, [pc, #16]	@ (8017b0c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8017afa:	f7fb ff6a 	bl	80139d2 <USBD_GetString>
  return USBD_StrDesc;
 8017afe:	4b02      	ldr	r3, [pc, #8]	@ (8017b08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	3708      	adds	r7, #8
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}
 8017b08:	2001907c 	.word	0x2001907c
 8017b0c:	08027874 	.word	0x08027874

08017b10 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b082      	sub	sp, #8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	4603      	mov	r3, r0
 8017b18:	6039      	str	r1, [r7, #0]
 8017b1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	221a      	movs	r2, #26
 8017b20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017b22:	f000 f843 	bl	8017bac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8017b26:	4b02      	ldr	r3, [pc, #8]	@ (8017b30 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	20000178 	.word	0x20000178

08017b34 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b082      	sub	sp, #8
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	6039      	str	r1, [r7, #0]
 8017b3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017b40:	79fb      	ldrb	r3, [r7, #7]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d105      	bne.n	8017b52 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017b46:	683a      	ldr	r2, [r7, #0]
 8017b48:	4907      	ldr	r1, [pc, #28]	@ (8017b68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017b4a:	4808      	ldr	r0, [pc, #32]	@ (8017b6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017b4c:	f7fb ff41 	bl	80139d2 <USBD_GetString>
 8017b50:	e004      	b.n	8017b5c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8017b52:	683a      	ldr	r2, [r7, #0]
 8017b54:	4904      	ldr	r1, [pc, #16]	@ (8017b68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8017b56:	4805      	ldr	r0, [pc, #20]	@ (8017b6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8017b58:	f7fb ff3b 	bl	80139d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b5c:	4b02      	ldr	r3, [pc, #8]	@ (8017b68 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3708      	adds	r7, #8
 8017b62:	46bd      	mov	sp, r7
 8017b64:	bd80      	pop	{r7, pc}
 8017b66:	bf00      	nop
 8017b68:	2001907c 	.word	0x2001907c
 8017b6c:	08027888 	.word	0x08027888

08017b70 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	b082      	sub	sp, #8
 8017b74:	af00      	add	r7, sp, #0
 8017b76:	4603      	mov	r3, r0
 8017b78:	6039      	str	r1, [r7, #0]
 8017b7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017b7c:	79fb      	ldrb	r3, [r7, #7]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d105      	bne.n	8017b8e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017b82:	683a      	ldr	r2, [r7, #0]
 8017b84:	4907      	ldr	r1, [pc, #28]	@ (8017ba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8017b86:	4808      	ldr	r0, [pc, #32]	@ (8017ba8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017b88:	f7fb ff23 	bl	80139d2 <USBD_GetString>
 8017b8c:	e004      	b.n	8017b98 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8017b8e:	683a      	ldr	r2, [r7, #0]
 8017b90:	4904      	ldr	r1, [pc, #16]	@ (8017ba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8017b92:	4805      	ldr	r0, [pc, #20]	@ (8017ba8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8017b94:	f7fb ff1d 	bl	80139d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017b98:	4b02      	ldr	r3, [pc, #8]	@ (8017ba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3708      	adds	r7, #8
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	2001907c 	.word	0x2001907c
 8017ba8:	08027894 	.word	0x08027894

08017bac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b084      	sub	sp, #16
 8017bb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8017bf0 <Get_SerialNum+0x44>)
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8017bf4 <Get_SerialNum+0x48>)
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8017bf8 <Get_SerialNum+0x4c>)
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017bc4:	68fa      	ldr	r2, [r7, #12]
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	4413      	add	r3, r2
 8017bca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d009      	beq.n	8017be6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017bd2:	2208      	movs	r2, #8
 8017bd4:	4909      	ldr	r1, [pc, #36]	@ (8017bfc <Get_SerialNum+0x50>)
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f000 f814 	bl	8017c04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017bdc:	2204      	movs	r2, #4
 8017bde:	4908      	ldr	r1, [pc, #32]	@ (8017c00 <Get_SerialNum+0x54>)
 8017be0:	68b8      	ldr	r0, [r7, #8]
 8017be2:	f000 f80f 	bl	8017c04 <IntToUnicode>
  }
}
 8017be6:	bf00      	nop
 8017be8:	3710      	adds	r7, #16
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	1fff7590 	.word	0x1fff7590
 8017bf4:	1fff7594 	.word	0x1fff7594
 8017bf8:	1fff7598 	.word	0x1fff7598
 8017bfc:	2000017a 	.word	0x2000017a
 8017c00:	2000018a 	.word	0x2000018a

08017c04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017c04:	b480      	push	{r7}
 8017c06:	b087      	sub	sp, #28
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	4613      	mov	r3, r2
 8017c10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017c12:	2300      	movs	r3, #0
 8017c14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017c16:	2300      	movs	r3, #0
 8017c18:	75fb      	strb	r3, [r7, #23]
 8017c1a:	e027      	b.n	8017c6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017c1c:	68fb      	ldr	r3, [r7, #12]
 8017c1e:	0f1b      	lsrs	r3, r3, #28
 8017c20:	2b09      	cmp	r3, #9
 8017c22:	d80b      	bhi.n	8017c3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	0f1b      	lsrs	r3, r3, #28
 8017c28:	b2da      	uxtb	r2, r3
 8017c2a:	7dfb      	ldrb	r3, [r7, #23]
 8017c2c:	005b      	lsls	r3, r3, #1
 8017c2e:	4619      	mov	r1, r3
 8017c30:	68bb      	ldr	r3, [r7, #8]
 8017c32:	440b      	add	r3, r1
 8017c34:	3230      	adds	r2, #48	@ 0x30
 8017c36:	b2d2      	uxtb	r2, r2
 8017c38:	701a      	strb	r2, [r3, #0]
 8017c3a:	e00a      	b.n	8017c52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	0f1b      	lsrs	r3, r3, #28
 8017c40:	b2da      	uxtb	r2, r3
 8017c42:	7dfb      	ldrb	r3, [r7, #23]
 8017c44:	005b      	lsls	r3, r3, #1
 8017c46:	4619      	mov	r1, r3
 8017c48:	68bb      	ldr	r3, [r7, #8]
 8017c4a:	440b      	add	r3, r1
 8017c4c:	3237      	adds	r2, #55	@ 0x37
 8017c4e:	b2d2      	uxtb	r2, r2
 8017c50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017c52:	68fb      	ldr	r3, [r7, #12]
 8017c54:	011b      	lsls	r3, r3, #4
 8017c56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017c58:	7dfb      	ldrb	r3, [r7, #23]
 8017c5a:	005b      	lsls	r3, r3, #1
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	68ba      	ldr	r2, [r7, #8]
 8017c60:	4413      	add	r3, r2
 8017c62:	2200      	movs	r2, #0
 8017c64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017c66:	7dfb      	ldrb	r3, [r7, #23]
 8017c68:	3301      	adds	r3, #1
 8017c6a:	75fb      	strb	r3, [r7, #23]
 8017c6c:	7dfa      	ldrb	r2, [r7, #23]
 8017c6e:	79fb      	ldrb	r3, [r7, #7]
 8017c70:	429a      	cmp	r2, r3
 8017c72:	d3d3      	bcc.n	8017c1c <IntToUnicode+0x18>
  }
}
 8017c74:	bf00      	nop
 8017c76:	bf00      	nop
 8017c78:	371c      	adds	r7, #28
 8017c7a:	46bd      	mov	sp, r7
 8017c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c80:	4770      	bx	lr
	...

08017c84 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	b098      	sub	sp, #96	@ 0x60
 8017c88:	af00      	add	r7, sp, #0
 8017c8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017c8c:	f107 030c 	add.w	r3, r7, #12
 8017c90:	2254      	movs	r2, #84	@ 0x54
 8017c92:	2100      	movs	r1, #0
 8017c94:	4618      	mov	r0, r3
 8017c96:	f00d f8a0 	bl	8024dda <memset>
  if(pcdHandle->Instance==USB)
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4a15      	ldr	r2, [pc, #84]	@ (8017cf4 <HAL_PCD_MspInit+0x70>)
 8017ca0:	4293      	cmp	r3, r2
 8017ca2:	d122      	bne.n	8017cea <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8017ca4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8017ca8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8017caa:	2300      	movs	r3, #0
 8017cac:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8017cae:	f107 030c 	add.w	r3, r7, #12
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7f5 fc1c 	bl	800d4f0 <HAL_RCCEx_PeriphCLKConfig>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d001      	beq.n	8017cc2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8017cbe:	f7f0 fe4b 	bl	8008958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8017cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8017cf8 <HAL_PCD_MspInit+0x74>)
 8017cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8017cf8 <HAL_PCD_MspInit+0x74>)
 8017cc8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8017ccc:	6593      	str	r3, [r2, #88]	@ 0x58
 8017cce:	4b0a      	ldr	r3, [pc, #40]	@ (8017cf8 <HAL_PCD_MspInit+0x74>)
 8017cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017cd6:	60bb      	str	r3, [r7, #8]
 8017cd8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8017cda:	2200      	movs	r2, #0
 8017cdc:	2105      	movs	r1, #5
 8017cde:	2014      	movs	r0, #20
 8017ce0:	f7f1 fb0e 	bl	8009300 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8017ce4:	2014      	movs	r0, #20
 8017ce6:	f7f1 fb25 	bl	8009334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8017cea:	bf00      	nop
 8017cec:	3760      	adds	r7, #96	@ 0x60
 8017cee:	46bd      	mov	sp, r7
 8017cf0:	bd80      	pop	{r7, pc}
 8017cf2:	bf00      	nop
 8017cf4:	40005c00 	.word	0x40005c00
 8017cf8:	40021000 	.word	0x40021000

08017cfc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8017d10:	4619      	mov	r1, r3
 8017d12:	4610      	mov	r0, r2
 8017d14:	f7fa fec0 	bl	8012a98 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8017d18:	bf00      	nop
 8017d1a:	3708      	adds	r7, #8
 8017d1c:	46bd      	mov	sp, r7
 8017d1e:	bd80      	pop	{r7, pc}

08017d20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	460b      	mov	r3, r1
 8017d2a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8017d32:	78fa      	ldrb	r2, [r7, #3]
 8017d34:	6879      	ldr	r1, [r7, #4]
 8017d36:	4613      	mov	r3, r2
 8017d38:	009b      	lsls	r3, r3, #2
 8017d3a:	4413      	add	r3, r2
 8017d3c:	00db      	lsls	r3, r3, #3
 8017d3e:	440b      	add	r3, r1
 8017d40:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8017d44:	681a      	ldr	r2, [r3, #0]
 8017d46:	78fb      	ldrb	r3, [r7, #3]
 8017d48:	4619      	mov	r1, r3
 8017d4a:	f7fa fefa 	bl	8012b42 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8017d4e:	bf00      	nop
 8017d50:	3708      	adds	r7, #8
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}

08017d56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d56:	b580      	push	{r7, lr}
 8017d58:	b082      	sub	sp, #8
 8017d5a:	af00      	add	r7, sp, #0
 8017d5c:	6078      	str	r0, [r7, #4]
 8017d5e:	460b      	mov	r3, r1
 8017d60:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8017d68:	78fa      	ldrb	r2, [r7, #3]
 8017d6a:	6879      	ldr	r1, [r7, #4]
 8017d6c:	4613      	mov	r3, r2
 8017d6e:	009b      	lsls	r3, r3, #2
 8017d70:	4413      	add	r3, r2
 8017d72:	00db      	lsls	r3, r3, #3
 8017d74:	440b      	add	r3, r1
 8017d76:	3324      	adds	r3, #36	@ 0x24
 8017d78:	681a      	ldr	r2, [r3, #0]
 8017d7a:	78fb      	ldrb	r3, [r7, #3]
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	f7fa ff43 	bl	8012c08 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8017d82:	bf00      	nop
 8017d84:	3708      	adds	r7, #8
 8017d86:	46bd      	mov	sp, r7
 8017d88:	bd80      	pop	{r7, pc}

08017d8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017d8a:	b580      	push	{r7, lr}
 8017d8c:	b082      	sub	sp, #8
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017d98:	4618      	mov	r0, r3
 8017d9a:	f7fb f857 	bl	8012e4c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8017d9e:	bf00      	nop
 8017da0:	3708      	adds	r7, #8
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}

08017da6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017da6:	b580      	push	{r7, lr}
 8017da8:	b084      	sub	sp, #16
 8017daa:	af00      	add	r7, sp, #0
 8017dac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017dae:	2301      	movs	r3, #1
 8017db0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	795b      	ldrb	r3, [r3, #5]
 8017db6:	2b02      	cmp	r3, #2
 8017db8:	d001      	beq.n	8017dbe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8017dba:	f7f0 fdcd 	bl	8008958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017dc4:	7bfa      	ldrb	r2, [r7, #15]
 8017dc6:	4611      	mov	r1, r2
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7fb f801 	bl	8012dd0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7fa ffad 	bl	8012d34 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8017dda:	bf00      	nop
 8017ddc:	3710      	adds	r7, #16
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
	...

08017de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017df2:	4618      	mov	r0, r3
 8017df4:	f7fa fffc 	bl	8012df0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	7a5b      	ldrb	r3, [r3, #9]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d005      	beq.n	8017e0c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017e00:	4b04      	ldr	r3, [pc, #16]	@ (8017e14 <HAL_PCD_SuspendCallback+0x30>)
 8017e02:	691b      	ldr	r3, [r3, #16]
 8017e04:	4a03      	ldr	r2, [pc, #12]	@ (8017e14 <HAL_PCD_SuspendCallback+0x30>)
 8017e06:	f043 0306 	orr.w	r3, r3, #6
 8017e0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}
 8017e14:	e000ed00 	.word	0xe000ed00

08017e18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b082      	sub	sp, #8
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	7a5b      	ldrb	r3, [r3, #9]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d007      	beq.n	8017e38 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017e28:	4b08      	ldr	r3, [pc, #32]	@ (8017e4c <HAL_PCD_ResumeCallback+0x34>)
 8017e2a:	691b      	ldr	r3, [r3, #16]
 8017e2c:	4a07      	ldr	r2, [pc, #28]	@ (8017e4c <HAL_PCD_ResumeCallback+0x34>)
 8017e2e:	f023 0306 	bic.w	r3, r3, #6
 8017e32:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8017e34:	f000 f9f8 	bl	8018228 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fa ffec 	bl	8012e1c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8017e44:	bf00      	nop
 8017e46:	3708      	adds	r7, #8
 8017e48:	46bd      	mov	sp, r7
 8017e4a:	bd80      	pop	{r7, pc}
 8017e4c:	e000ed00 	.word	0xe000ed00

08017e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017e50:	b580      	push	{r7, lr}
 8017e52:	b082      	sub	sp, #8
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8017e58:	4a2b      	ldr	r2, [pc, #172]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	4a29      	ldr	r2, [pc, #164]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8017e68:	4b27      	ldr	r3, [pc, #156]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e6a:	4a28      	ldr	r2, [pc, #160]	@ (8017f0c <USBD_LL_Init+0xbc>)
 8017e6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017e6e:	4b26      	ldr	r3, [pc, #152]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e70:	2208      	movs	r2, #8
 8017e72:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017e74:	4b24      	ldr	r3, [pc, #144]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e76:	2202      	movs	r2, #2
 8017e78:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017e7a:	4b23      	ldr	r3, [pc, #140]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e7c:	2202      	movs	r2, #2
 8017e7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017e80:	4b21      	ldr	r3, [pc, #132]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e82:	2200      	movs	r2, #0
 8017e84:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017e86:	4b20      	ldr	r3, [pc, #128]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e88:	2200      	movs	r2, #0
 8017e8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e8e:	2200      	movs	r2, #0
 8017e90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017e92:	4b1d      	ldr	r3, [pc, #116]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e94:	2200      	movs	r2, #0
 8017e96:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017e98:	481b      	ldr	r0, [pc, #108]	@ (8017f08 <USBD_LL_Init+0xb8>)
 8017e9a:	f7f3 f818 	bl	800aece <HAL_PCD_Init>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	d001      	beq.n	8017ea8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8017ea4:	f7f0 fd58 	bl	8008958 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017eae:	2318      	movs	r3, #24
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	2100      	movs	r1, #0
 8017eb4:	f7f4 fc9f 	bl	800c7f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017ebe:	2358      	movs	r3, #88	@ 0x58
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	2180      	movs	r1, #128	@ 0x80
 8017ec4:	f7f4 fc97 	bl	800c7f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017ece:	23c0      	movs	r3, #192	@ 0xc0
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	2181      	movs	r1, #129	@ 0x81
 8017ed4:	f7f4 fc8f 	bl	800c7f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017ede:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	2101      	movs	r1, #1
 8017ee6:	f7f4 fc86 	bl	800c7f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017ef0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	2182      	movs	r1, #130	@ 0x82
 8017ef8:	f7f4 fc7d 	bl	800c7f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017efc:	2300      	movs	r3, #0
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	3708      	adds	r7, #8
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd80      	pop	{r7, pc}
 8017f06:	bf00      	nop
 8017f08:	2001927c 	.word	0x2001927c
 8017f0c:	40005c00 	.word	0x40005c00

08017f10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b084      	sub	sp, #16
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7f3 f89f 	bl	800b06a <HAL_PCD_Start>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f30:	7bfb      	ldrb	r3, [r7, #15]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f000 f97e 	bl	8018234 <USBD_Get_USB_Status>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f3e:	4618      	mov	r0, r3
 8017f40:	3710      	adds	r7, #16
 8017f42:	46bd      	mov	sp, r7
 8017f44:	bd80      	pop	{r7, pc}

08017f46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017f46:	b580      	push	{r7, lr}
 8017f48:	b084      	sub	sp, #16
 8017f4a:	af00      	add	r7, sp, #0
 8017f4c:	6078      	str	r0, [r7, #4]
 8017f4e:	4608      	mov	r0, r1
 8017f50:	4611      	mov	r1, r2
 8017f52:	461a      	mov	r2, r3
 8017f54:	4603      	mov	r3, r0
 8017f56:	70fb      	strb	r3, [r7, #3]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	70bb      	strb	r3, [r7, #2]
 8017f5c:	4613      	mov	r3, r2
 8017f5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f60:	2300      	movs	r3, #0
 8017f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f64:	2300      	movs	r3, #0
 8017f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8017f6e:	78bb      	ldrb	r3, [r7, #2]
 8017f70:	883a      	ldrh	r2, [r7, #0]
 8017f72:	78f9      	ldrb	r1, [r7, #3]
 8017f74:	f7f3 f9e6 	bl	800b344 <HAL_PCD_EP_Open>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f7c:	7bfb      	ldrb	r3, [r7, #15]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f000 f958 	bl	8018234 <USBD_Get_USB_Status>
 8017f84:	4603      	mov	r3, r0
 8017f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3710      	adds	r7, #16
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}

08017f92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f92:	b580      	push	{r7, lr}
 8017f94:	b084      	sub	sp, #16
 8017f96:	af00      	add	r7, sp, #0
 8017f98:	6078      	str	r0, [r7, #4]
 8017f9a:	460b      	mov	r3, r1
 8017f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017fac:	78fa      	ldrb	r2, [r7, #3]
 8017fae:	4611      	mov	r1, r2
 8017fb0:	4618      	mov	r0, r3
 8017fb2:	f7f3 fa26 	bl	800b402 <HAL_PCD_EP_Close>
 8017fb6:	4603      	mov	r3, r0
 8017fb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fba:	7bfb      	ldrb	r3, [r7, #15]
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f000 f939 	bl	8018234 <USBD_Get_USB_Status>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017fc6:	7bbb      	ldrb	r3, [r7, #14]
}
 8017fc8:	4618      	mov	r0, r3
 8017fca:	3710      	adds	r7, #16
 8017fcc:	46bd      	mov	sp, r7
 8017fce:	bd80      	pop	{r7, pc}

08017fd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b084      	sub	sp, #16
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	6078      	str	r0, [r7, #4]
 8017fd8:	460b      	mov	r3, r1
 8017fda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8017fea:	78fa      	ldrb	r2, [r7, #3]
 8017fec:	4611      	mov	r1, r2
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7f3 facf 	bl	800b592 <HAL_PCD_EP_SetStall>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ff8:	7bfb      	ldrb	r3, [r7, #15]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f000 f91a 	bl	8018234 <USBD_Get_USB_Status>
 8018000:	4603      	mov	r3, r0
 8018002:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018004:	7bbb      	ldrb	r3, [r7, #14]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3710      	adds	r7, #16
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}

0801800e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801800e:	b580      	push	{r7, lr}
 8018010:	b084      	sub	sp, #16
 8018012:	af00      	add	r7, sp, #0
 8018014:	6078      	str	r0, [r7, #4]
 8018016:	460b      	mov	r3, r1
 8018018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801801a:	2300      	movs	r3, #0
 801801c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801801e:	2300      	movs	r3, #0
 8018020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018028:	78fa      	ldrb	r2, [r7, #3]
 801802a:	4611      	mov	r1, r2
 801802c:	4618      	mov	r0, r3
 801802e:	f7f3 fb02 	bl	800b636 <HAL_PCD_EP_ClrStall>
 8018032:	4603      	mov	r3, r0
 8018034:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018036:	7bfb      	ldrb	r3, [r7, #15]
 8018038:	4618      	mov	r0, r3
 801803a:	f000 f8fb 	bl	8018234 <USBD_Get_USB_Status>
 801803e:	4603      	mov	r3, r0
 8018040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018042:	7bbb      	ldrb	r3, [r7, #14]
}
 8018044:	4618      	mov	r0, r3
 8018046:	3710      	adds	r7, #16
 8018048:	46bd      	mov	sp, r7
 801804a:	bd80      	pop	{r7, pc}

0801804c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801804c:	b480      	push	{r7}
 801804e:	b085      	sub	sp, #20
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
 8018054:	460b      	mov	r3, r1
 8018056:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801805e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018064:	2b00      	cmp	r3, #0
 8018066:	da0b      	bge.n	8018080 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018068:	78fb      	ldrb	r3, [r7, #3]
 801806a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801806e:	68f9      	ldr	r1, [r7, #12]
 8018070:	4613      	mov	r3, r2
 8018072:	009b      	lsls	r3, r3, #2
 8018074:	4413      	add	r3, r2
 8018076:	00db      	lsls	r3, r3, #3
 8018078:	440b      	add	r3, r1
 801807a:	3312      	adds	r3, #18
 801807c:	781b      	ldrb	r3, [r3, #0]
 801807e:	e00b      	b.n	8018098 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018080:	78fb      	ldrb	r3, [r7, #3]
 8018082:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018086:	68f9      	ldr	r1, [r7, #12]
 8018088:	4613      	mov	r3, r2
 801808a:	009b      	lsls	r3, r3, #2
 801808c:	4413      	add	r3, r2
 801808e:	00db      	lsls	r3, r3, #3
 8018090:	440b      	add	r3, r1
 8018092:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018096:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018098:	4618      	mov	r0, r3
 801809a:	3714      	adds	r7, #20
 801809c:	46bd      	mov	sp, r7
 801809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180a2:	4770      	bx	lr

080180a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80180a4:	b580      	push	{r7, lr}
 80180a6:	b084      	sub	sp, #16
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	6078      	str	r0, [r7, #4]
 80180ac:	460b      	mov	r3, r1
 80180ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180b0:	2300      	movs	r3, #0
 80180b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180b4:	2300      	movs	r3, #0
 80180b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80180be:	78fa      	ldrb	r2, [r7, #3]
 80180c0:	4611      	mov	r1, r2
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7f3 f91a 	bl	800b2fc <HAL_PCD_SetAddress>
 80180c8:	4603      	mov	r3, r0
 80180ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80180cc:	7bfb      	ldrb	r3, [r7, #15]
 80180ce:	4618      	mov	r0, r3
 80180d0:	f000 f8b0 	bl	8018234 <USBD_Get_USB_Status>
 80180d4:	4603      	mov	r3, r0
 80180d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80180d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80180da:	4618      	mov	r0, r3
 80180dc:	3710      	adds	r7, #16
 80180de:	46bd      	mov	sp, r7
 80180e0:	bd80      	pop	{r7, pc}

080180e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80180e2:	b580      	push	{r7, lr}
 80180e4:	b086      	sub	sp, #24
 80180e6:	af00      	add	r7, sp, #0
 80180e8:	60f8      	str	r0, [r7, #12]
 80180ea:	607a      	str	r2, [r7, #4]
 80180ec:	603b      	str	r3, [r7, #0]
 80180ee:	460b      	mov	r3, r1
 80180f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80180f2:	2300      	movs	r3, #0
 80180f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80180f6:	2300      	movs	r3, #0
 80180f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018100:	7af9      	ldrb	r1, [r7, #11]
 8018102:	683b      	ldr	r3, [r7, #0]
 8018104:	687a      	ldr	r2, [r7, #4]
 8018106:	f7f3 fa0d 	bl	800b524 <HAL_PCD_EP_Transmit>
 801810a:	4603      	mov	r3, r0
 801810c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801810e:	7dfb      	ldrb	r3, [r7, #23]
 8018110:	4618      	mov	r0, r3
 8018112:	f000 f88f 	bl	8018234 <USBD_Get_USB_Status>
 8018116:	4603      	mov	r3, r0
 8018118:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801811a:	7dbb      	ldrb	r3, [r7, #22]
}
 801811c:	4618      	mov	r0, r3
 801811e:	3718      	adds	r7, #24
 8018120:	46bd      	mov	sp, r7
 8018122:	bd80      	pop	{r7, pc}

08018124 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b086      	sub	sp, #24
 8018128:	af00      	add	r7, sp, #0
 801812a:	60f8      	str	r0, [r7, #12]
 801812c:	607a      	str	r2, [r7, #4]
 801812e:	603b      	str	r3, [r7, #0]
 8018130:	460b      	mov	r3, r1
 8018132:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018134:	2300      	movs	r3, #0
 8018136:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018138:	2300      	movs	r3, #0
 801813a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8018142:	7af9      	ldrb	r1, [r7, #11]
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	687a      	ldr	r2, [r7, #4]
 8018148:	f7f3 f9a3 	bl	800b492 <HAL_PCD_EP_Receive>
 801814c:	4603      	mov	r3, r0
 801814e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018150:	7dfb      	ldrb	r3, [r7, #23]
 8018152:	4618      	mov	r0, r3
 8018154:	f000 f86e 	bl	8018234 <USBD_Get_USB_Status>
 8018158:	4603      	mov	r3, r0
 801815a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801815c:	7dbb      	ldrb	r3, [r7, #22]
}
 801815e:	4618      	mov	r0, r3
 8018160:	3718      	adds	r7, #24
 8018162:	46bd      	mov	sp, r7
 8018164:	bd80      	pop	{r7, pc}

08018166 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018166:	b580      	push	{r7, lr}
 8018168:	b082      	sub	sp, #8
 801816a:	af00      	add	r7, sp, #0
 801816c:	6078      	str	r0, [r7, #4]
 801816e:	460b      	mov	r3, r1
 8018170:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8018178:	78fa      	ldrb	r2, [r7, #3]
 801817a:	4611      	mov	r1, r2
 801817c:	4618      	mov	r0, r3
 801817e:	f7f3 f9b9 	bl	800b4f4 <HAL_PCD_EP_GetRxCount>
 8018182:	4603      	mov	r3, r0
}
 8018184:	4618      	mov	r0, r3
 8018186:	3708      	adds	r7, #8
 8018188:	46bd      	mov	sp, r7
 801818a:	bd80      	pop	{r7, pc}

0801818c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
 8018194:	460b      	mov	r3, r1
 8018196:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018198:	78fb      	ldrb	r3, [r7, #3]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d002      	beq.n	80181a4 <HAL_PCDEx_LPM_Callback+0x18>
 801819e:	2b01      	cmp	r3, #1
 80181a0:	d013      	beq.n	80181ca <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80181a2:	e023      	b.n	80181ec <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	7a5b      	ldrb	r3, [r3, #9]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d007      	beq.n	80181bc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80181ac:	f000 f83c 	bl	8018228 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80181b0:	4b10      	ldr	r3, [pc, #64]	@ (80181f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80181b2:	691b      	ldr	r3, [r3, #16]
 80181b4:	4a0f      	ldr	r2, [pc, #60]	@ (80181f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80181b6:	f023 0306 	bic.w	r3, r3, #6
 80181ba:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80181c2:	4618      	mov	r0, r3
 80181c4:	f7fa fe2a 	bl	8012e1c <USBD_LL_Resume>
    break;
 80181c8:	e010      	b.n	80181ec <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80181d0:	4618      	mov	r0, r3
 80181d2:	f7fa fe0d 	bl	8012df0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	7a5b      	ldrb	r3, [r3, #9]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d005      	beq.n	80181ea <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80181de:	4b05      	ldr	r3, [pc, #20]	@ (80181f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80181e0:	691b      	ldr	r3, [r3, #16]
 80181e2:	4a04      	ldr	r2, [pc, #16]	@ (80181f4 <HAL_PCDEx_LPM_Callback+0x68>)
 80181e4:	f043 0306 	orr.w	r3, r3, #6
 80181e8:	6113      	str	r3, [r2, #16]
    break;
 80181ea:	bf00      	nop
}
 80181ec:	bf00      	nop
 80181ee:	3708      	adds	r7, #8
 80181f0:	46bd      	mov	sp, r7
 80181f2:	bd80      	pop	{r7, pc}
 80181f4:	e000ed00 	.word	0xe000ed00

080181f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018200:	4b03      	ldr	r3, [pc, #12]	@ (8018210 <USBD_static_malloc+0x18>)
}
 8018202:	4618      	mov	r0, r3
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr
 801820e:	bf00      	nop
 8018210:	20019558 	.word	0x20019558

08018214 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018214:	b480      	push	{r7}
 8018216:	b083      	sub	sp, #12
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]

}
 801821c:	bf00      	nop
 801821e:	370c      	adds	r7, #12
 8018220:	46bd      	mov	sp, r7
 8018222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018226:	4770      	bx	lr

08018228 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801822c:	f7f0 fb1c 	bl	8008868 <SystemClock_Config>
}
 8018230:	bf00      	nop
 8018232:	bd80      	pop	{r7, pc}

08018234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018234:	b480      	push	{r7}
 8018236:	b085      	sub	sp, #20
 8018238:	af00      	add	r7, sp, #0
 801823a:	4603      	mov	r3, r0
 801823c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801823e:	2300      	movs	r3, #0
 8018240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018242:	79fb      	ldrb	r3, [r7, #7]
 8018244:	2b03      	cmp	r3, #3
 8018246:	d817      	bhi.n	8018278 <USBD_Get_USB_Status+0x44>
 8018248:	a201      	add	r2, pc, #4	@ (adr r2, 8018250 <USBD_Get_USB_Status+0x1c>)
 801824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801824e:	bf00      	nop
 8018250:	08018261 	.word	0x08018261
 8018254:	08018267 	.word	0x08018267
 8018258:	0801826d 	.word	0x0801826d
 801825c:	08018273 	.word	0x08018273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018260:	2300      	movs	r3, #0
 8018262:	73fb      	strb	r3, [r7, #15]
    break;
 8018264:	e00b      	b.n	801827e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018266:	2303      	movs	r3, #3
 8018268:	73fb      	strb	r3, [r7, #15]
    break;
 801826a:	e008      	b.n	801827e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801826c:	2301      	movs	r3, #1
 801826e:	73fb      	strb	r3, [r7, #15]
    break;
 8018270:	e005      	b.n	801827e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018272:	2303      	movs	r3, #3
 8018274:	73fb      	strb	r3, [r7, #15]
    break;
 8018276:	e002      	b.n	801827e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018278:	2303      	movs	r3, #3
 801827a:	73fb      	strb	r3, [r7, #15]
    break;
 801827c:	bf00      	nop
  }
  return usb_status;
 801827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018280:	4618      	mov	r0, r3
 8018282:	3714      	adds	r7, #20
 8018284:	46bd      	mov	sp, r7
 8018286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828a:	4770      	bx	lr

0801828c <DataHist_parameters>:
 801828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018290:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8018292:	9f06      	ldr	r7, [sp, #24]
 8018294:	7020      	strb	r0, [r4, #0]
 8018296:	6808      	ldr	r0, [r1, #0]
 8018298:	6060      	str	r0, [r4, #4]
 801829a:	6848      	ldr	r0, [r1, #4]
 801829c:	60a0      	str	r0, [r4, #8]
 801829e:	6888      	ldr	r0, [r1, #8]
 80182a0:	60e0      	str	r0, [r4, #12]
 80182a2:	68c8      	ldr	r0, [r1, #12]
 80182a4:	6120      	str	r0, [r4, #16]
 80182a6:	6908      	ldr	r0, [r1, #16]
 80182a8:	6160      	str	r0, [r4, #20]
 80182aa:	6948      	ldr	r0, [r1, #20]
 80182ac:	61a0      	str	r0, [r4, #24]
 80182ae:	6988      	ldr	r0, [r1, #24]
 80182b0:	61e0      	str	r0, [r4, #28]
 80182b2:	69c8      	ldr	r0, [r1, #28]
 80182b4:	6220      	str	r0, [r4, #32]
 80182b6:	6a09      	ldr	r1, [r1, #32]
 80182b8:	6261      	str	r1, [r4, #36]	@ 0x24
 80182ba:	e9dd 6507 	ldrd	r6, r5, [sp, #28]
 80182be:	8811      	ldrh	r1, [r2, #0]
 80182c0:	edd2 7a01 	vldr	s15, [r2, #4]
 80182c4:	8521      	strh	r1, [r4, #40]	@ 0x28
 80182c6:	3280      	adds	r2, #128	@ 0x80
 80182c8:	f104 0830 	add.w	r8, r4, #48	@ 0x30
 80182cc:	f04f 0e00 	mov.w	lr, #0
 80182d0:	f1a2 0178 	sub.w	r1, r2, #120	@ 0x78
 80182d4:	4640      	mov	r0, r8
 80182d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80182da:	f840 cb04 	str.w	ip, [r0], #4
 80182de:	4291      	cmp	r1, r2
 80182e0:	d1f9      	bne.n	80182d6 <DataHist_parameters+0x4a>
 80182e2:	f10e 0e1e 	add.w	lr, lr, #30
 80182e6:	f1be 0f5a 	cmp.w	lr, #90	@ 0x5a
 80182ea:	f108 0878 	add.w	r8, r8, #120	@ 0x78
 80182ee:	f101 0278 	add.w	r2, r1, #120	@ 0x78
 80182f2:	d1ed      	bne.n	80182d0 <DataHist_parameters+0x44>
 80182f4:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 80182f8:	881a      	ldrh	r2, [r3, #0]
 80182fa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80182fe:	f8a4 2198 	strh.w	r2, [r4, #408]	@ 0x198
 8018302:	3380      	adds	r3, #128	@ 0x80
 8018304:	f504 7ed0 	add.w	lr, r4, #416	@ 0x1a0
 8018308:	f04f 0c00 	mov.w	ip, #0
 801830c:	f1a3 0278 	sub.w	r2, r3, #120	@ 0x78
 8018310:	4671      	mov	r1, lr
 8018312:	f852 0b04 	ldr.w	r0, [r2], #4
 8018316:	f841 0b04 	str.w	r0, [r1], #4
 801831a:	429a      	cmp	r2, r3
 801831c:	d1f9      	bne.n	8018312 <DataHist_parameters+0x86>
 801831e:	f10c 0c1e 	add.w	ip, ip, #30
 8018322:	f1bc 0f5a 	cmp.w	ip, #90	@ 0x5a
 8018326:	f10e 0e78 	add.w	lr, lr, #120	@ 0x78
 801832a:	f102 0378 	add.w	r3, r2, #120	@ 0x78
 801832e:	d1ed      	bne.n	801830c <DataHist_parameters+0x80>
 8018330:	f8c4 819c 	str.w	r8, [r4, #412]	@ 0x19c
 8018334:	883b      	ldrh	r3, [r7, #0]
 8018336:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801833a:	f8a4 3308 	strh.w	r3, [r4, #776]	@ 0x308
 801833e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8018342:	f504 7c44 	add.w	ip, r4, #784	@ 0x310
 8018346:	2700      	movs	r7, #0
 8018348:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 801834c:	4662      	mov	r2, ip
 801834e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018352:	f842 1b04 	str.w	r1, [r2], #4
 8018356:	4298      	cmp	r0, r3
 8018358:	d1f9      	bne.n	801834e <DataHist_parameters+0xc2>
 801835a:	371e      	adds	r7, #30
 801835c:	2f5a      	cmp	r7, #90	@ 0x5a
 801835e:	f10c 0c78 	add.w	ip, ip, #120	@ 0x78
 8018362:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 8018366:	d1ef      	bne.n	8018348 <DataHist_parameters+0xbc>
 8018368:	f8c4 e30c 	str.w	lr, [r4, #780]	@ 0x30c
 801836c:	8833      	ldrh	r3, [r6, #0]
 801836e:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018372:	f8a4 3478 	strh.w	r3, [r4, #1144]	@ 0x478
 8018376:	f106 0080 	add.w	r0, r6, #128	@ 0x80
 801837a:	f504 6790 	add.w	r7, r4, #1152	@ 0x480
 801837e:	2600      	movs	r6, #0
 8018380:	f1a0 0378 	sub.w	r3, r0, #120	@ 0x78
 8018384:	463a      	mov	r2, r7
 8018386:	f853 1b04 	ldr.w	r1, [r3], #4
 801838a:	f842 1b04 	str.w	r1, [r2], #4
 801838e:	4298      	cmp	r0, r3
 8018390:	d1f9      	bne.n	8018386 <DataHist_parameters+0xfa>
 8018392:	361e      	adds	r6, #30
 8018394:	2e5a      	cmp	r6, #90	@ 0x5a
 8018396:	f107 0778 	add.w	r7, r7, #120	@ 0x78
 801839a:	f100 0078 	add.w	r0, r0, #120	@ 0x78
 801839e:	d1ef      	bne.n	8018380 <DataHist_parameters+0xf4>
 80183a0:	f504 638f 	add.w	r3, r4, #1144	@ 0x478
 80183a4:	69aa      	ldr	r2, [r5, #24]
 80183a6:	f8c3 c004 	str.w	ip, [r3, #4]
 80183aa:	f504 63bd 	add.w	r3, r4, #1512	@ 0x5e8
 80183ae:	7829      	ldrb	r1, [r5, #0]
 80183b0:	f884 15e8 	strb.w	r1, [r4, #1512]	@ 0x5e8
 80183b4:	619a      	str	r2, [r3, #24]
 80183b6:	686a      	ldr	r2, [r5, #4]
 80183b8:	605a      	str	r2, [r3, #4]
 80183ba:	68aa      	ldr	r2, [r5, #8]
 80183bc:	609a      	str	r2, [r3, #8]
 80183be:	68ea      	ldr	r2, [r5, #12]
 80183c0:	60da      	str	r2, [r3, #12]
 80183c2:	692a      	ldr	r2, [r5, #16]
 80183c4:	611a      	str	r2, [r3, #16]
 80183c6:	696a      	ldr	r2, [r5, #20]
 80183c8:	615a      	str	r2, [r3, #20]
 80183ca:	69ea      	ldr	r2, [r5, #28]
 80183cc:	61da      	str	r2, [r3, #28]
 80183ce:	6a2a      	ldr	r2, [r5, #32]
 80183d0:	621a      	str	r2, [r3, #32]
 80183d2:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80183d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80183d6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 80183d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80183da:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 80183dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80183de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183e2:	bf00      	nop

080183e4 <rotVect>:
 80183e4:	f991 3001 	ldrsb.w	r3, [r1, #1]
 80183e8:	ed92 7a01 	vldr	s14, [r2, #4]
 80183ec:	ed92 6a00 	vldr	s12, [r2]
 80183f0:	ee07 3a90 	vmov	s15, r3
 80183f4:	f991 3000 	ldrsb.w	r3, [r1]
 80183f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80183fc:	ee06 3a90 	vmov	s13, r3
 8018400:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018404:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8018408:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801840c:	ee07 3a10 	vmov	s14, r3
 8018410:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018414:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018418:	edd2 6a02 	vldr	s13, [r2, #8]
 801841c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018420:	edc0 7a00 	vstr	s15, [r0]
 8018424:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8018428:	ed92 7a01 	vldr	s14, [r2, #4]
 801842c:	ed92 6a00 	vldr	s12, [r2]
 8018430:	ee07 3a90 	vmov	s15, r3
 8018434:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8018438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801843c:	ee06 3a90 	vmov	s13, r3
 8018440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018444:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8018448:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801844c:	ee07 3a10 	vmov	s14, r3
 8018450:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018454:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018458:	edd2 6a02 	vldr	s13, [r2, #8]
 801845c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018460:	edc0 7a01 	vstr	s15, [r0, #4]
 8018464:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8018468:	ed92 7a01 	vldr	s14, [r2, #4]
 801846c:	ed92 6a00 	vldr	s12, [r2]
 8018470:	ee07 3a90 	vmov	s15, r3
 8018474:	f991 3006 	ldrsb.w	r3, [r1, #6]
 8018478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801847c:	ee06 3a90 	vmov	s13, r3
 8018480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018484:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018488:	f991 3008 	ldrsb.w	r3, [r1, #8]
 801848c:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018490:	ee07 3a10 	vmov	s14, r3
 8018494:	edd2 6a02 	vldr	s13, [r2, #8]
 8018498:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801849c:	eee7 7a26 	vfma.f32	s15, s14, s13
 80184a0:	edc0 7a02 	vstr	s15, [r0, #8]
 80184a4:	4770      	bx	lr
 80184a6:	bf00      	nop

080184a8 <findAxis>:
 80184a8:	f990 3000 	ldrsb.w	r3, [r0]
 80184ac:	2b01      	cmp	r3, #1
 80184ae:	d027      	beq.n	8018500 <findAxis+0x58>
 80184b0:	3301      	adds	r3, #1
 80184b2:	d00e      	beq.n	80184d2 <findAxis+0x2a>
 80184b4:	f990 3003 	ldrsb.w	r3, [r0, #3]
 80184b8:	2b01      	cmp	r3, #1
 80184ba:	d053      	beq.n	8018564 <findAxis+0xbc>
 80184bc:	3301      	adds	r3, #1
 80184be:	d048      	beq.n	8018552 <findAxis+0xaa>
 80184c0:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d053      	beq.n	8018570 <findAxis+0xc8>
 80184c8:	3301      	adds	r3, #1
 80184ca:	d104      	bne.n	80184d6 <findAxis+0x2e>
 80184cc:	2364      	movs	r3, #100	@ 0x64
 80184ce:	700b      	strb	r3, [r1, #0]
 80184d0:	e001      	b.n	80184d6 <findAxis+0x2e>
 80184d2:	2377      	movs	r3, #119	@ 0x77
 80184d4:	700b      	strb	r3, [r1, #0]
 80184d6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d016      	beq.n	801850c <findAxis+0x64>
 80184de:	3301      	adds	r3, #1
 80184e0:	d02e      	beq.n	8018540 <findAxis+0x98>
 80184e2:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80184e6:	2b01      	cmp	r3, #1
 80184e8:	d039      	beq.n	801855e <findAxis+0xb6>
 80184ea:	3301      	adds	r3, #1
 80184ec:	d034      	beq.n	8018558 <findAxis+0xb0>
 80184ee:	f990 3007 	ldrsb.w	r3, [r0, #7]
 80184f2:	2b01      	cmp	r3, #1
 80184f4:	d03f      	beq.n	8018576 <findAxis+0xce>
 80184f6:	3301      	adds	r3, #1
 80184f8:	d10a      	bne.n	8018510 <findAxis+0x68>
 80184fa:	2364      	movs	r3, #100	@ 0x64
 80184fc:	704b      	strb	r3, [r1, #1]
 80184fe:	e007      	b.n	8018510 <findAxis+0x68>
 8018500:	2365      	movs	r3, #101	@ 0x65
 8018502:	700b      	strb	r3, [r1, #0]
 8018504:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8018508:	2b01      	cmp	r3, #1
 801850a:	d1e8      	bne.n	80184de <findAxis+0x36>
 801850c:	2365      	movs	r3, #101	@ 0x65
 801850e:	704b      	strb	r3, [r1, #1]
 8018510:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8018514:	2b01      	cmp	r3, #1
 8018516:	d010      	beq.n	801853a <findAxis+0x92>
 8018518:	3301      	adds	r3, #1
 801851a:	d014      	beq.n	8018546 <findAxis+0x9e>
 801851c:	f990 3005 	ldrsb.w	r3, [r0, #5]
 8018520:	2b01      	cmp	r3, #1
 8018522:	d022      	beq.n	801856a <findAxis+0xc2>
 8018524:	3301      	adds	r3, #1
 8018526:	d011      	beq.n	801854c <findAxis+0xa4>
 8018528:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801852c:	2b01      	cmp	r3, #1
 801852e:	d025      	beq.n	801857c <findAxis+0xd4>
 8018530:	3301      	adds	r3, #1
 8018532:	bf04      	itt	eq
 8018534:	2364      	moveq	r3, #100	@ 0x64
 8018536:	708b      	strbeq	r3, [r1, #2]
 8018538:	4770      	bx	lr
 801853a:	2365      	movs	r3, #101	@ 0x65
 801853c:	708b      	strb	r3, [r1, #2]
 801853e:	4770      	bx	lr
 8018540:	2377      	movs	r3, #119	@ 0x77
 8018542:	704b      	strb	r3, [r1, #1]
 8018544:	e7e4      	b.n	8018510 <findAxis+0x68>
 8018546:	2377      	movs	r3, #119	@ 0x77
 8018548:	708b      	strb	r3, [r1, #2]
 801854a:	4770      	bx	lr
 801854c:	2373      	movs	r3, #115	@ 0x73
 801854e:	708b      	strb	r3, [r1, #2]
 8018550:	4770      	bx	lr
 8018552:	2373      	movs	r3, #115	@ 0x73
 8018554:	700b      	strb	r3, [r1, #0]
 8018556:	e7be      	b.n	80184d6 <findAxis+0x2e>
 8018558:	2373      	movs	r3, #115	@ 0x73
 801855a:	704b      	strb	r3, [r1, #1]
 801855c:	e7d8      	b.n	8018510 <findAxis+0x68>
 801855e:	236e      	movs	r3, #110	@ 0x6e
 8018560:	704b      	strb	r3, [r1, #1]
 8018562:	e7d5      	b.n	8018510 <findAxis+0x68>
 8018564:	236e      	movs	r3, #110	@ 0x6e
 8018566:	700b      	strb	r3, [r1, #0]
 8018568:	e7b5      	b.n	80184d6 <findAxis+0x2e>
 801856a:	236e      	movs	r3, #110	@ 0x6e
 801856c:	708b      	strb	r3, [r1, #2]
 801856e:	4770      	bx	lr
 8018570:	2375      	movs	r3, #117	@ 0x75
 8018572:	700b      	strb	r3, [r1, #0]
 8018574:	e7af      	b.n	80184d6 <findAxis+0x2e>
 8018576:	2375      	movs	r3, #117	@ 0x75
 8018578:	704b      	strb	r3, [r1, #1]
 801857a:	e7c9      	b.n	8018510 <findAxis+0x68>
 801857c:	2375      	movs	r3, #117	@ 0x75
 801857e:	708b      	strb	r3, [r1, #2]
 8018580:	4770      	bx	lr
 8018582:	bf00      	nop
 8018584:	0000      	movs	r0, r0
	...

08018588 <findDirection>:
 8018588:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 801858c:	ed2d 8b06 	vpush	{d8-d10}
 8018590:	eef0 9ae0 	vabs.f32	s19, s1
 8018594:	eeb0 9a40 	vmov.f32	s18, s0
 8018598:	4604      	mov	r4, r0
 801859a:	ee19 0a90 	vmov	r0, s19
 801859e:	eeb0 8a41 	vmov.f32	s16, s2
 80185a2:	eef0 8a60 	vmov.f32	s17, s1
 80185a6:	eeb0 aac9 	vabs.f32	s20, s18
 80185aa:	f7e7 fff5 	bl	8000598 <__aeabi_f2d>
 80185ae:	eeb4 aae9 	vcmpe.f32	s20, s19
 80185b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185b6:	4606      	mov	r6, r0
 80185b8:	460f      	mov	r7, r1
 80185ba:	eef0 aac8 	vabs.f32	s21, s16
 80185be:	dd32      	ble.n	8018626 <findDirection+0x9e>
 80185c0:	eeb4 aaea 	vcmpe.f32	s20, s21
 80185c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c8:	dd2d      	ble.n	8018626 <findDirection+0x9e>
 80185ca:	a36b      	add	r3, pc, #428	@ (adr r3, 8018778 <findDirection+0x1f0>)
 80185cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185d0:	f7e8 f83a 	bl	8000648 <__aeabi_dmul>
 80185d4:	4680      	mov	r8, r0
 80185d6:	ee1a 0a10 	vmov	r0, s20
 80185da:	4689      	mov	r9, r1
 80185dc:	f7e7 ffdc 	bl	8000598 <__aeabi_f2d>
 80185e0:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80185e4:	4606      	mov	r6, r0
 80185e6:	460f      	mov	r7, r1
 80185e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ec:	4640      	mov	r0, r8
 80185ee:	4649      	mov	r1, r9
 80185f0:	4632      	mov	r2, r6
 80185f2:	463b      	mov	r3, r7
 80185f4:	dd76      	ble.n	80186e4 <findDirection+0x15c>
 80185f6:	f7e8 fa99 	bl	8000b2c <__aeabi_dcmplt>
 80185fa:	b178      	cbz	r0, 801861c <findDirection+0x94>
 80185fc:	ee1a 0a90 	vmov	r0, s21
 8018600:	f7e7 ffca 	bl	8000598 <__aeabi_f2d>
 8018604:	a35c      	add	r3, pc, #368	@ (adr r3, 8018778 <findDirection+0x1f0>)
 8018606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801860a:	f7e8 f81d 	bl	8000648 <__aeabi_dmul>
 801860e:	4632      	mov	r2, r6
 8018610:	463b      	mov	r3, r7
 8018612:	f7e8 fa8b 	bl	8000b2c <__aeabi_dcmplt>
 8018616:	2800      	cmp	r0, #0
 8018618:	bf18      	it	ne
 801861a:	2404      	movne	r4, #4
 801861c:	ecbd 8b06 	vpop	{d8-d10}
 8018620:	4620      	mov	r0, r4
 8018622:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8018626:	eef4 9aea 	vcmpe.f32	s19, s21
 801862a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801862e:	dd28      	ble.n	8018682 <findDirection+0xfa>
 8018630:	ee1a 0a10 	vmov	r0, s20
 8018634:	f7e7 ffb0 	bl	8000598 <__aeabi_f2d>
 8018638:	a34f      	add	r3, pc, #316	@ (adr r3, 8018778 <findDirection+0x1f0>)
 801863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801863e:	f7e8 f803 	bl	8000648 <__aeabi_dmul>
 8018642:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8018646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801864a:	4632      	mov	r2, r6
 801864c:	463b      	mov	r3, r7
 801864e:	dd5e      	ble.n	801870e <findDirection+0x186>
 8018650:	f7e8 fa6c 	bl	8000b2c <__aeabi_dcmplt>
 8018654:	2800      	cmp	r0, #0
 8018656:	d0e1      	beq.n	801861c <findDirection+0x94>
 8018658:	ee1a 0a90 	vmov	r0, s21
 801865c:	f7e7 ff9c 	bl	8000598 <__aeabi_f2d>
 8018660:	a345      	add	r3, pc, #276	@ (adr r3, 8018778 <findDirection+0x1f0>)
 8018662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018666:	f7e7 ffef 	bl	8000648 <__aeabi_dmul>
 801866a:	4632      	mov	r2, r6
 801866c:	463b      	mov	r3, r7
 801866e:	f7e8 fa5d 	bl	8000b2c <__aeabi_dcmplt>
 8018672:	ecbd 8b06 	vpop	{d8-d10}
 8018676:	2800      	cmp	r0, #0
 8018678:	bf18      	it	ne
 801867a:	2401      	movne	r4, #1
 801867c:	4620      	mov	r0, r4
 801867e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8018682:	ee1a 0a90 	vmov	r0, s21
 8018686:	f7e7 ff87 	bl	8000598 <__aeabi_f2d>
 801868a:	4602      	mov	r2, r0
 801868c:	460b      	mov	r3, r1
 801868e:	4630      	mov	r0, r6
 8018690:	4639      	mov	r1, r7
 8018692:	4616      	mov	r6, r2
 8018694:	461f      	mov	r7, r3
 8018696:	a338      	add	r3, pc, #224	@ (adr r3, 8018778 <findDirection+0x1f0>)
 8018698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801869c:	f7e7 ffd4 	bl	8000648 <__aeabi_dmul>
 80186a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80186a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186a8:	4602      	mov	r2, r0
 80186aa:	460b      	mov	r3, r1
 80186ac:	4630      	mov	r0, r6
 80186ae:	4639      	mov	r1, r7
 80186b0:	dd46      	ble.n	8018740 <findDirection+0x1b8>
 80186b2:	f7e8 fa59 	bl	8000b68 <__aeabi_dcmpgt>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d0b0      	beq.n	801861c <findDirection+0x94>
 80186ba:	ee1a 0a10 	vmov	r0, s20
 80186be:	f7e7 ff6b 	bl	8000598 <__aeabi_f2d>
 80186c2:	a32d      	add	r3, pc, #180	@ (adr r3, 8018778 <findDirection+0x1f0>)
 80186c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186c8:	f7e7 ffbe 	bl	8000648 <__aeabi_dmul>
 80186cc:	4632      	mov	r2, r6
 80186ce:	463b      	mov	r3, r7
 80186d0:	f7e8 fa2c 	bl	8000b2c <__aeabi_dcmplt>
 80186d4:	ecbd 8b06 	vpop	{d8-d10}
 80186d8:	2800      	cmp	r0, #0
 80186da:	bf18      	it	ne
 80186dc:	2400      	movne	r4, #0
 80186de:	4620      	mov	r0, r4
 80186e0:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80186e4:	f7e8 fa22 	bl	8000b2c <__aeabi_dcmplt>
 80186e8:	2800      	cmp	r0, #0
 80186ea:	d097      	beq.n	801861c <findDirection+0x94>
 80186ec:	ee1a 0a90 	vmov	r0, s21
 80186f0:	f7e7 ff52 	bl	8000598 <__aeabi_f2d>
 80186f4:	a320      	add	r3, pc, #128	@ (adr r3, 8018778 <findDirection+0x1f0>)
 80186f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fa:	f7e7 ffa5 	bl	8000648 <__aeabi_dmul>
 80186fe:	4632      	mov	r2, r6
 8018700:	463b      	mov	r3, r7
 8018702:	f7e8 fa13 	bl	8000b2c <__aeabi_dcmplt>
 8018706:	2800      	cmp	r0, #0
 8018708:	bf18      	it	ne
 801870a:	2405      	movne	r4, #5
 801870c:	e786      	b.n	801861c <findDirection+0x94>
 801870e:	f7e8 fa0d 	bl	8000b2c <__aeabi_dcmplt>
 8018712:	2800      	cmp	r0, #0
 8018714:	d082      	beq.n	801861c <findDirection+0x94>
 8018716:	ee1a 0a90 	vmov	r0, s21
 801871a:	f7e7 ff3d 	bl	8000598 <__aeabi_f2d>
 801871e:	a316      	add	r3, pc, #88	@ (adr r3, 8018778 <findDirection+0x1f0>)
 8018720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018724:	f7e7 ff90 	bl	8000648 <__aeabi_dmul>
 8018728:	4632      	mov	r2, r6
 801872a:	463b      	mov	r3, r7
 801872c:	f7e8 f9fe 	bl	8000b2c <__aeabi_dcmplt>
 8018730:	ecbd 8b06 	vpop	{d8-d10}
 8018734:	2800      	cmp	r0, #0
 8018736:	bf18      	it	ne
 8018738:	2403      	movne	r4, #3
 801873a:	4620      	mov	r0, r4
 801873c:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8018740:	f7e8 fa12 	bl	8000b68 <__aeabi_dcmpgt>
 8018744:	2800      	cmp	r0, #0
 8018746:	f43f af69 	beq.w	801861c <findDirection+0x94>
 801874a:	ee1a 0a10 	vmov	r0, s20
 801874e:	f7e7 ff23 	bl	8000598 <__aeabi_f2d>
 8018752:	a309      	add	r3, pc, #36	@ (adr r3, 8018778 <findDirection+0x1f0>)
 8018754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018758:	f7e7 ff76 	bl	8000648 <__aeabi_dmul>
 801875c:	4632      	mov	r2, r6
 801875e:	463b      	mov	r3, r7
 8018760:	f7e8 f9e4 	bl	8000b2c <__aeabi_dcmplt>
 8018764:	ecbd 8b06 	vpop	{d8-d10}
 8018768:	2800      	cmp	r0, #0
 801876a:	bf18      	it	ne
 801876c:	2402      	movne	r4, #2
 801876e:	4620      	mov	r0, r4
 8018770:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8018774:	f3af 8000 	nop.w
 8018778:	e0000000 	.word	0xe0000000
 801877c:	3ff6b851 	.word	0x3ff6b851

08018780 <updateOrientation>:
 8018780:	2300      	movs	r3, #0
 8018782:	6003      	str	r3, [r0, #0]
 8018784:	6043      	str	r3, [r0, #4]
 8018786:	7203      	strb	r3, [r0, #8]
 8018788:	780b      	ldrb	r3, [r1, #0]
 801878a:	f891 c001 	ldrb.w	ip, [r1, #1]
 801878e:	f1a3 0242 	sub.w	r2, r3, #66	@ 0x42
 8018792:	2a17      	cmp	r2, #23
 8018794:	bf98      	it	ls
 8018796:	3320      	addls	r3, #32
 8018798:	f1ac 0242 	sub.w	r2, ip, #66	@ 0x42
 801879c:	bf98      	it	ls
 801879e:	b2db      	uxtbls	r3, r3
 80187a0:	2a17      	cmp	r2, #23
 80187a2:	788a      	ldrb	r2, [r1, #2]
 80187a4:	bf98      	it	ls
 80187a6:	f10c 0c20 	addls.w	ip, ip, #32
 80187aa:	f1a2 0142 	sub.w	r1, r2, #66	@ 0x42
 80187ae:	bf98      	it	ls
 80187b0:	fa5f fc8c 	uxtbls.w	ip, ip
 80187b4:	2917      	cmp	r1, #23
 80187b6:	bf98      	it	ls
 80187b8:	3220      	addls	r2, #32
 80187ba:	f1a3 0364 	sub.w	r3, r3, #100	@ 0x64
 80187be:	bf98      	it	ls
 80187c0:	b2d2      	uxtbls	r2, r2
 80187c2:	2b13      	cmp	r3, #19
 80187c4:	d80d      	bhi.n	80187e2 <updateOrientation+0x62>
 80187c6:	e8df f003 	tbb	[pc, r3]
 80187ca:	3734      	.short	0x3734
 80187cc:	0c0c0c0c 	.word	0x0c0c0c0c
 80187d0:	0c0c0c0c 	.word	0x0c0c0c0c
 80187d4:	0c0c0c0a 	.word	0x0c0c0c0a
 80187d8:	3d0c3a0c 	.word	0x3d0c3a0c
 80187dc:	310c      	.short	0x310c
 80187de:	2301      	movs	r3, #1
 80187e0:	70c3      	strb	r3, [r0, #3]
 80187e2:	f1ac 0c64 	sub.w	ip, ip, #100	@ 0x64
 80187e6:	f1bc 0f13 	cmp.w	ip, #19
 80187ea:	d80d      	bhi.n	8018808 <updateOrientation+0x88>
 80187ec:	e8df f00c 	tbb	[pc, ip]
 80187f0:	0c0c392d 	.word	0x0c0c392d
 80187f4:	0c0c0c0c 	.word	0x0c0c0c0c
 80187f8:	0c0a0c0c 	.word	0x0c0a0c0c
 80187fc:	3c0c0c0c 	.word	0x3c0c0c0c
 8018800:	420c3f0c 	.word	0x420c3f0c
 8018804:	2301      	movs	r3, #1
 8018806:	7103      	strb	r3, [r0, #4]
 8018808:	3a64      	subs	r2, #100	@ 0x64
 801880a:	2a13      	cmp	r2, #19
 801880c:	d80d      	bhi.n	801882a <updateOrientation+0xaa>
 801880e:	e8df f002 	tbb	[pc, r2]
 8018812:	340a      	.short	0x340a
 8018814:	0c0c0c0c 	.word	0x0c0c0c0c
 8018818:	0c0c0c0c 	.word	0x0c0c0c0c
 801881c:	0c0c0c37 	.word	0x0c0c0c37
 8018820:	250c220c 	.word	0x250c220c
 8018824:	1f0c      	.short	0x1f0c
 8018826:	23ff      	movs	r3, #255	@ 0xff
 8018828:	7203      	strb	r3, [r0, #8]
 801882a:	4770      	bx	lr
 801882c:	23ff      	movs	r3, #255	@ 0xff
 801882e:	7003      	strb	r3, [r0, #0]
 8018830:	e7d7      	b.n	80187e2 <updateOrientation+0x62>
 8018832:	23ff      	movs	r3, #255	@ 0xff
 8018834:	7183      	strb	r3, [r0, #6]
 8018836:	e7d4      	b.n	80187e2 <updateOrientation+0x62>
 8018838:	2301      	movs	r3, #1
 801883a:	7003      	strb	r3, [r0, #0]
 801883c:	e7d1      	b.n	80187e2 <updateOrientation+0x62>
 801883e:	23ff      	movs	r3, #255	@ 0xff
 8018840:	70c3      	strb	r3, [r0, #3]
 8018842:	e7ce      	b.n	80187e2 <updateOrientation+0x62>
 8018844:	2301      	movs	r3, #1
 8018846:	7183      	strb	r3, [r0, #6]
 8018848:	e7cb      	b.n	80187e2 <updateOrientation+0x62>
 801884a:	23ff      	movs	r3, #255	@ 0xff
 801884c:	71c3      	strb	r3, [r0, #7]
 801884e:	e7db      	b.n	8018808 <updateOrientation+0x88>
 8018850:	23ff      	movs	r3, #255	@ 0xff
 8018852:	7083      	strb	r3, [r0, #2]
 8018854:	4770      	bx	lr
 8018856:	23ff      	movs	r3, #255	@ 0xff
 8018858:	7143      	strb	r3, [r0, #5]
 801885a:	4770      	bx	lr
 801885c:	2301      	movs	r3, #1
 801885e:	7203      	strb	r3, [r0, #8]
 8018860:	4770      	bx	lr
 8018862:	2301      	movs	r3, #1
 8018864:	7043      	strb	r3, [r0, #1]
 8018866:	e7cf      	b.n	8018808 <updateOrientation+0x88>
 8018868:	23ff      	movs	r3, #255	@ 0xff
 801886a:	7103      	strb	r3, [r0, #4]
 801886c:	e7cc      	b.n	8018808 <updateOrientation+0x88>
 801886e:	2301      	movs	r3, #1
 8018870:	71c3      	strb	r3, [r0, #7]
 8018872:	e7c9      	b.n	8018808 <updateOrientation+0x88>
 8018874:	23ff      	movs	r3, #255	@ 0xff
 8018876:	7043      	strb	r3, [r0, #1]
 8018878:	e7c6      	b.n	8018808 <updateOrientation+0x88>
 801887a:	2301      	movs	r3, #1
 801887c:	7083      	strb	r3, [r0, #2]
 801887e:	4770      	bx	lr
 8018880:	2301      	movs	r3, #1
 8018882:	7143      	strb	r3, [r0, #5]
 8018884:	4770      	bx	lr
 8018886:	bf00      	nop

08018888 <qmult>:
 8018888:	ed91 2a03 	vldr	s4, [r1, #12]
 801888c:	ed90 3a01 	vldr	s6, [r0, #4]
 8018890:	edd0 5a02 	vldr	s11, [r0, #8]
 8018894:	edd1 4a01 	vldr	s9, [r1, #4]
 8018898:	ed90 4a00 	vldr	s8, [r0]
 801889c:	ed91 5a02 	vldr	s10, [r1, #8]
 80188a0:	edd1 3a00 	vldr	s7, [r1]
 80188a4:	edd0 2a03 	vldr	s5, [r0, #12]
 80188a8:	ee25 6aa4 	vmul.f32	s12, s11, s9
 80188ac:	ee62 6a03 	vmul.f32	s13, s4, s6
 80188b0:	ee22 7a25 	vmul.f32	s14, s4, s11
 80188b4:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 80188b8:	eea4 6a02 	vfma.f32	s12, s8, s4
 80188bc:	eee4 6a05 	vfma.f32	s13, s8, s10
 80188c0:	eea3 7a23 	vfma.f32	s14, s6, s7
 80188c4:	eee4 7a63 	vfms.f32	s15, s8, s7
 80188c8:	eea2 6aa3 	vfma.f32	s12, s5, s7
 80188cc:	eee4 6aa2 	vfma.f32	s13, s9, s5
 80188d0:	eea5 7a22 	vfma.f32	s14, s10, s5
 80188d4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80188d8:	eea3 6a45 	vfms.f32	s12, s6, s10
 80188dc:	eee5 6ae3 	vfms.f32	s13, s11, s7
 80188e0:	eea4 7a64 	vfms.f32	s14, s8, s9
 80188e4:	eee5 7a65 	vfms.f32	s15, s10, s11
 80188e8:	ed82 6a00 	vstr	s12, [r2]
 80188ec:	edc2 6a01 	vstr	s13, [r2, #4]
 80188f0:	ed82 7a02 	vstr	s14, [r2, #8]
 80188f4:	edc2 7a03 	vstr	s15, [r2, #12]
 80188f8:	4770      	bx	lr
 80188fa:	bf00      	nop

080188fc <dataDerivative5>:
 80188fc:	ed90 7a02 	vldr	s14, [r0, #8]
 8018900:	edd0 7a05 	vldr	s15, [r0, #20]
 8018904:	ed90 5a04 	vldr	s10, [r0, #16]
 8018908:	edd0 3a00 	vldr	s7, [r0]
 801890c:	edd0 6a09 	vldr	s13, [r0, #36]	@ 0x24
 8018910:	ed90 6a0b 	vldr	s12, [r0, #44]	@ 0x2c
 8018914:	ed90 4a0e 	vldr	s8, [r0, #56]	@ 0x38
 8018918:	eef8 4a00 	vmov.f32	s9, #128	@ 0xc0000000 -2.0
 801891c:	eed7 7a24 	vfnms.f32	s15, s14, s9
 8018920:	ed90 7a01 	vldr	s14, [r0, #4]
 8018924:	eee3 6aa4 	vfma.f32	s13, s7, s9
 8018928:	ee97 5a24 	vfnms.f32	s10, s14, s9
 801892c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018930:	ed90 7a0a 	vldr	s14, [r0, #40]	@ 0x28
 8018934:	eddf 4a13 	vldr	s9, [pc, #76]	@ 8018984 <dataDerivative5+0x88>
 8018938:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 801893c:	eee4 7a25 	vfma.f32	s15, s8, s11
 8018940:	eeb0 6a66 	vmov.f32	s12, s13
 8018944:	ee77 6a05 	vadd.f32	s13, s14, s10
 8018948:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 801894c:	ee20 7a24 	vmul.f32	s14, s0, s9
 8018950:	eee5 6a25 	vfma.f32	s13, s10, s11
 8018954:	edd0 4a03 	vldr	s9, [r0, #12]
 8018958:	ed90 5a0c 	vldr	s10, [r0, #48]	@ 0x30
 801895c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018960:	ee36 6a64 	vsub.f32	s12, s12, s9
 8018964:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018968:	eea5 6a25 	vfma.f32	s12, s10, s11
 801896c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8018970:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018974:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8018978:	eea7 0a07 	vfma.f32	s0, s14, s14
 801897c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018980:	4770      	bx	lr
 8018982:	bf00      	nop
 8018984:	3dcccccd 	.word	0x3dcccccd

08018988 <b_dcm2q>:
 8018988:	ed90 5a08 	vldr	s10, [r0, #32]
 801898c:	edd0 7a00 	vldr	s15, [r0]
 8018990:	edd0 6a04 	vldr	s13, [r0, #16]
 8018994:	ee37 7a85 	vadd.f32	s14, s15, s10
 8018998:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801899c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80189a0:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 80189a4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80189a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ac:	bfc5      	ittet	gt
 80189ae:	eeb7 6a00 	vmovgt.f32	s12, #112	@ 0x3f800000  1.0
 80189b2:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 80189b6:	eddf 5a43 	vldrle	s11, [pc, #268]	@ 8018ac4 <b_dcm2q+0x13c>
 80189ba:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 80189be:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80189c2:	ee35 6a47 	vsub.f32	s12, s10, s14
 80189c6:	ee35 7a07 	vadd.f32	s14, s10, s14
 80189ca:	eeb4 6ae4 	vcmpe.f32	s12, s9
 80189ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d2:	bfc5      	ittet	gt
 80189d4:	eef7 4a00 	vmovgt.f32	s9, #112	@ 0x3f800000  1.0
 80189d8:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 80189dc:	ed9f 6a39 	vldrle	s12, [pc, #228]	@ 8018ac4 <b_dcm2q+0x13c>
 80189e0:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 80189e4:	eeff 4a00 	vmov.f32	s9, #240	@ 0xbf800000 -1.0
 80189e8:	eeb4 7ae4 	vcmpe.f32	s14, s9
 80189ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189f0:	dd5b      	ble.n	8018aaa <b_dcm2q+0x122>
 80189f2:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 80189f6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80189fa:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80189fe:	eef1 4ac7 	vsqrt.f32	s9, s14
 8018a02:	ee64 4a84 	vmul.f32	s9, s9, s8
 8018a06:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018a0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8018a0e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018a12:	edd0 6a07 	vldr	s13, [r0, #28]
 8018a16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8018a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a1e:	bf85      	ittet	hi
 8018a20:	eeb7 7a00 	vmovhi.f32	s14, #112	@ 0x3f800000  1.0
 8018a24:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8018a28:	ed9f 7a26 	vldrls	s14, [pc, #152]	@ 8018ac4 <b_dcm2q+0x13c>
 8018a2c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 8018a30:	edd0 7a05 	vldr	s15, [r0, #20]
 8018a34:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018a38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	d43c      	bmi.n	8018abc <b_dcm2q+0x134>
 8018a42:	bfd8      	it	le
 8018a44:	ee27 7a27 	vmulle.f32	s14, s14, s15
 8018a48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018a50:	ed81 7a00 	vstr	s14, [r1]
 8018a54:	edd0 7a06 	vldr	s15, [r0, #24]
 8018a58:	ed90 7a02 	vldr	s14, [r0, #8]
 8018a5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a68:	d425      	bmi.n	8018ab6 <b_dcm2q+0x12e>
 8018a6a:	bfd8      	it	le
 8018a6c:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 8018a70:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018a74:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018a78:	edc1 5a01 	vstr	s11, [r1, #4]
 8018a7c:	edd0 7a01 	vldr	s15, [r0, #4]
 8018a80:	ed90 7a03 	vldr	s14, [r0, #12]
 8018a84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a90:	d40e      	bmi.n	8018ab0 <b_dcm2q+0x128>
 8018a92:	bfd8      	it	le
 8018a94:	ee26 6a27 	vmulle.f32	s12, s12, s15
 8018a98:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018a9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018aa0:	edc1 4a03 	vstr	s9, [r1, #12]
 8018aa4:	ed81 6a02 	vstr	s12, [r1, #8]
 8018aa8:	4770      	bx	lr
 8018aaa:	eddf 4a06 	vldr	s9, [pc, #24]	@ 8018ac4 <b_dcm2q+0x13c>
 8018aae:	e7aa      	b.n	8018a06 <b_dcm2q+0x7e>
 8018ab0:	eeb1 6a46 	vneg.f32	s12, s12
 8018ab4:	e7f0      	b.n	8018a98 <b_dcm2q+0x110>
 8018ab6:	eef1 5a65 	vneg.f32	s11, s11
 8018aba:	e7d9      	b.n	8018a70 <b_dcm2q+0xe8>
 8018abc:	eeb1 7a47 	vneg.f32	s14, s14
 8018ac0:	e7c2      	b.n	8018a48 <b_dcm2q+0xc0>
 8018ac2:	bf00      	nop
 8018ac4:	00000000 	.word	0x00000000

08018ac8 <getRotationMatrix>:
 8018ac8:	b538      	push	{r3, r4, r5, lr}
 8018aca:	4613      	mov	r3, r2
 8018acc:	4605      	mov	r5, r0
 8018ace:	460c      	mov	r4, r1
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	2224      	movs	r2, #36	@ 0x24
 8018ad4:	2100      	movs	r1, #0
 8018ad6:	f00c f980 	bl	8024dda <memset>
 8018ada:	edd5 5a00 	vldr	s11, [r5]
 8018ade:	ed9f 3a49 	vldr	s6, [pc, #292]	@ 8018c04 <getRotationMatrix+0x13c>
 8018ae2:	edc0 5a02 	vstr	s11, [r0, #8]
 8018ae6:	edd5 4a01 	vldr	s9, [r5, #4]
 8018aea:	edc0 4a05 	vstr	s9, [r0, #20]
 8018aee:	ed95 5a02 	vldr	s10, [r5, #8]
 8018af2:	ed80 5a08 	vstr	s10, [r0, #32]
 8018af6:	ed94 4a02 	vldr	s8, [r4, #8]
 8018afa:	edd4 3a01 	vldr	s7, [r4, #4]
 8018afe:	ed94 6a00 	vldr	s12, [r4]
 8018b02:	ee64 6ac4 	vnmul.f32	s13, s9, s8
 8018b06:	ee65 7ae3 	vnmul.f32	s15, s11, s7
 8018b0a:	eee3 6a85 	vfma.f32	s13, s7, s10
 8018b0e:	4603      	mov	r3, r0
 8018b10:	eee6 7a24 	vfma.f32	s15, s12, s9
 8018b14:	ee25 7a46 	vnmul.f32	s14, s10, s12
 8018b18:	eeb0 6ae6 	vabs.f32	s12, s13
 8018b1c:	eeb4 6ac3 	vcmpe.f32	s12, s6
 8018b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b24:	eea4 7a25 	vfma.f32	s14, s8, s11
 8018b28:	bfdc      	itt	le
 8018b2a:	ee86 4a83 	vdivle.f32	s8, s13, s6
 8018b2e:	eeb0 6a43 	vmovle.f32	s12, s6
 8018b32:	eef0 3ac7 	vabs.f32	s7, s14
 8018b36:	eef4 3ac6 	vcmpe.f32	s7, s12
 8018b3a:	bfd4      	ite	le
 8018b3c:	ee24 4a04 	vmulle.f32	s8, s8, s8
 8018b40:	eeb7 4a00 	vmovgt.f32	s8, #112	@ 0x3f800000  1.0
 8018b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b48:	ed80 7a03 	vstr	s14, [r0, #12]
 8018b4c:	edc0 7a06 	vstr	s15, [r0, #24]
 8018b50:	dc3f      	bgt.n	8018bd2 <getRotationMatrix+0x10a>
 8018b52:	eec7 3a06 	vdiv.f32	s7, s14, s12
 8018b56:	eea3 4aa3 	vfma.f32	s8, s7, s7
 8018b5a:	eeb0 3a44 	vmov.f32	s6, s8
 8018b5e:	eeb0 4ae7 	vabs.f32	s8, s15
 8018b62:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8018b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b6a:	d543      	bpl.n	8018bf4 <getRotationMatrix+0x12c>
 8018b6c:	eec6 2a04 	vdiv.f32	s5, s12, s8
 8018b70:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8018b74:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8018b78:	eeb0 6a44 	vmov.f32	s12, s8
 8018b7c:	eee3 3a22 	vfma.f32	s7, s6, s5
 8018b80:	eeb1 4ae3 	vsqrt.f32	s8, s7
 8018b84:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8018b88:	ee24 4a06 	vmul.f32	s8, s8, s12
 8018b8c:	ee83 6a84 	vdiv.f32	s12, s7, s8
 8018b90:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018b94:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018b98:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018b9c:	ee65 3a47 	vnmul.f32	s7, s10, s14
 8018ba0:	ee25 4ae7 	vnmul.f32	s8, s11, s15
 8018ba4:	ee24 6ae6 	vnmul.f32	s12, s9, s13
 8018ba8:	eee7 3aa4 	vfma.f32	s7, s15, s9
 8018bac:	eef0 4a44 	vmov.f32	s9, s8
 8018bb0:	eee6 4a85 	vfma.f32	s9, s13, s10
 8018bb4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8018bb8:	edc3 6a00 	vstr	s13, [r3]
 8018bbc:	ed83 7a03 	vstr	s14, [r3, #12]
 8018bc0:	edc3 7a06 	vstr	s15, [r3, #24]
 8018bc4:	edc3 3a01 	vstr	s7, [r3, #4]
 8018bc8:	edc3 4a04 	vstr	s9, [r3, #16]
 8018bcc:	ed83 6a07 	vstr	s12, [r3, #28]
 8018bd0:	bd38      	pop	{r3, r4, r5, pc}
 8018bd2:	eec6 2a23 	vdiv.f32	s5, s12, s7
 8018bd6:	eeb7 3a00 	vmov.f32	s6, #112	@ 0x3f800000  1.0
 8018bda:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8018bde:	eeb0 6a63 	vmov.f32	s12, s7
 8018be2:	eea2 3a84 	vfma.f32	s6, s5, s8
 8018be6:	eeb0 4ae7 	vabs.f32	s8, s15
 8018bea:	eeb4 6ac4 	vcmpe.f32	s12, s8
 8018bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bf2:	d4bb      	bmi.n	8018b6c <getRotationMatrix+0xa4>
 8018bf4:	ee87 4a86 	vdiv.f32	s8, s15, s12
 8018bf8:	eef0 3a43 	vmov.f32	s7, s6
 8018bfc:	eee4 3a04 	vfma.f32	s7, s8, s8
 8018c00:	e7be      	b.n	8018b80 <getRotationMatrix+0xb8>
 8018c02:	bf00      	nop
 8018c04:	00000000 	.word	0x00000000

08018c08 <kf_update>:
 8018c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c0c:	ed2d 8b10 	vpush	{d8-d15}
 8018c10:	f2ad 4d2c 	subw	sp, sp, #1068	@ 0x42c
 8018c14:	461e      	mov	r6, r3
 8018c16:	f8dd 4490 	ldr.w	r4, [sp, #1168]	@ 0x490
 8018c1a:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8018cc4 <kf_update+0xbc>
 8018c1e:	ed94 2a00 	vldr	s4, [r4]
 8018c22:	edd4 2a01 	vldr	s5, [r4, #4]
 8018c26:	ed94 3a02 	vldr	s6, [r4, #8]
 8018c2a:	edd4 3a03 	vldr	s7, [r4, #12]
 8018c2e:	ed94 4a04 	vldr	s8, [r4, #16]
 8018c32:	edd4 4a05 	vldr	s9, [r4, #20]
 8018c36:	ed94 5a06 	vldr	s10, [r4, #24]
 8018c3a:	edd4 5a07 	vldr	s11, [r4, #28]
 8018c3e:	ed94 6a08 	vldr	s12, [r4, #32]
 8018c42:	edd4 6a09 	vldr	s13, [r4, #36]	@ 0x24
 8018c46:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8018c4a:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8018c4e:	9201      	str	r2, [sp, #4]
 8018c50:	ab0b      	add	r3, sp, #44	@ 0x2c
 8018c52:	ee22 2a02 	vmul.f32	s4, s4, s4
 8018c56:	ee62 2aa2 	vmul.f32	s5, s5, s5
 8018c5a:	ee23 3a03 	vmul.f32	s6, s6, s6
 8018c5e:	ee63 3aa3 	vmul.f32	s7, s7, s7
 8018c62:	ee24 4a04 	vmul.f32	s8, s8, s8
 8018c66:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8018c6a:	ee25 5a05 	vmul.f32	s10, s10, s10
 8018c6e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8018c72:	ee26 6a06 	vmul.f32	s12, s12, s12
 8018c76:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8018c7a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8018c7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018c82:	3901      	subs	r1, #1
 8018c84:	9303      	str	r3, [sp, #12]
 8018c86:	2300      	movs	r3, #0
 8018c88:	4604      	mov	r4, r0
 8018c8a:	9104      	str	r1, [sp, #16]
 8018c8c:	ed8d 2a0b 	vstr	s4, [sp, #44]	@ 0x2c
 8018c90:	edcd 2a0c 	vstr	s5, [sp, #48]	@ 0x30
 8018c94:	ed8d 3a0d 	vstr	s6, [sp, #52]	@ 0x34
 8018c98:	edcd 3a0e 	vstr	s7, [sp, #56]	@ 0x38
 8018c9c:	ed8d 4a0f 	vstr	s8, [sp, #60]	@ 0x3c
 8018ca0:	edcd 4a10 	vstr	s9, [sp, #64]	@ 0x40
 8018ca4:	ed8d 5a11 	vstr	s10, [sp, #68]	@ 0x44
 8018ca8:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8018cac:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8018cb0:	edcd 6a14 	vstr	s13, [sp, #80]	@ 0x50
 8018cb4:	ed8d 7a15 	vstr	s14, [sp, #84]	@ 0x54
 8018cb8:	edcd 7a16 	vstr	s15, [sp, #88]	@ 0x58
 8018cbc:	9302      	str	r3, [sp, #8]
 8018cbe:	4637      	mov	r7, r6
 8018cc0:	e010      	b.n	8018ce4 <kf_update+0xdc>
 8018cc2:	bf00      	nop
 8018cc4:	00000000 	.word	0x00000000
 8018cc8:	9a01      	ldr	r2, [sp, #4]
 8018cca:	9b02      	ldr	r3, [sp, #8]
 8018ccc:	3204      	adds	r2, #4
 8018cce:	9201      	str	r2, [sp, #4]
 8018cd0:	9a03      	ldr	r2, [sp, #12]
 8018cd2:	3301      	adds	r3, #1
 8018cd4:	3204      	adds	r2, #4
 8018cd6:	2b0c      	cmp	r3, #12
 8018cd8:	9302      	str	r3, [sp, #8]
 8018cda:	9203      	str	r2, [sp, #12]
 8018cdc:	f107 0704 	add.w	r7, r7, #4
 8018ce0:	f000 85de 	beq.w	80198a0 <kf_update+0xc98>
 8018ce4:	9a04      	ldr	r2, [sp, #16]
 8018ce6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018cea:	9204      	str	r2, [sp, #16]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d0eb      	beq.n	8018cc8 <kf_update+0xc0>
 8018cf0:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018cf4:	ad17      	add	r5, sp, #92	@ 0x5c
 8018cf6:	edd7 da00 	vldr	s27, [r7]
 8018cfa:	ed97 ea0c 	vldr	s28, [r7, #48]	@ 0x30
 8018cfe:	edd7 ea18 	vldr	s29, [r7, #96]	@ 0x60
 8018d02:	ed97 fa24 	vldr	s30, [r7, #144]	@ 0x90
 8018d06:	edd7 fa30 	vldr	s31, [r7, #192]	@ 0xc0
 8018d0a:	edd7 6a3c 	vldr	s13, [r7, #240]	@ 0xf0
 8018d0e:	ed97 6a48 	vldr	s12, [r7, #288]	@ 0x120
 8018d12:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 8018d16:	ed97 5a60 	vldr	s10, [r7, #384]	@ 0x180
 8018d1a:	9307      	str	r3, [sp, #28]
 8018d1c:	ed8d 8a17 	vstr	s16, [sp, #92]	@ 0x5c
 8018d20:	ed8d 8a18 	vstr	s16, [sp, #96]	@ 0x60
 8018d24:	ed8d 8a19 	vstr	s16, [sp, #100]	@ 0x64
 8018d28:	ed8d 8a1a 	vstr	s16, [sp, #104]	@ 0x68
 8018d2c:	ed8d 8a1b 	vstr	s16, [sp, #108]	@ 0x6c
 8018d30:	ed8d 8a1c 	vstr	s16, [sp, #112]	@ 0x70
 8018d34:	ed8d 8a1d 	vstr	s16, [sp, #116]	@ 0x74
 8018d38:	ed8d 8a1e 	vstr	s16, [sp, #120]	@ 0x78
 8018d3c:	ed8d 8a1f 	vstr	s16, [sp, #124]	@ 0x7c
 8018d40:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8018d44:	462a      	mov	r2, r5
 8018d46:	ecb3 7a01 	vldmia	r3!, {s14}
 8018d4a:	ecf2 7a01 	vldmia	r2!, {s15}
 8018d4e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d56:	d006      	beq.n	8018d66 <kf_update+0x15e>
 8018d58:	eef5 da40 	vcmp.f32	s27, #0.0
 8018d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d60:	bf18      	it	ne
 8018d62:	eee7 7a2d 	vfmane.f32	s15, s14, s27
 8018d66:	ed93 7a08 	vldr	s14, [r3, #32]
 8018d6a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d72:	d006      	beq.n	8018d82 <kf_update+0x17a>
 8018d74:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8018d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d7c:	bf18      	it	ne
 8018d7e:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8018d82:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8018d86:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8e:	d006      	beq.n	8018d9e <kf_update+0x196>
 8018d90:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d98:	bf18      	it	ne
 8018d9a:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8018d9e:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 8018da2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018daa:	d006      	beq.n	8018dba <kf_update+0x1b2>
 8018dac:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8018db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018db4:	bf18      	it	ne
 8018db6:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8018dba:	ed93 7a23 	vldr	s14, [r3, #140]	@ 0x8c
 8018dbe:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dc6:	d006      	beq.n	8018dd6 <kf_update+0x1ce>
 8018dc8:	eef5 fa40 	vcmp.f32	s31, #0.0
 8018dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd0:	bf18      	it	ne
 8018dd2:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8018dd6:	ed93 7a2c 	vldr	s14, [r3, #176]	@ 0xb0
 8018dda:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018de2:	d006      	beq.n	8018df2 <kf_update+0x1ea>
 8018de4:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dec:	bf18      	it	ne
 8018dee:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8018df2:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8018df6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dfe:	d006      	beq.n	8018e0e <kf_update+0x206>
 8018e00:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e08:	bf18      	it	ne
 8018e0a:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8018e0e:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 8018e12:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e1a:	d006      	beq.n	8018e2a <kf_update+0x222>
 8018e1c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8018e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e24:	bf18      	it	ne
 8018e26:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8018e2a:	ed93 7a47 	vldr	s14, [r3, #284]	@ 0x11c
 8018e2e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e36:	d006      	beq.n	8018e46 <kf_update+0x23e>
 8018e38:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8018e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e40:	bf18      	it	ne
 8018e42:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8018e46:	4299      	cmp	r1, r3
 8018e48:	ed42 7a01 	vstr	s15, [r2, #-4]
 8018e4c:	f47f af7b 	bne.w	8018d46 <kf_update+0x13e>
 8018e50:	eef5 da40 	vcmp.f32	s27, #0.0
 8018e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e58:	eddd ba17 	vldr	s23, [sp, #92]	@ 0x5c
 8018e5c:	f000 84f8 	beq.w	8019850 <kf_update+0xc48>
 8018e60:	eef5 ba40 	vcmp.f32	s23, #0.0
 8018e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e68:	f000 8520 	beq.w	80198ac <kf_update+0xca4>
 8018e6c:	ee6b 7aad 	vmul.f32	s15, s23, s27
 8018e70:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8018e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e78:	ed9d ca18 	vldr	s24, [sp, #96]	@ 0x60
 8018e7c:	d006      	beq.n	8018e8c <kf_update+0x284>
 8018e7e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8018e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e86:	bf18      	it	ne
 8018e88:	eeec 7a0e 	vfmane.f32	s15, s24, s28
 8018e8c:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e94:	ed9d aa19 	vldr	s20, [sp, #100]	@ 0x64
 8018e98:	d006      	beq.n	8018ea8 <kf_update+0x2a0>
 8018e9a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8018e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ea2:	bf18      	it	ne
 8018ea4:	eeea 7a2e 	vfmane.f32	s15, s20, s29
 8018ea8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8018eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eb0:	ed9d da1a 	vldr	s26, [sp, #104]	@ 0x68
 8018eb4:	d006      	beq.n	8018ec4 <kf_update+0x2bc>
 8018eb6:	eeb5 da40 	vcmp.f32	s26, #0.0
 8018eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ebe:	bf18      	it	ne
 8018ec0:	eeed 7a0f 	vfmane.f32	s15, s26, s30
 8018ec4:	eef5 fa40 	vcmp.f32	s31, #0.0
 8018ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ecc:	eddd ca1b 	vldr	s25, [sp, #108]	@ 0x6c
 8018ed0:	d006      	beq.n	8018ee0 <kf_update+0x2d8>
 8018ed2:	eef5 ca40 	vcmp.f32	s25, #0.0
 8018ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018eda:	bf18      	it	ne
 8018edc:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8018ee0:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ee8:	eddd aa1c 	vldr	s21, [sp, #112]	@ 0x70
 8018eec:	d006      	beq.n	8018efc <kf_update+0x2f4>
 8018eee:	eef5 aa40 	vcmp.f32	s21, #0.0
 8018ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ef6:	bf18      	it	ne
 8018ef8:	eeea 7aa6 	vfmane.f32	s15, s21, s13
 8018efc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8018f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f04:	ed9d ba1d 	vldr	s22, [sp, #116]	@ 0x74
 8018f08:	d006      	beq.n	8018f18 <kf_update+0x310>
 8018f0a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8018f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f12:	bf18      	it	ne
 8018f14:	eeeb 7a06 	vfmane.f32	s15, s22, s12
 8018f18:	eef5 5a40 	vcmp.f32	s11, #0.0
 8018f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f20:	eddd 9a1e 	vldr	s19, [sp, #120]	@ 0x78
 8018f24:	d006      	beq.n	8018f34 <kf_update+0x32c>
 8018f26:	eef5 9a40 	vcmp.f32	s19, #0.0
 8018f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f2e:	bf18      	it	ne
 8018f30:	eee9 7aa5 	vfmane.f32	s15, s19, s11
 8018f34:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8018f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f3c:	ed9d 7a1f 	vldr	s14, [sp, #124]	@ 0x7c
 8018f40:	d006      	beq.n	8018f50 <kf_update+0x348>
 8018f42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f4a:	bf18      	it	ne
 8018f4c:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8018f50:	9b03      	ldr	r3, [sp, #12]
 8018f52:	ed93 4a00 	vldr	s8, [r3]
 8018f56:	9b02      	ldr	r3, [sp, #8]
 8018f58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018f5c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8018f60:	ee84 9aa7 	vdiv.f32	s18, s9, s15
 8018f64:	2b05      	cmp	r3, #5
 8018f66:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8018f6a:	ee29 ca0c 	vmul.f32	s24, s18, s24
 8018f6e:	ee29 aa0a 	vmul.f32	s20, s18, s20
 8018f72:	ee29 da0d 	vmul.f32	s26, s18, s26
 8018f76:	ee69 ca2c 	vmul.f32	s25, s18, s25
 8018f7a:	ee69 aa2a 	vmul.f32	s21, s18, s21
 8018f7e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8018f82:	ee69 9a29 	vmul.f32	s19, s18, s19
 8018f86:	ee29 9a07 	vmul.f32	s18, s18, s14
 8018f8a:	edcd ba17 	vstr	s23, [sp, #92]	@ 0x5c
 8018f8e:	ed8d ca18 	vstr	s24, [sp, #96]	@ 0x60
 8018f92:	ed8d aa19 	vstr	s20, [sp, #100]	@ 0x64
 8018f96:	ed8d da1a 	vstr	s26, [sp, #104]	@ 0x68
 8018f9a:	edcd ca1b 	vstr	s25, [sp, #108]	@ 0x6c
 8018f9e:	edcd aa1c 	vstr	s21, [sp, #112]	@ 0x70
 8018fa2:	ed8d ba1d 	vstr	s22, [sp, #116]	@ 0x74
 8018fa6:	edcd 9a1e 	vstr	s19, [sp, #120]	@ 0x78
 8018faa:	ed8d 9a1f 	vstr	s18, [sp, #124]	@ 0x7c
 8018fae:	f340 844b 	ble.w	8019848 <kf_update+0xc40>
 8018fb2:	eef5 da40 	vcmp.f32	s27, #0.0
 8018fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fba:	f000 847b 	beq.w	80198b4 <kf_update+0xcac>
 8018fbe:	edd4 7a01 	vldr	s15, [r4, #4]
 8018fc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fca:	f040 84d6 	bne.w	801997a <kf_update+0xd72>
 8018fce:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8018fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fd6:	d008      	beq.n	8018fea <kf_update+0x3e2>
 8018fd8:	ed94 7a02 	vldr	s14, [r4, #8]
 8018fdc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe4:	bf18      	it	ne
 8018fe6:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8018fea:	eef5 ea40 	vcmp.f32	s29, #0.0
 8018fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ff2:	d008      	beq.n	8019006 <kf_update+0x3fe>
 8018ff4:	ed94 7a03 	vldr	s14, [r4, #12]
 8018ff8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019000:	bf18      	it	ne
 8019002:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8019006:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801900a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801900e:	d008      	beq.n	8019022 <kf_update+0x41a>
 8019010:	ed94 7a04 	vldr	s14, [r4, #16]
 8019014:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801901c:	bf18      	it	ne
 801901e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8019022:	eef5 fa40 	vcmp.f32	s31, #0.0
 8019026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801902a:	d008      	beq.n	801903e <kf_update+0x436>
 801902c:	ed94 7a05 	vldr	s14, [r4, #20]
 8019030:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019038:	bf18      	it	ne
 801903a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 801903e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8019042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019046:	d008      	beq.n	801905a <kf_update+0x452>
 8019048:	ed94 7a06 	vldr	s14, [r4, #24]
 801904c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019054:	bf18      	it	ne
 8019056:	eee7 7a26 	vfmane.f32	s15, s14, s13
 801905a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 801905e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019062:	d008      	beq.n	8019076 <kf_update+0x46e>
 8019064:	ed94 7a07 	vldr	s14, [r4, #28]
 8019068:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019070:	bf18      	it	ne
 8019072:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8019076:	eef5 5a40 	vcmp.f32	s11, #0.0
 801907a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801907e:	d008      	beq.n	8019092 <kf_update+0x48a>
 8019080:	ed94 7a08 	vldr	s14, [r4, #32]
 8019084:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801908c:	bf18      	it	ne
 801908e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8019092:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8019096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801909a:	d008      	beq.n	80190ae <kf_update+0x4a6>
 801909c:	ed94 7a09 	vldr	s14, [r4, #36]	@ 0x24
 80190a0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80190a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a8:	bf18      	it	ne
 80190aa:	eee7 7a05 	vfmane.f32	s15, s14, s10
 80190ae:	9b01      	ldr	r3, [sp, #4]
 80190b0:	edd3 8a00 	vldr	s17, [r3]
 80190b4:	ee78 8ae7 	vsub.f32	s17, s17, s15
 80190b8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80190bc:	2100      	movs	r1, #0
 80190be:	a868      	add	r0, sp, #416	@ 0x1a0
 80190c0:	ed8d 5a09 	vstr	s10, [sp, #36]	@ 0x24
 80190c4:	edcd 5a08 	vstr	s11, [sp, #32]
 80190c8:	ed8d 6a06 	vstr	s12, [sp, #24]
 80190cc:	edcd 6a05 	vstr	s13, [sp, #20]
 80190d0:	f00b fe83 	bl	8024dda <memset>
 80190d4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80190d6:	ed9d 5a09 	vldr	s10, [sp, #36]	@ 0x24
 80190da:	eddd 5a08 	vldr	s11, [sp, #32]
 80190de:	ed9d 6a06 	vldr	s12, [sp, #24]
 80190e2:	eddd 6a05 	vldr	s13, [sp, #20]
 80190e6:	a971      	add	r1, sp, #452	@ 0x1c4
 80190e8:	461a      	mov	r2, r3
 80190ea:	ecf5 7a01 	vldmia	r5!, {s15}
 80190ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 80190f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190f6:	d062      	beq.n	80191be <kf_update+0x5b6>
 80190f8:	eef5 da40 	vcmp.f32	s27, #0.0
 80190fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019100:	d005      	beq.n	801910e <kf_update+0x506>
 8019102:	ed92 7a00 	vldr	s14, [r2]
 8019106:	eea7 7aad 	vfma.f32	s14, s15, s27
 801910a:	ed82 7a00 	vstr	s14, [r2]
 801910e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8019112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019116:	d005      	beq.n	8019124 <kf_update+0x51c>
 8019118:	ed92 7a09 	vldr	s14, [r2, #36]	@ 0x24
 801911c:	eea7 7a8e 	vfma.f32	s14, s15, s28
 8019120:	ed82 7a09 	vstr	s14, [r2, #36]	@ 0x24
 8019124:	eef5 ea40 	vcmp.f32	s29, #0.0
 8019128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801912c:	d005      	beq.n	801913a <kf_update+0x532>
 801912e:	ed92 7a12 	vldr	s14, [r2, #72]	@ 0x48
 8019132:	eea7 7aae 	vfma.f32	s14, s15, s29
 8019136:	ed82 7a12 	vstr	s14, [r2, #72]	@ 0x48
 801913a:	eeb5 fa40 	vcmp.f32	s30, #0.0
 801913e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019142:	d005      	beq.n	8019150 <kf_update+0x548>
 8019144:	ed92 7a1b 	vldr	s14, [r2, #108]	@ 0x6c
 8019148:	eea7 7a8f 	vfma.f32	s14, s15, s30
 801914c:	ed82 7a1b 	vstr	s14, [r2, #108]	@ 0x6c
 8019150:	eef5 fa40 	vcmp.f32	s31, #0.0
 8019154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019158:	d005      	beq.n	8019166 <kf_update+0x55e>
 801915a:	ed92 7a24 	vldr	s14, [r2, #144]	@ 0x90
 801915e:	eea7 7aaf 	vfma.f32	s14, s15, s31
 8019162:	ed82 7a24 	vstr	s14, [r2, #144]	@ 0x90
 8019166:	eef5 6a40 	vcmp.f32	s13, #0.0
 801916a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801916e:	d005      	beq.n	801917c <kf_update+0x574>
 8019170:	ed92 7a2d 	vldr	s14, [r2, #180]	@ 0xb4
 8019174:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019178:	ed82 7a2d 	vstr	s14, [r2, #180]	@ 0xb4
 801917c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8019180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019184:	d005      	beq.n	8019192 <kf_update+0x58a>
 8019186:	ed92 7a36 	vldr	s14, [r2, #216]	@ 0xd8
 801918a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801918e:	ed82 7a36 	vstr	s14, [r2, #216]	@ 0xd8
 8019192:	eef5 5a40 	vcmp.f32	s11, #0.0
 8019196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801919a:	d005      	beq.n	80191a8 <kf_update+0x5a0>
 801919c:	ed92 7a3f 	vldr	s14, [r2, #252]	@ 0xfc
 80191a0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80191a4:	ed82 7a3f 	vstr	s14, [r2, #252]	@ 0xfc
 80191a8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80191ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191b0:	d005      	beq.n	80191be <kf_update+0x5b6>
 80191b2:	ed92 7a48 	vldr	s14, [r2, #288]	@ 0x120
 80191b6:	eea7 7a85 	vfma.f32	s14, s15, s10
 80191ba:	ed82 7a48 	vstr	s14, [r2, #288]	@ 0x120
 80191be:	3204      	adds	r2, #4
 80191c0:	428a      	cmp	r2, r1
 80191c2:	d192      	bne.n	80190ea <kf_update+0x4e2>
 80191c4:	adb9      	add	r5, sp, #740	@ 0x2e4
 80191c6:	e9cd 5305 	strd	r5, r3, [sp, #20]
 80191ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80191ce:	a968      	add	r1, sp, #416	@ 0x1a0
 80191d0:	462a      	mov	r2, r5
 80191d2:	f04f 0b06 	mov.w	fp, #6
 80191d6:	f04f 0a03 	mov.w	sl, #3
 80191da:	f04f 0902 	mov.w	r9, #2
 80191de:	f04f 0804 	mov.w	r8, #4
 80191e2:	f04f 0e05 	mov.w	lr, #5
 80191e6:	f04f 0c07 	mov.w	ip, #7
 80191ea:	2608      	movs	r6, #8
 80191ec:	2000      	movs	r0, #0
 80191ee:	ed82 8a00 	vstr	s16, [r2]
 80191f2:	2800      	cmp	r0, #0
 80191f4:	f000 8198 	beq.w	8019528 <kf_update+0x920>
 80191f8:	edd1 7a00 	vldr	s15, [r1]
 80191fc:	ed82 8a01 	vstr	s16, [r2, #4]
 8019200:	eef1 7a67 	vneg.f32	s15, s15
 8019204:	2801      	cmp	r0, #1
 8019206:	edc1 7a00 	vstr	s15, [r1]
 801920a:	f000 8255 	beq.w	80196b8 <kf_update+0xab0>
 801920e:	edd1 7a01 	vldr	s15, [r1, #4]
 8019212:	ed82 8a02 	vstr	s16, [r2, #8]
 8019216:	eef1 7a67 	vneg.f32	s15, s15
 801921a:	2802      	cmp	r0, #2
 801921c:	edc1 7a01 	vstr	s15, [r1, #4]
 8019220:	f000 81f2 	beq.w	8019608 <kf_update+0xa00>
 8019224:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019226:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801922a:	edd5 7a00 	vldr	s15, [r5]
 801922e:	ed82 8a03 	vstr	s16, [r2, #12]
 8019232:	eef1 7a67 	vneg.f32	s15, s15
 8019236:	2803      	cmp	r0, #3
 8019238:	edc5 7a00 	vstr	s15, [r5]
 801923c:	f040 8280 	bne.w	8019740 <kf_update+0xb38>
 8019240:	edd1 7a03 	vldr	s15, [r1, #12]
 8019244:	ed8d 8ad8 	vstr	s16, [sp, #864]	@ 0x360
 8019248:	ee77 7a67 	vsub.f32	s15, s14, s15
 801924c:	ab68      	add	r3, sp, #416	@ 0x1a0
 801924e:	edc1 7a03 	vstr	s15, [r1, #12]
 8019252:	eddd 7a87 	vldr	s15, [sp, #540]	@ 0x21c
 8019256:	ed82 8a05 	vstr	s16, [r2, #20]
 801925a:	eef1 7a67 	vneg.f32	s15, s15
 801925e:	edcd 7a87 	vstr	s15, [sp, #540]	@ 0x21c
 8019262:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8019266:	edd5 7a00 	vldr	s15, [r5]
 801926a:	ed82 8a06 	vstr	s16, [r2, #24]
 801926e:	eef1 7a67 	vneg.f32	s15, s15
 8019272:	edc5 7a00 	vstr	s15, [r5]
 8019276:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 801927a:	edd5 7a00 	vldr	s15, [r5]
 801927e:	ed82 8a07 	vstr	s16, [r2, #28]
 8019282:	eef1 7a67 	vneg.f32	s15, s15
 8019286:	edc5 7a00 	vstr	s15, [r5]
 801928a:	ab68      	add	r3, sp, #416	@ 0x1a0
 801928c:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 8019290:	edd5 7a00 	vldr	s15, [r5]
 8019294:	ed82 8a08 	vstr	s16, [r2, #32]
 8019298:	eef1 7a67 	vneg.f32	s15, s15
 801929c:	2808      	cmp	r0, #8
 801929e:	edc5 7a00 	vstr	s15, [r5]
 80192a2:	f040 818f 	bne.w	80195c4 <kf_update+0x9bc>
 80192a6:	aa68      	add	r2, sp, #416	@ 0x1a0
 80192a8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80192ac:	ed92 7a00 	vldr	s14, [r2]
 80192b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80192b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80192b8:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 80192bc:	edc2 7a00 	vstr	s15, [r2]
 80192c0:	2600      	movs	r6, #0
 80192c2:	f504 70a2 	add.w	r0, r4, #324	@ 0x144
 80192c6:	ecf3 3a01 	vldmia	r3!, {s7}
 80192ca:	ed93 4a08 	vldr	s8, [r3, #32]
 80192ce:	edd3 4a11 	vldr	s9, [r3, #68]	@ 0x44
 80192d2:	ed93 5a1a 	vldr	s10, [r3, #104]	@ 0x68
 80192d6:	edd3 5a23 	vldr	s11, [r3, #140]	@ 0x8c
 80192da:	ed93 6a2c 	vldr	s12, [r3, #176]	@ 0xb0
 80192de:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 80192e2:	ed93 7a3e 	vldr	s14, [r3, #248]	@ 0xf8
 80192e6:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 80192ea:	4629      	mov	r1, r5
 80192ec:	4622      	mov	r2, r4
 80192ee:	eef5 3a40 	vcmp.f32	s7, #0.0
 80192f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192f6:	d00c      	beq.n	8019312 <kf_update+0x70a>
 80192f8:	ed92 3a0a 	vldr	s6, [r2, #40]	@ 0x28
 80192fc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	d005      	beq.n	8019312 <kf_update+0x70a>
 8019306:	edd1 2a00 	vldr	s5, [r1]
 801930a:	eee3 2a83 	vfma.f32	s5, s7, s6
 801930e:	edc1 2a00 	vstr	s5, [r1]
 8019312:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8019316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931a:	d00c      	beq.n	8019336 <kf_update+0x72e>
 801931c:	ed92 3a0b 	vldr	s6, [r2, #44]	@ 0x2c
 8019320:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8019324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019328:	d005      	beq.n	8019336 <kf_update+0x72e>
 801932a:	edd1 2a00 	vldr	s5, [r1]
 801932e:	eee4 2a03 	vfma.f32	s5, s8, s6
 8019332:	edc1 2a00 	vstr	s5, [r1]
 8019336:	eef5 4a40 	vcmp.f32	s9, #0.0
 801933a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801933e:	d00c      	beq.n	801935a <kf_update+0x752>
 8019340:	ed92 3a0c 	vldr	s6, [r2, #48]	@ 0x30
 8019344:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8019348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934c:	d005      	beq.n	801935a <kf_update+0x752>
 801934e:	edd1 2a00 	vldr	s5, [r1]
 8019352:	eee4 2a83 	vfma.f32	s5, s9, s6
 8019356:	edc1 2a00 	vstr	s5, [r1]
 801935a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 801935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019362:	d00c      	beq.n	801937e <kf_update+0x776>
 8019364:	ed92 3a0d 	vldr	s6, [r2, #52]	@ 0x34
 8019368:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019370:	d005      	beq.n	801937e <kf_update+0x776>
 8019372:	edd1 2a00 	vldr	s5, [r1]
 8019376:	eee5 2a03 	vfma.f32	s5, s10, s6
 801937a:	edc1 2a00 	vstr	s5, [r1]
 801937e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8019382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019386:	d00c      	beq.n	80193a2 <kf_update+0x79a>
 8019388:	ed92 3a0e 	vldr	s6, [r2, #56]	@ 0x38
 801938c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8019390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019394:	d005      	beq.n	80193a2 <kf_update+0x79a>
 8019396:	edd1 2a00 	vldr	s5, [r1]
 801939a:	eee5 2a83 	vfma.f32	s5, s11, s6
 801939e:	edc1 2a00 	vstr	s5, [r1]
 80193a2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80193a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193aa:	d00c      	beq.n	80193c6 <kf_update+0x7be>
 80193ac:	ed92 3a0f 	vldr	s6, [r2, #60]	@ 0x3c
 80193b0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80193b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193b8:	d005      	beq.n	80193c6 <kf_update+0x7be>
 80193ba:	edd1 2a00 	vldr	s5, [r1]
 80193be:	eee6 2a03 	vfma.f32	s5, s12, s6
 80193c2:	edc1 2a00 	vstr	s5, [r1]
 80193c6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80193ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193ce:	d00c      	beq.n	80193ea <kf_update+0x7e2>
 80193d0:	ed92 3a10 	vldr	s6, [r2, #64]	@ 0x40
 80193d4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80193d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193dc:	d005      	beq.n	80193ea <kf_update+0x7e2>
 80193de:	edd1 2a00 	vldr	s5, [r1]
 80193e2:	eee6 2a83 	vfma.f32	s5, s13, s6
 80193e6:	edc1 2a00 	vstr	s5, [r1]
 80193ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80193ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193f2:	d00c      	beq.n	801940e <kf_update+0x806>
 80193f4:	ed92 3a11 	vldr	s6, [r2, #68]	@ 0x44
 80193f8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 80193fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019400:	d005      	beq.n	801940e <kf_update+0x806>
 8019402:	edd1 2a00 	vldr	s5, [r1]
 8019406:	eee7 2a03 	vfma.f32	s5, s14, s6
 801940a:	edc1 2a00 	vstr	s5, [r1]
 801940e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019416:	d00c      	beq.n	8019432 <kf_update+0x82a>
 8019418:	ed92 3a12 	vldr	s6, [r2, #72]	@ 0x48
 801941c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 8019420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019424:	d005      	beq.n	8019432 <kf_update+0x82a>
 8019426:	edd1 2a00 	vldr	s5, [r1]
 801942a:	eee7 2a83 	vfma.f32	s5, s15, s6
 801942e:	edc1 2a00 	vstr	s5, [r1]
 8019432:	3224      	adds	r2, #36	@ 0x24
 8019434:	4282      	cmp	r2, r0
 8019436:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 801943a:	f47f af58 	bne.w	80192ee <kf_update+0x6e6>
 801943e:	3601      	adds	r6, #1
 8019440:	2e09      	cmp	r6, #9
 8019442:	f105 0504 	add.w	r5, r5, #4
 8019446:	f47f af3e 	bne.w	80192c6 <kf_update+0x6be>
 801944a:	9807      	ldr	r0, [sp, #28]
 801944c:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8019450:	a9b9      	add	r1, sp, #740	@ 0x2e4
 8019452:	f00b fdec 	bl	802502e <memcpy>
 8019456:	eef5 ba40 	vcmp.f32	s23, #0.0
 801945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801945e:	f000 81a3 	beq.w	80197a8 <kf_update+0xba0>
 8019462:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801946a:	f000 819d 	beq.w	80197a8 <kf_update+0xba0>
 801946e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8019472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019476:	ee68 baab 	vmul.f32	s23, s17, s23
 801947a:	f000 826f 	beq.w	801995c <kf_update+0xd54>
 801947e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8019482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019486:	ee2c ca28 	vmul.f32	s24, s24, s17
 801948a:	f000 8264 	beq.w	8019956 <kf_update+0xd4e>
 801948e:	eeb5 da40 	vcmp.f32	s26, #0.0
 8019492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019496:	ee68 7a8a 	vmul.f32	s15, s17, s20
 801949a:	f000 8257 	beq.w	801994c <kf_update+0xd44>
 801949e:	eef5 ca40 	vcmp.f32	s25, #0.0
 80194a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a6:	ee28 7a8d 	vmul.f32	s14, s17, s26
 80194aa:	eeb0 aa4c 	vmov.f32	s20, s24
 80194ae:	f040 8272 	bne.w	8019996 <kf_update+0xd8e>
 80194b2:	eef0 ca47 	vmov.f32	s25, s14
 80194b6:	eeb0 da67 	vmov.f32	s26, s15
 80194ba:	eef5 aa40 	vcmp.f32	s21, #0.0
 80194be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c2:	f000 81a8 	beq.w	8019816 <kf_update+0xc0e>
 80194c6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80194ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ce:	f000 8232 	beq.w	8019936 <kf_update+0xd2e>
 80194d2:	eddf 7ae1 	vldr	s15, [pc, #900]	@ 8019858 <kf_update+0xc50>
 80194d6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80194da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194de:	ee28 7aaa 	vmul.f32	s14, s17, s21
 80194e2:	f040 81bb 	bne.w	801985c <kf_update+0xc54>
 80194e6:	eeb0 ba47 	vmov.f32	s22, s14
 80194ea:	eef0 aa67 	vmov.f32	s21, s15
 80194ee:	eef5 9a40 	vcmp.f32	s19, #0.0
 80194f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f6:	f000 81bf 	beq.w	8019878 <kf_update+0xc70>
 80194fa:	eef5 8a40 	vcmp.f32	s17, #0.0
 80194fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019502:	f000 821b 	beq.w	801993c <kf_update+0xd34>
 8019506:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801950e:	eddf 7ad2 	vldr	s15, [pc, #840]	@ 8019858 <kf_update+0xc50>
 8019512:	ee28 7aa9 	vmul.f32	s14, s17, s19
 8019516:	f040 826b 	bne.w	80199f0 <kf_update+0xde8>
 801951a:	eef0 8a49 	vmov.f32	s17, s18
 801951e:	eef0 9a67 	vmov.f32	s19, s15
 8019522:	eeb0 9a47 	vmov.f32	s18, s14
 8019526:	e1cb      	b.n	80198c0 <kf_update+0xcb8>
 8019528:	eddd 7a69 	vldr	s15, [sp, #420]	@ 0x1a4
 801952c:	eddd 6a68 	vldr	s13, [sp, #416]	@ 0x1a0
 8019530:	ed8d 8aba 	vstr	s16, [sp, #744]	@ 0x2e8
 8019534:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019536:	eb03 0589 	add.w	r5, r3, r9, lsl #2
 801953a:	eef1 7a67 	vneg.f32	s15, s15
 801953e:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 8019542:	edd5 7a00 	vldr	s15, [r5]
 8019546:	ed82 8a02 	vstr	s16, [r2, #8]
 801954a:	eef1 7a67 	vneg.f32	s15, s15
 801954e:	edc5 7a00 	vstr	s15, [r5]
 8019552:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8019556:	edd5 7a00 	vldr	s15, [r5]
 801955a:	ed82 8a03 	vstr	s16, [r2, #12]
 801955e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019562:	eef1 7a67 	vneg.f32	s15, s15
 8019566:	edcd 6a68 	vstr	s13, [sp, #416]	@ 0x1a0
 801956a:	ed82 8a04 	vstr	s16, [r2, #16]
 801956e:	edc5 7a00 	vstr	s15, [r5]
 8019572:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019574:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 8019578:	edd5 7a00 	vldr	s15, [r5]
 801957c:	ed82 8a05 	vstr	s16, [r2, #20]
 8019580:	eef1 7a67 	vneg.f32	s15, s15
 8019584:	2805      	cmp	r0, #5
 8019586:	edc5 7a00 	vstr	s15, [r5]
 801958a:	f040 80ba 	bne.w	8019702 <kf_update+0xafa>
 801958e:	edd1 7a05 	vldr	s15, [r1, #20]
 8019592:	ed8d 8aec 	vstr	s16, [sp, #944]	@ 0x3b0
 8019596:	ee77 7a67 	vsub.f32	s15, s14, s15
 801959a:	ab68      	add	r3, sp, #416	@ 0x1a0
 801959c:	edc1 7a05 	vstr	s15, [r1, #20]
 80195a0:	eddd 7a9b 	vldr	s15, [sp, #620]	@ 0x26c
 80195a4:	ed82 8a07 	vstr	s16, [r2, #28]
 80195a8:	eef1 7a67 	vneg.f32	s15, s15
 80195ac:	ed82 8a08 	vstr	s16, [r2, #32]
 80195b0:	edcd 7a9b 	vstr	s15, [sp, #620]	@ 0x26c
 80195b4:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 80195b8:	edd5 7a00 	vldr	s15, [r5]
 80195bc:	eef1 7a67 	vneg.f32	s15, s15
 80195c0:	edc5 7a00 	vstr	s15, [r5]
 80195c4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80195c6:	eb03 0586 	add.w	r5, r3, r6, lsl #2
 80195ca:	edd5 7a00 	vldr	s15, [r5]
 80195ce:	3001      	adds	r0, #1
 80195d0:	eef1 7a67 	vneg.f32	s15, s15
 80195d4:	2809      	cmp	r0, #9
 80195d6:	f102 0224 	add.w	r2, r2, #36	@ 0x24
 80195da:	f10c 0c09 	add.w	ip, ip, #9
 80195de:	f101 0124 	add.w	r1, r1, #36	@ 0x24
 80195e2:	f10e 0e09 	add.w	lr, lr, #9
 80195e6:	f108 0809 	add.w	r8, r8, #9
 80195ea:	f109 0909 	add.w	r9, r9, #9
 80195ee:	f10a 0a09 	add.w	sl, sl, #9
 80195f2:	f10b 0b09 	add.w	fp, fp, #9
 80195f6:	f106 0609 	add.w	r6, r6, #9
 80195fa:	edc5 7a00 	vstr	s15, [r5]
 80195fe:	f47f adf6 	bne.w	80191ee <kf_update+0x5e6>
 8019602:	e9dd 5305 	ldrd	r5, r3, [sp, #20]
 8019606:	e65b      	b.n	80192c0 <kf_update+0x6b8>
 8019608:	edd1 7a02 	vldr	s15, [r1, #8]
 801960c:	ed8d 8ace 	vstr	s16, [sp, #824]	@ 0x338
 8019610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019614:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019616:	edc1 7a02 	vstr	s15, [r1, #8]
 801961a:	eddd 7a7d 	vldr	s15, [sp, #500]	@ 0x1f4
 801961e:	ed82 8a04 	vstr	s16, [r2, #16]
 8019622:	eef1 7a67 	vneg.f32	s15, s15
 8019626:	edcd 7a7d 	vstr	s15, [sp, #500]	@ 0x1f4
 801962a:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 801962e:	edd5 7a00 	vldr	s15, [r5]
 8019632:	ed82 8a05 	vstr	s16, [r2, #20]
 8019636:	eef1 7a67 	vneg.f32	s15, s15
 801963a:	edc5 7a00 	vstr	s15, [r5]
 801963e:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8019642:	edd5 7a00 	vldr	s15, [r5]
 8019646:	ed82 8a06 	vstr	s16, [r2, #24]
 801964a:	eef1 7a67 	vneg.f32	s15, s15
 801964e:	edc5 7a00 	vstr	s15, [r5]
 8019652:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019654:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8019658:	edd5 7a00 	vldr	s15, [r5]
 801965c:	ed82 8a07 	vstr	s16, [r2, #28]
 8019660:	eef1 7a67 	vneg.f32	s15, s15
 8019664:	2807      	cmp	r0, #7
 8019666:	edc5 7a00 	vstr	s15, [r5]
 801966a:	f47f ae0e 	bne.w	801928a <kf_update+0x682>
 801966e:	edd1 7a07 	vldr	s15, [r1, #28]
 8019672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019676:	f50d 6380 	add.w	r3, sp, #1024	@ 0x400
 801967a:	ed83 8a00 	vstr	s16, [r3]
 801967e:	edc1 7a07 	vstr	s15, [r1, #28]
 8019682:	2547      	movs	r5, #71	@ 0x47
 8019684:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019686:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 801968a:	edd5 7a00 	vldr	s15, [r5]
 801968e:	eef1 7a67 	vneg.f32	s15, s15
 8019692:	3001      	adds	r0, #1
 8019694:	edc5 7a00 	vstr	s15, [r5]
 8019698:	3224      	adds	r2, #36	@ 0x24
 801969a:	3609      	adds	r6, #9
 801969c:	f10c 0c09 	add.w	ip, ip, #9
 80196a0:	3124      	adds	r1, #36	@ 0x24
 80196a2:	f10e 0e09 	add.w	lr, lr, #9
 80196a6:	f108 0809 	add.w	r8, r8, #9
 80196aa:	f109 0909 	add.w	r9, r9, #9
 80196ae:	f10a 0a09 	add.w	sl, sl, #9
 80196b2:	f10b 0b09 	add.w	fp, fp, #9
 80196b6:	e59a      	b.n	80191ee <kf_update+0x5e6>
 80196b8:	edd1 7a01 	vldr	s15, [r1, #4]
 80196bc:	ed8d 8ac4 	vstr	s16, [sp, #784]	@ 0x310
 80196c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80196c4:	ab68      	add	r3, sp, #416	@ 0x1a0
 80196c6:	edc1 7a01 	vstr	s15, [r1, #4]
 80196ca:	eddd 7a73 	vldr	s15, [sp, #460]	@ 0x1cc
 80196ce:	ed82 8a03 	vstr	s16, [r2, #12]
 80196d2:	eef1 7a67 	vneg.f32	s15, s15
 80196d6:	edcd 7a73 	vstr	s15, [sp, #460]	@ 0x1cc
 80196da:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 80196de:	edd5 7a00 	vldr	s15, [r5]
 80196e2:	ed82 8a04 	vstr	s16, [r2, #16]
 80196e6:	eef1 7a67 	vneg.f32	s15, s15
 80196ea:	edc5 7a00 	vstr	s15, [r5]
 80196ee:	eb03 0588 	add.w	r5, r3, r8, lsl #2
 80196f2:	edd5 7a00 	vldr	s15, [r5]
 80196f6:	ed82 8a05 	vstr	s16, [r2, #20]
 80196fa:	eef1 7a67 	vneg.f32	s15, s15
 80196fe:	edc5 7a00 	vstr	s15, [r5]
 8019702:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019704:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8019708:	edd5 7a00 	vldr	s15, [r5]
 801970c:	ed82 8a06 	vstr	s16, [r2, #24]
 8019710:	eef1 7a67 	vneg.f32	s15, s15
 8019714:	2806      	cmp	r0, #6
 8019716:	edc5 7a00 	vstr	s15, [r5]
 801971a:	d19a      	bne.n	8019652 <kf_update+0xa4a>
 801971c:	edd1 7a06 	vldr	s15, [r1, #24]
 8019720:	ed8d 8af6 	vstr	s16, [sp, #984]	@ 0x3d8
 8019724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019728:	ed82 8a08 	vstr	s16, [r2, #32]
 801972c:	edc1 7a06 	vstr	s15, [r1, #24]
 8019730:	eddd 7aa5 	vldr	s15, [sp, #660]	@ 0x294
 8019734:	eef1 7a67 	vneg.f32	s15, s15
 8019738:	edcd 7aa5 	vstr	s15, [sp, #660]	@ 0x294
 801973c:	4635      	mov	r5, r6
 801973e:	e7a1      	b.n	8019684 <kf_update+0xa7c>
 8019740:	ab68      	add	r3, sp, #416	@ 0x1a0
 8019742:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 8019746:	edd5 7a00 	vldr	s15, [r5]
 801974a:	ed82 8a04 	vstr	s16, [r2, #16]
 801974e:	eef1 7a67 	vneg.f32	s15, s15
 8019752:	2804      	cmp	r0, #4
 8019754:	edc5 7a00 	vstr	s15, [r5]
 8019758:	f47f af0b 	bne.w	8019572 <kf_update+0x96a>
 801975c:	edd1 7a04 	vldr	s15, [r1, #16]
 8019760:	ed8d 8ae2 	vstr	s16, [sp, #904]	@ 0x388
 8019764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019768:	ab68      	add	r3, sp, #416	@ 0x1a0
 801976a:	edc1 7a04 	vstr	s15, [r1, #16]
 801976e:	eddd 7a91 	vldr	s15, [sp, #580]	@ 0x244
 8019772:	ed82 8a06 	vstr	s16, [r2, #24]
 8019776:	eef1 7a67 	vneg.f32	s15, s15
 801977a:	edcd 7a91 	vstr	s15, [sp, #580]	@ 0x244
 801977e:	eb03 058b 	add.w	r5, r3, fp, lsl #2
 8019782:	edd5 7a00 	vldr	s15, [r5]
 8019786:	ed82 8a07 	vstr	s16, [r2, #28]
 801978a:	eef1 7a67 	vneg.f32	s15, s15
 801978e:	edc5 7a00 	vstr	s15, [r5]
 8019792:	ed82 8a08 	vstr	s16, [r2, #32]
 8019796:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801979a:	edd5 7a00 	vldr	s15, [r5]
 801979e:	eef1 7a67 	vneg.f32	s15, s15
 80197a2:	edc5 7a00 	vstr	s15, [r5]
 80197a6:	e70d      	b.n	80195c4 <kf_update+0x9bc>
 80197a8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80197ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b0:	d005      	beq.n	80197be <kf_update+0xbb6>
 80197b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80197b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ba:	f040 80fa 	bne.w	80199b2 <kf_update+0xdaa>
 80197be:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80197c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197c6:	d068      	beq.n	801989a <kf_update+0xc92>
 80197c8:	eef5 8a40 	vcmp.f32	s17, #0.0
 80197cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d0:	f040 8117 	bne.w	8019a02 <kf_update+0xdfa>
 80197d4:	eeb0 aa68 	vmov.f32	s20, s17
 80197d8:	eef0 ba68 	vmov.f32	s23, s17
 80197dc:	eeb5 da40 	vcmp.f32	s26, #0.0
 80197e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197e4:	d007      	beq.n	80197f6 <kf_update+0xbee>
 80197e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80197ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ee:	f040 80c8 	bne.w	8019982 <kf_update+0xd7a>
 80197f2:	eeb0 da68 	vmov.f32	s26, s17
 80197f6:	eef5 ca40 	vcmp.f32	s25, #0.0
 80197fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197fe:	f43f ae5c 	beq.w	80194ba <kf_update+0x8b2>
 8019802:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801980a:	f040 80f7 	bne.w	80199fc <kf_update+0xdf4>
 801980e:	eef0 aa68 	vmov.f32	s21, s17
 8019812:	eef0 ca68 	vmov.f32	s25, s17
 8019816:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801981a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801981e:	f43f ae66 	beq.w	80194ee <kf_update+0x8e6>
 8019822:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801982a:	f040 80cd 	bne.w	80199c8 <kf_update+0xdc0>
 801982e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8019832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019836:	f000 8086 	beq.w	8019946 <kf_update+0xd3e>
 801983a:	eeb0 9a68 	vmov.f32	s18, s17
 801983e:	eef0 9a68 	vmov.f32	s19, s17
 8019842:	eeb0 ba68 	vmov.f32	s22, s17
 8019846:	e03b      	b.n	80198c0 <kf_update+0xcb8>
 8019848:	9b01      	ldr	r3, [sp, #4]
 801984a:	edd3 8a00 	vldr	s17, [r3]
 801984e:	e433      	b.n	80190b8 <kf_update+0x4b0>
 8019850:	eef0 7a6d 	vmov.f32	s15, s27
 8019854:	f7ff bb0c 	b.w	8018e70 <kf_update+0x268>
 8019858:	00000000 	.word	0x00000000
 801985c:	eef5 9a40 	vcmp.f32	s19, #0.0
 8019860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019864:	eef0 aa67 	vmov.f32	s21, s15
 8019868:	ee68 7a8b 	vmul.f32	s15, s17, s22
 801986c:	f040 80b6 	bne.w	80199dc <kf_update+0xdd4>
 8019870:	eef0 9a67 	vmov.f32	s19, s15
 8019874:	eeb0 ba47 	vmov.f32	s22, s14
 8019878:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019880:	d01c      	beq.n	80198bc <kf_update+0xcb4>
 8019882:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988a:	d051      	beq.n	8019930 <kf_update+0xd28>
 801988c:	ed1f 7a0e 	vldr	s14, [pc, #-56]	@ 8019858 <kf_update+0xc50>
 8019890:	ee68 8a89 	vmul.f32	s17, s17, s18
 8019894:	eeb0 9a47 	vmov.f32	s18, s14
 8019898:	e012      	b.n	80198c0 <kf_update+0xcb8>
 801989a:	eef0 ba4a 	vmov.f32	s23, s20
 801989e:	e79d      	b.n	80197dc <kf_update+0xbd4>
 80198a0:	f20d 4d2c 	addw	sp, sp, #1068	@ 0x42c
 80198a4:	ecbd 8b10 	vpop	{d8-d15}
 80198a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198ac:	eef0 7a6b 	vmov.f32	s15, s23
 80198b0:	f7ff bade 	b.w	8018e70 <kf_update+0x268>
 80198b4:	eef0 7a6d 	vmov.f32	s15, s27
 80198b8:	f7ff bb89 	b.w	8018fce <kf_update+0x3c6>
 80198bc:	eef0 8a49 	vmov.f32	s17, s18
 80198c0:	edd4 3a01 	vldr	s7, [r4, #4]
 80198c4:	ed94 4a02 	vldr	s8, [r4, #8]
 80198c8:	edd4 4a03 	vldr	s9, [r4, #12]
 80198cc:	ed94 5a04 	vldr	s10, [r4, #16]
 80198d0:	edd4 5a05 	vldr	s11, [r4, #20]
 80198d4:	ed94 6a06 	vldr	s12, [r4, #24]
 80198d8:	edd4 6a07 	vldr	s13, [r4, #28]
 80198dc:	ed94 7a08 	vldr	s14, [r4, #32]
 80198e0:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 80198e4:	ee73 3aab 	vadd.f32	s7, s7, s23
 80198e8:	ee34 4a0a 	vadd.f32	s8, s8, s20
 80198ec:	ee74 4a8d 	vadd.f32	s9, s9, s26
 80198f0:	ee35 5a2c 	vadd.f32	s10, s10, s25
 80198f4:	ee75 5aaa 	vadd.f32	s11, s11, s21
 80198f8:	ee36 6a0b 	vadd.f32	s12, s12, s22
 80198fc:	ee76 6aa9 	vadd.f32	s13, s13, s19
 8019900:	ee37 7a09 	vadd.f32	s14, s14, s18
 8019904:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8019908:	edc4 3a01 	vstr	s7, [r4, #4]
 801990c:	ed84 4a02 	vstr	s8, [r4, #8]
 8019910:	edc4 4a03 	vstr	s9, [r4, #12]
 8019914:	ed84 5a04 	vstr	s10, [r4, #16]
 8019918:	edc4 5a05 	vstr	s11, [r4, #20]
 801991c:	ed84 6a06 	vstr	s12, [r4, #24]
 8019920:	edc4 6a07 	vstr	s13, [r4, #28]
 8019924:	ed84 7a08 	vstr	s14, [r4, #32]
 8019928:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 801992c:	f7ff b9cc 	b.w	8018cc8 <kf_update+0xc0>
 8019930:	eeb0 9a68 	vmov.f32	s18, s17
 8019934:	e7c4      	b.n	80198c0 <kf_update+0xcb8>
 8019936:	eef0 aa68 	vmov.f32	s21, s17
 801993a:	e76c      	b.n	8019816 <kf_update+0xc0e>
 801993c:	eeb0 9a68 	vmov.f32	s18, s17
 8019940:	eef0 9a68 	vmov.f32	s19, s17
 8019944:	e7bc      	b.n	80198c0 <kf_update+0xcb8>
 8019946:	eeb0 ba69 	vmov.f32	s22, s19
 801994a:	e795      	b.n	8019878 <kf_update+0xc70>
 801994c:	eeb0 da67 	vmov.f32	s26, s15
 8019950:	eeb0 aa4c 	vmov.f32	s20, s24
 8019954:	e74f      	b.n	80197f6 <kf_update+0xbee>
 8019956:	eeb0 aa4c 	vmov.f32	s20, s24
 801995a:	e73f      	b.n	80197dc <kf_update+0xbd4>
 801995c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8019960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019964:	f43f af3a 	beq.w	80197dc <kf_update+0xbd4>
 8019968:	eeb5 da40 	vcmp.f32	s26, #0.0
 801996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019970:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8019974:	f47f ad93 	bne.w	801949e <kf_update+0x896>
 8019978:	e7e8      	b.n	801994c <kf_update+0xd44>
 801997a:	ee67 7aad 	vmul.f32	s15, s15, s27
 801997e:	f7ff bb26 	b.w	8018fce <kf_update+0x3c6>
 8019982:	eef5 ca40 	vcmp.f32	s25, #0.0
 8019986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801998a:	ed5f 7a4d 	vldr	s15, [pc, #-308]	@ 8019858 <kf_update+0xc50>
 801998e:	ee28 7a8d 	vmul.f32	s14, s17, s26
 8019992:	f43f ad8e 	beq.w	80194b2 <kf_update+0x8aa>
 8019996:	eeb0 da67 	vmov.f32	s26, s15
 801999a:	eef5 aa40 	vcmp.f32	s21, #0.0
 801999e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199a2:	ee68 7aac 	vmul.f32	s15, s17, s25
 80199a6:	d126      	bne.n	80199f6 <kf_update+0xdee>
 80199a8:	eef0 aa67 	vmov.f32	s21, s15
 80199ac:	eef0 ca47 	vmov.f32	s25, s14
 80199b0:	e731      	b.n	8019816 <kf_update+0xc0e>
 80199b2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80199b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ba:	ed5f ba59 	vldr	s23, [pc, #-356]	@ 8019858 <kf_update+0xc50>
 80199be:	ee2c ca28 	vmul.f32	s24, s24, s17
 80199c2:	f47f ad64 	bne.w	801948e <kf_update+0x886>
 80199c6:	e7c6      	b.n	8019956 <kf_update+0xd4e>
 80199c8:	eef5 9a40 	vcmp.f32	s19, #0.0
 80199cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d0:	ed1f 7a5f 	vldr	s14, [pc, #-380]	@ 8019858 <kf_update+0xc50>
 80199d4:	ee68 7a8b 	vmul.f32	s15, s17, s22
 80199d8:	f43f af4a 	beq.w	8019870 <kf_update+0xc68>
 80199dc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80199e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e4:	eeb0 ba47 	vmov.f32	s22, s14
 80199e8:	ee28 7aa9 	vmul.f32	s14, s17, s19
 80199ec:	f43f ad95 	beq.w	801951a <kf_update+0x912>
 80199f0:	eef0 9a67 	vmov.f32	s19, s15
 80199f4:	e74c      	b.n	8019890 <kf_update+0xc88>
 80199f6:	eef0 ca47 	vmov.f32	s25, s14
 80199fa:	e56c      	b.n	80194d6 <kf_update+0x8ce>
 80199fc:	ed1f 7a6a 	vldr	s14, [pc, #-424]	@ 8019858 <kf_update+0xc50>
 8019a00:	e7cb      	b.n	801999a <kf_update+0xd92>
 8019a02:	ed1f ca6b 	vldr	s24, [pc, #-428]	@ 8019858 <kf_update+0xc50>
 8019a06:	eeb5 da40 	vcmp.f32	s26, #0.0
 8019a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a0e:	ee68 7a8a 	vmul.f32	s15, s17, s20
 8019a12:	eef0 ba4c 	vmov.f32	s23, s24
 8019a16:	f47f ad42 	bne.w	801949e <kf_update+0x896>
 8019a1a:	e797      	b.n	801994c <kf_update+0xd44>

08019a1c <q2hpr>:
 8019a1c:	b510      	push	{r4, lr}
 8019a1e:	edd0 7a00 	vldr	s15, [r0]
 8019a22:	edd0 5a01 	vldr	s11, [r0, #4]
 8019a26:	ed90 7a02 	vldr	s14, [r0, #8]
 8019a2a:	ed90 5a03 	vldr	s10, [r0, #12]
 8019a2e:	ee67 0aa7 	vmul.f32	s1, s15, s15
 8019a32:	ee25 6aa5 	vmul.f32	s12, s11, s11
 8019a36:	ee65 6a87 	vmul.f32	s13, s11, s14
 8019a3a:	ee25 0a65 	vnmul.f32	s0, s10, s11
 8019a3e:	ed2d 8b08 	vpush	{d8-d11}
 8019a42:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019a46:	460c      	mov	r4, r1
 8019a48:	eee7 6a85 	vfma.f32	s13, s15, s10
 8019a4c:	ee36 aa06 	vadd.f32	s20, s12, s12
 8019a50:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8019a54:	ee27 6a07 	vmul.f32	s12, s14, s14
 8019a58:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019a5c:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019a60:	ee30 ba8a 	vadd.f32	s22, s1, s20
 8019a64:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 8019a68:	ee76 aa06 	vadd.f32	s21, s12, s12
 8019a6c:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8019a70:	ee77 8a07 	vadd.f32	s17, s14, s14
 8019a74:	ee70 9a00 	vadd.f32	s19, s0, s0
 8019a78:	ee36 9aa6 	vadd.f32	s18, s13, s13
 8019a7c:	ee3b bacb 	vsub.f32	s22, s23, s22
 8019a80:	bb6a      	cbnz	r2, 8019ade <q2hpr+0xc2>
 8019a82:	ee70 0aaa 	vadd.f32	s1, s1, s21
 8019a86:	ee38 0a68 	vsub.f32	s0, s16, s17
 8019a8a:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 8019a8e:	f008 f977 	bl	8021d80 <atan2f>
 8019a92:	eeb0 8a40 	vmov.f32	s16, s0
 8019a96:	eeb0 0a49 	vmov.f32	s0, s18
 8019a9a:	f008 f945 	bl	8021d28 <asinf>
 8019a9e:	eef0 0a4b 	vmov.f32	s1, s22
 8019aa2:	eef0 8a40 	vmov.f32	s17, s0
 8019aa6:	eeb0 0a69 	vmov.f32	s0, s19
 8019aaa:	f008 f969 	bl	8021d80 <atan2f>
 8019aae:	eef1 8a68 	vneg.f32	s17, s17
 8019ab2:	eeb0 9a40 	vmov.f32	s18, s0
 8019ab6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019abe:	ed84 8a00 	vstr	s16, [r4]
 8019ac2:	ed84 9a02 	vstr	s18, [r4, #8]
 8019ac6:	edc4 8a01 	vstr	s17, [r4, #4]
 8019aca:	d505      	bpl.n	8019ad8 <q2hpr+0xbc>
 8019acc:	eddf 7a13 	vldr	s15, [pc, #76]	@ 8019b1c <q2hpr+0x100>
 8019ad0:	ee38 8a27 	vadd.f32	s16, s16, s15
 8019ad4:	ed84 8a00 	vstr	s16, [r4]
 8019ad8:	ecbd 8b08 	vpop	{d8-d11}
 8019adc:	bd10      	pop	{r4, pc}
 8019ade:	eeb0 0a69 	vmov.f32	s0, s19
 8019ae2:	f008 f921 	bl	8021d28 <asinf>
 8019ae6:	eef0 0a4b 	vmov.f32	s1, s22
 8019aea:	eef0 7a40 	vmov.f32	s15, s0
 8019aee:	eeb0 0a49 	vmov.f32	s0, s18
 8019af2:	eeb0 9a67 	vmov.f32	s18, s15
 8019af6:	f008 f943 	bl	8021d80 <atan2f>
 8019afa:	ee7a 0a2a 	vadd.f32	s1, s20, s21
 8019afe:	eeb0 7a40 	vmov.f32	s14, s0
 8019b02:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019b06:	ee7b 0ae0 	vsub.f32	s1, s23, s1
 8019b0a:	eeb1 0a40 	vneg.f32	s0, s0
 8019b0e:	eef1 8a47 	vneg.f32	s17, s14
 8019b12:	f008 f935 	bl	8021d80 <atan2f>
 8019b16:	eeb0 8a40 	vmov.f32	s16, s0
 8019b1a:	e7cc      	b.n	8019ab6 <q2hpr+0x9a>
 8019b1c:	40c90fdb 	.word	0x40c90fdb

08019b20 <llEvaluate.constprop.0>:
 8019b20:	ed92 7a00 	vldr	s14, [r2]
 8019b24:	edd0 7a00 	vldr	s15, [r0]
 8019b28:	edd0 1a04 	vldr	s3, [r0, #16]
 8019b2c:	ed92 6a01 	vldr	s12, [r2, #4]
 8019b30:	ed90 3a05 	vldr	s6, [r0, #20]
 8019b34:	ed90 2a08 	vldr	s4, [r0, #32]
 8019b38:	edd0 2a0c 	vldr	s5, [r0, #48]	@ 0x30
 8019b3c:	edd0 3a09 	vldr	s7, [r0, #36]	@ 0x24
 8019b40:	edd0 4a0a 	vldr	s9, [r0, #40]	@ 0x28
 8019b44:	ed90 4a0d 	vldr	s8, [r0, #52]	@ 0x34
 8019b48:	ed90 5a0e 	vldr	s10, [r0, #56]	@ 0x38
 8019b4c:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
 8019b50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8019b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b58:	b084      	sub	sp, #16
 8019b5a:	f10d 0810 	add.w	r8, sp, #16
 8019b5e:	f101 0e10 	add.w	lr, r1, #16
 8019b62:	4606      	mov	r6, r0
 8019b64:	2703      	movs	r7, #3
 8019b66:	2504      	movs	r5, #4
 8019b68:	ed92 7a02 	vldr	s14, [r2, #8]
 8019b6c:	edd2 7a03 	vldr	s15, [r2, #12]
 8019b70:	edcd 6a00 	vstr	s13, [sp]
 8019b74:	eea6 6ae1 	vfms.f32	s12, s13, s3
 8019b78:	eea6 7ac2 	vfms.f32	s14, s13, s4
 8019b7c:	eee6 7ae2 	vfms.f32	s15, s13, s5
 8019b80:	eec6 6a03 	vdiv.f32	s13, s12, s6
 8019b84:	eea6 7ae3 	vfms.f32	s14, s13, s7
 8019b88:	eee4 7a66 	vfms.f32	s15, s8, s13
 8019b8c:	edcd 6a01 	vstr	s13, [sp, #4]
 8019b90:	eec7 6a24 	vdiv.f32	s13, s14, s9
 8019b94:	eee5 7a66 	vfms.f32	s15, s10, s13
 8019b98:	edcd 6a02 	vstr	s13, [sp, #8]
 8019b9c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8019ba0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019ba4:	ed78 7a01 	vldmdb	r8!, {s15}
 8019ba8:	2d04      	cmp	r5, #4
 8019baa:	b26b      	sxtb	r3, r5
 8019bac:	ed6e 7a01 	vstmdb	lr!, {s15}
 8019bb0:	d023      	beq.n	8019bfa <llEvaluate.constprop.0+0xda>
 8019bb2:	00bc      	lsls	r4, r7, #2
 8019bb4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8019bb8:	eb01 0c83 	add.w	ip, r1, r3, lsl #2
 8019bbc:	4422      	add	r2, r4
 8019bbe:	edd2 6a00 	vldr	s13, [r2]
 8019bc2:	ed9c 7a00 	vldr	s14, [ip]
 8019bc6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019bca:	3301      	adds	r3, #1
 8019bcc:	b2da      	uxtb	r2, r3
 8019bce:	2a04      	cmp	r2, #4
 8019bd0:	b25b      	sxtb	r3, r3
 8019bd2:	edce 7a00 	vstr	s15, [lr]
 8019bd6:	d1ed      	bne.n	8019bb4 <llEvaluate.constprop.0+0x94>
 8019bd8:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8019bdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019be0:	3d01      	subs	r5, #1
 8019be2:	f015 05ff 	ands.w	r5, r5, #255	@ 0xff
 8019be6:	f107 37ff 	add.w	r7, r7, #4294967295	@ 0xffffffff
 8019bea:	f1a6 0614 	sub.w	r6, r6, #20
 8019bee:	ed8e 7a00 	vstr	s14, [lr]
 8019bf2:	d1d7      	bne.n	8019ba4 <llEvaluate.constprop.0+0x84>
 8019bf4:	b004      	add	sp, #16
 8019bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bfa:	edd6 6a0f 	vldr	s13, [r6, #60]	@ 0x3c
 8019bfe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8019c02:	3f01      	subs	r7, #1
 8019c04:	3e14      	subs	r6, #20
 8019c06:	2503      	movs	r5, #3
 8019c08:	ed8e 7a00 	vstr	s14, [lr]
 8019c0c:	e7ca      	b.n	8019ba4 <llEvaluate.constprop.0+0x84>
 8019c0e:	bf00      	nop

08019c10 <getMagStats.constprop.0>:
 8019c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c14:	4d72      	ldr	r5, [pc, #456]	@ (8019de0 <getMagStats.constprop.0+0x1d0>)
 8019c16:	2400      	movs	r4, #0
 8019c18:	601c      	str	r4, [r3, #0]
 8019c1a:	6014      	str	r4, [r2, #0]
 8019c1c:	f895 40a1 	ldrb.w	r4, [r5, #161]	@ 0xa1
 8019c20:	f995 60a2 	ldrsb.w	r6, [r5, #162]	@ 0xa2
 8019c24:	4684      	mov	ip, r0
 8019c26:	f895 00a0 	ldrb.w	r0, [r5, #160]	@ 0xa0
 8019c2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019c2e:	42a0      	cmp	r0, r4
 8019c30:	eec7 5a80 	vdiv.f32	s11, s15, s0
 8019c34:	f106 0601 	add.w	r6, r6, #1
 8019c38:	ee04 0a90 	vmov	s9, r0
 8019c3c:	f000 80c6 	beq.w	8019dcc <getMagStats.constprop.0+0x1bc>
 8019c40:	1a36      	subs	r6, r6, r0
 8019c42:	fb96 f7f4 	sdiv	r7, r6, r4
 8019c46:	fb04 6617 	mls	r6, r4, r7, r6
 8019c4a:	2e00      	cmp	r6, #0
 8019c4c:	bfb8      	it	lt
 8019c4e:	1936      	addlt	r6, r6, r4
 8019c50:	fa0f fe86 	sxth.w	lr, r6
 8019c54:	ed9f 5a63 	vldr	s10, [pc, #396]	@ 8019de4 <getMagStats.constprop.0+0x1d4>
 8019c58:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8019c5c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8019c60:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8019c64:	2800      	cmp	r0, #0
 8019c66:	f000 80b8 	beq.w	8019dda <getMagStats.constprop.0+0x1ca>
 8019c6a:	eb00 090e 	add.w	r9, r0, lr
 8019c6e:	ed9f 3a5e 	vldr	s6, [pc, #376]	@ 8019de8 <getMagStats.constprop.0+0x1d8>
 8019c72:	f8bc 8000 	ldrh.w	r8, [ip]
 8019c76:	f8bc 7002 	ldrh.w	r7, [ip, #2]
 8019c7a:	f8bc 6004 	ldrh.w	r6, [ip, #4]
 8019c7e:	2000      	movs	r0, #0
 8019c80:	e001      	b.n	8019c86 <getMagStats.constprop.0+0x76>
 8019c82:	ed92 3a00 	vldr	s6, [r2]
 8019c86:	fb9e fcf4 	sdiv	ip, lr, r4
 8019c8a:	fb04 ec1c 	mls	ip, r4, ip, lr
 8019c8e:	fa5f fc8c 	uxtb.w	ip, ip
 8019c92:	f10c 0c04 	add.w	ip, ip, #4
 8019c96:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8019c9a:	edd1 3a00 	vldr	s7, [r1]
 8019c9e:	f8bc a0a2 	ldrh.w	sl, [ip, #162]	@ 0xa2
 8019ca2:	f8bc b0a4 	ldrh.w	fp, [ip, #164]	@ 0xa4
 8019ca6:	f8bc c0a6 	ldrh.w	ip, [ip, #166]	@ 0xa6
 8019caa:	ed91 4a04 	vldr	s8, [r1, #16]
 8019cae:	ed91 6a08 	vldr	s12, [r1, #32]
 8019cb2:	ebaa 0a08 	sub.w	sl, sl, r8
 8019cb6:	ebab 0b07 	sub.w	fp, fp, r7
 8019cba:	fa0f fa8a 	sxth.w	sl, sl
 8019cbe:	ee07 aa10 	vmov	s14, sl
 8019cc2:	fa0f fa8b 	sxth.w	sl, fp
 8019cc6:	ee06 aa90 	vmov	s13, sl
 8019cca:	ebac 0c06 	sub.w	ip, ip, r6
 8019cce:	fa0f fc8c 	sxth.w	ip, ip
 8019cd2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cd6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019cda:	ee07 ca90 	vmov	s15, ip
 8019cde:	ee27 7a23 	vmul.f32	s14, s14, s7
 8019ce2:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019cea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019cee:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8019cf2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019cf6:	ee17 ca10 	vmov	ip, s14
 8019cfa:	ee16 ba90 	vmov	fp, s13
 8019cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d02:	fa0f fc8c 	sxth.w	ip, ip
 8019d06:	fb1b fb0b 	smulbb	fp, fp, fp
 8019d0a:	fb0c bb0c 	mla	fp, ip, ip, fp
 8019d0e:	ee17 ca90 	vmov	ip, s15
 8019d12:	fa0f fc8c 	sxth.w	ip, ip
 8019d16:	fb0c bc0c 	mla	ip, ip, ip, fp
 8019d1a:	ee07 ca90 	vmov	s15, ip
 8019d1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d22:	f10e 0e01 	add.w	lr, lr, #1
 8019d26:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8019d2a:	f100 0a01 	add.w	sl, r0, #1
 8019d2e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8019d32:	ee17 ca10 	vmov	ip, s14
 8019d36:	fa0f fc8c 	sxth.w	ip, ip
 8019d3a:	ee07 ca10 	vmov	s14, ip
 8019d3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d42:	ee77 7a45 	vsub.f32	s15, s14, s10
 8019d46:	ee37 7a03 	vadd.f32	s14, s14, s6
 8019d4a:	eef0 7ae7 	vabs.f32	s15, s15
 8019d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d52:	ed82 7a00 	vstr	s14, [r2]
 8019d56:	ee17 ca90 	vmov	ip, s15
 8019d5a:	fa0f fc8c 	sxth.w	ip, ip
 8019d5e:	fb0c fb0c 	mul.w	fp, ip, ip
 8019d62:	ee07 ba90 	vmov	s15, fp
 8019d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019d6a:	ee07 ca90 	vmov	s15, ip
 8019d6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d72:	eef4 5ae7 	vcmpe.f32	s11, s15
 8019d76:	edd3 7a00 	vldr	s15, [r3]
 8019d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019d82:	bf48      	it	mi
 8019d84:	fa5f f08a 	uxtbmi.w	r0, sl
 8019d88:	45ce      	cmp	lr, r9
 8019d8a:	edc3 7a00 	vstr	s15, [r3]
 8019d8e:	f47f af78 	bne.w	8019c82 <getMagStats.constprop.0+0x72>
 8019d92:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8019d96:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8019dec <getMagStats.constprop.0+0x1dc>
 8019d9a:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 8019d9e:	eef1 7ae6 	vsqrt.f32	s15, s13
 8019da2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dae:	bfb8      	it	lt
 8019db0:	eef0 7a47 	vmovlt.f32	s15, s14
 8019db4:	edc3 7a00 	vstr	s15, [r3]
 8019db8:	edd2 7a00 	vldr	s15, [r2]
 8019dbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019dc0:	eec0 7a24 	vdiv.f32	s15, s0, s9
 8019dc4:	edc2 7a00 	vstr	s15, [r2]
 8019dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dcc:	fb96 f7f0 	sdiv	r7, r6, r0
 8019dd0:	fb00 6617 	mls	r6, r0, r7, r6
 8019dd4:	fa0f fe86 	sxth.w	lr, r6
 8019dd8:	e73c      	b.n	8019c54 <getMagStats.constprop.0+0x44>
 8019dda:	eddf 7a03 	vldr	s15, [pc, #12]	@ 8019de8 <getMagStats.constprop.0+0x1d8>
 8019dde:	e7d8      	b.n	8019d92 <getMagStats.constprop.0+0x182>
 8019de0:	2000038c 	.word	0x2000038c
 8019de4:	423c0000 	.word	0x423c0000
 8019de8:	00000000 	.word	0x00000000
 8019dec:	3f59999a 	.word	0x3f59999a

08019df0 <MEMS_updateMagBufferIndex.constprop.0>:
 8019df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019df4:	ed2d 8b02 	vpush	{d8}
 8019df8:	f8df 81b0 	ldr.w	r8, [pc, #432]	@ 8019fac <MEMS_updateMagBufferIndex.constprop.0+0x1bc>
 8019dfc:	f898 10a0 	ldrb.w	r1, [r8, #160]	@ 0xa0
 8019e00:	f898 a0a1 	ldrb.w	sl, [r8, #161]	@ 0xa1
 8019e04:	f998 30a2 	ldrsb.w	r3, [r8, #162]	@ 0xa2
 8019e08:	2200      	movs	r2, #0
 8019e0a:	4551      	cmp	r1, sl
 8019e0c:	e9c8 222a 	strd	r2, r2, [r8, #168]	@ 0xa8
 8019e10:	e9c8 222c 	strd	r2, r2, [r8, #176]	@ 0xb0
 8019e14:	e9c8 222e 	strd	r2, r2, [r8, #184]	@ 0xb8
 8019e18:	b089      	sub	sp, #36	@ 0x24
 8019e1a:	4606      	mov	r6, r0
 8019e1c:	f103 0301 	add.w	r3, r3, #1
 8019e20:	f000 80be 	beq.w	8019fa0 <MEMS_updateMagBufferIndex.constprop.0+0x1b0>
 8019e24:	1a5b      	subs	r3, r3, r1
 8019e26:	fb93 f2fa 	sdiv	r2, r3, sl
 8019e2a:	fb0a 3312 	mls	r3, sl, r2, r3
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	bfb8      	it	lt
 8019e32:	4453      	addlt	r3, sl
 8019e34:	b21f      	sxth	r7, r3
 8019e36:	2900      	cmp	r1, #0
 8019e38:	f000 80aa 	beq.w	8019f90 <MEMS_updateMagBufferIndex.constprop.0+0x1a0>
 8019e3c:	2000      	movs	r0, #0
 8019e3e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019e42:	19cb      	adds	r3, r1, r7
 8019e44:	ee87 8a80 	vdiv.f32	s16, s15, s0
 8019e48:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8019e4c:	e9cd 0005 	strd	r0, r0, [sp, #20]
 8019e50:	9307      	str	r3, [sp, #28]
 8019e52:	4683      	mov	fp, r0
 8019e54:	9002      	str	r0, [sp, #8]
 8019e56:	f04f 0901 	mov.w	r9, #1
 8019e5a:	4635      	mov	r5, r6
 8019e5c:	e01a      	b.n	8019e94 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8019e5e:	9a02      	ldr	r2, [sp, #8]
 8019e60:	3c20      	subs	r4, #32
 8019e62:	fa09 f404 	lsl.w	r4, r9, r4
 8019e66:	4322      	orrs	r2, r4
 8019e68:	2e1f      	cmp	r6, #31
 8019e6a:	9202      	str	r2, [sp, #8]
 8019e6c:	d96e      	bls.n	8019f4c <MEMS_updateMagBufferIndex.constprop.0+0x15c>
 8019e6e:	9906      	ldr	r1, [sp, #24]
 8019e70:	f1a6 0220 	sub.w	r2, r6, #32
 8019e74:	fa09 f202 	lsl.w	r2, r9, r2
 8019e78:	4311      	orrs	r1, r2
 8019e7a:	2b1f      	cmp	r3, #31
 8019e7c:	9106      	str	r1, [sp, #24]
 8019e7e:	d96c      	bls.n	8019f5a <MEMS_updateMagBufferIndex.constprop.0+0x16a>
 8019e80:	9a04      	ldr	r2, [sp, #16]
 8019e82:	3b20      	subs	r3, #32
 8019e84:	fa09 f303 	lsl.w	r3, r9, r3
 8019e88:	431a      	orrs	r2, r3
 8019e8a:	9b07      	ldr	r3, [sp, #28]
 8019e8c:	9204      	str	r2, [sp, #16]
 8019e8e:	3701      	adds	r7, #1
 8019e90:	429f      	cmp	r7, r3
 8019e92:	d06b      	beq.n	8019f6c <MEMS_updateMagBufferIndex.constprop.0+0x17c>
 8019e94:	fb97 f3fa 	sdiv	r3, r7, sl
 8019e98:	fb0a 7313 	mls	r3, sl, r3, r7
 8019e9c:	b2db      	uxtb	r3, r3
 8019e9e:	1d1e      	adds	r6, r3, #4
 8019ea0:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8019ea4:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	@ 0xa2
 8019ea8:	fb92 f0f5 	sdiv	r0, r2, r5
 8019eac:	fb05 2210 	mls	r2, r5, r0, r2
 8019eb0:	2a00      	cmp	r2, #0
 8019eb2:	bfb8      	it	lt
 8019eb4:	1952      	addlt	r2, r2, r5
 8019eb6:	b213      	sxth	r3, r2
 8019eb8:	ee00 3a10 	vmov	s0, r3
 8019ebc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019ec0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019ec4:	f008 fa78 	bl	80223b8 <roundf>
 8019ec8:	eb08 02c6 	add.w	r2, r8, r6, lsl #3
 8019ecc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019ed0:	f9b2 20a4 	ldrsh.w	r2, [r2, #164]	@ 0xa4
 8019ed4:	fb92 f0f5 	sdiv	r0, r2, r5
 8019ed8:	fb05 2210 	mls	r2, r5, r0, r2
 8019edc:	2a00      	cmp	r2, #0
 8019ede:	bfb8      	it	lt
 8019ee0:	1952      	addlt	r2, r2, r5
 8019ee2:	b213      	sxth	r3, r2
 8019ee4:	ee00 3a10 	vmov	s0, r3
 8019ee8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019eec:	edcd 7a01 	vstr	s15, [sp, #4]
 8019ef0:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019ef4:	f008 fa60 	bl	80223b8 <roundf>
 8019ef8:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 8019efc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019f00:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 8019f04:	fb93 f2f5 	sdiv	r2, r3, r5
 8019f08:	fb05 3312 	mls	r3, r5, r2, r3
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	bfb8      	it	lt
 8019f10:	195b      	addlt	r3, r3, r5
 8019f12:	b21b      	sxth	r3, r3
 8019f14:	ee00 3a10 	vmov	s0, r3
 8019f18:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8019f1c:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8019f20:	edcd 7a01 	vstr	s15, [sp, #4]
 8019f24:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019f28:	f008 fa46 	bl	80223b8 <roundf>
 8019f2c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019f30:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8019f34:	edcd 7a01 	vstr	s15, [sp, #4]
 8019f38:	2c1f      	cmp	r4, #31
 8019f3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8019f3e:	d88e      	bhi.n	8019e5e <MEMS_updateMagBufferIndex.constprop.0+0x6e>
 8019f40:	fa09 f404 	lsl.w	r4, r9, r4
 8019f44:	2e1f      	cmp	r6, #31
 8019f46:	ea4b 0b04 	orr.w	fp, fp, r4
 8019f4a:	d890      	bhi.n	8019e6e <MEMS_updateMagBufferIndex.constprop.0+0x7e>
 8019f4c:	9905      	ldr	r1, [sp, #20]
 8019f4e:	fa09 f206 	lsl.w	r2, r9, r6
 8019f52:	4311      	orrs	r1, r2
 8019f54:	2b1f      	cmp	r3, #31
 8019f56:	9105      	str	r1, [sp, #20]
 8019f58:	d892      	bhi.n	8019e80 <MEMS_updateMagBufferIndex.constprop.0+0x90>
 8019f5a:	9a03      	ldr	r2, [sp, #12]
 8019f5c:	fa09 f303 	lsl.w	r3, r9, r3
 8019f60:	431a      	orrs	r2, r3
 8019f62:	9b07      	ldr	r3, [sp, #28]
 8019f64:	9203      	str	r2, [sp, #12]
 8019f66:	3701      	adds	r7, #1
 8019f68:	429f      	cmp	r7, r3
 8019f6a:	d193      	bne.n	8019e94 <MEMS_updateMagBufferIndex.constprop.0+0xa4>
 8019f6c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8019f70:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8019f74:	e9c8 322c 	strd	r3, r2, [r8, #176]	@ 0xb0
 8019f78:	9b02      	ldr	r3, [sp, #8]
 8019f7a:	f8c8 b0ac 	str.w	fp, [r8, #172]	@ 0xac
 8019f7e:	e9c8 012e 	strd	r0, r1, [r8, #184]	@ 0xb8
 8019f82:	f8c8 30a8 	str.w	r3, [r8, #168]	@ 0xa8
 8019f86:	b009      	add	sp, #36	@ 0x24
 8019f88:	ecbd 8b02 	vpop	{d8}
 8019f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f90:	23ff      	movs	r3, #255	@ 0xff
 8019f92:	f888 30a2 	strb.w	r3, [r8, #162]	@ 0xa2
 8019f96:	b009      	add	sp, #36	@ 0x24
 8019f98:	ecbd 8b02 	vpop	{d8}
 8019f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa0:	fb93 f2f1 	sdiv	r2, r3, r1
 8019fa4:	fb01 3312 	mls	r3, r1, r2, r3
 8019fa8:	b21f      	sxth	r7, r3
 8019faa:	e744      	b.n	8019e36 <MEMS_updateMagBufferIndex.constprop.0+0x46>
 8019fac:	2000038c 	.word	0x2000038c

08019fb0 <output_update>:
 8019fb0:	edd0 7a01 	vldr	s15, [r0, #4]
 8019fb4:	ed90 5a02 	vldr	s10, [r0, #8]
 8019fb8:	ed90 7a00 	vldr	s14, [r0]
 8019fbc:	edd0 5a03 	vldr	s11, [r0, #12]
 8019fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8019fc8:	ee67 6a85 	vmul.f32	s13, s15, s10
 8019fcc:	eea7 6a07 	vfma.f32	s12, s14, s14
 8019fd0:	4615      	mov	r5, r2
 8019fd2:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8019fd6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019fda:	eee7 6a25 	vfma.f32	s13, s14, s11
 8019fde:	460f      	mov	r7, r1
 8019fe0:	461e      	mov	r6, r3
 8019fe2:	ee27 7a05 	vmul.f32	s14, s14, s10
 8019fe6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8019fea:	ee37 7a07 	vadd.f32	s14, s14, s14
 8019fee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8019ff2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8019ff6:	ee36 6a06 	vadd.f32	s12, s12, s12
 8019ffa:	2a00      	cmp	r2, #0
 8019ffc:	d14b      	bne.n	801a096 <output_update+0xe6>
 8019ffe:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801a002:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a006:	ee35 7ac6 	vsub.f32	s14, s11, s12
 801a00a:	eef1 6a66 	vneg.f32	s13, s13
 801a00e:	edc3 6a00 	vstr	s13, [r3]
 801a012:	edc3 7a01 	vstr	s15, [r3, #4]
 801a016:	ed83 7a02 	vstr	s14, [r3, #8]
 801a01a:	4629      	mov	r1, r5
 801a01c:	4604      	mov	r4, r0
 801a01e:	f7ff fcfd 	bl	8019a1c <q2hpr>
 801a022:	ed95 7a01 	vldr	s14, [r5, #4]
 801a026:	edd5 7a02 	vldr	s15, [r5, #8]
 801a02a:	edd5 6a00 	vldr	s13, [r5]
 801a02e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 801a144 <output_update+0x194>
 801a032:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801a148 <output_update+0x198>
 801a036:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a03a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a03e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801a042:	ed85 7a01 	vstr	s14, [r5, #4]
 801a046:	edc5 6a00 	vstr	s13, [r5]
 801a04a:	edc5 7a02 	vstr	s15, [r5, #8]
 801a04e:	ed97 7a01 	vldr	s14, [r7, #4]
 801a052:	edd6 7a00 	vldr	s15, [r6]
 801a056:	6823      	ldr	r3, [r4, #0]
 801a058:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a05c:	edc8 7a00 	vstr	s15, [r8]
 801a060:	ed97 7a00 	vldr	s14, [r7]
 801a064:	edd6 7a01 	vldr	s15, [r6, #4]
 801a068:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a06c:	edc8 7a01 	vstr	s15, [r8, #4]
 801a070:	edd6 7a02 	vldr	s15, [r6, #8]
 801a074:	ed97 7a02 	vldr	s14, [r7, #8]
 801a078:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a07c:	edc8 7a02 	vstr	s15, [r8, #8]
 801a080:	edd4 7a02 	vldr	s15, [r4, #8]
 801a084:	6862      	ldr	r2, [r4, #4]
 801a086:	6022      	str	r2, [r4, #0]
 801a088:	eef1 7a67 	vneg.f32	s15, s15
 801a08c:	6063      	str	r3, [r4, #4]
 801a08e:	edc4 7a02 	vstr	s15, [r4, #8]
 801a092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a096:	2a01      	cmp	r2, #1
 801a098:	d015      	beq.n	801a0c6 <output_update+0x116>
 801a09a:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801a148 <output_update+0x198>
 801a09e:	edd5 6a00 	vldr	s13, [r5]
 801a0a2:	ed95 7a01 	vldr	s14, [r5, #4]
 801a0a6:	edd5 7a02 	vldr	s15, [r5, #8]
 801a0aa:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a0ae:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a0b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a0b6:	edc5 6a00 	vstr	s13, [r5]
 801a0ba:	ed85 7a01 	vstr	s14, [r5, #4]
 801a0be:	edc5 7a02 	vstr	s15, [r5, #8]
 801a0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0c6:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801a0ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0ce:	ee36 6a65 	vsub.f32	s12, s12, s11
 801a0d2:	eef1 6a66 	vneg.f32	s13, s13
 801a0d6:	edc3 7a00 	vstr	s15, [r3]
 801a0da:	edc3 6a01 	vstr	s13, [r3, #4]
 801a0de:	ed83 6a02 	vstr	s12, [r3, #8]
 801a0e2:	4629      	mov	r1, r5
 801a0e4:	f7ff fc9a 	bl	8019a1c <q2hpr>
 801a0e8:	edd5 6a00 	vldr	s13, [r5]
 801a0ec:	ed95 7a01 	vldr	s14, [r5, #4]
 801a0f0:	edd5 7a02 	vldr	s15, [r5, #8]
 801a0f4:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801a148 <output_update+0x198>
 801a0f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a0fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a100:	ee66 6a86 	vmul.f32	s13, s13, s12
 801a104:	ed85 7a01 	vstr	s14, [r5, #4]
 801a108:	edc5 6a00 	vstr	s13, [r5]
 801a10c:	edc5 7a02 	vstr	s15, [r5, #8]
 801a110:	ed97 7a00 	vldr	s14, [r7]
 801a114:	edd6 7a00 	vldr	s15, [r6]
 801a118:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a11c:	edc8 7a00 	vstr	s15, [r8]
 801a120:	ed97 7a01 	vldr	s14, [r7, #4]
 801a124:	edd6 7a01 	vldr	s15, [r6, #4]
 801a128:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a12c:	edc8 7a01 	vstr	s15, [r8, #4]
 801a130:	edd6 7a02 	vldr	s15, [r6, #8]
 801a134:	ed97 7a02 	vldr	s14, [r7, #8]
 801a138:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a13c:	edc8 7a02 	vstr	s15, [r8, #8]
 801a140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a144:	c2652ee1 	.word	0xc2652ee1
 801a148:	42652ee1 	.word	0x42652ee1

0801a14c <MFX_emptyAttitude>:
 801a14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a150:	ed2d 8b02 	vpush	{d8}
 801a154:	4fe9      	ldr	r7, [pc, #932]	@ (801a4fc <MFX_emptyAttitude+0x3b0>)
 801a156:	eddf 8aea 	vldr	s17, [pc, #936]	@ 801a500 <MFX_emptyAttitude+0x3b4>
 801a15a:	f6ad 4dd4 	subw	sp, sp, #3284	@ 0xcd4
 801a15e:	f04f 0800 	mov.w	r8, #0
 801a162:	f50d 64d7 	add.w	r4, sp, #1720	@ 0x6b8
 801a166:	46bc      	mov	ip, r7
 801a168:	e9c4 8800 	strd	r8, r8, [r4]
 801a16c:	f83c 3b04 	ldrh.w	r3, [ip], #4
 801a170:	f8c4 8008 	str.w	r8, [r4, #8]
 801a174:	f88d 854a 	strb.w	r8, [sp, #1354]	@ 0x54a
 801a178:	f8ad 3548 	strh.w	r3, [sp, #1352]	@ 0x548
 801a17c:	4681      	mov	r9, r0
 801a17e:	f8dd 3548 	ldr.w	r3, [sp, #1352]	@ 0x548
 801a182:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 801a186:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801a18a:	0c1b      	lsrs	r3, r3, #16
 801a18c:	f88d 30aa 	strb.w	r3, [sp, #170]	@ 0xaa
 801a190:	ab2b      	add	r3, sp, #172	@ 0xac
 801a192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a196:	ab2e      	add	r3, sp, #184	@ 0xb8
 801a198:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a19c:	ab31      	add	r3, sp, #196	@ 0xc4
 801a19e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1a2:	ab34      	add	r3, sp, #208	@ 0xd0
 801a1a4:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 801a1a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1ac:	ab37      	add	r3, sp, #220	@ 0xdc
 801a1ae:	edcd 8a08 	vstr	s17, [sp, #32]
 801a1b2:	edcd 8a09 	vstr	s17, [sp, #36]	@ 0x24
 801a1b6:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 801a1ba:	ed8d 8a0b 	vstr	s16, [sp, #44]	@ 0x2c
 801a1be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1c2:	ab3a      	add	r3, sp, #232	@ 0xe8
 801a1c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801a1c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a1cc:	f10d 0e44 	add.w	lr, sp, #68	@ 0x44
 801a1d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a1d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a1d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801a1dc:	f44f 75b4 	mov.w	r5, #360	@ 0x168
 801a1e0:	f8dc 3000 	ldr.w	r3, [ip]
 801a1e4:	f8ce 3000 	str.w	r3, [lr]
 801a1e8:	462a      	mov	r2, r5
 801a1ea:	4641      	mov	r1, r8
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	f00a fdf4 	bl	8024dda <memset>
 801a1f2:	f44f 56f0 	mov.w	r6, #7680	@ 0x1e00
 801a1f6:	462a      	mov	r2, r5
 801a1f8:	4621      	mov	r1, r4
 801a1fa:	a840      	add	r0, sp, #256	@ 0x100
 801a1fc:	f8ad 60f8 	strh.w	r6, [sp, #248]	@ 0xf8
 801a200:	f00a ff15 	bl	802502e <memcpy>
 801a204:	462a      	mov	r2, r5
 801a206:	4641      	mov	r1, r8
 801a208:	4620      	mov	r0, r4
 801a20a:	ed8d 8a3f 	vstr	s16, [sp, #252]	@ 0xfc
 801a20e:	f00a fde4 	bl	8024dda <memset>
 801a212:	462a      	mov	r2, r5
 801a214:	4621      	mov	r1, r4
 801a216:	a89c      	add	r0, sp, #624	@ 0x270
 801a218:	f8ad 6268 	strh.w	r6, [sp, #616]	@ 0x268
 801a21c:	f00a ff07 	bl	802502e <memcpy>
 801a220:	462a      	mov	r2, r5
 801a222:	4641      	mov	r1, r8
 801a224:	4620      	mov	r0, r4
 801a226:	ed8d 8a9b 	vstr	s16, [sp, #620]	@ 0x26c
 801a22a:	f00a fdd6 	bl	8024dda <memset>
 801a22e:	462a      	mov	r2, r5
 801a230:	4621      	mov	r1, r4
 801a232:	a8f8      	add	r0, sp, #992	@ 0x3e0
 801a234:	f8ad 63d8 	strh.w	r6, [sp, #984]	@ 0x3d8
 801a238:	f00a fef9 	bl	802502e <memcpy>
 801a23c:	462a      	mov	r2, r5
 801a23e:	4641      	mov	r1, r8
 801a240:	4620      	mov	r0, r4
 801a242:	ed8d 8af7 	vstr	s16, [sp, #988]	@ 0x3dc
 801a246:	f00a fdc8 	bl	8024dda <memset>
 801a24a:	462a      	mov	r2, r5
 801a24c:	4621      	mov	r1, r4
 801a24e:	f50d 60aa 	add.w	r0, sp, #1360	@ 0x550
 801a252:	f8ad 6548 	strh.w	r6, [sp, #1352]	@ 0x548
 801a256:	f00a feea 	bl	802502e <memcpy>
 801a25a:	f04f 0301 	mov.w	r3, #1
 801a25e:	f88d 3068 	strb.w	r3, [sp, #104]	@ 0x68
 801a262:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 801a266:	4ba7      	ldr	r3, [pc, #668]	@ (801a504 <MFX_emptyAttitude+0x3b8>)
 801a268:	9320      	str	r3, [sp, #128]	@ 0x80
 801a26a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a26c:	ae0c      	add	r6, sp, #48	@ 0x30
 801a26e:	46b3      	mov	fp, r6
 801a270:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801a272:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801a276:	e9c4 8800 	strd	r8, r8, [r4]
 801a27a:	e9c4 8802 	strd	r8, r8, [r4, #8]
 801a27e:	f8c4 8010 	str.w	r8, [r4, #16]
 801a282:	f10d 0c6c 	add.w	ip, sp, #108	@ 0x6c
 801a286:	46a6      	mov	lr, r4
 801a288:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a28c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801a290:	f50d 6aa9 	add.w	sl, sp, #1352	@ 0x548
 801a294:	682d      	ldr	r5, [r5, #0]
 801a296:	f8cc 5000 	str.w	r5, [ip]
 801a29a:	af21      	add	r7, sp, #132	@ 0x84
 801a29c:	ed8a 8a01 	vstr	s16, [sl, #4]
 801a2a0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801a2a2:	ab1a      	add	r3, sp, #104	@ 0x68
 801a2a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a2a8:	abf6      	add	r3, sp, #984	@ 0x3d8
 801a2aa:	9300      	str	r3, [sp, #0]
 801a2ac:	aa3e      	add	r2, sp, #248	@ 0xf8
 801a2ae:	f8c7 8000 	str.w	r8, [r7]
 801a2b2:	ab9a      	add	r3, sp, #616	@ 0x268
 801a2b4:	a911      	add	r1, sp, #68	@ 0x44
 801a2b6:	9403      	str	r4, [sp, #12]
 801a2b8:	2001      	movs	r0, #1
 801a2ba:	f7fd ffe7 	bl	801828c <DataHist_parameters>
 801a2be:	4b92      	ldr	r3, [pc, #584]	@ (801a508 <MFX_emptyAttitude+0x3bc>)
 801a2c0:	f8c9 3018 	str.w	r3, [r9, #24]
 801a2c4:	4b91      	ldr	r3, [pc, #580]	@ (801a50c <MFX_emptyAttitude+0x3c0>)
 801a2c6:	f8c9 301c 	str.w	r3, [r9, #28]
 801a2ca:	4b91      	ldr	r3, [pc, #580]	@ (801a510 <MFX_emptyAttitude+0x3c4>)
 801a2cc:	f8c9 3020 	str.w	r3, [r9, #32]
 801a2d0:	4b90      	ldr	r3, [pc, #576]	@ (801a514 <MFX_emptyAttitude+0x3c8>)
 801a2d2:	f8c9 3024 	str.w	r3, [r9, #36]	@ 0x24
 801a2d6:	4b90      	ldr	r3, [pc, #576]	@ (801a518 <MFX_emptyAttitude+0x3cc>)
 801a2d8:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
 801a2dc:	4b8f      	ldr	r3, [pc, #572]	@ (801a51c <MFX_emptyAttitude+0x3d0>)
 801a2de:	f8c9 302c 	str.w	r3, [r9, #44]	@ 0x2c
 801a2e2:	4b8f      	ldr	r3, [pc, #572]	@ (801a520 <MFX_emptyAttitude+0x3d4>)
 801a2e4:	f8c9 3030 	str.w	r3, [r9, #48]	@ 0x30
 801a2e8:	f10d 0cac 	add.w	ip, sp, #172	@ 0xac
 801a2ec:	4b8d      	ldr	r3, [pc, #564]	@ (801a524 <MFX_emptyAttitude+0x3d8>)
 801a2ee:	f8c9 3034 	str.w	r3, [r9, #52]	@ 0x34
 801a2f2:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 801a2f6:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	@ 0xa8
 801a2fa:	f8a9 3070 	strh.w	r3, [r9, #112]	@ 0x70
 801a2fe:	f89d 30aa 	ldrb.w	r3, [sp, #170]	@ 0xaa
 801a302:	f889 3072 	strb.w	r3, [r9, #114]	@ 0x72
 801a306:	f240 1301 	movw	r3, #257	@ 0x101
 801a30a:	f8a9 3000 	strh.w	r3, [r9]
 801a30e:	f8a9 3004 	strh.w	r3, [r9, #4]
 801a312:	4b85      	ldr	r3, [pc, #532]	@ (801a528 <MFX_emptyAttitude+0x3dc>)
 801a314:	f8c9 300c 	str.w	r3, [r9, #12]
 801a318:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 801a31c:	f8c9 1078 	str.w	r1, [r9, #120]	@ 0x78
 801a320:	4b82      	ldr	r3, [pc, #520]	@ (801a52c <MFX_emptyAttitude+0x3e0>)
 801a322:	f8c9 207c 	str.w	r2, [r9, #124]	@ 0x7c
 801a326:	af2e      	add	r7, sp, #184	@ 0xb8
 801a328:	2000      	movs	r0, #0
 801a32a:	2100      	movs	r1, #0
 801a32c:	f8c9 3014 	str.w	r3, [r9, #20]
 801a330:	e9c9 8816 	strd	r8, r8, [r9, #88]	@ 0x58
 801a334:	e9c9 881a 	strd	r8, r8, [r9, #104]	@ 0x68
 801a338:	e9c9 0118 	strd	r0, r1, [r9, #96]	@ 0x60
 801a33c:	f8a9 8002 	strh.w	r8, [r9, #2]
 801a340:	ed89 8a02 	vstr	s16, [r9, #8]
 801a344:	ed89 8a04 	vstr	s16, [r9, #16]
 801a348:	cf07      	ldmia	r7!, {r0, r1, r2}
 801a34a:	ae31      	add	r6, sp, #196	@ 0xc4
 801a34c:	f8c9 0080 	str.w	r0, [r9, #128]	@ 0x80
 801a350:	f8c9 1084 	str.w	r1, [r9, #132]	@ 0x84
 801a354:	f8c9 2088 	str.w	r2, [r9, #136]	@ 0x88
 801a358:	ce07      	ldmia	r6!, {r0, r1, r2}
 801a35a:	ad34      	add	r5, sp, #208	@ 0xd0
 801a35c:	f8c9 008c 	str.w	r0, [r9, #140]	@ 0x8c
 801a360:	f8c9 1090 	str.w	r1, [r9, #144]	@ 0x90
 801a364:	f8c9 2094 	str.w	r2, [r9, #148]	@ 0x94
 801a368:	cd07      	ldmia	r5!, {r0, r1, r2}
 801a36a:	f10d 0bdc 	add.w	fp, sp, #220	@ 0xdc
 801a36e:	f8c9 0098 	str.w	r0, [r9, #152]	@ 0x98
 801a372:	f8c9 109c 	str.w	r1, [r9, #156]	@ 0x9c
 801a376:	f8c9 20a0 	str.w	r2, [r9, #160]	@ 0xa0
 801a37a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 801a37e:	f10d 0ee8 	add.w	lr, sp, #232	@ 0xe8
 801a382:	f8c9 00a4 	str.w	r0, [r9, #164]	@ 0xa4
 801a386:	f8c9 10a8 	str.w	r1, [r9, #168]	@ 0xa8
 801a38a:	f8c9 20ac 	str.w	r2, [r9, #172]	@ 0xac
 801a38e:	e8be 0007 	ldmia.w	lr!, {r0, r1, r2}
 801a392:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 801a530 <MFX_emptyAttitude+0x3e4>
 801a396:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 801a534 <MFX_emptyAttitude+0x3e8>
 801a39a:	eddf 7a67 	vldr	s15, [pc, #412]	@ 801a538 <MFX_emptyAttitude+0x3ec>
 801a39e:	f8c9 20b8 	str.w	r2, [r9, #184]	@ 0xb8
 801a3a2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801a3a6:	f44f 1248 	mov.w	r2, #3276800	@ 0x320000
 801a3aa:	f8c9 00b0 	str.w	r0, [r9, #176]	@ 0xb0
 801a3ae:	f8c9 10b4 	str.w	r1, [r9, #180]	@ 0xb4
 801a3b2:	ed89 6a65 	vstr	s12, [r9, #404]	@ 0x194
 801a3b6:	edc9 6a66 	vstr	s13, [r9, #408]	@ 0x198
 801a3ba:	ed89 7a67 	vstr	s14, [r9, #412]	@ 0x19c
 801a3be:	edc9 8a64 	vstr	s17, [r9, #400]	@ 0x190
 801a3c2:	edc9 8a30 	vstr	s17, [r9, #192]	@ 0xc0
 801a3c6:	edc9 8a4a 	vstr	s17, [r9, #296]	@ 0x128
 801a3ca:	edc9 8a31 	vstr	s17, [r9, #196]	@ 0xc4
 801a3ce:	edc9 8a4b 	vstr	s17, [r9, #300]	@ 0x12c
 801a3d2:	edc9 8a32 	vstr	s17, [r9, #200]	@ 0xc8
 801a3d6:	edc9 8a4c 	vstr	s17, [r9, #304]	@ 0x130
 801a3da:	edc9 8a33 	vstr	s17, [r9, #204]	@ 0xcc
 801a3de:	edc9 8a4d 	vstr	s17, [r9, #308]	@ 0x134
 801a3e2:	edc9 8a34 	vstr	s17, [r9, #208]	@ 0xd0
 801a3e6:	edc9 8a4e 	vstr	s17, [r9, #312]	@ 0x138
 801a3ea:	edc9 8a35 	vstr	s17, [r9, #212]	@ 0xd4
 801a3ee:	edc9 8a4f 	vstr	s17, [r9, #316]	@ 0x13c
 801a3f2:	edc9 8a36 	vstr	s17, [r9, #216]	@ 0xd8
 801a3f6:	edc9 8a50 	vstr	s17, [r9, #320]	@ 0x140
 801a3fa:	edc9 8a37 	vstr	s17, [r9, #220]	@ 0xdc
 801a3fe:	edc9 8a51 	vstr	s17, [r9, #324]	@ 0x144
 801a402:	edc9 8a38 	vstr	s17, [r9, #224]	@ 0xe0
 801a406:	edc9 8a52 	vstr	s17, [r9, #328]	@ 0x148
 801a40a:	edc9 8a39 	vstr	s17, [r9, #228]	@ 0xe4
 801a40e:	edc9 8a53 	vstr	s17, [r9, #332]	@ 0x14c
 801a412:	edc9 8a3a 	vstr	s17, [r9, #232]	@ 0xe8
 801a416:	edc9 8a54 	vstr	s17, [r9, #336]	@ 0x150
 801a41a:	edc9 8a3b 	vstr	s17, [r9, #236]	@ 0xec
 801a41e:	edc9 8a55 	vstr	s17, [r9, #340]	@ 0x154
 801a422:	edc9 8a3c 	vstr	s17, [r9, #240]	@ 0xf0
 801a426:	edc9 8a56 	vstr	s17, [r9, #344]	@ 0x158
 801a42a:	edc9 8a3d 	vstr	s17, [r9, #244]	@ 0xf4
 801a42e:	edc9 8a57 	vstr	s17, [r9, #348]	@ 0x15c
 801a432:	edc9 8a3e 	vstr	s17, [r9, #248]	@ 0xf8
 801a436:	edc9 8a58 	vstr	s17, [r9, #352]	@ 0x160
 801a43a:	edc9 8a3f 	vstr	s17, [r9, #252]	@ 0xfc
 801a43e:	edc9 8a59 	vstr	s17, [r9, #356]	@ 0x164
 801a442:	edc9 8a40 	vstr	s17, [r9, #256]	@ 0x100
 801a446:	edc9 8a5a 	vstr	s17, [r9, #360]	@ 0x168
 801a44a:	f8c9 21a0 	str.w	r2, [r9, #416]	@ 0x1a0
 801a44e:	f04f 0201 	mov.w	r2, #1
 801a452:	edc9 7a75 	vstr	s15, [r9, #468]	@ 0x1d4
 801a456:	edc9 8a41 	vstr	s17, [r9, #260]	@ 0x104
 801a45a:	edc9 8a5b 	vstr	s17, [r9, #364]	@ 0x16c
 801a45e:	edc9 8a42 	vstr	s17, [r9, #264]	@ 0x108
 801a462:	edc9 8a5c 	vstr	s17, [r9, #368]	@ 0x170
 801a466:	edc9 8a43 	vstr	s17, [r9, #268]	@ 0x10c
 801a46a:	edc9 8a5d 	vstr	s17, [r9, #372]	@ 0x174
 801a46e:	edc9 8a44 	vstr	s17, [r9, #272]	@ 0x110
 801a472:	edc9 8a5e 	vstr	s17, [r9, #376]	@ 0x178
 801a476:	edc9 8a45 	vstr	s17, [r9, #276]	@ 0x114
 801a47a:	edc9 8a5f 	vstr	s17, [r9, #380]	@ 0x17c
 801a47e:	edc9 8a46 	vstr	s17, [r9, #280]	@ 0x118
 801a482:	edc9 8a60 	vstr	s17, [r9, #384]	@ 0x180
 801a486:	edc9 8a47 	vstr	s17, [r9, #284]	@ 0x11c
 801a48a:	edc9 8a61 	vstr	s17, [r9, #388]	@ 0x184
 801a48e:	edc9 8a48 	vstr	s17, [r9, #288]	@ 0x120
 801a492:	edc9 8a62 	vstr	s17, [r9, #392]	@ 0x188
 801a496:	edc9 8a49 	vstr	s17, [r9, #292]	@ 0x124
 801a49a:	edc9 8a63 	vstr	s17, [r9, #396]	@ 0x18c
 801a49e:	f889 81a4 	strb.w	r8, [r9, #420]	@ 0x1a4
 801a4a2:	f8c9 81a6 	str.w	r8, [r9, #422]	@ 0x1a6
 801a4a6:	edc9 8a6c 	vstr	s17, [r9, #432]	@ 0x1b0
 801a4aa:	edc9 8a76 	vstr	s17, [r9, #472]	@ 0x1d8
 801a4ae:	edc9 8a77 	vstr	s17, [r9, #476]	@ 0x1dc
 801a4b2:	edc9 8a78 	vstr	s17, [r9, #480]	@ 0x1e0
 801a4b6:	edc9 8a79 	vstr	s17, [r9, #484]	@ 0x1e4
 801a4ba:	edc9 8a7a 	vstr	s17, [r9, #488]	@ 0x1e8
 801a4be:	edc9 8a7b 	vstr	s17, [r9, #492]	@ 0x1ec
 801a4c2:	edc9 8a7c 	vstr	s17, [r9, #496]	@ 0x1f0
 801a4c6:	edc9 8a7d 	vstr	s17, [r9, #500]	@ 0x1f4
 801a4ca:	edc9 8a6d 	vstr	s17, [r9, #436]	@ 0x1b4
 801a4ce:	edc9 8a7e 	vstr	s17, [r9, #504]	@ 0x1f8
 801a4d2:	edc9 7a7f 	vstr	s15, [r9, #508]	@ 0x1fc
 801a4d6:	edc9 7a89 	vstr	s15, [r9, #548]	@ 0x224
 801a4da:	edc9 7a93 	vstr	s15, [r9, #588]	@ 0x24c
 801a4de:	edc9 8a80 	vstr	s17, [r9, #512]	@ 0x200
 801a4e2:	edc9 8a81 	vstr	s17, [r9, #516]	@ 0x204
 801a4e6:	edc9 8a82 	vstr	s17, [r9, #520]	@ 0x208
 801a4ea:	edc9 8a83 	vstr	s17, [r9, #524]	@ 0x20c
 801a4ee:	edc9 8a84 	vstr	s17, [r9, #528]	@ 0x210
 801a4f2:	edc9 8a85 	vstr	s17, [r9, #532]	@ 0x214
 801a4f6:	edc9 8a86 	vstr	s17, [r9, #536]	@ 0x218
 801a4fa:	e01f      	b.n	801a53c <MFX_emptyAttitude+0x3f0>
 801a4fc:	080278a4 	.word	0x080278a4
 801a500:	00000000 	.word	0x00000000
 801a504:	40a00000 	.word	0x40a00000
 801a508:	3a9d4952 	.word	0x3a9d4952
 801a50c:	3ac49ba6 	.word	0x3ac49ba6
 801a510:	3b03126f 	.word	0x3b03126f
 801a514:	3a83126f 	.word	0x3a83126f
 801a518:	3f639581 	.word	0x3f639581
 801a51c:	402ab021 	.word	0x402ab021
 801a520:	3f13f7cf 	.word	0x3f13f7cf
 801a524:	3f2ac083 	.word	0x3f2ac083
 801a528:	01010100 	.word	0x01010100
 801a52c:	41200000 	.word	0x41200000
 801a530:	3f4ccccd 	.word	0x3f4ccccd
 801a534:	3f333333 	.word	0x3f333333
 801a538:	447a0000 	.word	0x447a0000
 801a53c:	edc9 8a6e 	vstr	s17, [r9, #440]	@ 0x1b8
 801a540:	edc9 8a87 	vstr	s17, [r9, #540]	@ 0x21c
 801a544:	edc9 8a88 	vstr	s17, [r9, #544]	@ 0x220
 801a548:	edc9 8a8a 	vstr	s17, [r9, #552]	@ 0x228
 801a54c:	edc9 8a8b 	vstr	s17, [r9, #556]	@ 0x22c
 801a550:	edc9 8a8c 	vstr	s17, [r9, #560]	@ 0x230
 801a554:	edc9 8a8d 	vstr	s17, [r9, #564]	@ 0x234
 801a558:	edc9 8a8e 	vstr	s17, [r9, #568]	@ 0x238
 801a55c:	edc9 8a8f 	vstr	s17, [r9, #572]	@ 0x23c
 801a560:	edc9 8a6f 	vstr	s17, [r9, #444]	@ 0x1bc
 801a564:	edc9 8a90 	vstr	s17, [r9, #576]	@ 0x240
 801a568:	edc9 8a91 	vstr	s17, [r9, #580]	@ 0x244
 801a56c:	edc9 8a92 	vstr	s17, [r9, #584]	@ 0x248
 801a570:	edc9 8a94 	vstr	s17, [r9, #592]	@ 0x250
 801a574:	edc9 8a95 	vstr	s17, [r9, #596]	@ 0x254
 801a578:	edc9 8a96 	vstr	s17, [r9, #600]	@ 0x258
 801a57c:	edc9 8a97 	vstr	s17, [r9, #604]	@ 0x25c
 801a580:	edc9 8a98 	vstr	s17, [r9, #608]	@ 0x260
 801a584:	edc9 8a70 	vstr	s17, [r9, #448]	@ 0x1c0
 801a588:	edc9 8a99 	vstr	s17, [r9, #612]	@ 0x264
 801a58c:	edc9 8a9a 	vstr	s17, [r9, #616]	@ 0x268
 801a590:	edc9 8a9b 	vstr	s17, [r9, #620]	@ 0x26c
 801a594:	edc9 8a9c 	vstr	s17, [r9, #624]	@ 0x270
 801a598:	edc9 7a9d 	vstr	s15, [r9, #628]	@ 0x274
 801a59c:	edc9 7aa7 	vstr	s15, [r9, #668]	@ 0x29c
 801a5a0:	edc9 7ab1 	vstr	s15, [r9, #708]	@ 0x2c4
 801a5a4:	edc9 8a9e 	vstr	s17, [r9, #632]	@ 0x278
 801a5a8:	edc9 8a9f 	vstr	s17, [r9, #636]	@ 0x27c
 801a5ac:	edc9 8aa0 	vstr	s17, [r9, #640]	@ 0x280
 801a5b0:	edc9 8aa1 	vstr	s17, [r9, #644]	@ 0x284
 801a5b4:	edc9 8a71 	vstr	s17, [r9, #452]	@ 0x1c4
 801a5b8:	edc9 8aa2 	vstr	s17, [r9, #648]	@ 0x288
 801a5bc:	edc9 8aa3 	vstr	s17, [r9, #652]	@ 0x28c
 801a5c0:	edc9 8aa4 	vstr	s17, [r9, #656]	@ 0x290
 801a5c4:	edc9 8aa5 	vstr	s17, [r9, #660]	@ 0x294
 801a5c8:	edc9 8aa6 	vstr	s17, [r9, #664]	@ 0x298
 801a5cc:	edc9 8aa8 	vstr	s17, [r9, #672]	@ 0x2a0
 801a5d0:	edc9 8aa9 	vstr	s17, [r9, #676]	@ 0x2a4
 801a5d4:	edc9 8aaa 	vstr	s17, [r9, #680]	@ 0x2a8
 801a5d8:	edc9 8a72 	vstr	s17, [r9, #456]	@ 0x1c8
 801a5dc:	edc9 8aab 	vstr	s17, [r9, #684]	@ 0x2ac
 801a5e0:	edc9 8aac 	vstr	s17, [r9, #688]	@ 0x2b0
 801a5e4:	edc9 8aad 	vstr	s17, [r9, #692]	@ 0x2b4
 801a5e8:	edc9 8aae 	vstr	s17, [r9, #696]	@ 0x2b8
 801a5ec:	edc9 8aaf 	vstr	s17, [r9, #700]	@ 0x2bc
 801a5f0:	edc9 8ab0 	vstr	s17, [r9, #704]	@ 0x2c0
 801a5f4:	edc9 8ab2 	vstr	s17, [r9, #712]	@ 0x2c8
 801a5f8:	edc9 8ab3 	vstr	s17, [r9, #716]	@ 0x2cc
 801a5fc:	edc9 8a73 	vstr	s17, [r9, #460]	@ 0x1cc
 801a600:	edc9 8ab4 	vstr	s17, [r9, #720]	@ 0x2d0
 801a604:	edc9 8ab5 	vstr	s17, [r9, #724]	@ 0x2d4
 801a608:	edc9 8ab6 	vstr	s17, [r9, #728]	@ 0x2d8
 801a60c:	edc9 8ab7 	vstr	s17, [r9, #732]	@ 0x2dc
 801a610:	edc9 8ab8 	vstr	s17, [r9, #736]	@ 0x2e0
 801a614:	edc9 8ab9 	vstr	s17, [r9, #740]	@ 0x2e4
 801a618:	edc9 8aba 	vstr	s17, [r9, #744]	@ 0x2e8
 801a61c:	f889 21ac 	strb.w	r2, [r9, #428]	@ 0x1ac
 801a620:	f50d 624a 	add.w	r2, sp, #3232	@ 0xca0
 801a624:	9202      	str	r2, [sp, #8]
 801a626:	f50d 6233 	add.w	r2, sp, #2864	@ 0xb30
 801a62a:	9201      	str	r2, [sp, #4]
 801a62c:	f509 7a46 	add.w	sl, r9, #792	@ 0x318
 801a630:	f50d 621c 	add.w	r2, sp, #2496	@ 0x9c0
 801a634:	f8cd a00c 	str.w	sl, [sp, #12]
 801a638:	9200      	str	r2, [sp, #0]
 801a63a:	7820      	ldrb	r0, [r4, #0]
 801a63c:	edc9 7abb 	vstr	s15, [r9, #748]	@ 0x2ec
 801a640:	f50d 6305 	add.w	r3, sp, #2128	@ 0x850
 801a644:	f50d 62dc 	add.w	r2, sp, #1760	@ 0x6e0
 801a648:	f20d 61bc 	addw	r1, sp, #1724	@ 0x6bc
 801a64c:	edc9 7ac5 	vstr	s15, [r9, #788]	@ 0x314
 801a650:	edc9 8abc 	vstr	s17, [r9, #752]	@ 0x2f0
 801a654:	edc9 8a74 	vstr	s17, [r9, #464]	@ 0x1d0
 801a658:	edc9 8abd 	vstr	s17, [r9, #756]	@ 0x2f4
 801a65c:	edc9 8abe 	vstr	s17, [r9, #760]	@ 0x2f8
 801a660:	edc9 8abf 	vstr	s17, [r9, #764]	@ 0x2fc
 801a664:	edc9 8ac0 	vstr	s17, [r9, #768]	@ 0x300
 801a668:	edc9 8ac1 	vstr	s17, [r9, #772]	@ 0x304
 801a66c:	edc9 8ac2 	vstr	s17, [r9, #776]	@ 0x308
 801a670:	edc9 8ac3 	vstr	s17, [r9, #780]	@ 0x30c
 801a674:	edc9 8ac4 	vstr	s17, [r9, #784]	@ 0x310
 801a678:	f7fd fe08 	bl	801828c <DataHist_parameters>
 801a67c:	f609 1344 	addw	r3, r9, #2372	@ 0x944
 801a680:	f509 6216 	add.w	r2, r9, #2400	@ 0x960
 801a684:	f609 1168 	addw	r1, r9, #2408	@ 0x968
 801a688:	f509 6017 	add.w	r0, r9, #2416	@ 0x970
 801a68c:	f10d 0c20 	add.w	ip, sp, #32
 801a690:	9304      	str	r3, [sp, #16]
 801a692:	9205      	str	r2, [sp, #20]
 801a694:	9106      	str	r1, [sp, #24]
 801a696:	9007      	str	r0, [sp, #28]
 801a698:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a69c:	f8c9 393c 	str.w	r3, [r9, #2364]	@ 0x93c
 801a6a0:	9b04      	ldr	r3, [sp, #16]
 801a6a2:	f8c9 0930 	str.w	r0, [r9, #2352]	@ 0x930
 801a6a6:	f8c9 1934 	str.w	r1, [r9, #2356]	@ 0x934
 801a6aa:	f8c9 2938 	str.w	r2, [r9, #2360]	@ 0x938
 801a6ae:	9906      	ldr	r1, [sp, #24]
 801a6b0:	9a05      	ldr	r2, [sp, #20]
 801a6b2:	9807      	ldr	r0, [sp, #28]
 801a6b4:	f509 6b14 	add.w	fp, r9, #2368	@ 0x940
 801a6b8:	f609 1a5c 	addw	sl, r9, #2396	@ 0x95c
 801a6bc:	edcb 8a00 	vstr	s17, [fp]
 801a6c0:	f609 1748 	addw	r7, r9, #2376	@ 0x948
 801a6c4:	edca 8a00 	vstr	s17, [sl]
 801a6c8:	f609 1664 	addw	r6, r9, #2404	@ 0x964
 801a6cc:	edc3 8a00 	vstr	s17, [r3]
 801a6d0:	f609 1554 	addw	r5, r9, #2388	@ 0x954
 801a6d4:	f609 1458 	addw	r4, r9, #2392	@ 0x958
 801a6d8:	f609 1e6c 	addw	lr, r9, #2412	@ 0x96c
 801a6dc:	230a      	movs	r3, #10
 801a6de:	edc2 8a00 	vstr	s17, [r2]
 801a6e2:	edc7 8a00 	vstr	s17, [r7]
 801a6e6:	edc6 8a00 	vstr	s17, [r6]
 801a6ea:	f8c9 894c 	str.w	r8, [r9, #2380]	@ 0x94c
 801a6ee:	f8a9 8950 	strh.w	r8, [r9, #2384]	@ 0x950
 801a6f2:	edc5 8a00 	vstr	s17, [r5]
 801a6f6:	ed84 8a00 	vstr	s16, [r4]
 801a6fa:	edc1 8a00 	vstr	s17, [r1]
 801a6fe:	edc0 8a00 	vstr	s17, [r0]
 801a702:	edce 8a00 	vstr	s17, [lr]
 801a706:	f8c9 3974 	str.w	r3, [r9, #2420]	@ 0x974
 801a70a:	f889 8978 	strb.w	r8, [r9, #2424]	@ 0x978
 801a70e:	f60d 4dd4 	addw	sp, sp, #3284	@ 0xcd4
 801a712:	ecbd 8b02 	vpop	{d8}
 801a716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a71a:	bf00      	nop
 801a71c:	0000      	movs	r0, r0
	...

0801a720 <iNemoEngine_API_Update>:
 801a720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a724:	ed2d 8b10 	vpush	{d8-d15}
 801a728:	f2ad 5d0c 	subw	sp, sp, #1292	@ 0x50c
 801a72c:	eeb0 8a40 	vmov.f32	s16, s0
 801a730:	4607      	mov	r7, r0
 801a732:	4688      	mov	r8, r1
 801a734:	4614      	mov	r4, r2
 801a736:	932a      	str	r3, [sp, #168]	@ 0xa8
 801a738:	2b00      	cmp	r3, #0
 801a73a:	f000 820b 	beq.w	801ab54 <iNemoEngine_API_Update+0x434>
 801a73e:	68e0      	ldr	r0, [r4, #12]
 801a740:	6921      	ldr	r1, [r4, #16]
 801a742:	6962      	ldr	r2, [r4, #20]
 801a744:	abab      	add	r3, sp, #684	@ 0x2ac
 801a746:	c307      	stmia	r3!, {r0, r1, r2}
 801a748:	6820      	ldr	r0, [r4, #0]
 801a74a:	6861      	ldr	r1, [r4, #4]
 801a74c:	68a2      	ldr	r2, [r4, #8]
 801a74e:	aba8      	add	r3, sp, #672	@ 0x2a0
 801a750:	c307      	stmia	r3!, {r0, r1, r2}
 801a752:	69a0      	ldr	r0, [r4, #24]
 801a754:	69e1      	ldr	r1, [r4, #28]
 801a756:	6a22      	ldr	r2, [r4, #32]
 801a758:	f897 4978 	ldrb.w	r4, [r7, #2424]	@ 0x978
 801a75c:	abae      	add	r3, sp, #696	@ 0x2b8
 801a75e:	c307      	stmia	r3!, {r0, r1, r2}
 801a760:	b12c      	cbz	r4, 801a76e <iNemoEngine_API_Update+0x4e>
 801a762:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 801a766:	793b      	ldrb	r3, [r7, #4]
 801a768:	429a      	cmp	r2, r3
 801a76a:	f082 834a 	bcs.w	801ce02 <iNemoEngine_API_Update+0x26e2>
 801a76e:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 801a772:	ae3b      	add	r6, sp, #236	@ 0xec
 801a774:	4619      	mov	r1, r3
 801a776:	4630      	mov	r0, r6
 801a778:	aaab      	add	r2, sp, #684	@ 0x2ac
 801a77a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801a77c:	ad41      	add	r5, sp, #260	@ 0x104
 801a77e:	f7fd fe31 	bl	80183e4 <rotVect>
 801a782:	aaae      	add	r2, sp, #696	@ 0x2b8
 801a784:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 801a788:	a83e      	add	r0, sp, #248	@ 0xf8
 801a78a:	f7fd fe2b 	bl	80183e4 <rotVect>
 801a78e:	aaa8      	add	r2, sp, #672	@ 0x2a0
 801a790:	f107 0143 	add.w	r1, r7, #67	@ 0x43
 801a794:	4628      	mov	r0, r5
 801a796:	f7fd fe25 	bl	80183e4 <rotVect>
 801a79a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 801a79e:	b923      	cbnz	r3, 801a7aa <iNemoEngine_API_Update+0x8a>
 801a7a0:	4b9d      	ldr	r3, [pc, #628]	@ (801aa18 <iNemoEngine_API_Update+0x2f8>)
 801a7a2:	606b      	str	r3, [r5, #4]
 801a7a4:	60ab      	str	r3, [r5, #8]
 801a7a6:	2300      	movs	r3, #0
 801a7a8:	602b      	str	r3, [r5, #0]
 801a7aa:	f8d7 394c 	ldr.w	r3, [r7, #2380]	@ 0x94c
 801a7ae:	9328      	str	r3, [sp, #160]	@ 0xa0
 801a7b0:	2b09      	cmp	r3, #9
 801a7b2:	d851      	bhi.n	801a858 <iNemoEngine_API_Update+0x138>
 801a7b4:	edd6 aa01 	vldr	s21, [r6, #4]
 801a7b8:	ed96 ba00 	vldr	s22, [r6]
 801a7bc:	ed96 aa02 	vldr	s20, [r6, #8]
 801a7c0:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 801a7c4:	eef7 ba00 	vmov.f32	s23, #112	@ 0x3f800000  1.0
 801a7c8:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801a7cc:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801a7d0:	ee17 0a90 	vmov	r0, s15
 801a7d4:	f7e5 fee0 	bl	8000598 <__aeabi_f2d>
 801a7d8:	ec41 0b10 	vmov	d0, r0, r1
 801a7dc:	f007 fa4c 	bl	8021c78 <sqrt>
 801a7e0:	ec51 0b10 	vmov	r0, r1, d0
 801a7e4:	f7e6 fa08 	bl	8000bf8 <__aeabi_d2f>
 801a7e8:	ee07 0a90 	vmov	s15, r0
 801a7ec:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 801a7f0:	ed95 9a01 	vldr	s18, [r5, #4]
 801a7f4:	edd5 9a00 	vldr	s19, [r5]
 801a7f8:	edd5 8a02 	vldr	s17, [r5, #8]
 801a7fc:	ee69 7a09 	vmul.f32	s15, s18, s18
 801a800:	ee2b ba07 	vmul.f32	s22, s22, s14
 801a804:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801a808:	ee6a aa87 	vmul.f32	s21, s21, s14
 801a80c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801a810:	ee2a aa07 	vmul.f32	s20, s20, s14
 801a814:	ee17 0a90 	vmov	r0, s15
 801a818:	ed86 ba00 	vstr	s22, [r6]
 801a81c:	edc6 aa01 	vstr	s21, [r6, #4]
 801a820:	ed86 aa02 	vstr	s20, [r6, #8]
 801a824:	f7e5 feb8 	bl	8000598 <__aeabi_f2d>
 801a828:	ec41 0b10 	vmov	d0, r0, r1
 801a82c:	f007 fa24 	bl	8021c78 <sqrt>
 801a830:	ec51 0b10 	vmov	r0, r1, d0
 801a834:	f7e6 f9e0 	bl	8000bf8 <__aeabi_d2f>
 801a838:	ee07 0a10 	vmov	s14, r0
 801a83c:	eecb 7a87 	vdiv.f32	s15, s23, s14
 801a840:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801a844:	ee29 9a27 	vmul.f32	s18, s18, s15
 801a848:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801a84c:	edc5 9a00 	vstr	s19, [r5]
 801a850:	ed85 9a01 	vstr	s18, [r5, #4]
 801a854:	edc5 8a02 	vstr	s17, [r5, #8]
 801a858:	793b      	ldrb	r3, [r7, #4]
 801a85a:	f8b7 2950 	ldrh.w	r2, [r7, #2384]	@ 0x950
 801a85e:	429a      	cmp	r2, r3
 801a860:	f080 80f2 	bcs.w	801aa48 <iNemoEngine_API_Update+0x328>
 801a864:	abd6      	add	r3, sp, #856	@ 0x358
 801a866:	931c      	str	r3, [sp, #112]	@ 0x70
 801a868:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 801a86c:	9323      	str	r3, [sp, #140]	@ 0x8c
 801a86e:	f607 1334 	addw	r3, r7, #2356	@ 0x934
 801a872:	9324      	str	r3, [sp, #144]	@ 0x90
 801a874:	f607 1338 	addw	r3, r7, #2360	@ 0x938
 801a878:	9325      	str	r3, [sp, #148]	@ 0x94
 801a87a:	eddd 8aff 	vldr	s17, [sp, #1020]	@ 0x3fc
 801a87e:	f607 133c 	addw	r3, r7, #2364	@ 0x93c
 801a882:	9326      	str	r3, [sp, #152]	@ 0x98
 801a884:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 801a888:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801a88a:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801a88c:	3301      	adds	r3, #1
 801a88e:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 801a892:	aaab      	add	r2, sp, #684	@ 0x2ac
 801a894:	4650      	mov	r0, sl
 801a896:	f7fd fda5 	bl	80183e4 <rotVect>
 801a89a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801a89c:	ed93 aa00 	vldr	s20, [r3]
 801a8a0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a8a2:	681b      	ldr	r3, [r3, #0]
 801a8a4:	f8c8 300c 	str.w	r3, [r8, #12]
 801a8a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	f8c8 3010 	str.w	r3, [r8, #16]
 801a8b0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	f8c8 3014 	str.w	r3, [r8, #20]
 801a8b8:	ed88 aa06 	vstr	s20, [r8, #24]
 801a8bc:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801a8c0:	9301      	str	r3, [sp, #4]
 801a8c2:	f108 0328 	add.w	r3, r8, #40	@ 0x28
 801a8c6:	4651      	mov	r1, sl
 801a8c8:	4642      	mov	r2, r8
 801a8ca:	f108 000c 	add.w	r0, r8, #12
 801a8ce:	9300      	str	r3, [sp, #0]
 801a8d0:	f108 031c 	add.w	r3, r8, #28
 801a8d4:	f7ff fb6c 	bl	8019fb0 <output_update>
 801a8d8:	edd8 9a00 	vldr	s19, [r8]
 801a8dc:	ed98 9a01 	vldr	s18, [r8, #4]
 801a8e0:	eeb0 0a69 	vmov.f32	s0, s19
 801a8e4:	f007 fb10 	bl	8021f08 <sinf>
 801a8e8:	eeb0 8a40 	vmov.f32	s16, s0
 801a8ec:	eeb0 0a69 	vmov.f32	s0, s19
 801a8f0:	f007 fabe 	bl	8021e70 <cosf>
 801a8f4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a8f6:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a8fa:	ed93 7a33 	vldr	s14, [r3, #204]	@ 0xcc
 801a8fe:	ed93 6a3d 	vldr	s12, [r3, #244]	@ 0xf4
 801a902:	ee68 7a08 	vmul.f32	s15, s16, s16
 801a906:	ee20 8a07 	vmul.f32	s16, s0, s14
 801a90a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801aa1c <iNemoEngine_API_Update+0x2fc>
 801a90e:	eef0 6ac9 	vabs.f32	s13, s18
 801a912:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a91a:	eea7 8a86 	vfma.f32	s16, s15, s12
 801a91e:	d573      	bpl.n	801aa08 <iNemoEngine_API_Update+0x2e8>
 801a920:	eeb0 0a49 	vmov.f32	s0, s18
 801a924:	f007 fb36 	bl	8021f94 <tanf>
 801a928:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a92c:	eeb0 7a68 	vmov.f32	s14, s17
 801a930:	eea0 7a08 	vfma.f32	s14, s0, s16
 801a934:	4c3a      	ldr	r4, [pc, #232]	@ (801aa20 <iNemoEngine_API_Update+0x300>)
 801a936:	eef1 7ac7 	vsqrt.f32	s15, s14
 801a93a:	f8d4 03c0 	ldr.w	r0, [r4, #960]	@ 0x3c0
 801a93e:	eddf 6a39 	vldr	s13, [pc, #228]	@ 801aa24 <iNemoEngine_API_Update+0x304>
 801a942:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 801aa38 <iNemoEngine_API_Update+0x318>
 801a946:	ed98 8a04 	vldr	s16, [r8, #16]
 801a94a:	edd8 8a03 	vldr	s17, [r8, #12]
 801a94e:	ed98 9a05 	vldr	s18, [r8, #20]
 801a952:	ed98 6a08 	vldr	s12, [r8, #32]
 801a956:	ed98 0a07 	vldr	s0, [r8, #28]
 801a95a:	ed98 1a09 	vldr	s2, [r8, #36]	@ 0x24
 801a95e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a962:	eef4 7ae6 	vcmpe.f32	s15, s13
 801a966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96a:	bf88      	it	hi
 801a96c:	eef0 7a66 	vmovhi.f32	s15, s13
 801a970:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a978:	bfb8      	it	lt
 801a97a:	eef0 7a47 	vmovlt.f32	s15, s14
 801a97e:	edc8 7a0e 	vstr	s15, [r8, #56]	@ 0x38
 801a982:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801a986:	bb73      	cbnz	r3, 801a9e6 <iNemoEngine_API_Update+0x2c6>
 801a988:	eef0 0a46 	vmov.f32	s1, s12
 801a98c:	f7fd fdfc 	bl	8018588 <findDirection>
 801a990:	f8c4 03c0 	str.w	r0, [r4, #960]	@ 0x3c0
 801a994:	2805      	cmp	r0, #5
 801a996:	f204 8186 	bhi.w	801eca6 <iNemoEngine_API_Update+0x4586>
 801a99a:	e8df f010 	tbh	[pc, r0, lsl #1]
 801a99e:	000a      	.short	0x000a
 801a9a0:	0006123c 	.word	0x0006123c
 801a9a4:	0006126f 	.word	0x0006126f
 801a9a8:	000a      	.short	0x000a
 801a9aa:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801aa28 <iNemoEngine_API_Update+0x308>
 801a9ae:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801a9b2:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801aa2c <iNemoEngine_API_Update+0x30c>
 801a9b6:	eef4 9ae7 	vcmpe.f32	s19, s15
 801a9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9be:	bfa8      	it	ge
 801a9c0:	ee79 9ae7 	vsubge.f32	s19, s19, s15
 801a9c4:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 801a9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9cc:	d503      	bpl.n	801a9d6 <iNemoEngine_API_Update+0x2b6>
 801a9ce:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801aa2c <iNemoEngine_API_Update+0x30c>
 801a9d2:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801a9d6:	edc8 9a0d 	vstr	s19, [r8, #52]	@ 0x34
 801a9da:	f20d 5d0c 	addw	sp, sp, #1292	@ 0x50c
 801a9de:	ecbd 8b10 	vpop	{d8-d15}
 801a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e6:	eef0 0a40 	vmov.f32	s1, s0
 801a9ea:	eeb1 1a41 	vneg.f32	s2, s2
 801a9ee:	eeb0 0a46 	vmov.f32	s0, s12
 801a9f2:	f7fd fdc9 	bl	8018588 <findDirection>
 801a9f6:	eef0 7a68 	vmov.f32	s15, s17
 801a9fa:	eeb1 9a49 	vneg.f32	s18, s18
 801a9fe:	eef0 8a48 	vmov.f32	s17, s16
 801aa02:	eeb0 8a67 	vmov.f32	s16, s15
 801aa06:	e7c3      	b.n	801a990 <iNemoEngine_API_Update+0x270>
 801aa08:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801aa30 <iNemoEngine_API_Update+0x310>
 801aa0c:	eeb0 7a68 	vmov.f32	s14, s17
 801aa10:	eea8 7a27 	vfma.f32	s14, s16, s15
 801aa14:	e78e      	b.n	801a934 <iNemoEngine_API_Update+0x214>
 801aa16:	bf00      	nop
 801aa18:	3f333333 	.word	0x3f333333
 801aa1c:	3fbc430e 	.word	0x3fbc430e
 801aa20:	2000038c 	.word	0x2000038c
 801aa24:	40490fdb 	.word	0x40490fdb
 801aa28:	43340000 	.word	0x43340000
 801aa2c:	43b40000 	.word	0x43b40000
 801aa30:	42c6ab07 	.word	0x42c6ab07
 801aa34:	3c03126f 	.word	0x3c03126f
 801aa38:	3c8efa35 	.word	0x3c8efa35
 801aa3c:	3ed93dd9 	.word	0x3ed93dd9
 801aa40:	3b656042 	.word	0x3b656042
 801aa44:	42c80000 	.word	0x42c80000
 801aa48:	ee07 3a90 	vmov	s15, r3
 801aa4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aa50:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 801aa34 <iNemoEngine_API_Update+0x314>
 801aa54:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 801aa38 <iNemoEngine_API_Update+0x318>
 801aa58:	ed1f aa08 	vldr	s20, [pc, #-32]	@ 801aa3c <iNemoEngine_API_Update+0x31c>
 801aa5c:	ee67 7a88 	vmul.f32	s15, s15, s16
 801aa60:	f607 145c 	addw	r4, r7, #2396	@ 0x95c
 801aa64:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801aa68:	f507 6016 	add.w	r0, r7, #2400	@ 0x960
 801aa6c:	f607 1164 	addw	r1, r7, #2404	@ 0x964
 801aa70:	2200      	movs	r2, #0
 801aa72:	f04f 0c00 	mov.w	ip, #0
 801aa76:	ab63      	add	r3, sp, #396	@ 0x18c
 801aa78:	edcd 7a07 	vstr	s15, [sp, #28]
 801aa7c:	eef1 7ac6 	vsqrt.f32	s15, s12
 801aa80:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 801aa40 <iNemoEngine_API_Update+0x320>
 801aa84:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 801aa88:	edd4 6a00 	vldr	s13, [r4]
 801aa8c:	ee66 fa87 	vmul.f32	s31, s13, s14
 801aa90:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801aa94:	edd0 6a00 	vldr	s13, [r0]
 801aa98:	ee26 fa87 	vmul.f32	s30, s13, s14
 801aa9c:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801aaa0:	edd1 6a00 	vldr	s13, [r1]
 801aaa4:	f8a7 c950 	strh.w	ip, [r7, #2384]	@ 0x950
 801aaa8:	6022      	str	r2, [r4, #0]
 801aaaa:	6002      	str	r2, [r0, #0]
 801aaac:	600a      	str	r2, [r1, #0]
 801aaae:	797a      	ldrb	r2, [r7, #5]
 801aab0:	9209      	str	r2, [sp, #36]	@ 0x24
 801aab2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801aab6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801aaba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801aabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aac0:	edcd 6a08 	vstr	s13, [sp, #32]
 801aac4:	ee26 7a87 	vmul.f32	s14, s13, s14
 801aac8:	ac60      	add	r4, sp, #384	@ 0x180
 801aaca:	2b01      	cmp	r3, #1
 801aacc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801aad0:	ee27 aa8a 	vmul.f32	s20, s15, s20
 801aad4:	ed8d 7a10 	vstr	s14, [sp, #64]	@ 0x40
 801aad8:	f002 83ff 	beq.w	801d2da <iNemoEngine_API_Update+0x2bba>
 801aadc:	2b02      	cmp	r3, #2
 801aade:	f002 83f3 	beq.w	801d2c8 <iNemoEngine_API_Update+0x2ba8>
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	f002 8261 	beq.w	801cfaa <iNemoEngine_API_Update+0x288a>
 801aae8:	edd7 9a05 	vldr	s19, [r7, #20]
 801aaec:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 801aa44 <iNemoEngine_API_Update+0x324>
 801aaf0:	4a1a      	ldr	r2, [pc, #104]	@ (801ab5c <iNemoEngine_API_Update+0x43c>)
 801aaf2:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 801aaf6:	ee69 9a87 	vmul.f32	s19, s19, s14
 801aafa:	ee67 8aa8 	vmul.f32	s17, s15, s17
 801aafe:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 801ab02:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 801ab60 <iNemoEngine_API_Update+0x440>
 801ab06:	eddf 5a17 	vldr	s11, [pc, #92]	@ 801ab64 <iNemoEngine_API_Update+0x444>
 801ab0a:	887b      	ldrh	r3, [r7, #2]
 801ab0c:	ee26 7a87 	vmul.f32	s14, s13, s14
 801ab10:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801ab14:	1e59      	subs	r1, r3, #1
 801ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ab1a:	2912      	cmp	r1, #18
 801ab1c:	edcd 5a2f 	vstr	s11, [sp, #188]	@ 0xbc
 801ab20:	edcd 7a21 	vstr	s15, [sp, #132]	@ 0x84
 801ab24:	d824      	bhi.n	801ab70 <iNemoEngine_API_Update+0x450>
 801ab26:	3301      	adds	r3, #1
 801ab28:	b299      	uxth	r1, r3
 801ab2a:	2903      	cmp	r1, #3
 801ab2c:	b21b      	sxth	r3, r3
 801ab2e:	f202 8232 	bhi.w	801cf96 <iNemoEngine_API_Update+0x2876>
 801ab32:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801ab68 <iNemoEngine_API_Update+0x448>
 801ab36:	ee86 6a07 	vdiv.f32	s12, s12, s14
 801ab3a:	ee6a 7a07 	vmul.f32	s15, s20, s14
 801ab3e:	ed8d 6a29 	vstr	s12, [sp, #164]	@ 0xa4
 801ab42:	ed9d 6a21 	vldr	s12, [sp, #132]	@ 0x84
 801ab46:	ee26 7a07 	vmul.f32	s14, s12, s14
 801ab4a:	eeb0 aa67 	vmov.f32	s20, s15
 801ab4e:	ed8d 7a21 	vstr	s14, [sp, #132]	@ 0x84
 801ab52:	e020      	b.n	801ab96 <iNemoEngine_API_Update+0x476>
 801ab54:	ab50      	add	r3, sp, #320	@ 0x140
 801ab56:	932a      	str	r3, [sp, #168]	@ 0xa8
 801ab58:	e5f1      	b.n	801a73e <iNemoEngine_API_Update+0x1e>
 801ab5a:	bf00      	nop
 801ab5c:	3a83126f 	.word	0x3a83126f
 801ab60:	3fb50481 	.word	0x3fb50481
 801ab64:	3e0f5c29 	.word	0x3e0f5c29
 801ab68:	3e4ccccd 	.word	0x3e4ccccd
 801ab6c:	358637bd 	.word	0x358637bd
 801ab70:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 801ab6c <iNemoEngine_API_Update+0x44c>
 801ab74:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801ab78:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab7c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801ab80:	ee86 7a07 	vdiv.f32	s14, s12, s14
 801ab84:	2300      	movs	r3, #0
 801ab86:	ee6a 7a27 	vmul.f32	s15, s20, s15
 801ab8a:	ed8d 7a29 	vstr	s14, [sp, #164]	@ 0xa4
 801ab8e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801ab92:	ee2a aa07 	vmul.f32	s20, s20, s14
 801ab96:	edcd 7a8d 	vstr	s15, [sp, #564]	@ 0x234
 801ab9a:	edcd 7a8e 	vstr	s15, [sp, #568]	@ 0x238
 801ab9e:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 801aba2:	eddd 7a21 	vldr	s15, [sp, #132]	@ 0x84
 801aba6:	807b      	strh	r3, [r7, #2]
 801aba8:	edcd 7a96 	vstr	s15, [sp, #600]	@ 0x258
 801abac:	eddd 7a2f 	vldr	s15, [sp, #188]	@ 0xbc
 801abb0:	4be5      	ldr	r3, [pc, #916]	@ (801af48 <iNemoEngine_API_Update+0x828>)
 801abb2:	edcd 7a97 	vstr	s15, [sp, #604]	@ 0x25c
 801abb6:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801abba:	eddd 7a29 	vldr	s15, [sp, #164]	@ 0xa4
 801abbe:	926c      	str	r2, [sp, #432]	@ 0x1b0
 801abc0:	ee26 7a87 	vmul.f32	s14, s13, s14
 801abc4:	a8d6      	add	r0, sp, #856	@ 0x358
 801abc6:	926d      	str	r2, [sp, #436]	@ 0x1b4
 801abc8:	926e      	str	r2, [sp, #440]	@ 0x1b8
 801abca:	2100      	movs	r1, #0
 801abcc:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 801abd0:	4605      	mov	r5, r0
 801abd2:	9371      	str	r3, [sp, #452]	@ 0x1c4
 801abd4:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 801abd8:	901c      	str	r0, [sp, #112]	@ 0x70
 801abda:	ed8d aa90 	vstr	s20, [sp, #576]	@ 0x240
 801abde:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801abe2:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 801abe6:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 801abea:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 801abee:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 801abf2:	ed8d 7a98 	vstr	s14, [sp, #608]	@ 0x260
 801abf6:	edcd 7a69 	vstr	s15, [sp, #420]	@ 0x1a4
 801abfa:	edcd 7a6a 	vstr	s15, [sp, #424]	@ 0x1a8
 801abfe:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 801ac02:	f00a f8ea 	bl	8024dda <memset>
 801ac06:	7b79      	ldrb	r1, [r7, #13]
 801ac08:	9120      	str	r1, [sp, #128]	@ 0x80
 801ac0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801ac0e:	f8c5 30a8 	str.w	r3, [r5, #168]	@ 0xa8
 801ac12:	f8c5 30dc 	str.w	r3, [r5, #220]	@ 0xdc
 801ac16:	f8c5 3110 	str.w	r3, [r5, #272]	@ 0x110
 801ac1a:	f8c5 3144 	str.w	r3, [r5, #324]	@ 0x144
 801ac1e:	f8c5 3178 	str.w	r3, [r5, #376]	@ 0x178
 801ac22:	f8c5 31ac 	str.w	r3, [r5, #428]	@ 0x1ac
 801ac26:	2900      	cmp	r1, #0
 801ac28:	f001 8103 	beq.w	801be32 <iNemoEngine_API_Update+0x1712>
 801ac2c:	ed94 8a01 	vldr	s16, [r4, #4]
 801ac30:	ed94 9a00 	vldr	s18, [r4]
 801ac34:	edd4 ea02 	vldr	s29, [r4, #8]
 801ac38:	ee68 7a08 	vmul.f32	s15, s16, s16
 801ac3c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 801ac40:	eee9 7a09 	vfma.f32	s15, s18, s18
 801ac44:	ee28 7a07 	vmul.f32	s14, s16, s14
 801ac48:	eeee 7aae 	vfma.f32	s15, s29, s29
 801ac4c:	ee39 6a09 	vadd.f32	s12, s18, s18
 801ac50:	ee7e 5aae 	vadd.f32	s11, s29, s29
 801ac54:	edcd 7a04 	vstr	s15, [sp, #16]
 801ac58:	eeb1 5a65 	vneg.f32	s10, s11
 801ac5c:	eef1 7a46 	vneg.f32	s15, s12
 801ac60:	eef1 6a47 	vneg.f32	s13, s14
 801ac64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ac66:	ed94 da04 	vldr	s26, [r4, #16]
 801ac6a:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
 801ac6e:	eef1 7a4d 	vneg.f32	s15, s26
 801ac72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ac76:	edd4 ba05 	vldr	s23, [r4, #20]
 801ac7a:	edc3 7a05 	vstr	s15, [r3, #20]
 801ac7e:	eef1 7a67 	vneg.f32	s15, s15
 801ac82:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
 801ac86:	ee7b 7aab 	vadd.f32	s15, s23, s23
 801ac8a:	ed94 ca03 	vldr	s24, [r4, #12]
 801ac8e:	edc3 7a04 	vstr	s15, [r3, #16]
 801ac92:	eef1 7a67 	vneg.f32	s15, s15
 801ac96:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
 801ac9a:	ee7c 7a0c 	vadd.f32	s15, s24, s24
 801ac9e:	edc3 5a01 	vstr	s11, [r3, #4]
 801aca2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
 801aca6:	eef1 7a67 	vneg.f32	s15, s15
 801acaa:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 801acae:	ed83 7a02 	vstr	s14, [r3, #8]
 801acb2:	ed83 5a0c 	vstr	s10, [r3, #48]	@ 0x30
 801acb6:	ed83 6a0e 	vstr	s12, [r3, #56]	@ 0x38
 801acba:	edc3 6a18 	vstr	s13, [r3, #96]	@ 0x60
 801acbe:	2230      	movs	r2, #48	@ 0x30
 801acc0:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 801acc4:	2100      	movs	r1, #0
 801acc6:	a899      	add	r0, sp, #612	@ 0x264
 801acc8:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 801accc:	9346      	str	r3, [sp, #280]	@ 0x118
 801acce:	f00a f884 	bl	8024dda <memset>
 801acd2:	edd7 7a06 	vldr	s15, [r7, #24]
 801acd6:	f897 31ac 	ldrb.w	r3, [r7, #428]	@ 0x1ac
 801acda:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801acde:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 801ace2:	edd7 7a07 	vldr	s15, [r7, #28]
 801ace6:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801acea:	edcd 7a12 	vstr	s15, [sp, #72]	@ 0x48
 801acee:	edd7 7a08 	vldr	s15, [r7, #32]
 801acf2:	ee69 7aa7 	vmul.f32	s15, s19, s15
 801acf6:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f042 8660 	bne.w	801d9c0 <iNemoEngine_API_Update+0x32a0>
 801ad00:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 801ad04:	932b      	str	r3, [sp, #172]	@ 0xac
 801ad06:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 801ad0a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801ad0c:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 801ad10:	932d      	str	r3, [sp, #180]	@ 0xb4
 801ad12:	f897 3318 	ldrb.w	r3, [r7, #792]	@ 0x318
 801ad16:	2b00      	cmp	r3, #0
 801ad18:	f042 8470 	bne.w	801d5fc <iNemoEngine_API_Update+0x2edc>
 801ad1c:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 801ad20:	9305      	str	r3, [sp, #20]
 801ad22:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 801ad26:	9306      	str	r3, [sp, #24]
 801ad28:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 801ad2c:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 801ad30:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 801ad34:	930e      	str	r3, [sp, #56]	@ 0x38
 801ad36:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 801ad3a:	f507 6313 	add.w	r3, r7, #2352	@ 0x930
 801ad3e:	ed93 ba00 	vldr	s22, [r3]
 801ad42:	9323      	str	r3, [sp, #140]	@ 0x8c
 801ad44:	f607 1234 	addw	r2, r7, #2356	@ 0x934
 801ad48:	f607 1138 	addw	r1, r7, #2360	@ 0x938
 801ad4c:	f607 103c 	addw	r0, r7, #2364	@ 0x93c
 801ad50:	edd2 aa00 	vldr	s21, [r2]
 801ad54:	edd1 9a00 	vldr	s19, [r1]
 801ad58:	edd0 ca00 	vldr	s25, [r0]
 801ad5c:	9224      	str	r2, [sp, #144]	@ 0x90
 801ad5e:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801ad62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad66:	9125      	str	r1, [sp, #148]	@ 0x94
 801ad68:	9026      	str	r0, [sp, #152]	@ 0x98
 801ad6a:	ed8d ba58 	vstr	s22, [sp, #352]	@ 0x160
 801ad6e:	edcd aa59 	vstr	s21, [sp, #356]	@ 0x164
 801ad72:	edcd 9a5a 	vstr	s19, [sp, #360]	@ 0x168
 801ad76:	edcd ca5b 	vstr	s25, [sp, #364]	@ 0x16c
 801ad7a:	f04f 0300 	mov.w	r3, #0
 801ad7e:	d142      	bne.n	801ae06 <iNemoEngine_API_Update+0x6e6>
 801ad80:	eef5 aa40 	vcmp.f32	s21, #0.0
 801ad84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad88:	d13d      	bne.n	801ae06 <iNemoEngine_API_Update+0x6e6>
 801ad8a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801ad8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad92:	f043 856d 	bne.w	801e870 <iNemoEngine_API_Update+0x4150>
 801ad96:	eef5 ca40 	vcmp.f32	s25, #0.0
 801ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad9e:	f043 867f 	bne.w	801eaa0 <iNemoEngine_API_Update+0x4380>
 801ada2:	eef7 da00 	vmov.f32	s27, #112	@ 0x3f800000  1.0
 801ada6:	9358      	str	r3, [sp, #352]	@ 0x160
 801ada8:	9359      	str	r3, [sp, #356]	@ 0x164
 801adaa:	935a      	str	r3, [sp, #360]	@ 0x168
 801adac:	2100      	movs	r1, #0
 801adae:	4b67      	ldr	r3, [pc, #412]	@ (801af4c <iNemoEngine_API_Update+0x82c>)
 801adb0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801adb4:	edc7 da73 	vstr	s27, [r7, #460]	@ 0x1cc
 801adb8:	edc7 da74 	vstr	s27, [r7, #464]	@ 0x1d0
 801adbc:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 801adc0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801adc4:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801adc8:	edcd da5b 	vstr	s27, [sp, #364]	@ 0x16c
 801adcc:	f00a f805 	bl	8024dda <memset>
 801add0:	4b5f      	ldr	r3, [pc, #380]	@ (801af50 <iNemoEngine_API_Update+0x830>)
 801add2:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 801add6:	eef0 9a6c 	vmov.f32	s19, s25
 801adda:	eef0 aa6c 	vmov.f32	s21, s25
 801adde:	eeb0 ba6c 	vmov.f32	s22, s25
 801ade2:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 801ade6:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 801adea:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801adee:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801adf2:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801adf6:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801adfa:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801adfe:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 801ae02:	eef0 ca6d 	vmov.f32	s25, s27
 801ae06:	eddf 7a53 	vldr	s15, [pc, #332]	@ 801af54 <iNemoEngine_API_Update+0x834>
 801ae0a:	ed9d 7a04 	vldr	s14, [sp, #16]
 801ae0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ae12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae16:	f100 87fe 	bmi.w	801be16 <iNemoEngine_API_Update+0x16f6>
 801ae1a:	eeb1 eac7 	vsqrt.f32	s28, s14
 801ae1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ae22:	ee3e 6a47 	vsub.f32	s12, s28, s14
 801ae26:	eec7 7a0e 	vdiv.f32	s15, s14, s28
 801ae2a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801ae2e:	eeb0 7ac6 	vabs.f32	s14, s12
 801ae32:	ed8d 7a2e 	vstr	s14, [sp, #184]	@ 0xb8
 801ae36:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ae3a:	ed8d 7a30 	vstr	s14, [sp, #192]	@ 0xc0
 801ae3e:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 801ae42:	edd4 6a00 	vldr	s13, [r4]
 801ae46:	ed94 6a01 	vldr	s12, [r4, #4]
 801ae4a:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 801ae4e:	eeac 7a0c 	vfma.f32	s14, s24, s24
 801ae52:	9b05      	ldr	r3, [sp, #20]
 801ae54:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801ae58:	eeab 7aab 	vfma.f32	s14, s23, s23
 801ae5c:	4628      	mov	r0, r5
 801ae5e:	ee67 6a86 	vmul.f32	s13, s15, s12
 801ae62:	ed8d 6a35 	vstr	s12, [sp, #212]	@ 0xd4
 801ae66:	ed9f 6a3b 	vldr	s12, [pc, #236]	@ 801af54 <iNemoEngine_API_Update+0x834>
 801ae6a:	edcd 6a48 	vstr	s13, [sp, #288]	@ 0x120
 801ae6e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae76:	bf54      	ite	pl
 801ae78:	eeb1 7ac7 	vsqrtpl.f32	s14, s14
 801ae7c:	ed9f 7a36 	vldrmi	s14, [pc, #216]	@ 801af58 <iNemoEngine_API_Update+0x838>
 801ae80:	ed94 5a02 	vldr	s10, [r4, #8]
 801ae84:	ed8d 7a0a 	vstr	s14, [sp, #40]	@ 0x28
 801ae88:	eef7 2a00 	vmov.f32	s5, #112	@ 0x3f800000  1.0
 801ae8c:	ee82 7a87 	vdiv.f32	s14, s5, s14
 801ae90:	ee65 7a27 	vmul.f32	s15, s10, s15
 801ae94:	ee2d 6a07 	vmul.f32	s12, s26, s14
 801ae98:	ed93 3a00 	vldr	s6, [r3]
 801ae9c:	ed8d 6a4b 	vstr	s12, [sp, #300]	@ 0x12c
 801aea0:	ee66 6a26 	vmul.f32	s13, s12, s13
 801aea4:	ee2c 6a07 	vmul.f32	s12, s24, s14
 801aea8:	ee2b 7a87 	vmul.f32	s14, s23, s14
 801aeac:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aeb0:	eeb0 0a43 	vmov.f32	s0, s6
 801aeb4:	eee7 6a87 	vfma.f32	s13, s15, s14
 801aeb8:	ed8d 7a4c 	vstr	s14, [sp, #304]	@ 0x130
 801aebc:	ed8d 5a32 	vstr	s10, [sp, #200]	@ 0xc8
 801aec0:	edcd 5a47 	vstr	s11, [sp, #284]	@ 0x11c
 801aec4:	ed8d 6a4a 	vstr	s12, [sp, #296]	@ 0x128
 801aec8:	edcd 6a22 	vstr	s13, [sp, #136]	@ 0x88
 801aecc:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801aed0:	f7fd fd14 	bl	80188fc <dataDerivative5>
 801aed4:	9b06      	ldr	r3, [sp, #24]
 801aed6:	ed8d 0a14 	vstr	s0, [sp, #80]	@ 0x50
 801aeda:	edd3 7a00 	vldr	s15, [r3]
 801aede:	4630      	mov	r0, r6
 801aee0:	eeb0 0a67 	vmov.f32	s0, s15
 801aee4:	edcd 7a03 	vstr	s15, [sp, #12]
 801aee8:	f7fd fd08 	bl	80188fc <dataDerivative5>
 801aeec:	eddb da00 	vldr	s27, [fp]
 801aef0:	ed8d 0a0c 	vstr	s0, [sp, #48]	@ 0x30
 801aef4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801aef6:	eeb0 0a6d 	vmov.f32	s0, s27
 801aefa:	f7fd fcff 	bl	80188fc <dataDerivative5>
 801aefe:	eec2 7a83 	vdiv.f32	s15, s5, s6
 801af02:	ed8d 0a16 	vstr	s0, [sp, #88]	@ 0x58
 801af06:	ee29 9a27 	vmul.f32	s18, s18, s15
 801af0a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801af0e:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801af12:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801af16:	eeb0 7ac9 	vabs.f32	s14, s18
 801af1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801af1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af22:	d52d      	bpl.n	801af80 <iNemoEngine_API_Update+0x860>
 801af24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801af28:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af30:	f282 8092 	bge.w	801d058 <iNemoEngine_API_Update+0x2938>
 801af34:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801af38:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801af3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af40:	f303 8088 	bgt.w	801e054 <iNemoEngine_API_Update+0x3934>
 801af44:	e00c      	b.n	801af60 <iNemoEngine_API_Update+0x840>
 801af46:	bf00      	nop
 801af48:	3a9d4952 	.word	0x3a9d4952
 801af4c:	bf666666 	.word	0xbf666666
 801af50:	40a00000 	.word	0x40a00000
 801af54:	3c23d70a 	.word	0x3c23d70a
 801af58:	3dcccccd 	.word	0x3dcccccd
 801af5c:	4b000000 	.word	0x4b000000
 801af60:	ee79 7a67 	vsub.f32	s15, s18, s15
 801af64:	ee17 0a90 	vmov	r0, s15
 801af68:	f7e5 fb16 	bl	8000598 <__aeabi_f2d>
 801af6c:	ec41 0b10 	vmov	d0, r0, r1
 801af70:	f007 f92a 	bl	80221c8 <ceil>
 801af74:	ec51 0b10 	vmov	r0, r1, d0
 801af78:	f7e5 fe3e 	bl	8000bf8 <__aeabi_d2f>
 801af7c:	ee09 0a10 	vmov	s18, r0
 801af80:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801af84:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 801af88:	eeb0 7ac8 	vabs.f32	s14, s16
 801af8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801af90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af94:	d51f      	bpl.n	801afd6 <iNemoEngine_API_Update+0x8b6>
 801af96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801af9a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801af9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa2:	f282 802d 	bge.w	801d000 <iNemoEngine_API_Update+0x28e0>
 801afa6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801afaa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801afae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb2:	f303 804b 	bgt.w	801e04c <iNemoEngine_API_Update+0x392c>
 801afb6:	ee78 7a67 	vsub.f32	s15, s16, s15
 801afba:	ee17 0a90 	vmov	r0, s15
 801afbe:	f7e5 faeb 	bl	8000598 <__aeabi_f2d>
 801afc2:	ec41 0b10 	vmov	d0, r0, r1
 801afc6:	f007 f8ff 	bl	80221c8 <ceil>
 801afca:	ec51 0b10 	vmov	r0, r1, d0
 801afce:	f7e5 fe13 	bl	8000bf8 <__aeabi_d2f>
 801afd2:	ee08 0a10 	vmov	s16, r0
 801afd6:	ed5f 7a1f 	vldr	s15, [pc, #-124]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801afda:	ed8d 8a4e 	vstr	s16, [sp, #312]	@ 0x138
 801afde:	eeb0 7aee 	vabs.f32	s14, s29
 801afe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801afe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afea:	d51f      	bpl.n	801b02c <iNemoEngine_API_Update+0x90c>
 801afec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801aff0:	eef4 eae7 	vcmpe.f32	s29, s15
 801aff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aff8:	f281 87f0 	bge.w	801cfdc <iNemoEngine_API_Update+0x28bc>
 801affc:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b000:	eef4 eac7 	vcmpe.f32	s29, s14
 801b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b008:	f303 801c 	bgt.w	801e044 <iNemoEngine_API_Update+0x3924>
 801b00c:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 801b010:	ee17 0a90 	vmov	r0, s15
 801b014:	f7e5 fac0 	bl	8000598 <__aeabi_f2d>
 801b018:	ec41 0b10 	vmov	d0, r0, r1
 801b01c:	f007 f8d4 	bl	80221c8 <ceil>
 801b020:	ec51 0b10 	vmov	r0, r1, d0
 801b024:	f7e5 fde8 	bl	8000bf8 <__aeabi_d2f>
 801b028:	ee0e 0a90 	vmov	s29, r0
 801b02c:	f897 04b1 	ldrb.w	r0, [r7, #1201]	@ 0x4b1
 801b030:	edcd ea4f 	vstr	s29, [sp, #316]	@ 0x13c
 801b034:	1e43      	subs	r3, r0, #1
 801b036:	b25a      	sxtb	r2, r3
 801b038:	2a00      	cmp	r2, #0
 801b03a:	b2db      	uxtb	r3, r3
 801b03c:	dd17      	ble.n	801b06e <iNemoEngine_API_Update+0x94e>
 801b03e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b042:	1e82      	subs	r2, r0, #2
 801b044:	009b      	lsls	r3, r3, #2
 801b046:	b2d2      	uxtb	r2, r2
 801b048:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 801b04c:	4419      	add	r1, r3
 801b04e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b052:	f203 43ac 	addw	r3, r3, #1196	@ 0x4ac
 801b056:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801b05a:	443b      	add	r3, r7
 801b05c:	681a      	ldr	r2, [r3, #0]
 801b05e:	60da      	str	r2, [r3, #12]
 801b060:	685a      	ldr	r2, [r3, #4]
 801b062:	611a      	str	r2, [r3, #16]
 801b064:	689a      	ldr	r2, [r3, #8]
 801b066:	615a      	str	r2, [r3, #20]
 801b068:	3b0c      	subs	r3, #12
 801b06a:	428b      	cmp	r3, r1
 801b06c:	d1f6      	bne.n	801b05c <iNemoEngine_API_Update+0x93c>
 801b06e:	ed9d 7a03 	vldr	s14, [sp, #12]
 801b072:	ed85 9a00 	vstr	s18, [r5]
 801b076:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b07a:	ee87 9a87 	vdiv.f32	s18, s15, s14
 801b07e:	f207 43bc 	addw	r3, r7, #1212	@ 0x4bc
 801b082:	ed83 8a00 	vstr	s16, [r3]
 801b086:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 801b08a:	edc3 ea00 	vstr	s29, [r3]
 801b08e:	f897 34b0 	ldrb.w	r3, [r7, #1200]	@ 0x4b0
 801b092:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b096:	ee2c 8a09 	vmul.f32	s16, s24, s18
 801b09a:	3301      	adds	r3, #1
 801b09c:	b2db      	uxtb	r3, r3
 801b09e:	eeb0 7ac8 	vabs.f32	s14, s16
 801b0a2:	4283      	cmp	r3, r0
 801b0a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b0a8:	bf28      	it	cs
 801b0aa:	4603      	movcs	r3, r0
 801b0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b0:	ee6d ea09 	vmul.f32	s29, s26, s18
 801b0b4:	f887 34b0 	strb.w	r3, [r7, #1200]	@ 0x4b0
 801b0b8:	ee2b 9a89 	vmul.f32	s18, s23, s18
 801b0bc:	d51f      	bpl.n	801b0fe <iNemoEngine_API_Update+0x9de>
 801b0be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b0c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0ca:	f281 8775 	bge.w	801cfb8 <iNemoEngine_API_Update+0x2898>
 801b0ce:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b0d2:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0da:	f302 87af 	bgt.w	801e03c <iNemoEngine_API_Update+0x391c>
 801b0de:	ee78 7a67 	vsub.f32	s15, s16, s15
 801b0e2:	ee17 0a90 	vmov	r0, s15
 801b0e6:	f7e5 fa57 	bl	8000598 <__aeabi_f2d>
 801b0ea:	ec41 0b10 	vmov	d0, r0, r1
 801b0ee:	f007 f86b 	bl	80221c8 <ceil>
 801b0f2:	ec51 0b10 	vmov	r0, r1, d0
 801b0f6:	f7e5 fd7f 	bl	8000bf8 <__aeabi_d2f>
 801b0fa:	ee08 0a10 	vmov	s16, r0
 801b0fe:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b102:	ed8d 8a4d 	vstr	s16, [sp, #308]	@ 0x134
 801b106:	eeb0 7aee 	vabs.f32	s14, s29
 801b10a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b112:	d51f      	bpl.n	801b154 <iNemoEngine_API_Update+0xa34>
 801b114:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b118:	eef4 eae7 	vcmpe.f32	s29, s15
 801b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b120:	f282 80ae 	bge.w	801d280 <iNemoEngine_API_Update+0x2b60>
 801b124:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b128:	eef4 eac7 	vcmpe.f32	s29, s14
 801b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b130:	f302 8780 	bgt.w	801e034 <iNemoEngine_API_Update+0x3914>
 801b134:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 801b138:	ee17 0a90 	vmov	r0, s15
 801b13c:	f7e5 fa2c 	bl	8000598 <__aeabi_f2d>
 801b140:	ec41 0b10 	vmov	d0, r0, r1
 801b144:	f007 f840 	bl	80221c8 <ceil>
 801b148:	ec51 0b10 	vmov	r0, r1, d0
 801b14c:	f7e5 fd54 	bl	8000bf8 <__aeabi_d2f>
 801b150:	ee0e 0a90 	vmov	s29, r0
 801b154:	ed5f 7a7f 	vldr	s15, [pc, #-508]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b158:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801b15c:	eeb0 7ac9 	vabs.f32	s14, s18
 801b160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b168:	d51f      	bpl.n	801b1aa <iNemoEngine_API_Update+0xa8a>
 801b16a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b16e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801b172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b176:	f282 8071 	bge.w	801d25c <iNemoEngine_API_Update+0x2b3c>
 801b17a:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b17e:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801b182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b186:	f302 8751 	bgt.w	801e02c <iNemoEngine_API_Update+0x390c>
 801b18a:	ee79 7a67 	vsub.f32	s15, s18, s15
 801b18e:	ee17 0a90 	vmov	r0, s15
 801b192:	f7e5 fa01 	bl	8000598 <__aeabi_f2d>
 801b196:	ec41 0b10 	vmov	d0, r0, r1
 801b19a:	f007 f815 	bl	80221c8 <ceil>
 801b19e:	ec51 0b10 	vmov	r0, r1, d0
 801b1a2:	f7e5 fd29 	bl	8000bf8 <__aeabi_d2f>
 801b1a6:	ee09 0a10 	vmov	s18, r0
 801b1aa:	f897 0621 	ldrb.w	r0, [r7, #1569]	@ 0x621
 801b1ae:	ed8d 9a4f 	vstr	s18, [sp, #316]	@ 0x13c
 801b1b2:	1e43      	subs	r3, r0, #1
 801b1b4:	b25a      	sxtb	r2, r3
 801b1b6:	2a00      	cmp	r2, #0
 801b1b8:	b2db      	uxtb	r3, r3
 801b1ba:	dd17      	ble.n	801b1ec <iNemoEngine_API_Update+0xacc>
 801b1bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1c0:	1e82      	subs	r2, r0, #2
 801b1c2:	009b      	lsls	r3, r3, #2
 801b1c4:	b2d2      	uxtb	r2, r2
 801b1c6:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 801b1ca:	4419      	add	r1, r3
 801b1cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b1d0:	f203 631c 	addw	r3, r3, #1564	@ 0x61c
 801b1d4:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801b1d8:	443b      	add	r3, r7
 801b1da:	681a      	ldr	r2, [r3, #0]
 801b1dc:	60da      	str	r2, [r3, #12]
 801b1de:	685a      	ldr	r2, [r3, #4]
 801b1e0:	611a      	str	r2, [r3, #16]
 801b1e2:	689a      	ldr	r2, [r3, #8]
 801b1e4:	615a      	str	r2, [r3, #20]
 801b1e6:	3b0c      	subs	r3, #12
 801b1e8:	428b      	cmp	r3, r1
 801b1ea:	d1f6      	bne.n	801b1da <iNemoEngine_API_Update+0xaba>
 801b1ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b1f0:	ed86 8a00 	vstr	s16, [r6]
 801b1f4:	ee87 8aad 	vdiv.f32	s16, s15, s27
 801b1f8:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 801b1fc:	edc3 ea00 	vstr	s29, [r3]
 801b200:	f507 63c6 	add.w	r3, r7, #1584	@ 0x630
 801b204:	ed83 9a00 	vstr	s18, [r3]
 801b208:	f897 3620 	ldrb.w	r3, [r7, #1568]	@ 0x620
 801b20c:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 801b210:	ed5f 7aae 	vldr	s15, [pc, #-696]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b214:	ee28 9a2f 	vmul.f32	s18, s16, s31
 801b218:	3301      	adds	r3, #1
 801b21a:	b2db      	uxtb	r3, r3
 801b21c:	ee68 ea0f 	vmul.f32	s29, s16, s30
 801b220:	ee27 8a08 	vmul.f32	s16, s14, s16
 801b224:	eeb0 7ac9 	vabs.f32	s14, s18
 801b228:	4283      	cmp	r3, r0
 801b22a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b22e:	bf28      	it	cs
 801b230:	4603      	movcs	r3, r0
 801b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b236:	f887 3620 	strb.w	r3, [r7, #1568]	@ 0x620
 801b23a:	d51f      	bpl.n	801b27c <iNemoEngine_API_Update+0xb5c>
 801b23c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b240:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801b244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b248:	f282 802c 	bge.w	801d2a4 <iNemoEngine_API_Update+0x2b84>
 801b24c:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b250:	eeb4 9ac7 	vcmpe.f32	s18, s14
 801b254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b258:	f302 86ca 	bgt.w	801dff0 <iNemoEngine_API_Update+0x38d0>
 801b25c:	ee79 7a67 	vsub.f32	s15, s18, s15
 801b260:	ee17 0a90 	vmov	r0, s15
 801b264:	f7e5 f998 	bl	8000598 <__aeabi_f2d>
 801b268:	ec41 0b10 	vmov	d0, r0, r1
 801b26c:	f006 ffac 	bl	80221c8 <ceil>
 801b270:	ec51 0b10 	vmov	r0, r1, d0
 801b274:	f7e5 fcc0 	bl	8000bf8 <__aeabi_d2f>
 801b278:	ee09 0a10 	vmov	s18, r0
 801b27c:	ed5f 7ac9 	vldr	s15, [pc, #-804]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b280:	ed8d 9a4d 	vstr	s18, [sp, #308]	@ 0x134
 801b284:	eeb0 7aee 	vabs.f32	s14, s29
 801b288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b290:	d51f      	bpl.n	801b2d2 <iNemoEngine_API_Update+0xbb2>
 801b292:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b296:	eef4 eae7 	vcmpe.f32	s29, s15
 801b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b29e:	f281 87cb 	bge.w	801d238 <iNemoEngine_API_Update+0x2b18>
 801b2a2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b2a6:	eef4 eac7 	vcmpe.f32	s29, s14
 801b2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ae:	f302 86b9 	bgt.w	801e024 <iNemoEngine_API_Update+0x3904>
 801b2b2:	ee7e 7ae7 	vsub.f32	s15, s29, s15
 801b2b6:	ee17 0a90 	vmov	r0, s15
 801b2ba:	f7e5 f96d 	bl	8000598 <__aeabi_f2d>
 801b2be:	ec41 0b10 	vmov	d0, r0, r1
 801b2c2:	f006 ff81 	bl	80221c8 <ceil>
 801b2c6:	ec51 0b10 	vmov	r0, r1, d0
 801b2ca:	f7e5 fc95 	bl	8000bf8 <__aeabi_d2f>
 801b2ce:	ee0e 0a90 	vmov	s29, r0
 801b2d2:	ed5f 7ade 	vldr	s15, [pc, #-888]	@ 801af5c <iNemoEngine_API_Update+0x83c>
 801b2d6:	edcd ea4e 	vstr	s29, [sp, #312]	@ 0x138
 801b2da:	eeb0 7ac8 	vabs.f32	s14, s16
 801b2de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e6:	d51f      	bpl.n	801b328 <iNemoEngine_API_Update+0xc08>
 801b2e8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801b2ec:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b2f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f4:	f281 878e 	bge.w	801d214 <iNemoEngine_API_Update+0x2af4>
 801b2f8:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 801b2fc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801b300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b304:	f302 8678 	bgt.w	801dff8 <iNemoEngine_API_Update+0x38d8>
 801b308:	ee78 7a67 	vsub.f32	s15, s16, s15
 801b30c:	ee17 0a90 	vmov	r0, s15
 801b310:	f7e5 f942 	bl	8000598 <__aeabi_f2d>
 801b314:	ec41 0b10 	vmov	d0, r0, r1
 801b318:	f006 ff56 	bl	80221c8 <ceil>
 801b31c:	ec51 0b10 	vmov	r0, r1, d0
 801b320:	f7e5 fc6a 	bl	8000bf8 <__aeabi_d2f>
 801b324:	ee08 0a10 	vmov	s16, r0
 801b328:	f897 0791 	ldrb.w	r0, [r7, #1937]	@ 0x791
 801b32c:	ed8d 8a4f 	vstr	s16, [sp, #316]	@ 0x13c
 801b330:	1e43      	subs	r3, r0, #1
 801b332:	b25a      	sxtb	r2, r3
 801b334:	2a00      	cmp	r2, #0
 801b336:	b2db      	uxtb	r3, r3
 801b338:	dd17      	ble.n	801b36a <iNemoEngine_API_Update+0xc4a>
 801b33a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b33e:	1e82      	subs	r2, r0, #2
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	b2d2      	uxtb	r2, r2
 801b344:	f507 61f0 	add.w	r1, r7, #1920	@ 0x780
 801b348:	4419      	add	r1, r3
 801b34a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b34e:	f203 738c 	addw	r3, r3, #1932	@ 0x78c
 801b352:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801b356:	443b      	add	r3, r7
 801b358:	681a      	ldr	r2, [r3, #0]
 801b35a:	60da      	str	r2, [r3, #12]
 801b35c:	685a      	ldr	r2, [r3, #4]
 801b35e:	611a      	str	r2, [r3, #16]
 801b360:	689a      	ldr	r2, [r3, #8]
 801b362:	615a      	str	r2, [r3, #20]
 801b364:	3b0c      	subs	r3, #12
 801b366:	428b      	cmp	r3, r1
 801b368:	d1f6      	bne.n	801b358 <iNemoEngine_API_Update+0xc38>
 801b36a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b36c:	ed83 9a00 	vstr	s18, [r3]
 801b370:	f207 739c 	addw	r3, r7, #1948	@ 0x79c
 801b374:	edc3 ea00 	vstr	s29, [r3]
 801b378:	9336      	str	r3, [sp, #216]	@ 0xd8
 801b37a:	f507 63f4 	add.w	r3, r7, #1952	@ 0x7a0
 801b37e:	ed83 8a00 	vstr	s16, [r3]
 801b382:	9337      	str	r3, [sp, #220]	@ 0xdc
 801b384:	f897 3790 	ldrb.w	r3, [r7, #1936]	@ 0x790
 801b388:	3301      	adds	r3, #1
 801b38a:	b2db      	uxtb	r3, r3
 801b38c:	4283      	cmp	r3, r0
 801b38e:	bf28      	it	cs
 801b390:	4603      	movcs	r3, r0
 801b392:	f887 3790 	strb.w	r3, [r7, #1936]	@ 0x790
 801b396:	aa72      	add	r2, sp, #456	@ 0x1c8
 801b398:	a947      	add	r1, sp, #284	@ 0x11c
 801b39a:	a84a      	add	r0, sp, #296	@ 0x128
 801b39c:	f7fd fb94 	bl	8018ac8 <getRotationMatrix>
 801b3a0:	f50d 7a38 	add.w	sl, sp, #736	@ 0x2e0
 801b3a4:	f507 7347 	add.w	r3, r7, #796	@ 0x31c
 801b3a8:	9331      	str	r3, [sp, #196]	@ 0xc4
 801b3aa:	461e      	mov	r6, r3
 801b3ac:	46d4      	mov	ip, sl
 801b3ae:	f507 754f 	add.w	r5, r7, #828	@ 0x33c
 801b3b2:	6830      	ldr	r0, [r6, #0]
 801b3b4:	6871      	ldr	r1, [r6, #4]
 801b3b6:	68b2      	ldr	r2, [r6, #8]
 801b3b8:	68f3      	ldr	r3, [r6, #12]
 801b3ba:	4664      	mov	r4, ip
 801b3bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b3be:	3610      	adds	r6, #16
 801b3c0:	42ae      	cmp	r6, r5
 801b3c2:	46a4      	mov	ip, r4
 801b3c4:	d1f5      	bne.n	801b3b2 <iNemoEngine_API_Update+0xc92>
 801b3c6:	6830      	ldr	r0, [r6, #0]
 801b3c8:	6020      	str	r0, [r4, #0]
 801b3ca:	ed97 7ac7 	vldr	s14, [r7, #796]	@ 0x31c
 801b3ce:	edd7 7ac8 	vldr	s15, [r7, #800]	@ 0x320
 801b3d2:	eeb0 7ac7 	vabs.f32	s14, s14
 801b3d6:	eef0 7ae7 	vabs.f32	s15, s15
 801b3da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3e2:	f140 850a 	bpl.w	801bdfa <iNemoEngine_API_Update+0x16da>
 801b3e6:	2004      	movs	r0, #4
 801b3e8:	2400      	movs	r4, #0
 801b3ea:	2107      	movs	r1, #7
 801b3ec:	f04f 0c06 	mov.w	ip, #6
 801b3f0:	2203      	movs	r2, #3
 801b3f2:	4603      	mov	r3, r0
 801b3f4:	9403      	str	r4, [sp, #12]
 801b3f6:	f04f 0e01 	mov.w	lr, #1
 801b3fa:	ed97 7ac9 	vldr	s14, [r7, #804]	@ 0x324
 801b3fe:	eeb0 7ac7 	vabs.f32	s14, s14
 801b402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b40a:	f300 84e4 	bgt.w	801bdd6 <iNemoEngine_API_Update+0x16b6>
 801b40e:	2505      	movs	r5, #5
 801b410:	9504      	str	r5, [sp, #16]
 801b412:	f04f 0b08 	mov.w	fp, #8
 801b416:	2502      	movs	r5, #2
 801b418:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 801b41a:	4434      	add	r4, r6
 801b41c:	4433      	add	r3, r6
 801b41e:	edd4 6a00 	vldr	s13, [r4]
 801b422:	ed93 7a00 	vldr	s14, [r3]
 801b426:	9b03      	ldr	r3, [sp, #12]
 801b428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b42c:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 801b430:	eb0a 0485 	add.w	r4, sl, r5, lsl #2
 801b434:	00ab      	lsls	r3, r5, #2
 801b436:	eb0a 058e 	add.w	r5, sl, lr, lsl #2
 801b43a:	ea4f 0980 	mov.w	r9, r0, lsl #2
 801b43e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801b442:	edc6 7a00 	vstr	s15, [r6]
 801b446:	ed95 7a00 	vldr	s14, [r5]
 801b44a:	edd4 6a00 	vldr	s13, [r4]
 801b44e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b452:	eb0a 0582 	add.w	r5, sl, r2, lsl #2
 801b456:	edc4 7a00 	vstr	s15, [r4]
 801b45a:	eb0a 0480 	add.w	r4, sl, r0, lsl #2
 801b45e:	edd6 6a00 	vldr	s13, [r6]
 801b462:	ed94 6a00 	vldr	s12, [r4]
 801b466:	ed95 7a00 	vldr	s14, [r5]
 801b46a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801b46e:	ea4f 068c 	mov.w	r6, ip, lsl #2
 801b472:	ed85 7a00 	vstr	s14, [r5]
 801b476:	ed94 7a00 	vldr	s14, [r4]
 801b47a:	9c04      	ldr	r4, [sp, #16]
 801b47c:	eb0a 0084 	add.w	r0, sl, r4, lsl #2
 801b480:	ed90 6a00 	vldr	s12, [r0]
 801b484:	eea7 6ac7 	vfms.f32	s12, s15, s14
 801b488:	00a4      	lsls	r4, r4, #2
 801b48a:	ed80 6a00 	vstr	s12, [r0]
 801b48e:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 801b492:	0089      	lsls	r1, r1, #2
 801b494:	9104      	str	r1, [sp, #16]
 801b496:	eb0a 018c 	add.w	r1, sl, ip, lsl #2
 801b49a:	edd0 5a00 	vldr	s11, [r0]
 801b49e:	ed91 7a00 	vldr	s14, [r1]
 801b4a2:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801b4a6:	eef0 5ac6 	vabs.f32	s11, s12
 801b4aa:	ed81 7a00 	vstr	s14, [r1]
 801b4ae:	edd0 6a00 	vldr	s13, [r0]
 801b4b2:	eb0a 008b 	add.w	r0, sl, fp, lsl #2
 801b4b6:	ed90 7a00 	vldr	s14, [r0]
 801b4ba:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801b4be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 801b4c2:	ed80 7a00 	vstr	s14, [r0]
 801b4c6:	edd5 6a00 	vldr	s13, [r5]
 801b4ca:	9803      	ldr	r0, [sp, #12]
 801b4cc:	eef0 7ae6 	vabs.f32	s15, s13
 801b4d0:	eef4 5ae7 	vcmpe.f32	s11, s15
 801b4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d8:	ea4f 0080 	mov.w	r0, r0, lsl #2
 801b4dc:	ea4f 0582 	mov.w	r5, r2, lsl #2
 801b4e0:	f300 8465 	bgt.w	801bdae <iNemoEngine_API_Update+0x168e>
 801b4e4:	edd1 5a00 	vldr	s11, [r1]
 801b4e8:	eef0 7a47 	vmov.f32	s15, s14
 801b4ec:	ee86 4a26 	vdiv.f32	s8, s12, s13
 801b4f0:	eb0a 020b 	add.w	r2, sl, fp
 801b4f4:	4454      	add	r4, sl
 801b4f6:	4455      	add	r5, sl
 801b4f8:	a978      	add	r1, sp, #480	@ 0x1e0
 801b4fa:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801b4fe:	eee4 7a65 	vfms.f32	s15, s8, s11
 801b502:	ed84 4a00 	vstr	s8, [r4]
 801b506:	edc2 7a00 	vstr	s15, [r2]
 801b50a:	4632      	mov	r2, r6
 801b50c:	4452      	add	r2, sl
 801b50e:	edd2 1a00 	vldr	s3, [r2]
 801b512:	9a04      	ldr	r2, [sp, #16]
 801b514:	ed95 7a00 	vldr	s14, [r5]
 801b518:	4452      	add	r2, sl
 801b51a:	ed92 2a00 	vldr	s4, [r2]
 801b51e:	eb0a 0209 	add.w	r2, sl, r9
 801b522:	ed92 3a00 	vldr	s6, [r2]
 801b526:	eb0a 0200 	add.w	r2, sl, r0
 801b52a:	ed92 0a00 	vldr	s0, [r2]
 801b52e:	eb0a 0203 	add.w	r2, sl, r3
 801b532:	edd2 0a00 	vldr	s1, [r2]
 801b536:	aa72      	add	r2, sp, #456	@ 0x1c8
 801b538:	ee83 1aa7 	vdiv.f32	s2, s7, s15
 801b53c:	4472      	add	r2, lr
 801b53e:	eec3 2a87 	vdiv.f32	s5, s7, s14
 801b542:	ed92 7a00 	vldr	s14, [r2]
 801b546:	aa72      	add	r2, sp, #456	@ 0x1c8
 801b548:	4402      	add	r2, r0
 801b54a:	edd2 7a00 	vldr	s15, [r2]
 801b54e:	aa72      	add	r2, sp, #456	@ 0x1c8
 801b550:	441a      	add	r2, r3
 801b552:	edd2 5a00 	vldr	s11, [r2]
 801b556:	eee0 7a47 	vfms.f32	s15, s0, s14
 801b55a:	aa75      	add	r2, sp, #468	@ 0x1d4
 801b55c:	4472      	add	r2, lr
 801b55e:	eee0 5ac7 	vfms.f32	s11, s1, s14
 801b562:	edd2 4a00 	vldr	s9, [r2]
 801b566:	eee4 5a67 	vfms.f32	s11, s8, s15
 801b56a:	aa75      	add	r2, sp, #468	@ 0x1d4
 801b56c:	4402      	add	r2, r0
 801b56e:	ed92 6a00 	vldr	s12, [r2]
 801b572:	ee61 5a25 	vmul.f32	s11, s2, s11
 801b576:	aa75      	add	r2, sp, #468	@ 0x1d4
 801b578:	eea2 7a65 	vfms.f32	s14, s4, s11
 801b57c:	441a      	add	r2, r3
 801b57e:	440b      	add	r3, r1
 801b580:	eee1 7ae5 	vfms.f32	s15, s3, s11
 801b584:	4408      	add	r0, r1
 801b586:	eef0 6a47 	vmov.f32	s13, s14
 801b58a:	ee22 7aa7 	vmul.f32	s14, s5, s15
 801b58e:	eea0 6a64 	vfms.f32	s12, s0, s9
 801b592:	eee3 6a47 	vfms.f32	s13, s6, s14
 801b596:	edd3 7a00 	vldr	s15, [r3]
 801b59a:	ed90 5a00 	vldr	s10, [r0]
 801b59e:	eeb0 8a66 	vmov.f32	s16, s13
 801b5a2:	edd2 6a00 	vldr	s13, [r2]
 801b5a6:	eee0 6ae4 	vfms.f32	s13, s1, s9
 801b5aa:	460b      	mov	r3, r1
 801b5ac:	4473      	add	r3, lr
 801b5ae:	44d6      	add	lr, sl
 801b5b0:	eee4 6a46 	vfms.f32	s13, s8, s12
 801b5b4:	ee61 6a26 	vmul.f32	s13, s2, s13
 801b5b8:	eea1 6ae6 	vfms.f32	s12, s3, s13
 801b5bc:	eee2 4a66 	vfms.f32	s9, s4, s13
 801b5c0:	ee22 6a86 	vmul.f32	s12, s5, s12
 801b5c4:	eee3 4a46 	vfms.f32	s9, s6, s12
 801b5c8:	eeb0 9a64 	vmov.f32	s18, s9
 801b5cc:	edd3 4a00 	vldr	s9, [r3]
 801b5d0:	eea4 5ac0 	vfms.f32	s10, s9, s0
 801b5d4:	eee4 7ae0 	vfms.f32	s15, s9, s1
 801b5d8:	eee4 7a45 	vfms.f32	s15, s8, s10
 801b5dc:	ee67 7a81 	vmul.f32	s15, s15, s2
 801b5e0:	eea7 5ae1 	vfms.f32	s10, s15, s3
 801b5e4:	eee7 4ac2 	vfms.f32	s9, s15, s4
 801b5e8:	ee22 4a85 	vmul.f32	s8, s5, s10
 801b5ec:	eeb0 5a64 	vmov.f32	s10, s9
 801b5f0:	eea4 5a43 	vfms.f32	s10, s8, s6
 801b5f4:	ed9e 3a00 	vldr	s6, [lr]
 801b5f8:	eec3 4a83 	vdiv.f32	s9, s7, s6
 801b5fc:	eebf 2a00 	vmov.f32	s4, #240	@ 0xbf800000 -1.0
 801b600:	ee64 2a88 	vmul.f32	s5, s9, s16
 801b604:	ee24 3a89 	vmul.f32	s6, s9, s18
 801b608:	ee64 4a85 	vmul.f32	s9, s9, s10
 801b60c:	ee37 5a86 	vadd.f32	s10, s15, s12
 801b610:	ee76 6ac4 	vsub.f32	s13, s13, s8
 801b614:	ee32 5ac5 	vsub.f32	s10, s5, s10
 801b618:	eeb4 5ac2 	vcmpe.f32	s10, s4
 801b61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b620:	bfc8      	it	gt
 801b622:	ee75 3a23 	vaddgt.f32	s7, s10, s7
 801b626:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801b62a:	bfcc      	ite	gt
 801b62c:	eeb1 5ae3 	vsqrtgt.f32	s10, s7
 801b630:	ed9f 5ada 	vldrle	s10, [pc, #872]	@ 801b99c <iNemoEngine_API_Update+0x127c>
 801b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b638:	f101 83df 	bmi.w	801cdfa <iNemoEngine_API_Update+0x26da>
 801b63c:	bfd8      	it	le
 801b63e:	ee25 5a26 	vmulle.f32	s10, s10, s13
 801b642:	ee76 6a67 	vsub.f32	s13, s12, s15
 801b646:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801b64a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 801b64e:	ee25 5a04 	vmul.f32	s10, s10, s8
 801b652:	eebf 4a00 	vmov.f32	s8, #240	@ 0xbf800000 -1.0
 801b656:	eef4 6ac4 	vcmpe.f32	s13, s8
 801b65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b65e:	bf88      	it	hi
 801b660:	eeb7 4a00 	vmovhi.f32	s8, #112	@ 0x3f800000  1.0
 801b664:	ee74 4ae5 	vsub.f32	s9, s9, s11
 801b668:	bf88      	it	hi
 801b66a:	ee36 4a84 	vaddhi.f32	s8, s13, s8
 801b66e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801b672:	bf8c      	ite	hi
 801b674:	eef1 6ac4 	vsqrthi.f32	s13, s8
 801b678:	eddf 6ac8 	vldrls	s13, [pc, #800]	@ 801b99c <iNemoEngine_API_Update+0x127c>
 801b67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b680:	f101 83b7 	bmi.w	801cdf2 <iNemoEngine_API_Update+0x26d2>
 801b684:	bfd8      	it	le
 801b686:	ee66 6aa4 	vmulle.f32	s13, s13, s9
 801b68a:	ee72 2a86 	vadd.f32	s5, s5, s12
 801b68e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801b692:	ee77 7ae2 	vsub.f32	s15, s15, s5
 801b696:	ee26 6a86 	vmul.f32	s12, s13, s12
 801b69a:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 801b69e:	eef4 7ae6 	vcmpe.f32	s15, s13
 801b6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6a6:	bf88      	it	hi
 801b6a8:	eef7 6a00 	vmovhi.f32	s13, #112	@ 0x3f800000  1.0
 801b6ac:	ee37 7a43 	vsub.f32	s14, s14, s6
 801b6b0:	bf88      	it	hi
 801b6b2:	ee77 6aa6 	vaddhi.f32	s13, s15, s13
 801b6b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801b6ba:	bf8c      	ite	hi
 801b6bc:	eef1 7ae6 	vsqrthi.f32	s15, s13
 801b6c0:	eddf 7ab6 	vldrls	s15, [pc, #728]	@ 801b99c <iNemoEngine_API_Update+0x127c>
 801b6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c8:	f100 83d1 	bmi.w	801be6e <iNemoEngine_API_Update+0x174e>
 801b6cc:	bfd8      	it	le
 801b6ce:	ee67 7a87 	vmulle.f32	s15, s15, s14
 801b6d2:	f897 2341 	ldrb.w	r2, [r7, #833]	@ 0x341
 801b6d6:	1e53      	subs	r3, r2, #1
 801b6d8:	b259      	sxtb	r1, r3
 801b6da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801b6de:	2900      	cmp	r1, #0
 801b6e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b6e4:	b2db      	uxtb	r3, r3
 801b6e6:	dd1c      	ble.n	801b722 <iNemoEngine_API_Update+0x1002>
 801b6e8:	3a02      	subs	r2, #2
 801b6ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b6ee:	b2d2      	uxtb	r2, r2
 801b6f0:	f1a7 010c 	sub.w	r1, r7, #12
 801b6f4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801b6f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b6fc:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 801b700:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b704:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 801b708:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
 801b70c:	f8d3 2340 	ldr.w	r2, [r3, #832]	@ 0x340
 801b710:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
 801b714:	f8d3 2344 	ldr.w	r2, [r3, #836]	@ 0x344
 801b718:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
 801b71c:	3b0c      	subs	r3, #12
 801b71e:	428b      	cmp	r3, r1
 801b720:	d1f0      	bne.n	801b704 <iNemoEngine_API_Update+0xfe4>
 801b722:	ed9d 7a07 	vldr	s14, [sp, #28]
 801b726:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801b72a:	ee86 7a87 	vdiv.f32	s14, s13, s14
 801b72e:	ab47      	add	r3, sp, #284	@ 0x11c
 801b730:	f20d 12eb 	addw	r2, sp, #491	@ 0x1eb
 801b734:	4699      	mov	r9, r3
 801b736:	f1c2 0601 	rsb	r6, r2, #1
 801b73a:	9333      	str	r3, [sp, #204]	@ 0xcc
 801b73c:	2300      	movs	r3, #0
 801b73e:	e9cd 7838 	strd	r7, r8, [sp, #224]	@ 0xe0
 801b742:	ad7b      	add	r5, sp, #492	@ 0x1ec
 801b744:	46c8      	mov	r8, r9
 801b746:	f50d 7b04 	add.w	fp, sp, #528	@ 0x210
 801b74a:	46b9      	mov	r9, r7
 801b74c:	ee25 5a07 	vmul.f32	s10, s10, s14
 801b750:	ee66 6a07 	vmul.f32	s13, s12, s14
 801b754:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b758:	ed87 5ad2 	vstr	s10, [r7, #840]	@ 0x348
 801b75c:	edc7 6ad3 	vstr	s13, [r7, #844]	@ 0x34c
 801b760:	edc7 7ad4 	vstr	s15, [r7, #848]	@ 0x350
 801b764:	4637      	mov	r7, r6
 801b766:	461e      	mov	r6, r3
 801b768:	3601      	adds	r6, #1
 801b76a:	4651      	mov	r1, sl
 801b76c:	f20d 13eb 	addw	r3, sp, #491	@ 0x1eb
 801b770:	464a      	mov	r2, r9
 801b772:	18f8      	adds	r0, r7, r3
 801b774:	f803 0f01 	strb.w	r0, [r3, #1]!
 801b778:	f8d2 0348 	ldr.w	r0, [r2, #840]	@ 0x348
 801b77c:	f841 0b04 	str.w	r0, [r1], #4
 801b780:	f20d 2009 	addw	r0, sp, #521	@ 0x209
 801b784:	4298      	cmp	r0, r3
 801b786:	f102 020c 	add.w	r2, r2, #12
 801b78a:	d1f2      	bne.n	801b772 <iNemoEngine_API_Update+0x1052>
 801b78c:	ed9a 7a00 	vldr	s14, [sl]
 801b790:	edda 7a01 	vldr	s15, [sl, #4]
 801b794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b798:	ed9a 7a02 	vldr	s14, [sl, #8]
 801b79c:	edda 7a03 	vldr	s15, [sl, #12]
 801b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a4:	bf88      	it	hi
 801b7a6:	f44f 7381 	movhi.w	r3, #258	@ 0x102
 801b7aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7ae:	ed9a 7a04 	vldr	s14, [sl, #16]
 801b7b2:	edda 7a05 	vldr	s15, [sl, #20]
 801b7b6:	bf88      	it	hi
 801b7b8:	802b      	strhhi	r3, [r5, #0]
 801b7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7be:	bf88      	it	hi
 801b7c0:	f44f 7341 	movhi.w	r3, #772	@ 0x304
 801b7c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7c8:	ed9a 7a06 	vldr	s14, [sl, #24]
 801b7cc:	edda 7a07 	vldr	s15, [sl, #28]
 801b7d0:	bf88      	it	hi
 801b7d2:	806b      	strhhi	r3, [r5, #2]
 801b7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7d8:	bf88      	it	hi
 801b7da:	f240 5306 	movwhi	r3, #1286	@ 0x506
 801b7de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7e2:	ed9a 7a08 	vldr	s14, [sl, #32]
 801b7e6:	edda 7a09 	vldr	s15, [sl, #36]	@ 0x24
 801b7ea:	bf88      	it	hi
 801b7ec:	80ab      	strhhi	r3, [r5, #4]
 801b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7f2:	bf88      	it	hi
 801b7f4:	f44f 63e1 	movhi.w	r3, #1800	@ 0x708
 801b7f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b7fc:	ed9a 7a0a 	vldr	s14, [sl, #40]	@ 0x28
 801b800:	edda 7a0b 	vldr	s15, [sl, #44]	@ 0x2c
 801b804:	bf88      	it	hi
 801b806:	80eb      	strhhi	r3, [r5, #6]
 801b808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b80c:	bf88      	it	hi
 801b80e:	f640 130a 	movwhi	r3, #2314	@ 0x90a
 801b812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b816:	ed9a 7a0c 	vldr	s14, [sl, #48]	@ 0x30
 801b81a:	edda 7a0d 	vldr	s15, [sl, #52]	@ 0x34
 801b81e:	bf88      	it	hi
 801b820:	812b      	strhhi	r3, [r5, #8]
 801b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b826:	bf88      	it	hi
 801b828:	f640 330c 	movwhi	r3, #2828	@ 0xb0c
 801b82c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b830:	ed9a 7a0e 	vldr	s14, [sl, #56]	@ 0x38
 801b834:	edda 7a0f 	vldr	s15, [sl, #60]	@ 0x3c
 801b838:	bf88      	it	hi
 801b83a:	816b      	strhhi	r3, [r5, #10]
 801b83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b840:	bf88      	it	hi
 801b842:	f640 530e 	movwhi	r3, #3342	@ 0xd0e
 801b846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b84a:	ed9a 7a10 	vldr	s14, [sl, #64]	@ 0x40
 801b84e:	edda 7a11 	vldr	s15, [sl, #68]	@ 0x44
 801b852:	bf88      	it	hi
 801b854:	81ab      	strhhi	r3, [r5, #12]
 801b856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b85a:	bf88      	it	hi
 801b85c:	f44f 6371 	movhi.w	r3, #3856	@ 0xf10
 801b860:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b864:	ed9a 7a12 	vldr	s14, [sl, #72]	@ 0x48
 801b868:	edda 7a13 	vldr	s15, [sl, #76]	@ 0x4c
 801b86c:	bf88      	it	hi
 801b86e:	81eb      	strhhi	r3, [r5, #14]
 801b870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b874:	bf88      	it	hi
 801b876:	f241 1312 	movwhi	r3, #4370	@ 0x1112
 801b87a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b87e:	ed9a 7a14 	vldr	s14, [sl, #80]	@ 0x50
 801b882:	edda 7a15 	vldr	s15, [sl, #84]	@ 0x54
 801b886:	bf88      	it	hi
 801b888:	822b      	strhhi	r3, [r5, #16]
 801b88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b88e:	bf88      	it	hi
 801b890:	f241 3314 	movwhi	r3, #4884	@ 0x1314
 801b894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b898:	bf88      	it	hi
 801b89a:	826b      	strhhi	r3, [r5, #18]
 801b89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a0:	bf84      	itt	hi
 801b8a2:	f241 5316 	movwhi	r3, #5398	@ 0x1516
 801b8a6:	82ab      	strhhi	r3, [r5, #20]
 801b8a8:	ed9a 7a16 	vldr	s14, [sl, #88]	@ 0x58
 801b8ac:	edda 7a17 	vldr	s15, [sl, #92]	@ 0x5c
 801b8b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8b4:	ed9a 7a18 	vldr	s14, [sl, #96]	@ 0x60
 801b8b8:	edda 7a19 	vldr	s15, [sl, #100]	@ 0x64
 801b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8c0:	bf88      	it	hi
 801b8c2:	f241 7318 	movwhi	r3, #5912	@ 0x1718
 801b8c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8ca:	ed9a 7a1a 	vldr	s14, [sl, #104]	@ 0x68
 801b8ce:	edda 7a1b 	vldr	s15, [sl, #108]	@ 0x6c
 801b8d2:	bf88      	it	hi
 801b8d4:	82eb      	strhhi	r3, [r5, #22]
 801b8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8da:	bf88      	it	hi
 801b8dc:	f641 131a 	movwhi	r3, #6426	@ 0x191a
 801b8e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8e4:	ed9a 7a1c 	vldr	s14, [sl, #112]	@ 0x70
 801b8e8:	edda 7a1d 	vldr	s15, [sl, #116]	@ 0x74
 801b8ec:	bf88      	it	hi
 801b8ee:	832b      	strhhi	r3, [r5, #24]
 801b8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8f4:	bf88      	it	hi
 801b8f6:	f641 331c 	movwhi	r3, #6940	@ 0x1b1c
 801b8fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b8fe:	bf88      	it	hi
 801b900:	836b      	strhhi	r3, [r5, #26]
 801b902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b906:	bf88      	it	hi
 801b908:	f641 531e 	movwhi	r3, #7454	@ 0x1d1e
 801b90c:	f04f 0101 	mov.w	r1, #1
 801b910:	bf88      	it	hi
 801b912:	83ab      	strhhi	r3, [r5, #28]
 801b914:	221e      	movs	r2, #30
 801b916:	4658      	mov	r0, fp
 801b918:	f009 fa5f 	bl	8024dda <memset>
 801b91c:	e9cd 971d 	strd	r9, r7, [sp, #116]	@ 0x74
 801b920:	2404      	movs	r4, #4
 801b922:	2102      	movs	r1, #2
 801b924:	9618      	str	r6, [sp, #96]	@ 0x60
 801b926:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
 801b92a:	460a      	mov	r2, r1
 801b92c:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801b930:	0049      	lsls	r1, r1, #1
 801b932:	1c53      	adds	r3, r2, #1
 801b934:	9303      	str	r3, [sp, #12]
 801b936:	f04f 0801 	mov.w	r8, #1
 801b93a:	9105      	str	r1, [sp, #20]
 801b93c:	9b05      	ldr	r3, [sp, #20]
 801b93e:	9a03      	ldr	r2, [sp, #12]
 801b940:	46c1      	mov	r9, r8
 801b942:	4498      	add	r8, r3
 801b944:	f1b8 0f1f 	cmp.w	r8, #31
 801b948:	bfa8      	it	ge
 801b94a:	f04f 081f 	movge.w	r8, #31
 801b94e:	eba8 0309 	sub.w	r3, r8, r9
 801b952:	2b00      	cmp	r3, #0
 801b954:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 801b958:	dd34      	ble.n	801b9c4 <iNemoEngine_API_Update+0x12a4>
 801b95a:	464f      	mov	r7, r9
 801b95c:	f8cd 9010 	str.w	r9, [sp, #16]
 801b960:	2400      	movs	r4, #0
 801b962:	4699      	mov	r9, r3
 801b964:	1e79      	subs	r1, r7, #1
 801b966:	f915 200c 	ldrsb.w	r2, [r5, ip]
 801b96a:	566b      	ldrsb	r3, [r5, r1]
 801b96c:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 801b970:	eb0a 0683 	add.w	r6, sl, r3, lsl #2
 801b974:	ed16 7a01 	vldr	s14, [r6, #-4]
 801b978:	ed50 7a01 	vldr	s15, [r0, #-4]
 801b97c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801b980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b984:	f10c 0002 	add.w	r0, ip, #2
 801b988:	f10c 0601 	add.w	r6, ip, #1
 801b98c:	f240 81d0 	bls.w	801bd30 <iNemoEngine_API_Update+0x1610>
 801b990:	4580      	cmp	r8, r0
 801b992:	f80b 2004 	strb.w	r2, [fp, r4]
 801b996:	f000 81ba 	beq.w	801bd0e <iNemoEngine_API_Update+0x15ee>
 801b99a:	e005      	b.n	801b9a8 <iNemoEngine_API_Update+0x1288>
 801b99c:	00000000 	.word	0x00000000
 801b9a0:	3f333333 	.word	0x3f333333
 801b9a4:	3f4ccccd 	.word	0x3f4ccccd
 801b9a8:	46b4      	mov	ip, r6
 801b9aa:	3401      	adds	r4, #1
 801b9ac:	45a1      	cmp	r9, r4
 801b9ae:	dcd9      	bgt.n	801b964 <iNemoEngine_API_Update+0x1244>
 801b9b0:	464b      	mov	r3, r9
 801b9b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801b9b6:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 801b9ba:	461a      	mov	r2, r3
 801b9bc:	4428      	add	r0, r5
 801b9be:	4659      	mov	r1, fp
 801b9c0:	f009 fb35 	bl	802502e <memcpy>
 801b9c4:	9b07      	ldr	r3, [sp, #28]
 801b9c6:	4443      	add	r3, r8
 801b9c8:	2b1e      	cmp	r3, #30
 801b9ca:	9303      	str	r3, [sp, #12]
 801b9cc:	ddb6      	ble.n	801b93c <iNemoEngine_API_Update+0x121c>
 801b9ce:	9c08      	ldr	r4, [sp, #32]
 801b9d0:	9905      	ldr	r1, [sp, #20]
 801b9d2:	3c01      	subs	r4, #1
 801b9d4:	d1a9      	bne.n	801b92a <iNemoEngine_API_Update+0x120a>
 801b9d6:	f995 300e 	ldrsb.w	r3, [r5, #14]
 801b9da:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 801b9dc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 801b9e0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801b9e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 801b9e8:	f995 300f 	ldrsb.w	r3, [r5, #15]
 801b9ec:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 801b9f0:	ed13 7a01 	vldr	s14, [r3, #-4]
 801b9f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9fc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801ba00:	bf4c      	ite	mi
 801ba02:	2201      	movmi	r2, #1
 801ba04:	2200      	movpl	r2, #0
 801ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0a:	bf4c      	ite	mi
 801ba0c:	2301      	movmi	r3, #1
 801ba0e:	2300      	movpl	r3, #0
 801ba10:	429a      	cmp	r2, r3
 801ba12:	e9dd 971d 	ldrd	r9, r7, [sp, #116]	@ 0x74
 801ba16:	f000 81a9 	beq.w	801bd6c <iNemoEngine_API_Update+0x164c>
 801ba1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ba1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ba22:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ba26:	2e03      	cmp	r6, #3
 801ba28:	ece8 7a01 	vstmia	r8!, {s15}
 801ba2c:	f109 0904 	add.w	r9, r9, #4
 801ba30:	f47f ae9a 	bne.w	801b768 <iNemoEngine_API_Update+0x1048>
 801ba34:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 801ba38:	eddd 6a47 	vldr	s13, [sp, #284]	@ 0x11c
 801ba3c:	ed9d 5a0c 	vldr	s10, [sp, #48]	@ 0x30
 801ba40:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 801ba44:	eddd 3a16 	vldr	s7, [sp, #88]	@ 0x58
 801ba48:	9605      	str	r6, [sp, #20]
 801ba4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ba4e:	e9dd 7838 	ldrd	r7, r8, [sp, #224]	@ 0xe0
 801ba52:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801ba56:	f897 3900 	ldrb.w	r3, [r7, #2304]	@ 0x900
 801ba5a:	eddd 6a14 	vldr	s13, [sp, #80]	@ 0x50
 801ba5e:	eeb0 7a67 	vmov.f32	s14, s15
 801ba62:	eddd 7a49 	vldr	s15, [sp, #292]	@ 0x124
 801ba66:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801ba6a:	46a1      	mov	r9, r4
 801ba6c:	f507 6410 	add.w	r4, r7, #2304	@ 0x900
 801ba70:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801ba74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ba78:	ee65 5a27 	vmul.f32	s11, s10, s15
 801ba7c:	eec6 4a86 	vdiv.f32	s9, s13, s12
 801ba80:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 801ba84:	edcd 4a5c 	vstr	s9, [sp, #368]	@ 0x170
 801ba88:	ee85 6a86 	vdiv.f32	s12, s11, s12
 801ba8c:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801ba90:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 801ba94:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 801ba98:	eef1 6ac7 	vsqrt.f32	s13, s14
 801ba9c:	ee87 4aa5 	vdiv.f32	s8, s15, s11
 801baa0:	ed5f 7a41 	vldr	s15, [pc, #-260]	@ 801b9a0 <iNemoEngine_API_Update+0x1280>
 801baa4:	ed8d 4a5e 	vstr	s8, [sp, #376]	@ 0x178
 801baa8:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801baac:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801bab0:	eee5 7a25 	vfma.f32	s15, s10, s11
 801bab4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 801bab8:	eeb0 5a67 	vmov.f32	s10, s15
 801babc:	edcd 7a03 	vstr	s15, [sp, #12]
 801bac0:	ed5f 7a48 	vldr	s15, [pc, #-288]	@ 801b9a4 <iNemoEngine_API_Update+0x1284>
 801bac4:	edcd 6a5f 	vstr	s13, [sp, #380]	@ 0x17c
 801bac8:	ee65 7a27 	vmul.f32	s15, s10, s15
 801bacc:	2b00      	cmp	r3, #0
 801bace:	f040 8160 	bne.w	801bd92 <iNemoEngine_API_Update+0x1672>
 801bad2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801bad4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801bad6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801bad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801bada:	6a23      	ldr	r3, [r4, #32]
 801badc:	6263      	str	r3, [r4, #36]	@ 0x24
 801bade:	69e3      	ldr	r3, [r4, #28]
 801bae0:	6223      	str	r3, [r4, #32]
 801bae2:	edc4 7a07 	vstr	s15, [r4, #28]
 801bae6:	f607 130c 	addw	r3, r7, #2316	@ 0x90c
 801baea:	ed93 8a00 	vldr	s16, [r3]
 801baee:	ed97 0a02 	vldr	s0, [r7, #8]
 801baf2:	f607 1324 	addw	r3, r7, #2340	@ 0x924
 801baf6:	edd3 7a00 	vldr	s15, [r3]
 801bafa:	f607 1308 	addw	r3, r7, #2312	@ 0x908
 801bafe:	edd3 5a00 	vldr	s11, [r3]
 801bb02:	f507 6312 	add.w	r3, r7, #2336	@ 0x920
 801bb06:	ee28 8a27 	vmul.f32	s16, s16, s15
 801bb0a:	edd3 7a00 	vldr	s15, [r3]
 801bb0e:	f607 1304 	addw	r3, r7, #2308	@ 0x904
 801bb12:	eea5 8aa7 	vfma.f32	s16, s11, s15
 801bb16:	edd3 5a00 	vldr	s11, [r3]
 801bb1a:	f607 131c 	addw	r3, r7, #2332	@ 0x91c
 801bb1e:	edd3 7a00 	vldr	s15, [r3]
 801bb22:	f507 6311 	add.w	r3, r7, #2320	@ 0x910
 801bb26:	eea5 8aa7 	vfma.f32	s16, s11, s15
 801bb2a:	edd3 5a00 	vldr	s11, [r3]
 801bb2e:	f607 1328 	addw	r3, r7, #2344	@ 0x928
 801bb32:	edd3 7a00 	vldr	s15, [r3]
 801bb36:	f607 1314 	addw	r3, r7, #2324	@ 0x914
 801bb3a:	eea5 8aa7 	vfma.f32	s16, s11, s15
 801bb3e:	edd3 5a00 	vldr	s11, [r3]
 801bb42:	f607 132c 	addw	r3, r7, #2348	@ 0x92c
 801bb46:	edd3 7a00 	vldr	s15, [r3]
 801bb4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801bb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb52:	eea5 8aa7 	vfma.f32	s16, s11, s15
 801bb56:	f340 818d 	ble.w	801be74 <iNemoEngine_API_Update+0x1754>
 801bb5a:	edd7 3a30 	vldr	s7, [r7, #192]	@ 0xc0
 801bb5e:	eef4 3ac8 	vcmpe.f32	s7, s16
 801bb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb66:	f101 8293 	bmi.w	801d090 <iNemoEngine_API_Update+0x2970>
 801bb6a:	ed97 9a31 	vldr	s18, [r7, #196]	@ 0xc4
 801bb6e:	eddd 7a1f 	vldr	s15, [sp, #124]	@ 0x7c
 801bb72:	edd7 3a4a 	vldr	s7, [r7, #296]	@ 0x128
 801bb76:	ee67 7a89 	vmul.f32	s15, s15, s18
 801bb7a:	eef4 3ac8 	vcmpe.f32	s7, s16
 801bb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb82:	edcd 7a1f 	vstr	s15, [sp, #124]	@ 0x7c
 801bb86:	f142 81a1 	bpl.w	801decc <iNemoEngine_API_Update+0x37ac>
 801bb8a:	ed97 5a62 	vldr	s10, [r7, #392]	@ 0x188
 801bb8e:	eeb4 5ac8 	vcmpe.f32	s10, s16
 801bb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bb96:	f342 819f 	ble.w	801ded8 <iNemoEngine_API_Update+0x37b8>
 801bb9a:	edd7 5a4c 	vldr	s11, [r7, #304]	@ 0x130
 801bb9e:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 801bba2:	eef4 5ac8 	vcmpe.f32	s11, s16
 801bba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bbae:	f342 8497 	ble.w	801e4e0 <iNemoEngine_API_Update+0x3dc0>
 801bbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb6:	f282 84a8 	bge.w	801e50a <iNemoEngine_API_Update+0x3dea>
 801bbba:	ed97 3a4b 	vldr	s6, [r7, #300]	@ 0x12c
 801bbbe:	edd7 7a4d 	vldr	s15, [r7, #308]	@ 0x134
 801bbc2:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801bbc6:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801bbca:	ee78 3a63 	vsub.f32	s7, s16, s7
 801bbce:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801bbd2:	eec7 eaa5 	vdiv.f32	s29, s15, s11
 801bbd6:	ee7e ea83 	vadd.f32	s29, s29, s6
 801bbda:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 801bbde:	eef4 7ac8 	vcmpe.f32	s15, s16
 801bbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbe6:	f202 84a8 	bhi.w	801e53a <iNemoEngine_API_Update+0x3e1a>
 801bbea:	edd7 5a52 	vldr	s11, [r7, #328]	@ 0x148
 801bbee:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801bbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf6:	f142 87d7 	bpl.w	801eba8 <iNemoEngine_API_Update+0x4488>
 801bbfa:	ed97 3a51 	vldr	s6, [r7, #324]	@ 0x144
 801bbfe:	edd7 3a53 	vldr	s7, [r7, #332]	@ 0x14c
 801bc02:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801bc06:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801bc0a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801bc0e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801bc12:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801bc16:	ee7e ea83 	vadd.f32	s29, s29, s6
 801bc1a:	edd7 7a54 	vldr	s15, [r7, #336]	@ 0x150
 801bc1e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc26:	f2c2 84a8 	blt.w	801e57a <iNemoEngine_API_Update+0x3e5a>
 801bc2a:	edd7 5a56 	vldr	s11, [r7, #344]	@ 0x158
 801bc2e:	eef4 5ac8 	vcmpe.f32	s11, s16
 801bc32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc36:	f342 87be 	ble.w	801ebb6 <iNemoEngine_API_Update+0x4496>
 801bc3a:	ed97 3a55 	vldr	s6, [r7, #340]	@ 0x154
 801bc3e:	edd7 3a57 	vldr	s7, [r7, #348]	@ 0x15c
 801bc42:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801bc46:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801bc4a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801bc4e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801bc52:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801bc56:	ee7e ea83 	vadd.f32	s29, s29, s6
 801bc5a:	edd7 7a58 	vldr	s15, [r7, #352]	@ 0x160
 801bc5e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc66:	f2c2 84a8 	blt.w	801e5ba <iNemoEngine_API_Update+0x3e9a>
 801bc6a:	edd7 5a5a 	vldr	s11, [r7, #360]	@ 0x168
 801bc6e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801bc72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc76:	f142 8709 	bpl.w	801ea8c <iNemoEngine_API_Update+0x436c>
 801bc7a:	ed97 3a59 	vldr	s6, [r7, #356]	@ 0x164
 801bc7e:	edd7 3a5b 	vldr	s7, [r7, #364]	@ 0x16c
 801bc82:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801bc86:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801bc8a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801bc8e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801bc92:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801bc96:	ee7e ea83 	vadd.f32	s29, s29, s6
 801bc9a:	edd7 7a5c 	vldr	s15, [r7, #368]	@ 0x170
 801bc9e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca6:	f2c2 84a8 	blt.w	801e5fa <iNemoEngine_API_Update+0x3eda>
 801bcaa:	edd7 5a5e 	vldr	s11, [r7, #376]	@ 0x178
 801bcae:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801bcb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcb6:	f142 86ec 	bpl.w	801ea92 <iNemoEngine_API_Update+0x4372>
 801bcba:	ed97 3a5d 	vldr	s6, [r7, #372]	@ 0x174
 801bcbe:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 801bcc2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801bcc6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801bcca:	ee78 7a67 	vsub.f32	s15, s16, s15
 801bcce:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801bcd2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801bcd6:	ee7e ea83 	vadd.f32	s29, s29, s6
 801bcda:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 801bcde:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bce6:	db0f      	blt.n	801bd08 <iNemoEngine_API_Update+0x15e8>
 801bce8:	edd7 3a61 	vldr	s7, [r7, #388]	@ 0x184
 801bcec:	edd7 5a63 	vldr	s11, [r7, #396]	@ 0x18c
 801bcf0:	ee35 5a67 	vsub.f32	s10, s10, s15
 801bcf4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801bcf8:	ee78 7a67 	vsub.f32	s15, s16, s15
 801bcfc:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801bd00:	eec7 ea85 	vdiv.f32	s29, s15, s10
 801bd04:	ee7e eaa3 	vadd.f32	s29, s29, s7
 801bd08:	ee2a aa2e 	vmul.f32	s20, s20, s29
 801bd0c:	e0b6      	b.n	801be7c <iNemoEngine_API_Update+0x175c>
 801bd0e:	9a03      	ldr	r2, [sp, #12]
 801bd10:	1c60      	adds	r0, r4, #1
 801bd12:	1bd3      	subs	r3, r2, r7
 801bd14:	4297      	cmp	r7, r2
 801bd16:	4429      	add	r1, r5
 801bd18:	461a      	mov	r2, r3
 801bd1a:	4458      	add	r0, fp
 801bd1c:	f6bf ae44 	bge.w	801b9a8 <iNemoEngine_API_Update+0x1288>
 801bd20:	9306      	str	r3, [sp, #24]
 801bd22:	f009 f984 	bl	802502e <memcpy>
 801bd26:	9b06      	ldr	r3, [sp, #24]
 801bd28:	9f03      	ldr	r7, [sp, #12]
 801bd2a:	441c      	add	r4, r3
 801bd2c:	46b4      	mov	ip, r6
 801bd2e:	e63c      	b.n	801b9aa <iNemoEngine_API_Update+0x128a>
 801bd30:	f80b 3004 	strb.w	r3, [fp, r4]
 801bd34:	9b03      	ldr	r3, [sp, #12]
 801bd36:	3701      	adds	r7, #1
 801bd38:	429f      	cmp	r7, r3
 801bd3a:	f47f ae36 	bne.w	801b9aa <iNemoEngine_API_Update+0x128a>
 801bd3e:	f10c 0601 	add.w	r6, ip, #1
 801bd42:	eba8 030c 	sub.w	r3, r8, ip
 801bd46:	1c60      	adds	r0, r4, #1
 801bd48:	4546      	cmp	r6, r8
 801bd4a:	eb05 010c 	add.w	r1, r5, ip
 801bd4e:	f103 32ff 	add.w	r2, r3, #4294967295	@ 0xffffffff
 801bd52:	9306      	str	r3, [sp, #24]
 801bd54:	4458      	add	r0, fp
 801bd56:	f6bf ae28 	bge.w	801b9aa <iNemoEngine_API_Update+0x128a>
 801bd5a:	f009 f968 	bl	802502e <memcpy>
 801bd5e:	9b06      	ldr	r3, [sp, #24]
 801bd60:	3c01      	subs	r4, #1
 801bd62:	441e      	add	r6, r3
 801bd64:	441c      	add	r4, r3
 801bd66:	f1a6 0c02 	sub.w	ip, r6, #2
 801bd6a:	e61e      	b.n	801b9aa <iNemoEngine_API_Update+0x128a>
 801bd6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 801bd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd74:	f43f ae51 	beq.w	801ba1a <iNemoEngine_API_Update+0x12fa>
 801bd78:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801bd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd80:	f43f ae4b 	beq.w	801ba1a <iNemoEngine_API_Update+0x12fa>
 801bd84:	ee37 7a67 	vsub.f32	s14, s14, s15
 801bd88:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801bd8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 801bd90:	e649      	b.n	801ba26 <iNemoEngine_API_Update+0x1306>
 801bd92:	2300      	movs	r3, #0
 801bd94:	f887 3900 	strb.w	r3, [r7, #2304]	@ 0x900
 801bd98:	edc4 7a07 	vstr	s15, [r4, #28]
 801bd9c:	edc4 7a08 	vstr	s15, [r4, #32]
 801bda0:	edc4 7a09 	vstr	s15, [r4, #36]	@ 0x24
 801bda4:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
 801bda8:	edc4 7a0b 	vstr	s15, [r4, #44]	@ 0x2c
 801bdac:	e69b      	b.n	801bae6 <iNemoEngine_API_Update+0x13c6>
 801bdae:	4618      	mov	r0, r3
 801bdb0:	9b03      	ldr	r3, [sp, #12]
 801bdb2:	edd1 7a00 	vldr	s15, [r1]
 801bdb6:	eeb0 5a46 	vmov.f32	s10, s12
 801bdba:	4625      	mov	r5, r4
 801bdbc:	eeb0 6a66 	vmov.f32	s12, s13
 801bdc0:	465e      	mov	r6, fp
 801bdc2:	eef0 5a47 	vmov.f32	s11, s14
 801bdc6:	eef0 6a45 	vmov.f32	s13, s10
 801bdca:	009b      	lsls	r3, r3, #2
 801bdcc:	0094      	lsls	r4, r2, #2
 801bdce:	ea4f 0b8c 	mov.w	fp, ip, lsl #2
 801bdd2:	f7ff bb8b 	b.w	801b4ec <iNemoEngine_API_Update+0xdcc>
 801bdd6:	2303      	movs	r3, #3
 801bdd8:	2108      	movs	r1, #8
 801bdda:	2204      	movs	r2, #4
 801bddc:	2601      	movs	r6, #1
 801bdde:	9304      	str	r3, [sp, #16]
 801bde0:	f04f 0b06 	mov.w	fp, #6
 801bde4:	f04f 0c07 	mov.w	ip, #7
 801bde8:	2005      	movs	r0, #5
 801bdea:	460b      	mov	r3, r1
 801bdec:	4614      	mov	r4, r2
 801bdee:	2500      	movs	r5, #0
 801bdf0:	9603      	str	r6, [sp, #12]
 801bdf2:	f04f 0e02 	mov.w	lr, #2
 801bdf6:	f7ff bb0f 	b.w	801b418 <iNemoEngine_API_Update+0xcf8>
 801bdfa:	2204      	movs	r2, #4
 801bdfc:	2300      	movs	r3, #0
 801bdfe:	2501      	movs	r5, #1
 801be00:	eef0 7a47 	vmov.f32	s15, s14
 801be04:	2106      	movs	r1, #6
 801be06:	f04f 0c07 	mov.w	ip, #7
 801be0a:	2003      	movs	r0, #3
 801be0c:	4614      	mov	r4, r2
 801be0e:	9503      	str	r5, [sp, #12]
 801be10:	469e      	mov	lr, r3
 801be12:	f7ff baf2 	b.w	801b3fa <iNemoEngine_API_Update+0xcda>
 801be16:	eddf 7aa7 	vldr	s15, [pc, #668]	@ 801c0b4 <iNemoEngine_API_Update+0x1994>
 801be1a:	ed9f eaa7 	vldr	s28, [pc, #668]	@ 801c0b8 <iNemoEngine_API_Update+0x1998>
 801be1e:	edcd 7a30 	vstr	s15, [sp, #192]	@ 0xc0
 801be22:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801c0bc <iNemoEngine_API_Update+0x199c>
 801be26:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 801be2a:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 801be2e:	f7ff b806 	b.w	801ae3e <iNemoEngine_API_Update+0x71e>
 801be32:	ed9f 8aa3 	vldr	s16, [pc, #652]	@ 801c0c0 <iNemoEngine_API_Update+0x19a0>
 801be36:	eddf 7aa3 	vldr	s15, [pc, #652]	@ 801c0c4 <iNemoEngine_API_Update+0x19a4>
 801be3a:	eddf 6aac 	vldr	s13, [pc, #688]	@ 801c0ec <iNemoEngine_API_Update+0x19cc>
 801be3e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 801c0c8 <iNemoEngine_API_Update+0x19a8>
 801be42:	eddf 4aa2 	vldr	s9, [pc, #648]	@ 801c0cc <iNemoEngine_API_Update+0x19ac>
 801be46:	ed84 8a01 	vstr	s16, [r4, #4]
 801be4a:	edc4 7a00 	vstr	s15, [r4]
 801be4e:	ed84 8a02 	vstr	s16, [r4, #8]
 801be52:	eef0 5a66 	vmov.f32	s11, s13
 801be56:	eeb0 5a47 	vmov.f32	s10, s14
 801be5a:	eeb0 6a67 	vmov.f32	s12, s15
 801be5e:	edcd 4a04 	vstr	s9, [sp, #16]
 801be62:	eeb0 9a67 	vmov.f32	s18, s15
 801be66:	eef0 ea48 	vmov.f32	s29, s16
 801be6a:	f7fe befb 	b.w	801ac64 <iNemoEngine_API_Update+0x544>
 801be6e:	eef1 7a67 	vneg.f32	s15, s15
 801be72:	e42e      	b.n	801b6d2 <iNemoEngine_API_Update+0xfb2>
 801be74:	eef7 ea00 	vmov.f32	s29, #112	@ 0x3f800000  1.0
 801be78:	eeb0 9a6e 	vmov.f32	s18, s29
 801be7c:	edd7 5a74 	vldr	s11, [r7, #464]	@ 0x1d0
 801be80:	ed97 5a72 	vldr	s10, [r7, #456]	@ 0x1c8
 801be84:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 801be88:	eddf 3a8b 	vldr	s7, [pc, #556]	@ 801c0b8 <iNemoEngine_API_Update+0x1998>
 801be8c:	ee7e 5a65 	vsub.f32	s11, s28, s11
 801be90:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801be94:	eef0 5ae5 	vabs.f32	s11, s11
 801be98:	eef0 7ae7 	vabs.f32	s15, s15
 801be9c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801bea0:	eef4 7ae3 	vcmpe.f32	s15, s7
 801bea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bea8:	dd0a      	ble.n	801bec0 <iNemoEngine_API_Update+0x17a0>
 801beaa:	ed9f 3a89 	vldr	s6, [pc, #548]	@ 801c0d0 <iNemoEngine_API_Update+0x19b0>
 801beae:	eef4 7ac3 	vcmpe.f32	s15, s6
 801beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beb6:	f341 80e1 	ble.w	801d07c <iNemoEngine_API_Update+0x295c>
 801beba:	eef1 3a04 	vmov.f32	s7, #20	@ 0x40a00000  5.0
 801bebe:	e001      	b.n	801bec4 <iNemoEngine_API_Update+0x17a4>
 801bec0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801bec4:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801bec8:	783e      	ldrb	r6, [r7, #0]
 801beca:	eef4 3ae7 	vcmpe.f32	s7, s15
 801bece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bed2:	bfa8      	it	ge
 801bed4:	eef0 7a63 	vmovge.f32	s15, s7
 801bed8:	edcd 7a04 	vstr	s15, [sp, #16]
 801bedc:	b1ce      	cbz	r6, 801bf12 <iNemoEngine_API_Update+0x17f2>
 801bede:	787e      	ldrb	r6, [r7, #1]
 801bee0:	2e00      	cmp	r6, #0
 801bee2:	f041 8053 	bne.w	801cf8c <iNemoEngine_API_Update+0x286c>
 801bee6:	ee74 7a86 	vadd.f32	s15, s9, s12
 801beea:	eef5 4a00 	vmov.f32	s9, #80	@ 0x3e800000  0.250
 801beee:	ee74 7a27 	vadd.f32	s15, s8, s15
 801bef2:	ed97 6a05 	vldr	s12, [r7, #20]
 801bef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801befa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801befe:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 801bf02:	ee26 6a24 	vmul.f32	s12, s12, s9
 801bf06:	eef4 7ac6 	vcmpe.f32	s15, s12
 801bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bf0e:	f102 8293 	bmi.w	801e438 <iNemoEngine_API_Update+0x3d18>
 801bf12:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 801bf16:	ed9d 6a22 	vldr	s12, [sp, #136]	@ 0x88
 801bf1a:	ed8d 5a4f 	vstr	s10, [sp, #316]	@ 0x13c
 801bf1e:	ed8d 6aa2 	vstr	s12, [sp, #648]	@ 0x288
 801bf22:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 801bf26:	ed8d eaa4 	vstr	s28, [sp, #656]	@ 0x290
 801bf2a:	ed8d 6aa3 	vstr	s12, [sp, #652]	@ 0x28c
 801bf2e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801bf32:	eef0 4a46 	vmov.f32	s9, s12
 801bf36:	eee5 4a45 	vfms.f32	s9, s10, s10
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 801bf40:	ee2c 4aaa 	vmul.f32	s8, s25, s21
 801bf44:	eef1 3ae4 	vsqrt.f32	s7, s9
 801bf48:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 801bf4c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801bf50:	934d      	str	r3, [sp, #308]	@ 0x134
 801bf52:	ee74 2a04 	vadd.f32	s5, s8, s8
 801bf56:	ee29 4aac 	vmul.f32	s8, s19, s25
 801bf5a:	ee69 4aaa 	vmul.f32	s9, s19, s21
 801bf5e:	eeab 4a2a 	vfma.f32	s8, s22, s21
 801bf62:	ee2c 3a8b 	vmul.f32	s6, s25, s22
 801bf66:	ee29 1a8b 	vmul.f32	s2, s19, s22
 801bf6a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 801bf6e:	ee69 9aa9 	vmul.f32	s19, s19, s19
 801bf72:	ee74 ca04 	vadd.f32	s25, s8, s8
 801bf76:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 801bf7a:	ee79 9aa9 	vadd.f32	s19, s19, s19
 801bf7e:	eeb0 2a64 	vmov.f32	s4, s9
 801bf82:	eee3 4a44 	vfms.f32	s9, s6, s8
 801bf86:	eea3 2a04 	vfma.f32	s4, s6, s8
 801bf8a:	ee2b ba0b 	vmul.f32	s22, s22, s22
 801bf8e:	eef0 1a69 	vmov.f32	s3, s19
 801bf92:	eddd 9a32 	vldr	s19, [sp, #200]	@ 0xc8
 801bf96:	edcd 3a4e 	vstr	s7, [sp, #312]	@ 0x138
 801bf9a:	eee3 9ae4 	vfms.f32	s19, s7, s9
 801bf9e:	eeeb 1a04 	vfma.f32	s3, s22, s8
 801bfa2:	eddd 4a35 	vldr	s9, [sp, #212]	@ 0xd4
 801bfa6:	eee5 4a42 	vfms.f32	s9, s10, s4
 801bfaa:	ee76 1a61 	vsub.f32	s3, s12, s3
 801bfae:	ee6a aaaa 	vmul.f32	s21, s21, s21
 801bfb2:	eee3 4ae1 	vfms.f32	s9, s7, s3
 801bfb6:	ee7a aaaa 	vadd.f32	s21, s21, s21
 801bfba:	edcd 4a9a 	vstr	s9, [sp, #616]	@ 0x268
 801bfbe:	ee7c 4a22 	vadd.f32	s9, s24, s5
 801bfc2:	eef0 0a6a 	vmov.f32	s1, s21
 801bfc6:	eeb0 3a62 	vmov.f32	s6, s5
 801bfca:	eee1 4a44 	vfms.f32	s9, s2, s8
 801bfce:	eeeb 0a04 	vfma.f32	s1, s22, s8
 801bfd2:	ee91 3a04 	vfnms.f32	s6, s2, s8
 801bfd6:	edcd 4a47 	vstr	s9, [sp, #284]	@ 0x11c
 801bfda:	ee25 4a03 	vmul.f32	s8, s10, s6
 801bfde:	edcd 4a9c 	vstr	s9, [sp, #624]	@ 0x270
 801bfe2:	ee76 4a60 	vsub.f32	s9, s12, s1
 801bfe6:	ee3b 6ac6 	vsub.f32	s12, s23, s12
 801bfea:	eea3 4aac 	vfma.f32	s8, s7, s25
 801bfee:	ee36 6a20 	vadd.f32	s12, s12, s1
 801bff2:	eee5 9a64 	vfms.f32	s19, s10, s9
 801bff6:	eddd 3a34 	vldr	s7, [sp, #208]	@ 0xd0
 801bffa:	ed8d 6a49 	vstr	s12, [sp, #292]	@ 0x124
 801bffe:	ed8d 6a9e 	vstr	s12, [sp, #632]	@ 0x278
 801c002:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801c0fc <iNemoEngine_API_Update+0x19dc>
 801c006:	edcd 9a9b 	vstr	s19, [sp, #620]	@ 0x26c
 801c00a:	ee3d 2a42 	vsub.f32	s4, s26, s4
 801c00e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 801c012:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c01a:	ed8d 2a48 	vstr	s4, [sp, #288]	@ 0x120
 801c01e:	ed8d 2a9d 	vstr	s4, [sp, #628]	@ 0x274
 801c022:	ed8d 4a99 	vstr	s8, [sp, #612]	@ 0x264
 801c026:	d541      	bpl.n	801c0ac <iNemoEngine_API_Update+0x198c>
 801c028:	ed9f 6a2a 	vldr	s12, [pc, #168]	@ 801c0d4 <iNemoEngine_API_Update+0x19b4>
 801c02c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c034:	dd3a      	ble.n	801c0ac <iNemoEngine_API_Update+0x198c>
 801c036:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 801c03a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801c03e:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 801c042:	eef0 7ae7 	vabs.f32	s15, s15
 801c046:	ee77 7a86 	vadd.f32	s15, s15, s12
 801c04a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c052:	dd55      	ble.n	801c100 <iNemoEngine_API_Update+0x19e0>
 801c054:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801c058:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c060:	f140 8786 	bpl.w	801cf70 <iNemoEngine_API_Update+0x2850>
 801c064:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 801c0d8 <iNemoEngine_API_Update+0x19b8>
 801c068:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c070:	f141 8172 	bpl.w	801d358 <iNemoEngine_API_Update+0x2c38>
 801c074:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 801c0e4 <iNemoEngine_API_Update+0x19c4>
 801c078:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c080:	f2c1 8172 	blt.w	801d368 <iNemoEngine_API_Update+0x2c48>
 801c084:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801c0dc <iNemoEngine_API_Update+0x19bc>
 801c088:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c090:	f141 8227 	bpl.w	801d4e2 <iNemoEngine_API_Update+0x2dc2>
 801c094:	ed9f 5a13 	vldr	s10, [pc, #76]	@ 801c0e4 <iNemoEngine_API_Update+0x19c4>
 801c098:	eddf 4a11 	vldr	s9, [pc, #68]	@ 801c0e0 <iNemoEngine_API_Update+0x19c0>
 801c09c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801c0a0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801c0a4:	eea5 6a24 	vfma.f32	s12, s10, s9
 801c0a8:	f001 b968 	b.w	801d37c <iNemoEngine_API_Update+0x2c5c>
 801c0ac:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c0b0:	e7c1      	b.n	801c036 <iNemoEngine_API_Update+0x1916>
 801c0b2:	bf00      	nop
 801c0b4:	3ecccccc 	.word	0x3ecccccc
 801c0b8:	3dcccccd 	.word	0x3dcccccd
 801c0bc:	3f666666 	.word	0x3f666666
 801c0c0:	3f333333 	.word	0x3f333333
 801c0c4:	00000000 	.word	0x00000000
 801c0c8:	bfb33333 	.word	0xbfb33333
 801c0cc:	3f7ae147 	.word	0x3f7ae147
 801c0d0:	3fb77778 	.word	0x3fb77778
 801c0d4:	3f4ccccd 	.word	0x3f4ccccd
 801c0d8:	3ba3d70a 	.word	0x3ba3d70a
 801c0dc:	3c75c28f 	.word	0x3c75c28f
 801c0e0:	42f00001 	.word	0x42f00001
 801c0e4:	3c23d70a 	.word	0x3c23d70a
 801c0e8:	3b449ba6 	.word	0x3b449ba6
 801c0ec:	3fb33333 	.word	0x3fb33333
 801c0f0:	3f8f5c29 	.word	0x3f8f5c29
 801c0f4:	3f59999a 	.word	0x3f59999a
 801c0f8:	3e4ccccd 	.word	0x3e4ccccd
 801c0fc:	3f99999a 	.word	0x3f99999a
 801c100:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 801c104:	ed5f 3a09 	vldr	s7, [pc, #-36]	@ 801c0e4 <iNemoEngine_API_Update+0x19c4>
 801c108:	ed5f 4a09 	vldr	s9, [pc, #-36]	@ 801c0e8 <iNemoEngine_API_Update+0x19c8>
 801c10c:	eeb0 6a45 	vmov.f32	s12, s10
 801c110:	eef0 9a45 	vmov.f32	s19, s10
 801c114:	ed9d 4a04 	vldr	s8, [sp, #16]
 801c118:	edcd 4a6f 	vstr	s9, [sp, #444]	@ 0x1bc
 801c11c:	eddd 4a21 	vldr	s9, [sp, #132]	@ 0x84
 801c120:	eddd 2a8e 	vldr	s5, [sp, #568]	@ 0x238
 801c124:	ed9d 2a90 	vldr	s4, [sp, #576]	@ 0x240
 801c128:	7b3b      	ldrb	r3, [r7, #12]
 801c12a:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801c12e:	ee24 9a09 	vmul.f32	s18, s8, s18
 801c132:	ee34 3aa4 	vadd.f32	s6, s9, s9
 801c136:	eddd 4a2f 	vldr	s9, [sp, #188]	@ 0xbc
 801c13a:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 801c13e:	ee34 4aa4 	vadd.f32	s8, s9, s9
 801c142:	ee62 2a89 	vmul.f32	s5, s5, s18
 801c146:	eddd 4a1f 	vldr	s9, [sp, #124]	@ 0x7c
 801c14a:	edcd 2a8e 	vstr	s5, [sp, #568]	@ 0x238
 801c14e:	edcd 4a98 	vstr	s9, [sp, #608]	@ 0x260
 801c152:	eddd 2a8f 	vldr	s5, [sp, #572]	@ 0x23c
 801c156:	eddd 4a8d 	vldr	s9, [sp, #564]	@ 0x234
 801c15a:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 801c15e:	ee23 3a06 	vmul.f32	s6, s6, s12
 801c162:	ee24 4a06 	vmul.f32	s8, s8, s12
 801c166:	ee69 4a24 	vmul.f32	s9, s18, s9
 801c16a:	ee62 2a89 	vmul.f32	s5, s5, s18
 801c16e:	ee2e 2a82 	vmul.f32	s4, s29, s4
 801c172:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 801c176:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 801c17a:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 801c17e:	edcd 2a8f 	vstr	s5, [sp, #572]	@ 0x23c
 801c182:	ed8d 2a90 	vstr	s4, [sp, #576]	@ 0x240
 801c186:	2b00      	cmp	r3, #0
 801c188:	f000 85eb 	beq.w	801cd62 <iNemoEngine_API_Update+0x2642>
 801c18c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801c18e:	eddd 2a29 	vldr	s5, [sp, #164]	@ 0xa4
 801c192:	2300      	movs	r3, #0
 801c194:	f362 0307 	bfi	r3, r2, #0, #8
 801c198:	f362 230f 	bfi	r3, r2, #8, #8
 801c19c:	f362 4317 	bfi	r3, r2, #16, #8
 801c1a0:	7bba      	ldrb	r2, [r7, #14]
 801c1a2:	f362 631f 	bfi	r3, r2, #24, #8
 801c1a6:	ee65 2a22 	vmul.f32	s5, s10, s5
 801c1aa:	ee26 aa0a 	vmul.f32	s20, s12, s20
 801c1ae:	ee63 3a85 	vmul.f32	s7, s7, s10
 801c1b2:	9344      	str	r3, [sp, #272]	@ 0x110
 801c1b4:	ee26 5a02 	vmul.f32	s10, s12, s4
 801c1b8:	2300      	movs	r3, #0
 801c1ba:	ee36 6a06 	vadd.f32	s12, s12, s12
 801c1be:	4619      	mov	r1, r3
 801c1c0:	ee24 4a06 	vmul.f32	s8, s8, s12
 801c1c4:	f362 0107 	bfi	r1, r2, #0, #8
 801c1c8:	f362 210f 	bfi	r1, r2, #8, #8
 801c1cc:	edcd 3a70 	vstr	s7, [sp, #448]	@ 0x1c0
 801c1d0:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 801c1d4:	edcd 2a69 	vstr	s5, [sp, #420]	@ 0x1a4
 801c1d8:	ed8d aa91 	vstr	s20, [sp, #580]	@ 0x244
 801c1dc:	ed8d aa92 	vstr	s20, [sp, #584]	@ 0x248
 801c1e0:	edcd 2a6a 	vstr	s5, [sp, #424]	@ 0x1a8
 801c1e4:	edcd 2a6b 	vstr	s5, [sp, #428]	@ 0x1ac
 801c1e8:	ed8d 4a97 	vstr	s8, [sp, #604]	@ 0x25c
 801c1ec:	f8ad 1114 	strh.w	r1, [sp, #276]	@ 0x114
 801c1f0:	2a00      	cmp	r2, #0
 801c1f2:	f040 86b0 	bne.w	801cf56 <iNemoEngine_API_Update+0x2836>
 801c1f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1fe:	f340 8482 	ble.w	801cb06 <iNemoEngine_API_Update+0x23e6>
 801c202:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 801c206:	eef4 7ac8 	vcmpe.f32	s15, s16
 801c20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c20e:	f2c0 847a 	blt.w	801cb06 <iNemoEngine_API_Update+0x23e6>
 801c212:	2e00      	cmp	r6, #0
 801c214:	f040 8477 	bne.w	801cb06 <iNemoEngine_API_Update+0x23e6>
 801c218:	ed5f 7a4c 	vldr	s15, [pc, #-304]	@ 801c0ec <iNemoEngine_API_Update+0x19cc>
 801c21c:	f8ad 6110 	strh.w	r6, [sp, #272]	@ 0x110
 801c220:	eeb4 eae7 	vcmpe.f32	s28, s15
 801c224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c228:	f88d 6112 	strb.w	r6, [sp, #274]	@ 0x112
 801c22c:	f88d 6119 	strb.w	r6, [sp, #281]	@ 0x119
 801c230:	f88d 611b 	strb.w	r6, [sp, #283]	@ 0x11b
 801c234:	f342 8146 	ble.w	801e4c4 <iNemoEngine_API_Update+0x3da4>
 801c238:	2300      	movs	r3, #0
 801c23a:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 801c23e:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 801c242:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 801c246:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 801c24a:	ed5f 7a57 	vldr	s15, [pc, #-348]	@ 801c0f0 <iNemoEngine_API_Update+0x19d0>
 801c24e:	ed9d 6a0a 	vldr	s12, [sp, #40]	@ 0x28
 801c252:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c25a:	dc07      	bgt.n	801c26c <iNemoEngine_API_Update+0x1b4c>
 801c25c:	ed5f 7a5b 	vldr	s15, [pc, #-364]	@ 801c0f4 <iNemoEngine_API_Update+0x19d4>
 801c260:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c268:	f140 863f 	bpl.w	801ceea <iNemoEngine_API_Update+0x27ca>
 801c26c:	2300      	movs	r3, #0
 801c26e:	f8ad 3113 	strh.w	r3, [sp, #275]	@ 0x113
 801c272:	f88d 3115 	strb.w	r3, [sp, #277]	@ 0x115
 801c276:	f8ad 3119 	strh.w	r3, [sp, #281]	@ 0x119
 801c27a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c27e:	eef4 5ae7 	vcmpe.f32	s11, s15
 801c282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c288:	f340 855b 	ble.w	801cd42 <iNemoEngine_API_Update+0x2622>
 801c28c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c290:	ee75 7aa7 	vadd.f32	s15, s11, s15
 801c294:	ed9d 6a1f 	vldr	s12, [sp, #124]	@ 0x7c
 801c298:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801c29c:	2200      	movs	r2, #0
 801c29e:	ee23 3a27 	vmul.f32	s6, s6, s15
 801c2a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 801c2a6:	ed8d 3a96 	vstr	s6, [sp, #600]	@ 0x258
 801c2aa:	edcd 7a98 	vstr	s15, [sp, #608]	@ 0x260
 801c2ae:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801c2b2:	eef4 5ae7 	vcmpe.f32	s11, s15
 801c2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ba:	bfc4      	itt	gt
 801c2bc:	f88d 2119 	strbgt.w	r2, [sp, #281]	@ 0x119
 801c2c0:	f88d 211b 	strbgt.w	r2, [sp, #283]	@ 0x11b
 801c2c4:	2b0e      	cmp	r3, #14
 801c2c6:	f8ad 2110 	strh.w	r2, [sp, #272]	@ 0x110
 801c2ca:	f88d 2112 	strb.w	r2, [sp, #274]	@ 0x112
 801c2ce:	f340 8608 	ble.w	801cee2 <iNemoEngine_API_Update+0x27c2>
 801c2d2:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 801c2d6:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 801c2da:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2e2:	f340 8440 	ble.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c2e6:	eddd 7a12 	vldr	s15, [sp, #72]	@ 0x48
 801c2ea:	ed9d 6a0c 	vldr	s12, [sp, #48]	@ 0x30
 801c2ee:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2f6:	f340 8436 	ble.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c2fa:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 801c2fe:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 801c302:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c30a:	f340 842c 	ble.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c30e:	ed5f 7a86 	vldr	s15, [pc, #-536]	@ 801c0f8 <iNemoEngine_API_Update+0x19d8>
 801c312:	eeb0 6aef 	vabs.f32	s12, s31
 801c316:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c31e:	f140 8422 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c322:	eeb0 6acf 	vabs.f32	s12, s30
 801c326:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c32e:	f140 841a 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c332:	ed9d 6a10 	vldr	s12, [sp, #64]	@ 0x40
 801c336:	eeb0 6ac6 	vabs.f32	s12, s12
 801c33a:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801c33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c342:	f140 8410 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c346:	ed5f 7a93 	vldr	s15, [pc, #-588]	@ 801c0fc <iNemoEngine_API_Update+0x19dc>
 801c34a:	eeb0 cacc 	vabs.f32	s24, s24
 801c34e:	eeb4 cae7 	vcmpe.f32	s24, s15
 801c352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c356:	f140 8406 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c35a:	eeb0 dacd 	vabs.f32	s26, s26
 801c35e:	eeb4 dae7 	vcmpe.f32	s26, s15
 801c362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c366:	f140 83fe 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c36a:	eef0 baeb 	vabs.f32	s23, s23
 801c36e:	eef4 bae7 	vcmpe.f32	s23, s15
 801c372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c376:	f140 83f6 	bpl.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c37c:	edd3 7a00 	vldr	s15, [r3]
 801c380:	f207 73a4 	addw	r3, r7, #1956	@ 0x7a4
 801c384:	edd3 3a00 	vldr	s7, [r3]
 801c388:	f897 31a0 	ldrb.w	r3, [r7, #416]	@ 0x1a0
 801c38c:	f507 62f6 	add.w	r2, r7, #1968	@ 0x7b0
 801c390:	eef4 7ae3 	vcmpe.f32	s15, s7
 801c394:	2b09      	cmp	r3, #9
 801c396:	ed92 4a00 	vldr	s8, [r2]
 801c39a:	bf8c      	ite	hi
 801c39c:	220a      	movhi	r2, #10
 801c39e:	2205      	movls	r2, #5
 801c3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3a4:	bfb4      	ite	lt
 801c3a6:	eeb0 6a63 	vmovlt.f32	s12, s7
 801c3aa:	eeb0 6a67 	vmovge.f32	s12, s15
 801c3ae:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c3b2:	f207 71bc 	addw	r1, r7, #1980	@ 0x7bc
 801c3b6:	edd1 4a00 	vldr	s9, [r1]
 801c3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3be:	bfb8      	it	lt
 801c3c0:	eeb0 6a44 	vmovlt.f32	s12, s8
 801c3c4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c3c8:	f507 61f9 	add.w	r1, r7, #1992	@ 0x7c8
 801c3cc:	ed91 5a00 	vldr	s10, [r1]
 801c3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d4:	bfb8      	it	lt
 801c3d6:	eeb0 6a64 	vmovlt.f32	s12, s9
 801c3da:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c3de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3e2:	eef4 7ae3 	vcmpe.f32	s15, s7
 801c3e6:	bfb4      	ite	lt
 801c3e8:	eef0 5a45 	vmovlt.f32	s11, s10
 801c3ec:	eef0 5a46 	vmovge.f32	s11, s12
 801c3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3f4:	bf8c      	ite	hi
 801c3f6:	eeb0 6a63 	vmovhi.f32	s12, s7
 801c3fa:	eeb0 6a67 	vmovls.f32	s12, s15
 801c3fe:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c406:	bf88      	it	hi
 801c408:	eeb0 6a44 	vmovhi.f32	s12, s8
 801c40c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c410:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c418:	bf88      	it	hi
 801c41a:	eeb0 6a64 	vmovhi.f32	s12, s9
 801c41e:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c422:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c42a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c42e:	bf88      	it	hi
 801c430:	eeb0 6a45 	vmovhi.f32	s12, s10
 801c434:	2a05      	cmp	r2, #5
 801c436:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c43a:	d063      	beq.n	801c504 <iNemoEngine_API_Update+0x1de4>
 801c43c:	f207 71d4 	addw	r1, r7, #2004	@ 0x7d4
 801c440:	ed91 3a00 	vldr	s6, [r1]
 801c444:	f507 61fc 	add.w	r1, r7, #2016	@ 0x7e0
 801c448:	eef4 5ac3 	vcmpe.f32	s11, s6
 801c44c:	edd1 3a00 	vldr	s7, [r1]
 801c450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c454:	bfb8      	it	lt
 801c456:	eef0 5a43 	vmovlt.f32	s11, s6
 801c45a:	eef4 5ae3 	vcmpe.f32	s11, s7
 801c45e:	f207 71ec 	addw	r1, r7, #2028	@ 0x7ec
 801c462:	ed91 4a00 	vldr	s8, [r1]
 801c466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46a:	bfb8      	it	lt
 801c46c:	eef0 5a63 	vmovlt.f32	s11, s7
 801c470:	eef4 5ac4 	vcmpe.f32	s11, s8
 801c474:	f507 61ff 	add.w	r1, r7, #2040	@ 0x7f8
 801c478:	edd1 4a00 	vldr	s9, [r1]
 801c47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c480:	bfb8      	it	lt
 801c482:	eef0 5a44 	vmovlt.f32	s11, s8
 801c486:	eef4 5ae4 	vcmpe.f32	s11, s9
 801c48a:	f607 0104 	addw	r1, r7, #2052	@ 0x804
 801c48e:	ed91 5a00 	vldr	s10, [r1]
 801c492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c496:	bfb8      	it	lt
 801c498:	eef0 5a64 	vmovlt.f32	s11, s9
 801c49c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801c4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4a4:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801c4a8:	bfb8      	it	lt
 801c4aa:	eef0 5a45 	vmovlt.f32	s11, s10
 801c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4b2:	bf88      	it	hi
 801c4b4:	eeb0 6a43 	vmovhi.f32	s12, s6
 801c4b8:	eeb4 6ae3 	vcmpe.f32	s12, s7
 801c4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4c0:	bf88      	it	hi
 801c4c2:	eeb0 6a63 	vmovhi.f32	s12, s7
 801c4c6:	ee77 7a83 	vadd.f32	s15, s15, s6
 801c4ca:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c4d6:	bf88      	it	hi
 801c4d8:	eeb0 6a44 	vmovhi.f32	s12, s8
 801c4dc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c4e0:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4e8:	bf88      	it	hi
 801c4ea:	eeb0 6a64 	vmovhi.f32	s12, s9
 801c4ee:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c4f2:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c4fe:	bf88      	it	hi
 801c500:	eeb0 6a45 	vmovhi.f32	s12, s10
 801c504:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801c508:	eddf 5af3 	vldr	s11, [pc, #972]	@ 801c8d8 <iNemoEngine_API_Update+0x21b8>
 801c50c:	ee26 6a2d 	vmul.f32	s12, s12, s27
 801c510:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c514:	eddf 5af1 	vldr	s11, [pc, #964]	@ 801c8dc <iNemoEngine_API_Update+0x21bc>
 801c518:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801c51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c520:	f300 8321 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c524:	eef0 7ae7 	vabs.f32	s15, s15
 801c528:	ee67 7aad 	vmul.f32	s15, s15, s27
 801c52c:	ed9f 6aec 	vldr	s12, [pc, #944]	@ 801c8e0 <iNemoEngine_API_Update+0x21c0>
 801c530:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c538:	f300 8315 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c53c:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 801c53e:	edd1 7a00 	vldr	s15, [r1]
 801c542:	f507 61f5 	add.w	r1, r7, #1960	@ 0x7a8
 801c546:	edd1 3a00 	vldr	s7, [r1]
 801c54a:	f207 71b4 	addw	r1, r7, #1972	@ 0x7b4
 801c54e:	eef4 7ae3 	vcmpe.f32	s15, s7
 801c552:	ed91 4a00 	vldr	s8, [r1]
 801c556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c55a:	bfb4      	ite	lt
 801c55c:	eeb0 6a63 	vmovlt.f32	s12, s7
 801c560:	eeb0 6a67 	vmovge.f32	s12, s15
 801c564:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c568:	f507 61f8 	add.w	r1, r7, #1984	@ 0x7c0
 801c56c:	edd1 4a00 	vldr	s9, [r1]
 801c570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c574:	bfb8      	it	lt
 801c576:	eeb0 6a44 	vmovlt.f32	s12, s8
 801c57a:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c57e:	f207 71cc 	addw	r1, r7, #1996	@ 0x7cc
 801c582:	ed91 5a00 	vldr	s10, [r1]
 801c586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c58a:	bfb8      	it	lt
 801c58c:	eeb0 6a64 	vmovlt.f32	s12, s9
 801c590:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c598:	eef4 7ae3 	vcmpe.f32	s15, s7
 801c59c:	bfb4      	ite	lt
 801c59e:	eef0 5a45 	vmovlt.f32	s11, s10
 801c5a2:	eef0 5a46 	vmovge.f32	s11, s12
 801c5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5aa:	bf8c      	ite	hi
 801c5ac:	eeb0 6a63 	vmovhi.f32	s12, s7
 801c5b0:	eeb0 6a67 	vmovls.f32	s12, s15
 801c5b4:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5bc:	bf88      	it	hi
 801c5be:	eeb0 6a44 	vmovhi.f32	s12, s8
 801c5c2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c5c6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ce:	bf88      	it	hi
 801c5d0:	eeb0 6a64 	vmovhi.f32	s12, s9
 801c5d4:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c5d8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5e0:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c5e4:	bf88      	it	hi
 801c5e6:	eeb0 6a45 	vmovhi.f32	s12, s10
 801c5ea:	2a05      	cmp	r2, #5
 801c5ec:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c5f0:	d063      	beq.n	801c6ba <iNemoEngine_API_Update+0x1f9a>
 801c5f2:	f507 61fb 	add.w	r1, r7, #2008	@ 0x7d8
 801c5f6:	ed91 3a00 	vldr	s6, [r1]
 801c5fa:	f207 71e4 	addw	r1, r7, #2020	@ 0x7e4
 801c5fe:	eef4 5ac3 	vcmpe.f32	s11, s6
 801c602:	edd1 3a00 	vldr	s7, [r1]
 801c606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c60a:	bfb8      	it	lt
 801c60c:	eef0 5a43 	vmovlt.f32	s11, s6
 801c610:	eef4 5ae3 	vcmpe.f32	s11, s7
 801c614:	f507 61fe 	add.w	r1, r7, #2032	@ 0x7f0
 801c618:	ed91 4a00 	vldr	s8, [r1]
 801c61c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c620:	bfb8      	it	lt
 801c622:	eef0 5a63 	vmovlt.f32	s11, s7
 801c626:	eef4 5ac4 	vcmpe.f32	s11, s8
 801c62a:	f207 71fc 	addw	r1, r7, #2044	@ 0x7fc
 801c62e:	edd1 4a00 	vldr	s9, [r1]
 801c632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c636:	bfb8      	it	lt
 801c638:	eef0 5a44 	vmovlt.f32	s11, s8
 801c63c:	eef4 5ae4 	vcmpe.f32	s11, s9
 801c640:	f607 0108 	addw	r1, r7, #2056	@ 0x808
 801c644:	ed91 5a00 	vldr	s10, [r1]
 801c648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c64c:	bfb8      	it	lt
 801c64e:	eef0 5a64 	vmovlt.f32	s11, s9
 801c652:	eef4 5ac5 	vcmpe.f32	s11, s10
 801c656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c65a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 801c65e:	bfb8      	it	lt
 801c660:	eef0 5a45 	vmovlt.f32	s11, s10
 801c664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c668:	bf88      	it	hi
 801c66a:	eeb0 6a43 	vmovhi.f32	s12, s6
 801c66e:	eeb4 6ae3 	vcmpe.f32	s12, s7
 801c672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c676:	bf88      	it	hi
 801c678:	eeb0 6a63 	vmovhi.f32	s12, s7
 801c67c:	ee77 7a83 	vadd.f32	s15, s15, s6
 801c680:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801c684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c688:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801c68c:	bf88      	it	hi
 801c68e:	eeb0 6a44 	vmovhi.f32	s12, s8
 801c692:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801c696:	ee77 7a84 	vadd.f32	s15, s15, s8
 801c69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69e:	bf88      	it	hi
 801c6a0:	eeb0 6a64 	vmovhi.f32	s12, s9
 801c6a4:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801c6a8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801c6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6b0:	ee77 7a85 	vadd.f32	s15, s15, s10
 801c6b4:	bf88      	it	hi
 801c6b6:	eeb0 6a45 	vmovhi.f32	s12, s10
 801c6ba:	ee35 6ac6 	vsub.f32	s12, s11, s12
 801c6be:	eddf 5a86 	vldr	s11, [pc, #536]	@ 801c8d8 <iNemoEngine_API_Update+0x21b8>
 801c6c2:	ee26 6a2d 	vmul.f32	s12, s12, s27
 801c6c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801c6ca:	eddf 5a84 	vldr	s11, [pc, #528]	@ 801c8dc <iNemoEngine_API_Update+0x21bc>
 801c6ce:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801c6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6d6:	f300 8246 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c6da:	eef0 7ae7 	vabs.f32	s15, s15
 801c6de:	ee67 7aad 	vmul.f32	s15, s15, s27
 801c6e2:	ed9f 6a7f 	vldr	s12, [pc, #508]	@ 801c8e0 <iNemoEngine_API_Update+0x21c0>
 801c6e6:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ee:	f300 823a 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c6f2:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 801c6f4:	edd1 3a00 	vldr	s7, [r1]
 801c6f8:	f207 71ac 	addw	r1, r7, #1964	@ 0x7ac
 801c6fc:	edd1 4a00 	vldr	s9, [r1]
 801c700:	f507 61f7 	add.w	r1, r7, #1976	@ 0x7b8
 801c704:	eef4 4ae3 	vcmpe.f32	s9, s7
 801c708:	edd1 5a00 	vldr	s11, [r1]
 801c70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c710:	bfb4      	ite	lt
 801c712:	eef0 7a63 	vmovlt.f32	s15, s7
 801c716:	eef0 7a64 	vmovge.f32	s15, s9
 801c71a:	eef4 7ae5 	vcmpe.f32	s15, s11
 801c71e:	f207 71c4 	addw	r1, r7, #1988	@ 0x7c4
 801c722:	ed91 6a00 	vldr	s12, [r1]
 801c726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c72a:	bfb8      	it	lt
 801c72c:	eef0 7a65 	vmovlt.f32	s15, s11
 801c730:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c734:	f507 61fa 	add.w	r1, r7, #2000	@ 0x7d0
 801c738:	ed91 4a00 	vldr	s8, [r1]
 801c73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c740:	bfb8      	it	lt
 801c742:	eef0 7a46 	vmovlt.f32	s15, s12
 801c746:	eef4 7ac4 	vcmpe.f32	s15, s8
 801c74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c74e:	eef4 4ae3 	vcmpe.f32	s9, s7
 801c752:	bfb8      	it	lt
 801c754:	eef0 7a44 	vmovlt.f32	s15, s8
 801c758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c75c:	bf8c      	ite	hi
 801c75e:	eeb0 5a63 	vmovhi.f32	s10, s7
 801c762:	eeb0 5a64 	vmovls.f32	s10, s9
 801c766:	eeb4 5ae5 	vcmpe.f32	s10, s11
 801c76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c76e:	bf88      	it	hi
 801c770:	eeb0 5a65 	vmovhi.f32	s10, s11
 801c774:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801c778:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801c77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c780:	bf88      	it	hi
 801c782:	eeb0 5a46 	vmovhi.f32	s10, s12
 801c786:	ee75 5aa4 	vadd.f32	s11, s11, s9
 801c78a:	eeb4 5ac4 	vcmpe.f32	s10, s8
 801c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c792:	ee36 6a25 	vadd.f32	s12, s12, s11
 801c796:	bf88      	it	hi
 801c798:	eeb0 5a44 	vmovhi.f32	s10, s8
 801c79c:	2a05      	cmp	r2, #5
 801c79e:	ee34 6a06 	vadd.f32	s12, s8, s12
 801c7a2:	d065      	beq.n	801c870 <iNemoEngine_API_Update+0x2150>
 801c7a4:	f207 72dc 	addw	r2, r7, #2012	@ 0x7dc
 801c7a8:	edd2 5a00 	vldr	s11, [r2]
 801c7ac:	f507 62fd 	add.w	r2, r7, #2024	@ 0x7e8
 801c7b0:	eef4 5ae7 	vcmpe.f32	s11, s15
 801c7b4:	ed92 3a00 	vldr	s6, [r2]
 801c7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7bc:	bfa8      	it	ge
 801c7be:	eef0 7a65 	vmovge.f32	s15, s11
 801c7c2:	eef4 7ac3 	vcmpe.f32	s15, s6
 801c7c6:	f207 72f4 	addw	r2, r7, #2036	@ 0x7f4
 801c7ca:	edd2 3a00 	vldr	s7, [r2]
 801c7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7d2:	bfb8      	it	lt
 801c7d4:	eef0 7a43 	vmovlt.f32	s15, s6
 801c7d8:	eef4 7ae3 	vcmpe.f32	s15, s7
 801c7dc:	f507 6200 	add.w	r2, r7, #2048	@ 0x800
 801c7e0:	ed92 4a00 	vldr	s8, [r2]
 801c7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7e8:	bfb8      	it	lt
 801c7ea:	eef0 7a63 	vmovlt.f32	s15, s7
 801c7ee:	eef4 7ac4 	vcmpe.f32	s15, s8
 801c7f2:	f607 020c 	addw	r2, r7, #2060	@ 0x80c
 801c7f6:	edd2 4a00 	vldr	s9, [r2]
 801c7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7fe:	bfb8      	it	lt
 801c800:	eef0 7a44 	vmovlt.f32	s15, s8
 801c804:	eef4 7ae4 	vcmpe.f32	s15, s9
 801c808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c80c:	eef4 5ac5 	vcmpe.f32	s11, s10
 801c810:	bfb8      	it	lt
 801c812:	eef0 7a64 	vmovlt.f32	s15, s9
 801c816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c81a:	ee35 6a86 	vadd.f32	s12, s11, s12
 801c81e:	bf88      	it	hi
 801c820:	eef0 5a45 	vmovhi.f32	s11, s10
 801c824:	eef4 5ac3 	vcmpe.f32	s11, s6
 801c828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c82c:	bf88      	it	hi
 801c82e:	eef0 5a43 	vmovhi.f32	s11, s6
 801c832:	eef4 5ae3 	vcmpe.f32	s11, s7
 801c836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c83a:	ee33 6a06 	vadd.f32	s12, s6, s12
 801c83e:	bf88      	it	hi
 801c840:	eef0 5a63 	vmovhi.f32	s11, s7
 801c844:	eef4 5ac4 	vcmpe.f32	s11, s8
 801c848:	ee33 6a86 	vadd.f32	s12, s7, s12
 801c84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c850:	bf88      	it	hi
 801c852:	eef0 5a44 	vmovhi.f32	s11, s8
 801c856:	ee34 6a06 	vadd.f32	s12, s8, s12
 801c85a:	eef4 5ae4 	vcmpe.f32	s11, s9
 801c85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c862:	ee34 6a86 	vadd.f32	s12, s9, s12
 801c866:	bf8c      	ite	hi
 801c868:	eeb0 5a64 	vmovhi.f32	s10, s9
 801c86c:	eeb0 5a65 	vmovls.f32	s10, s11
 801c870:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801c874:	ee67 5aad 	vmul.f32	s11, s15, s27
 801c878:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801c8d8 <iNemoEngine_API_Update+0x21b8>
 801c87c:	ee66 7a27 	vmul.f32	s15, s12, s15
 801c880:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801c8dc <iNemoEngine_API_Update+0x21bc>
 801c884:	eef4 5ac6 	vcmpe.f32	s11, s12
 801c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c88c:	f300 816b 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c890:	eef0 7ae7 	vabs.f32	s15, s15
 801c894:	ee67 7aad 	vmul.f32	s15, s15, s27
 801c898:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 801c8e0 <iNemoEngine_API_Update+0x21c0>
 801c89c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801c8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8a4:	f300 815f 	bgt.w	801cb66 <iNemoEngine_API_Update+0x2446>
 801c8a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c8aa:	2a00      	cmp	r2, #0
 801c8ac:	f042 8117 	bne.w	801eade <iNemoEngine_API_Update+0x43be>
 801c8b0:	2301      	movs	r3, #1
 801c8b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801c8b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801c8b8:	939f      	str	r3, [sp, #636]	@ 0x27c
 801c8ba:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801c8be:	93a0      	str	r3, [sp, #640]	@ 0x280
 801c8c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801c8c4:	93a1      	str	r3, [sp, #644]	@ 0x284
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801c8cc:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801c8d0:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801c8d4:	707b      	strb	r3, [r7, #1]
 801c8d6:	e00d      	b.n	801c8f4 <iNemoEngine_API_Update+0x21d4>
 801c8d8:	3dcccccd 	.word	0x3dcccccd
 801c8dc:	3be56041 	.word	0x3be56041
 801c8e0:	3e333333 	.word	0x3e333333
 801c8e4:	42480000 	.word	0x42480000
 801c8e8:	00000000 	.word	0x00000000
 801c8ec:	3fb33333 	.word	0x3fb33333
 801c8f0:	3ecccccd 	.word	0x3ecccccd
 801c8f4:	ed5f 7a05 	vldr	s15, [pc, #-20]	@ 801c8e4 <iNemoEngine_API_Update+0x21c4>
 801c8f8:	eef4 9ae7 	vcmpe.f32	s19, s15
 801c8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c900:	f2c0 823f 	blt.w	801cd82 <iNemoEngine_API_Update+0x2662>
 801c904:	2300      	movs	r3, #0
 801c906:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801c90a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801c90e:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801c912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c914:	2b01      	cmp	r3, #1
 801c916:	f000 8245 	beq.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801c91a:	edd7 3a75 	vldr	s7, [r7, #468]	@ 0x1d4
 801c91e:	ed97 4a7f 	vldr	s8, [r7, #508]	@ 0x1fc
 801c922:	eddd 2a69 	vldr	s5, [sp, #420]	@ 0x1a4
 801c926:	ed9d 3a6a 	vldr	s6, [sp, #424]	@ 0x1a8
 801c92a:	edd7 4a89 	vldr	s9, [r7, #548]	@ 0x224
 801c92e:	ed97 5a93 	vldr	s10, [r7, #588]	@ 0x24c
 801c932:	edd7 5a9d 	vldr	s11, [r7, #628]	@ 0x274
 801c936:	ed97 6aa7 	vldr	s12, [r7, #668]	@ 0x29c
 801c93a:	edd7 6ab1 	vldr	s13, [r7, #708]	@ 0x2c4
 801c93e:	ed97 7abb 	vldr	s14, [r7, #748]	@ 0x2ec
 801c942:	edd7 7ac5 	vldr	s15, [r7, #788]	@ 0x314
 801c946:	ed9d 2a6e 	vldr	s4, [sp, #440]	@ 0x1b8
 801c94a:	eddd 0a6b 	vldr	s1, [sp, #428]	@ 0x1ac
 801c94e:	ed9d 1a6c 	vldr	s2, [sp, #432]	@ 0x1b0
 801c952:	eddd 1a6d 	vldr	s3, [sp, #436]	@ 0x1b4
 801c956:	ed9d 0a71 	vldr	s0, [sp, #452]	@ 0x1c4
 801c95a:	edcd 8a93 	vstr	s17, [sp, #588]	@ 0x24c
 801c95e:	eee2 3aa2 	vfma.f32	s7, s5, s5
 801c962:	ab8d      	add	r3, sp, #564	@ 0x234
 801c964:	aa99      	add	r2, sp, #612	@ 0x264
 801c966:	eea3 4a03 	vfma.f32	s8, s6, s6
 801c96a:	a944      	add	r1, sp, #272	@ 0x110
 801c96c:	f507 70d6 	add.w	r0, r7, #428	@ 0x1ac
 801c970:	eddd 2a6f 	vldr	s5, [sp, #444]	@ 0x1bc
 801c974:	ed9d 3a70 	vldr	s6, [sp, #448]	@ 0x1c0
 801c978:	edc7 3a75 	vstr	s7, [r7, #468]	@ 0x1d4
 801c97c:	eea1 5a01 	vfma.f32	s10, s2, s2
 801c980:	ad7a      	add	r5, sp, #488	@ 0x1e8
 801c982:	eea2 6a02 	vfma.f32	s12, s4, s4
 801c986:	eee2 6aa2 	vfma.f32	s13, s5, s5
 801c98a:	eea3 7a03 	vfma.f32	s14, s6, s6
 801c98e:	eee0 7a00 	vfma.f32	s15, s0, s0
 801c992:	eee0 4aa0 	vfma.f32	s9, s1, s1
 801c996:	eee1 5aa1 	vfma.f32	s11, s3, s3
 801c99a:	ed87 5a93 	vstr	s10, [r7, #588]	@ 0x24c
 801c99e:	ed87 4a7f 	vstr	s8, [r7, #508]	@ 0x1fc
 801c9a2:	edc7 4a89 	vstr	s9, [r7, #548]	@ 0x224
 801c9a6:	edc7 5a9d 	vstr	s11, [r7, #628]	@ 0x274
 801c9aa:	ed87 6aa7 	vstr	s12, [r7, #668]	@ 0x29c
 801c9ae:	edc7 6ab1 	vstr	s13, [r7, #708]	@ 0x2c4
 801c9b2:	ed87 7abb 	vstr	s14, [r7, #748]	@ 0x2ec
 801c9b6:	edc7 7ac5 	vstr	s15, [r7, #788]	@ 0x314
 801c9ba:	9300      	str	r3, [sp, #0]
 801c9bc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801c9be:	edcd 8a94 	vstr	s17, [sp, #592]	@ 0x250
 801c9c2:	edcd 8a95 	vstr	s17, [sp, #596]	@ 0x254
 801c9c6:	f7fc f91f 	bl	8018c08 <kf_update>
 801c9ca:	ed97 6a6d 	vldr	s12, [r7, #436]	@ 0x1b4
 801c9ce:	edd7 5a6c 	vldr	s11, [r7, #432]	@ 0x1b0
 801c9d2:	edd7 6a6e 	vldr	s13, [r7, #440]	@ 0x1b8
 801c9d6:	edcd 5a5c 	vstr	s11, [sp, #368]	@ 0x170
 801c9da:	ee26 7a06 	vmul.f32	s14, s12, s12
 801c9de:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801c9e2:	eea5 7aa5 	vfma.f32	s14, s11, s11
 801c9e6:	aa58      	add	r2, sp, #352	@ 0x160
 801c9e8:	4611      	mov	r1, r2
 801c9ea:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801c9ee:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801c9f2:	4650      	mov	r0, sl
 801c9f4:	ed8d 6a5d 	vstr	s12, [sp, #372]	@ 0x174
 801c9f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801c9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca00:	bf4c      	ite	mi
 801ca02:	ee37 5ac7 	vsubmi.f32	s10, s15, s14
 801ca06:	ed5f 7a48 	vldrpl	s15, [pc, #-288]	@ 801c8e8 <iNemoEngine_API_Update+0x21c8>
 801ca0a:	edcd 6a5e 	vstr	s13, [sp, #376]	@ 0x178
 801ca0e:	bf48      	it	mi
 801ca10:	eef1 7ac5 	vsqrtmi.f32	s15, s10
 801ca14:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801ca18:	edcd 7a5f 	vstr	s15, [sp, #380]	@ 0x17c
 801ca1c:	eeb1 5ac7 	vsqrt.f32	s10, s14
 801ca20:	ee84 7a85 	vdiv.f32	s14, s9, s10
 801ca24:	ee67 5a25 	vmul.f32	s11, s14, s11
 801ca28:	ee27 6a06 	vmul.f32	s12, s14, s12
 801ca2c:	ee67 6a26 	vmul.f32	s13, s14, s13
 801ca30:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ca34:	edca 5a00 	vstr	s11, [sl]
 801ca38:	ed8a 6a01 	vstr	s12, [sl, #4]
 801ca3c:	edca 6a02 	vstr	s13, [sl, #8]
 801ca40:	edca 7a03 	vstr	s15, [sl, #12]
 801ca44:	f7fb ff20 	bl	8018888 <qmult>
 801ca48:	edd2 6a01 	vldr	s13, [r2, #4]
 801ca4c:	ed92 6a00 	vldr	s12, [r2]
 801ca50:	ed92 7a02 	vldr	s14, [r2, #8]
 801ca54:	edd2 5a03 	vldr	s11, [r2, #12]
 801ca58:	9e31      	ldr	r6, [sp, #196]	@ 0xc4
 801ca5a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801ca5e:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801ca62:	eee6 7a06 	vfma.f32	s15, s12, s12
 801ca66:	f50d 7ce4 	add.w	ip, sp, #456	@ 0x1c8
 801ca6a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801ca6e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801ca72:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801ca76:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801ca7a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801ca7e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801ca82:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ca86:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ca8a:	ed8d 6a54 	vstr	s12, [sp, #336]	@ 0x150
 801ca8e:	edcd 6a55 	vstr	s13, [sp, #340]	@ 0x154
 801ca92:	ed8d 7a56 	vstr	s14, [sp, #344]	@ 0x158
 801ca96:	edcd 7a57 	vstr	s15, [sp, #348]	@ 0x15c
 801ca9a:	4664      	mov	r4, ip
 801ca9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca9e:	42ac      	cmp	r4, r5
 801caa0:	f106 0610 	add.w	r6, r6, #16
 801caa4:	f10c 0c10 	add.w	ip, ip, #16
 801caa8:	f846 0c10 	str.w	r0, [r6, #-16]
 801caac:	f846 1c0c 	str.w	r1, [r6, #-12]
 801cab0:	f846 2c08 	str.w	r2, [r6, #-8]
 801cab4:	f846 3c04 	str.w	r3, [r6, #-4]
 801cab8:	d1ef      	bne.n	801ca9a <iNemoEngine_API_Update+0x237a>
 801caba:	f8dc 0000 	ldr.w	r0, [ip]
 801cabe:	6030      	str	r0, [r6, #0]
 801cac0:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801cac2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801cac6:	6013      	str	r3, [r2, #0]
 801cac8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 801caca:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801cace:	6013      	str	r3, [r2, #0]
 801cad0:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801cad2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801cad6:	6013      	str	r3, [r2, #0]
 801cad8:	ac54      	add	r4, sp, #336	@ 0x150
 801cada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cadc:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 801cade:	60e3      	str	r3, [r4, #12]
 801cae0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cae2:	6020      	str	r0, [r4, #0]
 801cae4:	6061      	str	r1, [r4, #4]
 801cae6:	60a2      	str	r2, [r4, #8]
 801cae8:	edd7 8a75 	vldr	s17, [r7, #468]	@ 0x1d4
 801caec:	ed83 6a00 	vstr	s12, [r3]
 801caf0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801caf2:	edc3 6a00 	vstr	s13, [r3]
 801caf6:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801caf8:	ed83 7a00 	vstr	s14, [r3]
 801cafc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801cafe:	edc3 7a00 	vstr	s15, [r3]
 801cb02:	f7fd bec1 	b.w	801a888 <iNemoEngine_API_Update+0x168>
 801cb06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	f43f ab95 	beq.w	801c238 <iNemoEngine_API_Update+0x1b18>
 801cb0e:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 801c8ec <iNemoEngine_API_Update+0x21cc>
 801cb12:	2301      	movs	r3, #1
 801cb14:	eeb4 eae7 	vcmpe.f32	s28, s15
 801cb18:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 801cb1c:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 801cb20:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 801cb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb28:	f240 1301 	movw	r3, #257	@ 0x101
 801cb2c:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 801cb30:	f73f ab82 	bgt.w	801c238 <iNemoEngine_API_Update+0x1b18>
 801cb34:	ed5f 7a92 	vldr	s15, [pc, #-584]	@ 801c8f0 <iNemoEngine_API_Update+0x21d0>
 801cb38:	eeb4 eae7 	vcmpe.f32	s28, s15
 801cb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb40:	f53f ab7a 	bmi.w	801c238 <iNemoEngine_API_Update+0x1b18>
 801cb44:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 801cb48:	eef4 4ae7 	vcmpe.f32	s9, s15
 801cb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cb50:	bfb8      	it	lt
 801cb52:	eef0 4a67 	vmovlt.f32	s9, s15
 801cb56:	edcd 4a8d 	vstr	s9, [sp, #564]	@ 0x234
 801cb5a:	edcd 4a8e 	vstr	s9, [sp, #568]	@ 0x238
 801cb5e:	edcd 4a8f 	vstr	s9, [sp, #572]	@ 0x23c
 801cb62:	f7ff bb72 	b.w	801c24a <iNemoEngine_API_Update+0x1b2a>
 801cb66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cb68:	2300      	movs	r3, #0
 801cb6a:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801cb6e:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801cb72:	2a00      	cmp	r2, #0
 801cb74:	f43f ae9e 	beq.w	801c8b4 <iNemoEngine_API_Update+0x2194>
 801cb78:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 801cb7c:	2a01      	cmp	r2, #1
 801cb7e:	f001 8240 	beq.w	801e002 <iNemoEngine_API_Update+0x38e2>
 801cb82:	9303      	str	r3, [sp, #12]
 801cb84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb86:	2b02      	cmp	r3, #2
 801cb88:	f041 823a 	bne.w	801e000 <iNemoEngine_API_Update+0x38e0>
 801cb8c:	eddd 7a14 	vldr	s15, [sp, #80]	@ 0x50
 801cb90:	ed9d 6a11 	vldr	s12, [sp, #68]	@ 0x44
 801cb94:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 801cb98:	f897 21a4 	ldrb.w	r2, [r7, #420]	@ 0x1a4
 801cb9c:	ee87 6a86 	vdiv.f32	s12, s15, s12
 801cba0:	f240 1301 	movw	r3, #257	@ 0x101
 801cba4:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801cba8:	2301      	movs	r3, #1
 801cbaa:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801cbae:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801cbb2:	ed8d 6a47 	vstr	s12, [sp, #284]	@ 0x11c
 801cbb6:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 801cbba:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 801cbbe:	eddd 7a16 	vldr	s15, [sp, #88]	@ 0x58
 801cbc2:	ed8d 5a48 	vstr	s10, [sp, #288]	@ 0x120
 801cbc6:	eec7 7aa5 	vdiv.f32	s15, s15, s11
 801cbca:	edd7 5a64 	vldr	s11, [r7, #400]	@ 0x190
 801cbce:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801cbd2:	eef4 4a00 	vmov.f32	s9, #64	@ 0x3e000000  0.125
 801cbd6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801cbda:	eef4 5ac8 	vcmpe.f32	s11, s16
 801cbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbe2:	f281 8251 	bge.w	801e088 <iNemoEngine_API_Update+0x3968>
 801cbe6:	eddd 5a11 	vldr	s11, [sp, #68]	@ 0x44
 801cbea:	eddd 4a14 	vldr	s9, [sp, #80]	@ 0x50
 801cbee:	eef4 5ae4 	vcmpe.f32	s11, s9
 801cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cbf6:	f341 863f 	ble.w	801e878 <iNemoEngine_API_Update+0x4158>
 801cbfa:	eddd 5a12 	vldr	s11, [sp, #72]	@ 0x48
 801cbfe:	eddd 4a0c 	vldr	s9, [sp, #48]	@ 0x30
 801cc02:	eef4 5ae4 	vcmpe.f32	s11, s9
 801cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc0a:	f341 8635 	ble.w	801e878 <iNemoEngine_API_Update+0x4158>
 801cc0e:	eddd 5a13 	vldr	s11, [sp, #76]	@ 0x4c
 801cc12:	eddd 4a16 	vldr	s9, [sp, #88]	@ 0x58
 801cc16:	eef4 5ae4 	vcmpe.f32	s11, s9
 801cc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc1e:	f341 862b 	ble.w	801e878 <iNemoEngine_API_Update+0x4158>
 801cc22:	eef5 5a00 	vmov.f32	s11, #80	@ 0x3e800000  0.250
 801cc26:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc2e:	f141 8623 	bpl.w	801e878 <iNemoEngine_API_Update+0x4158>
 801cc32:	ee36 6a05 	vadd.f32	s12, s12, s10
 801cc36:	eef7 5a08 	vmov.f32	s11, #120	@ 0x3fc00000  1.5
 801cc3a:	ee77 7a86 	vadd.f32	s15, s15, s12
 801cc3e:	eef4 7ae5 	vcmpe.f32	s15, s11
 801cc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cc46:	f141 8617 	bpl.w	801e878 <iNemoEngine_API_Update+0x4158>
 801cc4a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cc4e:	2300      	movs	r3, #0
 801cc50:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801cc54:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 801cc58:	2a00      	cmp	r2, #0
 801cc5a:	f041 8237 	bne.w	801e0cc <iNemoEngine_API_Update+0x39ac>
 801cc5e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cc60:	a84a      	add	r0, sp, #296	@ 0x128
 801cc62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cc66:	460b      	mov	r3, r1
 801cc68:	edd1 7a00 	vldr	s15, [r1]
 801cc6c:	3201      	adds	r2, #1
 801cc6e:	330c      	adds	r3, #12
 801cc70:	3104      	adds	r1, #4
 801cc72:	461d      	mov	r5, r3
 801cc74:	edd5 6a00 	vldr	s13, [r5]
 801cc78:	330c      	adds	r3, #12
 801cc7a:	429c      	cmp	r4, r3
 801cc7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cc80:	d1f7      	bne.n	801cc72 <iNemoEngine_API_Update+0x2552>
 801cc82:	2a02      	cmp	r2, #2
 801cc84:	ece0 7a01 	vstmia	r0!, {s15}
 801cc88:	f104 0404 	add.w	r4, r4, #4
 801cc8c:	d1eb      	bne.n	801cc66 <iNemoEngine_API_Update+0x2546>
 801cc8e:	eddf 7ae8 	vldr	s15, [pc, #928]	@ 801d030 <iNemoEngine_API_Update+0x2910>
 801cc92:	ed9d 5a4a 	vldr	s10, [sp, #296]	@ 0x128
 801cc96:	eddd 5a4b 	vldr	s11, [sp, #300]	@ 0x12c
 801cc9a:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 801cc9e:	9c33      	ldr	r4, [sp, #204]	@ 0xcc
 801cca0:	f507 70ac 	add.w	r0, r7, #344	@ 0x158
 801cca4:	ee25 5a27 	vmul.f32	s10, s10, s15
 801cca8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801ccac:	ee26 6a27 	vmul.f32	s12, s12, s15
 801ccb0:	f507 71b2 	add.w	r1, r7, #356	@ 0x164
 801ccb4:	4602      	mov	r2, r0
 801ccb6:	edd2 7a7c 	vldr	s15, [r2, #496]	@ 0x1f0
 801ccba:	f5a2 73ae 	sub.w	r3, r2, #348	@ 0x15c
 801ccbe:	edd3 6ad6 	vldr	s13, [r3, #856]	@ 0x358
 801ccc2:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ccc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccca:	f103 030c 	add.w	r3, r3, #12
 801ccce:	bf88      	it	hi
 801ccd0:	eef0 7a66 	vmovhi.f32	s15, s13
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	d1f2      	bne.n	801ccbe <iNemoEngine_API_Update+0x259e>
 801ccd8:	1d1a      	adds	r2, r3, #4
 801ccda:	4291      	cmp	r1, r2
 801ccdc:	ece4 7a01 	vstmia	r4!, {s15}
 801cce0:	d1e9      	bne.n	801ccb6 <iNemoEngine_API_Update+0x2596>
 801cce2:	eddd 4a47 	vldr	s9, [sp, #284]	@ 0x11c
 801cce6:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 801ccea:	eddd 6a49 	vldr	s13, [sp, #292]	@ 0x124
 801ccee:	787b      	ldrb	r3, [r7, #1]
 801ccf0:	eedd 4a85 	vfnms.f32	s9, s27, s10
 801ccf4:	eedd 7aa5 	vfnms.f32	s15, s27, s11
 801ccf8:	eedd 6a86 	vfnms.f32	s13, s27, s12
 801ccfc:	eeb0 5a67 	vmov.f32	s10, s15
 801cd00:	edcd 4a4a 	vstr	s9, [sp, #296]	@ 0x128
 801cd04:	edcd 7a4b 	vstr	s15, [sp, #300]	@ 0x12c
 801cd08:	edcd 6a4c 	vstr	s13, [sp, #304]	@ 0x130
 801cd0c:	b13b      	cbz	r3, 801cd1e <iNemoEngine_API_Update+0x25fe>
 801cd0e:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801cd12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801cd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd1a:	f101 8627 	bmi.w	801e96c <iNemoEngine_API_Update+0x424c>
 801cd1e:	f897 21a1 	ldrb.w	r2, [r7, #417]	@ 0x1a1
 801cd22:	2a1e      	cmp	r2, #30
 801cd24:	f001 8753 	beq.w	801ebce <iNemoEngine_API_Update+0x44ae>
 801cd28:	1c53      	adds	r3, r2, #1
 801cd2a:	2aff      	cmp	r2, #255	@ 0xff
 801cd2c:	bf14      	ite	ne
 801cd2e:	b2db      	uxtbne	r3, r3
 801cd30:	23ff      	moveq	r3, #255	@ 0xff
 801cd32:	f887 31a1 	strb.w	r3, [r7, #417]	@ 0x1a1
 801cd36:	9b03      	ldr	r3, [sp, #12]
 801cd38:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801cd40:	e5d8      	b.n	801c8f4 <iNemoEngine_API_Update+0x21d4>
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	f340 82d0 	ble.w	801d2e8 <iNemoEngine_API_Update+0x2bc8>
 801cd48:	3b01      	subs	r3, #1
 801cd4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cd4c:	2300      	movs	r3, #0
 801cd4e:	f8ad 3110 	strh.w	r3, [sp, #272]	@ 0x110
 801cd52:	f88d 3112 	strb.w	r3, [sp, #274]	@ 0x112
 801cd56:	f88d 3119 	strb.w	r3, [sp, #281]	@ 0x119
 801cd5a:	f88d 311b 	strb.w	r3, [sp, #283]	@ 0x11b
 801cd5e:	f7ff bab8 	b.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801cd62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801cd64:	f362 0307 	bfi	r3, r2, #0, #8
 801cd68:	f362 230f 	bfi	r3, r2, #8, #8
 801cd6c:	7bba      	ldrb	r2, [r7, #14]
 801cd6e:	f88d 2115 	strb.w	r2, [sp, #277]	@ 0x115
 801cd72:	f362 4317 	bfi	r3, r2, #16, #8
 801cd76:	f362 631f 	bfi	r3, r2, #24, #8
 801cd7a:	f8cd 3111 	str.w	r3, [sp, #273]	@ 0x111
 801cd7e:	f7ff ba3a 	b.w	801c1f6 <iNemoEngine_API_Update+0x1ad6>
 801cd82:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 801cd86:	2b31      	cmp	r3, #49	@ 0x31
 801cd88:	f63f adc3 	bhi.w	801c912 <iNemoEngine_API_Update+0x21f2>
 801cd8c:	3301      	adds	r3, #1
 801cd8e:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801cd92:	2300      	movs	r3, #0
 801cd94:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801cd98:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801cd9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd9e:	2b01      	cmp	r3, #1
 801cda0:	f47f adbb 	bne.w	801c91a <iNemoEngine_API_Update+0x21fa>
 801cda4:	ed9d 5a90 	vldr	s10, [sp, #576]	@ 0x240
 801cda8:	eddd 6a69 	vldr	s13, [sp, #420]	@ 0x1a4
 801cdac:	eddd 5a91 	vldr	s11, [sp, #580]	@ 0x244
 801cdb0:	ed9d 7a6a 	vldr	s14, [sp, #424]	@ 0x1a8
 801cdb4:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 801cdb8:	eddd 7a6b 	vldr	s15, [sp, #428]	@ 0x1ac
 801cdbc:	eef6 4a08 	vmov.f32	s9, #104	@ 0x3f400000  0.750
 801cdc0:	ee25 5a24 	vmul.f32	s10, s10, s9
 801cdc4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801cdc8:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801cdcc:	ee37 7a07 	vadd.f32	s14, s14, s14
 801cdd0:	ee26 6a24 	vmul.f32	s12, s12, s9
 801cdd4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801cdd8:	ed8d 5a90 	vstr	s10, [sp, #576]	@ 0x240
 801cddc:	edcd 6a69 	vstr	s13, [sp, #420]	@ 0x1a4
 801cde0:	edcd 5a91 	vstr	s11, [sp, #580]	@ 0x244
 801cde4:	ed8d 7a6a 	vstr	s14, [sp, #424]	@ 0x1a8
 801cde8:	ed8d 6a92 	vstr	s12, [sp, #584]	@ 0x248
 801cdec:	edcd 7a6b 	vstr	s15, [sp, #428]	@ 0x1ac
 801cdf0:	e593      	b.n	801c91a <iNemoEngine_API_Update+0x21fa>
 801cdf2:	eef1 6a66 	vneg.f32	s13, s13
 801cdf6:	f7fe bc48 	b.w	801b68a <iNemoEngine_API_Update+0xf6a>
 801cdfa:	eeb1 5a45 	vneg.f32	s10, s10
 801cdfe:	f7fe bc20 	b.w	801b642 <iNemoEngine_API_Update+0xf22>
 801ce02:	f9b7 3974 	ldrsh.w	r3, [r7, #2420]	@ 0x974
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	f341 8083 	ble.w	801df12 <iNemoEngine_API_Update+0x37f2>
 801ce0c:	3b01      	subs	r3, #1
 801ce0e:	f8a7 3974 	strh.w	r3, [r7, #2420]	@ 0x974
 801ce12:	f7fd bcac 	b.w	801a76e <iNemoEngine_API_Update+0x4e>
 801ce16:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 801ce1a:	ee6a 9a09 	vmul.f32	s19, s20, s18
 801ce1e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801ce22:	eee8 9a28 	vfma.f32	s19, s16, s17
 801ce26:	eee8 7a48 	vfms.f32	s15, s16, s16
 801ce2a:	eee9 7a49 	vfms.f32	s15, s18, s18
 801ce2e:	ee17 0a90 	vmov	r0, s15
 801ce32:	f7e3 fbb1 	bl	8000598 <__aeabi_f2d>
 801ce36:	ee79 7aa9 	vadd.f32	s15, s19, s19
 801ce3a:	4602      	mov	r2, r0
 801ce3c:	460b      	mov	r3, r1
 801ce3e:	ee17 0a90 	vmov	r0, s15
 801ce42:	ec43 2b18 	vmov	d8, r2, r3
 801ce46:	f7e3 fba7 	bl	8000598 <__aeabi_f2d>
 801ce4a:	eeb0 1a48 	vmov.f32	s2, s16
 801ce4e:	eef0 1a68 	vmov.f32	s3, s17
 801ce52:	ec41 0b10 	vmov	d0, r0, r1
 801ce56:	f004 ff0d 	bl	8021c74 <atan2>
 801ce5a:	a373      	add	r3, pc, #460	@ (adr r3, 801d028 <iNemoEngine_API_Update+0x2908>)
 801ce5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce60:	ec51 0b10 	vmov	r0, r1, d0
 801ce64:	f7e3 fbf0 	bl	8000648 <__aeabi_dmul>
 801ce68:	4b72      	ldr	r3, [pc, #456]	@ (801d034 <iNemoEngine_API_Update+0x2914>)
 801ce6a:	2200      	movs	r2, #0
 801ce6c:	f7e3 fa34 	bl	80002d8 <__aeabi_dsub>
 801ce70:	f7e3 fec2 	bl	8000bf8 <__aeabi_d2f>
 801ce74:	ee09 0a90 	vmov	s19, r0
 801ce78:	f7fd bd9b 	b.w	801a9b2 <iNemoEngine_API_Update+0x292>
 801ce7c:	ee6a 7a0a 	vmul.f32	s15, s20, s20
 801ce80:	ee6a 9a09 	vmul.f32	s19, s20, s18
 801ce84:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801ce88:	eee8 9a28 	vfma.f32	s19, s16, s17
 801ce8c:	eee8 7a48 	vfms.f32	s15, s16, s16
 801ce90:	eee9 7a49 	vfms.f32	s15, s18, s18
 801ce94:	ee17 0a90 	vmov	r0, s15
 801ce98:	f7e3 fb7e 	bl	8000598 <__aeabi_f2d>
 801ce9c:	ee79 7aa9 	vadd.f32	s15, s19, s19
 801cea0:	4602      	mov	r2, r0
 801cea2:	460b      	mov	r3, r1
 801cea4:	ee17 0a90 	vmov	r0, s15
 801cea8:	ec43 2b18 	vmov	d8, r2, r3
 801ceac:	f7e3 fb74 	bl	8000598 <__aeabi_f2d>
 801ceb0:	eeb0 1a48 	vmov.f32	s2, s16
 801ceb4:	eef0 1a68 	vmov.f32	s3, s17
 801ceb8:	ec41 0b10 	vmov	d0, r0, r1
 801cebc:	f004 feda 	bl	8021c74 <atan2>
 801cec0:	a359      	add	r3, pc, #356	@ (adr r3, 801d028 <iNemoEngine_API_Update+0x2908>)
 801cec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec6:	ec51 0b10 	vmov	r0, r1, d0
 801ceca:	f7e3 fbbd 	bl	8000648 <__aeabi_dmul>
 801cece:	4b59      	ldr	r3, [pc, #356]	@ (801d034 <iNemoEngine_API_Update+0x2914>)
 801ced0:	2200      	movs	r2, #0
 801ced2:	f7e3 fa03 	bl	80002dc <__adddf3>
 801ced6:	f7e3 fe8f 	bl	8000bf8 <__aeabi_d2f>
 801ceda:	ee09 0a90 	vmov	s19, r0
 801cede:	f7fd bd68 	b.w	801a9b2 <iNemoEngine_API_Update+0x292>
 801cee2:	3305      	adds	r3, #5
 801cee4:	65bb      	str	r3, [r7, #88]	@ 0x58
 801cee6:	f7ff b9f4 	b.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801ceea:	2a00      	cmp	r2, #0
 801ceec:	f43f a9be 	beq.w	801c26c <iNemoEngine_API_Update+0x1b4c>
 801cef0:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 801cef4:	ee76 7a45 	vsub.f32	s15, s12, s10
 801cef8:	eeb0 6ae7 	vabs.f32	s12, s15
 801cefc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801cf00:	eeb4 6ac4 	vcmpe.f32	s12, s8
 801cf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf08:	eef4 7ac5 	vcmpe.f32	s15, s10
 801cf0c:	bfb8      	it	lt
 801cf0e:	eeb0 6a44 	vmovlt.f32	s12, s8
 801cf12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf16:	ed8d 6a97 	vstr	s12, [sp, #604]	@ 0x25c
 801cf1a:	f77f a9ae 	ble.w	801c27a <iNemoEngine_API_Update+0x1b5a>
 801cf1e:	ed9d 6a90 	vldr	s12, [sp, #576]	@ 0x240
 801cf22:	ee26 5a06 	vmul.f32	s10, s12, s12
 801cf26:	eeb4 5ae7 	vcmpe.f32	s10, s15
 801cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf2e:	f57f a9a4 	bpl.w	801c27a <iNemoEngine_API_Update+0x1b5a>
 801cf32:	ee26 6a27 	vmul.f32	s12, s12, s15
 801cf36:	ed8d 6a90 	vstr	s12, [sp, #576]	@ 0x240
 801cf3a:	ed9d 6a91 	vldr	s12, [sp, #580]	@ 0x244
 801cf3e:	ee26 6a27 	vmul.f32	s12, s12, s15
 801cf42:	ed8d 6a91 	vstr	s12, [sp, #580]	@ 0x244
 801cf46:	ed9d 6a92 	vldr	s12, [sp, #584]	@ 0x248
 801cf4a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801cf4e:	edcd 7a92 	vstr	s15, [sp, #584]	@ 0x248
 801cf52:	f7ff b992 	b.w	801c27a <iNemoEngine_API_Update+0x1b5a>
 801cf56:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801cf5a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801cf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf62:	bfc4      	itt	gt
 801cf64:	f8ad 3113 	strhgt.w	r3, [sp, #275]	@ 0x113
 801cf68:	f88d 3115 	strbgt.w	r3, [sp, #277]	@ 0x115
 801cf6c:	f7ff b943 	b.w	801c1f6 <iNemoEngine_API_Update+0x1ad6>
 801cf70:	eddf 9a31 	vldr	s19, [pc, #196]	@ 801d038 <iNemoEngine_API_Update+0x2918>
 801cf74:	eddf 3a31 	vldr	s7, [pc, #196]	@ 801d03c <iNemoEngine_API_Update+0x291c>
 801cf78:	eddf 4a31 	vldr	s9, [pc, #196]	@ 801d040 <iNemoEngine_API_Update+0x2920>
 801cf7c:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 801d044 <iNemoEngine_API_Update+0x2924>
 801cf80:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 801d048 <iNemoEngine_API_Update+0x2928>
 801cf84:	ee68 8aa9 	vmul.f32	s17, s17, s19
 801cf88:	f7ff b8c4 	b.w	801c114 <iNemoEngine_API_Update+0x19f4>
 801cf8c:	edd7 7a73 	vldr	s15, [r7, #460]	@ 0x1cc
 801cf90:	2600      	movs	r6, #0
 801cf92:	f7fe bfc0 	b.w	801bf16 <iNemoEngine_API_Update+0x17f6>
 801cf96:	ee07 3a90 	vmov	s15, r3
 801cf9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801cf9e:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801d04c <iNemoEngine_API_Update+0x292c>
 801cfa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cfa6:	f7fd bdc6 	b.w	801ab36 <iNemoEngine_API_Update+0x416>
 801cfaa:	eddf 9a29 	vldr	s19, [pc, #164]	@ 801d050 <iNemoEngine_API_Update+0x2930>
 801cfae:	4a29      	ldr	r2, [pc, #164]	@ (801d054 <iNemoEngine_API_Update+0x2934>)
 801cfb0:	eef0 8a67 	vmov.f32	s17, s15
 801cfb4:	f7fd bda3 	b.w	801aafe <iNemoEngine_API_Update+0x3de>
 801cfb8:	ee78 7a27 	vadd.f32	s15, s16, s15
 801cfbc:	ee17 0a90 	vmov	r0, s15
 801cfc0:	f7e3 faea 	bl	8000598 <__aeabi_f2d>
 801cfc4:	ec41 0b10 	vmov	d0, r0, r1
 801cfc8:	f005 f97a 	bl	80222c0 <floor>
 801cfcc:	ec51 0b10 	vmov	r0, r1, d0
 801cfd0:	f7e3 fe12 	bl	8000bf8 <__aeabi_d2f>
 801cfd4:	ee08 0a10 	vmov	s16, r0
 801cfd8:	f7fe b891 	b.w	801b0fe <iNemoEngine_API_Update+0x9de>
 801cfdc:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 801cfe0:	ee17 0a90 	vmov	r0, s15
 801cfe4:	f7e3 fad8 	bl	8000598 <__aeabi_f2d>
 801cfe8:	ec41 0b10 	vmov	d0, r0, r1
 801cfec:	f005 f968 	bl	80222c0 <floor>
 801cff0:	ec51 0b10 	vmov	r0, r1, d0
 801cff4:	f7e3 fe00 	bl	8000bf8 <__aeabi_d2f>
 801cff8:	ee0e 0a90 	vmov	s29, r0
 801cffc:	f7fe b816 	b.w	801b02c <iNemoEngine_API_Update+0x90c>
 801d000:	ee78 7a27 	vadd.f32	s15, s16, s15
 801d004:	ee17 0a90 	vmov	r0, s15
 801d008:	f7e3 fac6 	bl	8000598 <__aeabi_f2d>
 801d00c:	ec41 0b10 	vmov	d0, r0, r1
 801d010:	f005 f956 	bl	80222c0 <floor>
 801d014:	ec51 0b10 	vmov	r0, r1, d0
 801d018:	f7e3 fdee 	bl	8000bf8 <__aeabi_d2f>
 801d01c:	ee08 0a10 	vmov	s16, r0
 801d020:	f7fd bfd9 	b.w	801afd6 <iNemoEngine_API_Update+0x8b6>
 801d024:	f3af 8000 	nop.w
 801d028:	20000000 	.word	0x20000000
 801d02c:	404ca5dc 	.word	0x404ca5dc
 801d030:	3d088889 	.word	0x3d088889
 801d034:	40568000 	.word	0x40568000
 801d038:	43168000 	.word	0x43168000
 801d03c:	391d4951 	.word	0x391d4951
 801d040:	383cbe62 	.word	0x383cbe62
 801d044:	3c75c28f 	.word	0x3c75c28f
 801d048:	469c3e00 	.word	0x469c3e00
 801d04c:	3d4ccccd 	.word	0x3d4ccccd
 801d050:	3dcccccd 	.word	0x3dcccccd
 801d054:	3a83126f 	.word	0x3a83126f
 801d058:	ee79 7a27 	vadd.f32	s15, s18, s15
 801d05c:	ee17 0a90 	vmov	r0, s15
 801d060:	f7e3 fa9a 	bl	8000598 <__aeabi_f2d>
 801d064:	ec41 0b10 	vmov	d0, r0, r1
 801d068:	f005 f92a 	bl	80222c0 <floor>
 801d06c:	ec51 0b10 	vmov	r0, r1, d0
 801d070:	f7e3 fdc2 	bl	8000bf8 <__aeabi_d2f>
 801d074:	ee09 0a10 	vmov	s18, r0
 801d078:	f7fd bf82 	b.w	801af80 <iNemoEngine_API_Update+0x860>
 801d07c:	ee77 7ae3 	vsub.f32	s15, s15, s7
 801d080:	eeb0 3a08 	vmov.f32	s6, #8	@ 0x40400000  3.0
 801d084:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 801d088:	eee7 3a83 	vfma.f32	s7, s15, s6
 801d08c:	f7fe bf1a 	b.w	801bec4 <iNemoEngine_API_Update+0x17a4>
 801d090:	ed97 5a48 	vldr	s10, [r7, #288]	@ 0x120
 801d094:	eeb4 5ac8 	vcmpe.f32	s10, s16
 801d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d09c:	f340 8722 	ble.w	801dee4 <iNemoEngine_API_Update+0x37c4>
 801d0a0:	edd7 5a32 	vldr	s11, [r7, #200]	@ 0xc8
 801d0a4:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 801d0a8:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801d0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d0b4:	f100 87d2 	bmi.w	801e05c <iNemoEngine_API_Update+0x393c>
 801d0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0bc:	f141 833e 	bpl.w	801e73c <iNemoEngine_API_Update+0x401c>
 801d0c0:	ed97 3a33 	vldr	s6, [r7, #204]	@ 0xcc
 801d0c4:	edd7 3a35 	vldr	s7, [r7, #212]	@ 0xd4
 801d0c8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801d0cc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801d0d0:	ee78 5a65 	vsub.f32	s11, s16, s11
 801d0d4:	ee63 5aa5 	vmul.f32	s11, s7, s11
 801d0d8:	ee85 9aa7 	vdiv.f32	s18, s11, s15
 801d0dc:	ee39 9a03 	vadd.f32	s18, s18, s6
 801d0e0:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 801d0e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0ec:	f2c1 833e 	blt.w	801e76c <iNemoEngine_API_Update+0x404c>
 801d0f0:	edd7 5a38 	vldr	s11, [r7, #224]	@ 0xe0
 801d0f4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801d0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d0fc:	f141 84b3 	bpl.w	801ea66 <iNemoEngine_API_Update+0x4346>
 801d100:	ed97 3a37 	vldr	s6, [r7, #220]	@ 0xdc
 801d104:	edd7 3a39 	vldr	s7, [r7, #228]	@ 0xe4
 801d108:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801d10c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801d110:	ee78 7a67 	vsub.f32	s15, s16, s15
 801d114:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801d118:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801d11c:	ee39 9a03 	vadd.f32	s18, s18, s6
 801d120:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 801d124:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d12c:	f2c1 833e 	blt.w	801e7ac <iNemoEngine_API_Update+0x408c>
 801d130:	edd7 5a3c 	vldr	s11, [r7, #240]	@ 0xf0
 801d134:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801d138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d13c:	f141 848c 	bpl.w	801ea58 <iNemoEngine_API_Update+0x4338>
 801d140:	ed97 3a3b 	vldr	s6, [r7, #236]	@ 0xec
 801d144:	edd7 3a3d 	vldr	s7, [r7, #244]	@ 0xf4
 801d148:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801d14c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801d150:	ee78 7a67 	vsub.f32	s15, s16, s15
 801d154:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801d158:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801d15c:	ee39 9a03 	vadd.f32	s18, s18, s6
 801d160:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 801d164:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d16c:	f2c1 833e 	blt.w	801e7ec <iNemoEngine_API_Update+0x40cc>
 801d170:	edd7 5a40 	vldr	s11, [r7, #256]	@ 0x100
 801d174:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801d178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d17c:	f141 8469 	bpl.w	801ea52 <iNemoEngine_API_Update+0x4332>
 801d180:	ed97 3a3f 	vldr	s6, [r7, #252]	@ 0xfc
 801d184:	edd7 3a41 	vldr	s7, [r7, #260]	@ 0x104
 801d188:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801d18c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801d190:	ee78 7a67 	vsub.f32	s15, s16, s15
 801d194:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801d198:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801d19c:	ee39 9a03 	vadd.f32	s18, s18, s6
 801d1a0:	edd7 7a42 	vldr	s15, [r7, #264]	@ 0x108
 801d1a4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1ac:	f2c1 833e 	blt.w	801e82c <iNemoEngine_API_Update+0x410c>
 801d1b0:	edd7 5a44 	vldr	s11, [r7, #272]	@ 0x110
 801d1b4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801d1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1bc:	f141 84f1 	bpl.w	801eba2 <iNemoEngine_API_Update+0x4482>
 801d1c0:	ed97 3a43 	vldr	s6, [r7, #268]	@ 0x10c
 801d1c4:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 801d1c8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801d1cc:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801d1d0:	ee78 7a67 	vsub.f32	s15, s16, s15
 801d1d4:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801d1d8:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801d1dc:	ee39 9a03 	vadd.f32	s18, s18, s6
 801d1e0:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 801d1e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1ec:	f6fe acbf 	blt.w	801bb6e <iNemoEngine_API_Update+0x144e>
 801d1f0:	edd7 3a47 	vldr	s7, [r7, #284]	@ 0x11c
 801d1f4:	edd7 5a49 	vldr	s11, [r7, #292]	@ 0x124
 801d1f8:	ee35 5a67 	vsub.f32	s10, s10, s15
 801d1fc:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801d200:	ee78 7a67 	vsub.f32	s15, s16, s15
 801d204:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801d208:	ee87 9a85 	vdiv.f32	s18, s15, s10
 801d20c:	ee39 9a23 	vadd.f32	s18, s18, s7
 801d210:	f7fe bcad 	b.w	801bb6e <iNemoEngine_API_Update+0x144e>
 801d214:	ee78 7a27 	vadd.f32	s15, s16, s15
 801d218:	ee17 0a90 	vmov	r0, s15
 801d21c:	f7e3 f9bc 	bl	8000598 <__aeabi_f2d>
 801d220:	ec41 0b10 	vmov	d0, r0, r1
 801d224:	f005 f84c 	bl	80222c0 <floor>
 801d228:	ec51 0b10 	vmov	r0, r1, d0
 801d22c:	f7e3 fce4 	bl	8000bf8 <__aeabi_d2f>
 801d230:	ee08 0a10 	vmov	s16, r0
 801d234:	f7fe b878 	b.w	801b328 <iNemoEngine_API_Update+0xc08>
 801d238:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 801d23c:	ee17 0a90 	vmov	r0, s15
 801d240:	f7e3 f9aa 	bl	8000598 <__aeabi_f2d>
 801d244:	ec41 0b10 	vmov	d0, r0, r1
 801d248:	f005 f83a 	bl	80222c0 <floor>
 801d24c:	ec51 0b10 	vmov	r0, r1, d0
 801d250:	f7e3 fcd2 	bl	8000bf8 <__aeabi_d2f>
 801d254:	ee0e 0a90 	vmov	s29, r0
 801d258:	f7fe b83b 	b.w	801b2d2 <iNemoEngine_API_Update+0xbb2>
 801d25c:	ee79 7a27 	vadd.f32	s15, s18, s15
 801d260:	ee17 0a90 	vmov	r0, s15
 801d264:	f7e3 f998 	bl	8000598 <__aeabi_f2d>
 801d268:	ec41 0b10 	vmov	d0, r0, r1
 801d26c:	f005 f828 	bl	80222c0 <floor>
 801d270:	ec51 0b10 	vmov	r0, r1, d0
 801d274:	f7e3 fcc0 	bl	8000bf8 <__aeabi_d2f>
 801d278:	ee09 0a10 	vmov	s18, r0
 801d27c:	f7fd bf95 	b.w	801b1aa <iNemoEngine_API_Update+0xa8a>
 801d280:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 801d284:	ee17 0a90 	vmov	r0, s15
 801d288:	f7e3 f986 	bl	8000598 <__aeabi_f2d>
 801d28c:	ec41 0b10 	vmov	d0, r0, r1
 801d290:	f005 f816 	bl	80222c0 <floor>
 801d294:	ec51 0b10 	vmov	r0, r1, d0
 801d298:	f7e3 fcae 	bl	8000bf8 <__aeabi_d2f>
 801d29c:	ee0e 0a90 	vmov	s29, r0
 801d2a0:	f7fd bf58 	b.w	801b154 <iNemoEngine_API_Update+0xa34>
 801d2a4:	ee79 7a27 	vadd.f32	s15, s18, s15
 801d2a8:	ee17 0a90 	vmov	r0, s15
 801d2ac:	f7e3 f974 	bl	8000598 <__aeabi_f2d>
 801d2b0:	ec41 0b10 	vmov	d0, r0, r1
 801d2b4:	f005 f804 	bl	80222c0 <floor>
 801d2b8:	ec51 0b10 	vmov	r0, r1, d0
 801d2bc:	f7e3 fc9c 	bl	8000bf8 <__aeabi_d2f>
 801d2c0:	ee09 0a10 	vmov	s18, r0
 801d2c4:	f7fd bfda 	b.w	801b27c <iNemoEngine_API_Update+0xb5c>
 801d2c8:	eef1 8a04 	vmov.f32	s17, #20	@ 0x40a00000  5.0
 801d2cc:	edd7 9a05 	vldr	s19, [r7, #20]
 801d2d0:	4ab1      	ldr	r2, [pc, #708]	@ (801d598 <iNemoEngine_API_Update+0x2e78>)
 801d2d2:	ee67 8aa8 	vmul.f32	s17, s15, s17
 801d2d6:	f7fd bc12 	b.w	801aafe <iNemoEngine_API_Update+0x3de>
 801d2da:	edd7 9a05 	vldr	s19, [r7, #20]
 801d2de:	4aaf      	ldr	r2, [pc, #700]	@ (801d59c <iNemoEngine_API_Update+0x2e7c>)
 801d2e0:	eef0 8a67 	vmov.f32	s17, s15
 801d2e4:	f7fd bc0b 	b.w	801aafe <iNemoEngine_API_Update+0x3de>
 801d2e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d2ea:	2a00      	cmp	r2, #0
 801d2ec:	dd0c      	ble.n	801d308 <iNemoEngine_API_Update+0x2be8>
 801d2ee:	ed9d 6a03 	vldr	s12, [sp, #12]
 801d2f2:	eef5 7a08 	vmov.f32	s15, #88	@ 0x3ec00000  0.375
 801d2f6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d2fe:	dd03      	ble.n	801d308 <iNemoEngine_API_Update+0x2be8>
 801d300:	3a01      	subs	r2, #1
 801d302:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801d304:	f7fe bfe5 	b.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801d308:	ed9d 6a12 	vldr	s12, [sp, #72]	@ 0x48
 801d30c:	eddd 5a0c 	vldr	s11, [sp, #48]	@ 0x30
 801d310:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801d314:	ee26 6a27 	vmul.f32	s12, s12, s15
 801d318:	eef4 5ac6 	vcmpe.f32	s11, s12
 801d31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d320:	f57e afd7 	bpl.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801d324:	ed9d 6a13 	vldr	s12, [sp, #76]	@ 0x4c
 801d328:	ee66 7a27 	vmul.f32	s15, s12, s15
 801d32c:	ed9d 6a16 	vldr	s12, [sp, #88]	@ 0x58
 801d330:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801d334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d338:	f57e afcb 	bpl.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801d33c:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 801d340:	ed9d 6a14 	vldr	s12, [sp, #80]	@ 0x50
 801d344:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801d348:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801d34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d350:	f341 83ac 	ble.w	801eaac <iNemoEngine_API_Update+0x438c>
 801d354:	3303      	adds	r3, #3
 801d356:	e4f8      	b.n	801cd4a <iNemoEngine_API_Update+0x262a>
 801d358:	ed9f 6a91 	vldr	s12, [pc, #580]	@ 801d5a0 <iNemoEngine_API_Update+0x2e80>
 801d35c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d364:	f57e ae8e 	bpl.w	801c084 <iNemoEngine_API_Update+0x1964>
 801d368:	ed9f 6a8e 	vldr	s12, [pc, #568]	@ 801d5a4 <iNemoEngine_API_Update+0x2e84>
 801d36c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d374:	f280 80b5 	bge.w	801d4e2 <iNemoEngine_API_Update+0x2dc2>
 801d378:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801d37c:	ed9f 5a8a 	vldr	s10, [pc, #552]	@ 801d5a8 <iNemoEngine_API_Update+0x2e88>
 801d380:	eef4 7ac5 	vcmpe.f32	s15, s10
 801d384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d388:	f280 80bd 	bge.w	801d506 <iNemoEngine_API_Update+0x2de6>
 801d38c:	ed9f 5a87 	vldr	s10, [pc, #540]	@ 801d5ac <iNemoEngine_API_Update+0x2e8c>
 801d390:	eef4 7ac5 	vcmpe.f32	s15, s10
 801d394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d398:	f280 80c7 	bge.w	801d52a <iNemoEngine_API_Update+0x2e0a>
 801d39c:	ed9f 5a84 	vldr	s10, [pc, #528]	@ 801d5b0 <iNemoEngine_API_Update+0x2e90>
 801d3a0:	eef4 7ac5 	vcmpe.f32	s15, s10
 801d3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3a8:	f280 80d1 	bge.w	801d54e <iNemoEngine_API_Update+0x2e2e>
 801d3ac:	ed9f 5a81 	vldr	s10, [pc, #516]	@ 801d5b4 <iNemoEngine_API_Update+0x2e94>
 801d3b0:	eef4 7ac5 	vcmpe.f32	s15, s10
 801d3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3b8:	f280 80db 	bge.w	801d572 <iNemoEngine_API_Update+0x2e52>
 801d3bc:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 801d3c0:	eef4 7ac5 	vcmpe.f32	s15, s10
 801d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3c8:	db09      	blt.n	801d3de <iNemoEngine_API_Update+0x2cbe>
 801d3ca:	eeb6 5a00 	vmov.f32	s10, #96	@ 0x3f000000  0.5
 801d3ce:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d3d2:	eddf 4a79 	vldr	s9, [pc, #484]	@ 801d5b8 <iNemoEngine_API_Update+0x2e98>
 801d3d6:	ed9f 6a79 	vldr	s12, [pc, #484]	@ 801d5bc <iNemoEngine_API_Update+0x2e9c>
 801d3da:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d3de:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 801d3e2:	ee76 4a24 	vadd.f32	s9, s12, s9
 801d3e6:	eeb0 4a00 	vmov.f32	s8, #0	@ 0x40000000  2.0
 801d3ea:	ee84 5a24 	vdiv.f32	s10, s8, s9
 801d3ee:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 801d5a4 <iNemoEngine_API_Update+0x2e84>
 801d3f2:	ed9f 3a73 	vldr	s6, [pc, #460]	@ 801d5c0 <iNemoEngine_API_Update+0x2ea0>
 801d3f6:	ed9f 4a6a 	vldr	s8, [pc, #424]	@ 801d5a0 <iNemoEngine_API_Update+0x2e80>
 801d3fa:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d402:	bfb8      	it	lt
 801d404:	eeb0 5a64 	vmovlt.f32	s10, s9
 801d408:	eef4 7ac3 	vcmpe.f32	s15, s6
 801d40c:	eddf 4a6d 	vldr	s9, [pc, #436]	@ 801d5c4 <iNemoEngine_API_Update+0x2ea4>
 801d410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d414:	ee65 4a24 	vmul.f32	s9, s10, s9
 801d418:	ee65 3a04 	vmul.f32	s7, s10, s8
 801d41c:	f141 810f 	bpl.w	801e63e <iNemoEngine_API_Update+0x3f1e>
 801d420:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d428:	f2c1 810f 	blt.w	801e64a <iNemoEngine_API_Update+0x3f2a>
 801d42c:	ed9f 4a5d 	vldr	s8, [pc, #372]	@ 801d5a4 <iNemoEngine_API_Update+0x2e84>
 801d430:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d438:	f141 8112 	bpl.w	801e660 <iNemoEngine_API_Update+0x3f40>
 801d43c:	ed9f 4a58 	vldr	s8, [pc, #352]	@ 801d5a0 <iNemoEngine_API_Update+0x2e80>
 801d440:	ed9f 3a61 	vldr	s6, [pc, #388]	@ 801d5c8 <iNemoEngine_API_Update+0x2ea8>
 801d444:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801d448:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801d44c:	eee4 9a03 	vfma.f32	s19, s8, s6
 801d450:	ed9f 4a55 	vldr	s8, [pc, #340]	@ 801d5a8 <iNemoEngine_API_Update+0x2e88>
 801d454:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d45c:	f2c1 8112 	blt.w	801e684 <iNemoEngine_API_Update+0x3f64>
 801d460:	ed9f 4a52 	vldr	s8, [pc, #328]	@ 801d5ac <iNemoEngine_API_Update+0x2e8c>
 801d464:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d46c:	f141 8112 	bpl.w	801e694 <iNemoEngine_API_Update+0x3f74>
 801d470:	ed9f 4a4d 	vldr	s8, [pc, #308]	@ 801d5a8 <iNemoEngine_API_Update+0x2e88>
 801d474:	ed9f 3a55 	vldr	s6, [pc, #340]	@ 801d5cc <iNemoEngine_API_Update+0x2eac>
 801d478:	eddf 9a55 	vldr	s19, [pc, #340]	@ 801d5d0 <iNemoEngine_API_Update+0x2eb0>
 801d47c:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801d480:	eee4 9a03 	vfma.f32	s19, s8, s6
 801d484:	ed9f 4a4a 	vldr	s8, [pc, #296]	@ 801d5b0 <iNemoEngine_API_Update+0x2e90>
 801d488:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d490:	f2c1 8112 	blt.w	801e6b8 <iNemoEngine_API_Update+0x3f98>
 801d494:	ed9f 4a47 	vldr	s8, [pc, #284]	@ 801d5b4 <iNemoEngine_API_Update+0x2e94>
 801d498:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4a0:	f141 8112 	bpl.w	801e6c8 <iNemoEngine_API_Update+0x3fa8>
 801d4a4:	ed9f 4a42 	vldr	s8, [pc, #264]	@ 801d5b0 <iNemoEngine_API_Update+0x2e90>
 801d4a8:	ed9f 3a4a 	vldr	s6, [pc, #296]	@ 801d5d4 <iNemoEngine_API_Update+0x2eb4>
 801d4ac:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801d4b0:	eef7 9a0c 	vmov.f32	s19, #124	@ 0x3fe00000  1.750
 801d4b4:	eee4 9a03 	vfma.f32	s19, s8, s6
 801d4b8:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801d4bc:	eef4 7ac4 	vcmpe.f32	s15, s8
 801d4c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4c4:	db09      	blt.n	801d4da <iNemoEngine_API_Update+0x2dba>
 801d4c6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801d4ca:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801d4ce:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 801d5d8 <iNemoEngine_API_Update+0x2eb8>
 801d4d2:	eddf 9a42 	vldr	s19, [pc, #264]	@ 801d5dc <iNemoEngine_API_Update+0x2ebc>
 801d4d6:	eee4 9a03 	vfma.f32	s19, s8, s6
 801d4da:	ee68 8aa9 	vmul.f32	s17, s17, s19
 801d4de:	f7fe be19 	b.w	801c114 <iNemoEngine_API_Update+0x19f4>
 801d4e2:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 801d5a8 <iNemoEngine_API_Update+0x2e88>
 801d4e6:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4ee:	d50a      	bpl.n	801d506 <iNemoEngine_API_Update+0x2de6>
 801d4f0:	ed9f 5a2c 	vldr	s10, [pc, #176]	@ 801d5a4 <iNemoEngine_API_Update+0x2e84>
 801d4f4:	eddf 4a3a 	vldr	s9, [pc, #232]	@ 801d5e0 <iNemoEngine_API_Update+0x2ec0>
 801d4f8:	ed9f 6a3a 	vldr	s12, [pc, #232]	@ 801d5e4 <iNemoEngine_API_Update+0x2ec4>
 801d4fc:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d500:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d504:	e742      	b.n	801d38c <iNemoEngine_API_Update+0x2c6c>
 801d506:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 801d5ac <iNemoEngine_API_Update+0x2e8c>
 801d50a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d512:	d50a      	bpl.n	801d52a <iNemoEngine_API_Update+0x2e0a>
 801d514:	ed9f 5a24 	vldr	s10, [pc, #144]	@ 801d5a8 <iNemoEngine_API_Update+0x2e88>
 801d518:	eddf 4a33 	vldr	s9, [pc, #204]	@ 801d5e8 <iNemoEngine_API_Update+0x2ec8>
 801d51c:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d520:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801d524:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d528:	e738      	b.n	801d39c <iNemoEngine_API_Update+0x2c7c>
 801d52a:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 801d5b0 <iNemoEngine_API_Update+0x2e90>
 801d52e:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d536:	d50a      	bpl.n	801d54e <iNemoEngine_API_Update+0x2e2e>
 801d538:	ed9f 5a1c 	vldr	s10, [pc, #112]	@ 801d5ac <iNemoEngine_API_Update+0x2e8c>
 801d53c:	eddf 4a2b 	vldr	s9, [pc, #172]	@ 801d5ec <iNemoEngine_API_Update+0x2ecc>
 801d540:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d544:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 801d548:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d54c:	e72e      	b.n	801d3ac <iNemoEngine_API_Update+0x2c8c>
 801d54e:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 801d5b4 <iNemoEngine_API_Update+0x2e94>
 801d552:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d55a:	d50a      	bpl.n	801d572 <iNemoEngine_API_Update+0x2e52>
 801d55c:	ed9f 5a14 	vldr	s10, [pc, #80]	@ 801d5b0 <iNemoEngine_API_Update+0x2e90>
 801d560:	eddf 4a23 	vldr	s9, [pc, #140]	@ 801d5f0 <iNemoEngine_API_Update+0x2ed0>
 801d564:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d568:	eeb2 6a0a 	vmov.f32	s12, #42	@ 0x41500000  13.0
 801d56c:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d570:	e724      	b.n	801d3bc <iNemoEngine_API_Update+0x2c9c>
 801d572:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801d576:	eef4 7ac6 	vcmpe.f32	s15, s12
 801d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d57e:	f57f af24 	bpl.w	801d3ca <iNemoEngine_API_Update+0x2caa>
 801d582:	ed9f 5a0c 	vldr	s10, [pc, #48]	@ 801d5b4 <iNemoEngine_API_Update+0x2e94>
 801d586:	eddf 4a1b 	vldr	s9, [pc, #108]	@ 801d5f4 <iNemoEngine_API_Update+0x2ed4>
 801d58a:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 801d5f8 <iNemoEngine_API_Update+0x2ed8>
 801d58e:	ee37 5ac5 	vsub.f32	s10, s15, s10
 801d592:	eea5 6a24 	vfma.f32	s12, s10, s9
 801d596:	e722      	b.n	801d3de <iNemoEngine_API_Update+0x2cbe>
 801d598:	3727c5ac 	.word	0x3727c5ac
 801d59c:	3ac49ba6 	.word	0x3ac49ba6
 801d5a0:	3c23d70a 	.word	0x3c23d70a
 801d5a4:	3c75c28f 	.word	0x3c75c28f
 801d5a8:	3cf5c28f 	.word	0x3cf5c28f
 801d5ac:	3d4ccccd 	.word	0x3d4ccccd
 801d5b0:	3dcccccd 	.word	0x3dcccccd
 801d5b4:	3e4ccccd 	.word	0x3e4ccccd
 801d5b8:	47179000 	.word	0x47179000
 801d5bc:	4415c000 	.word	0x4415c000
 801d5c0:	3ba3d70a 	.word	0x3ba3d70a
 801d5c4:	3b449ba6 	.word	0x3b449ba6
 801d5c8:	411ffff6 	.word	0x411ffff6
 801d5cc:	418c0000 	.word	0x418c0000
 801d5d0:	3f933333 	.word	0x3f933333
 801d5d4:	42af0000 	.word	0x42af0000
 801d5d8:	43480000 	.word	0x43480000
 801d5dc:	424a0000 	.word	0x424a0000
 801d5e0:	41d55556 	.word	0x41d55556
 801d5e4:	3fcccccd 	.word	0x3fcccccd
 801d5e8:	4315ffff 	.word	0x4315ffff
 801d5ec:	43200000 	.word	0x43200000
 801d5f0:	44848000 	.word	0x44848000
 801d5f4:	44c80000 	.word	0x44c80000
 801d5f8:	42ee0000 	.word	0x42ee0000
 801d5fc:	2000      	movs	r0, #0
 801d5fe:	f887 0318 	strb.w	r0, [r7, #792]	@ 0x318
 801d602:	f207 40b4 	addw	r0, r7, #1204	@ 0x4b4
 801d606:	49d7      	ldr	r1, [pc, #860]	@ (801d964 <iNemoEngine_API_Update+0x3244>)
 801d608:	6001      	str	r1, [r0, #0]
 801d60a:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 801d60e:	f207 6124 	addw	r1, r7, #1572	@ 0x624
 801d612:	4ad5      	ldr	r2, [pc, #852]	@ (801d968 <iNemoEngine_API_Update+0x3248>)
 801d614:	4bd5      	ldr	r3, [pc, #852]	@ (801d96c <iNemoEngine_API_Update+0x324c>)
 801d616:	600a      	str	r2, [r1, #0]
 801d618:	f8cb 3000 	str.w	r3, [fp]
 801d61c:	f897 64b1 	ldrb.w	r6, [r7, #1201]	@ 0x4b1
 801d620:	9005      	str	r0, [sp, #20]
 801d622:	9106      	str	r1, [sp, #24]
 801d624:	2e00      	cmp	r6, #0
 801d626:	f001 82f7 	beq.w	801ec18 <iNemoEngine_API_Update+0x44f8>
 801d62a:	eddf 7ad1 	vldr	s15, [pc, #836]	@ 801d970 <iNemoEngine_API_Update+0x3250>
 801d62e:	ee69 da27 	vmul.f32	s27, s18, s15
 801d632:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 801d636:	ee28 ea27 	vmul.f32	s28, s16, s15
 801d63a:	ee6e aaa7 	vmul.f32	s21, s29, s15
 801d63e:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 801d642:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 801d646:	ee17 0a90 	vmov	r0, s15
 801d64a:	f7e2 ffa5 	bl	8000598 <__aeabi_f2d>
 801d64e:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 801d652:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801d656:	ee17 0a90 	vmov	r0, s15
 801d65a:	f7e2 ff9d 	bl	8000598 <__aeabi_f2d>
 801d65e:	ee7e 7a69 	vsub.f32	s15, s28, s19
 801d662:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801d666:	ee17 0a90 	vmov	r0, s15
 801d66a:	f7e2 ff95 	bl	8000598 <__aeabi_f2d>
 801d66e:	ee7e 7a29 	vadd.f32	s15, s28, s19
 801d672:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d676:	ee17 0a90 	vmov	r0, s15
 801d67a:	f7e2 ff8d 	bl	8000598 <__aeabi_f2d>
 801d67e:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 801d682:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801d686:	ee17 0a90 	vmov	r0, s15
 801d68a:	f7e2 ff85 	bl	8000598 <__aeabi_f2d>
 801d68e:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 801d692:	4602      	mov	r2, r0
 801d694:	460b      	mov	r3, r1
 801d696:	ee17 0a90 	vmov	r0, s15
 801d69a:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801d69e:	f7e2 ff7b 	bl	8000598 <__aeabi_f2d>
 801d6a2:	230c      	movs	r3, #12
 801d6a4:	eef0 7aea 	vabs.f32	s15, s21
 801d6a8:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 801d6ac:	eddf 9ab1 	vldr	s19, [pc, #708]	@ 801d974 <iNemoEngine_API_Update+0x3254>
 801d6b0:	edcd 7a03 	vstr	s15, [sp, #12]
 801d6b4:	fb13 5606 	smlabb	r6, r3, r6, r5
 801d6b8:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801d6bc:	eef0 caed 	vabs.f32	s25, s27
 801d6c0:	eeb0 bace 	vabs.f32	s22, s28
 801d6c4:	46aa      	mov	sl, r5
 801d6c6:	e060      	b.n	801d78a <iNemoEngine_API_Update+0x306a>
 801d6c8:	eddf 7aab 	vldr	s15, [pc, #684]	@ 801d978 <iNemoEngine_API_Update+0x3258>
 801d6cc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801d6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6d4:	f280 815a 	bge.w	801d98c <iNemoEngine_API_Update+0x326c>
 801d6d8:	eddf 7aa8 	vldr	s15, [pc, #672]	@ 801d97c <iNemoEngine_API_Update+0x325c>
 801d6dc:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801d6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d6e4:	f300 816a 	bgt.w	801d9bc <iNemoEngine_API_Update+0x329c>
 801d6e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d6ec:	f004 fd6c 	bl	80221c8 <ceil>
 801d6f0:	ec51 0b10 	vmov	r0, r1, d0
 801d6f4:	f7e3 fa80 	bl	8000bf8 <__aeabi_d2f>
 801d6f8:	4603      	mov	r3, r0
 801d6fa:	eeb4 bae9 	vcmpe.f32	s22, s19
 801d6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d702:	f8ca 3000 	str.w	r3, [sl]
 801d706:	d54e      	bpl.n	801d7a6 <iNemoEngine_API_Update+0x3086>
 801d708:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801d978 <iNemoEngine_API_Update+0x3258>
 801d70c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d714:	f280 811b 	bge.w	801d94e <iNemoEngine_API_Update+0x322e>
 801d718:	eddf 7a98 	vldr	s15, [pc, #608]	@ 801d97c <iNemoEngine_API_Update+0x325c>
 801d71c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d724:	f300 8148 	bgt.w	801d9b8 <iNemoEngine_API_Update+0x3298>
 801d728:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801d72c:	f004 fd4c 	bl	80221c8 <ceil>
 801d730:	ec51 0b10 	vmov	r0, r1, d0
 801d734:	f7e3 fa60 	bl	8000bf8 <__aeabi_d2f>
 801d738:	4603      	mov	r3, r0
 801d73a:	eddd 7a03 	vldr	s15, [sp, #12]
 801d73e:	f8ca 3004 	str.w	r3, [sl, #4]
 801d742:	eef4 7ae9 	vcmpe.f32	s15, s19
 801d746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d74a:	d52f      	bpl.n	801d7ac <iNemoEngine_API_Update+0x308c>
 801d74c:	eddf 7a8a 	vldr	s15, [pc, #552]	@ 801d978 <iNemoEngine_API_Update+0x3258>
 801d750:	eef4 eae7 	vcmpe.f32	s29, s15
 801d754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d758:	f280 8122 	bge.w	801d9a0 <iNemoEngine_API_Update+0x3280>
 801d75c:	eddf 7a87 	vldr	s15, [pc, #540]	@ 801d97c <iNemoEngine_API_Update+0x325c>
 801d760:	eef4 eae7 	vcmpe.f32	s29, s15
 801d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d768:	f300 8124 	bgt.w	801d9b4 <iNemoEngine_API_Update+0x3294>
 801d76c:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 801d770:	f004 fd2a 	bl	80221c8 <ceil>
 801d774:	ec51 0b10 	vmov	r0, r1, d0
 801d778:	f7e3 fa3e 	bl	8000bf8 <__aeabi_d2f>
 801d77c:	4603      	mov	r3, r0
 801d77e:	f8ca 3008 	str.w	r3, [sl, #8]
 801d782:	f10a 0a0c 	add.w	sl, sl, #12
 801d786:	45b2      	cmp	sl, r6
 801d788:	d018      	beq.n	801d7bc <iNemoEngine_API_Update+0x309c>
 801d78a:	eef4 cae9 	vcmpe.f32	s25, s19
 801d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d792:	d499      	bmi.n	801d6c8 <iNemoEngine_API_Update+0x2fa8>
 801d794:	ee1d 3a90 	vmov	r3, s27
 801d798:	eeb4 bae9 	vcmpe.f32	s22, s19
 801d79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d7a0:	f8ca 3000 	str.w	r3, [sl]
 801d7a4:	d4b0      	bmi.n	801d708 <iNemoEngine_API_Update+0x2fe8>
 801d7a6:	ee1e 3a10 	vmov	r3, s28
 801d7aa:	e7c6      	b.n	801d73a <iNemoEngine_API_Update+0x301a>
 801d7ac:	ee1a 3a90 	vmov	r3, s21
 801d7b0:	f10a 0a0c 	add.w	sl, sl, #12
 801d7b4:	f84a 3c04 	str.w	r3, [sl, #-4]
 801d7b8:	45b2      	cmp	sl, r6
 801d7ba:	d1e6      	bne.n	801d78a <iNemoEngine_API_Update+0x306a>
 801d7bc:	f897 a621 	ldrb.w	sl, [r7, #1569]	@ 0x621
 801d7c0:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 801d7c4:	f1ba 0f00 	cmp.w	sl, #0
 801d7c8:	f000 81ff 	beq.w	801dbca <iNemoEngine_API_Update+0x34aa>
 801d7cc:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 801d980 <iNemoEngine_API_Update+0x3260>
 801d7d0:	ee6c da27 	vmul.f32	s27, s24, s15
 801d7d4:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 801d7d8:	ee2d ea27 	vmul.f32	s28, s26, s15
 801d7dc:	ee6b aaa7 	vmul.f32	s21, s23, s15
 801d7e0:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 801d7e4:	f507 66c5 	add.w	r6, r7, #1576	@ 0x628
 801d7e8:	ee17 0a90 	vmov	r0, s15
 801d7ec:	f7e2 fed4 	bl	8000598 <__aeabi_f2d>
 801d7f0:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 801d7f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801d7f8:	ee17 0a90 	vmov	r0, s15
 801d7fc:	f7e2 fecc 	bl	8000598 <__aeabi_f2d>
 801d800:	ee7e 7a69 	vsub.f32	s15, s28, s19
 801d804:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801d808:	ee17 0a90 	vmov	r0, s15
 801d80c:	f7e2 fec4 	bl	8000598 <__aeabi_f2d>
 801d810:	ee7e 7a29 	vadd.f32	s15, s28, s19
 801d814:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801d818:	ee17 0a90 	vmov	r0, s15
 801d81c:	f7e2 febc 	bl	8000598 <__aeabi_f2d>
 801d820:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 801d824:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801d828:	ee17 0a90 	vmov	r0, s15
 801d82c:	f7e2 feb4 	bl	8000598 <__aeabi_f2d>
 801d830:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 801d834:	4602      	mov	r2, r0
 801d836:	460b      	mov	r3, r1
 801d838:	ee17 0a90 	vmov	r0, s15
 801d83c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 801d840:	f7e2 feaa 	bl	8000598 <__aeabi_f2d>
 801d844:	230c      	movs	r3, #12
 801d846:	eef0 7aea 	vabs.f32	s15, s21
 801d84a:	fb13 690a 	smlabb	r9, r3, sl, r6
 801d84e:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 801d852:	eddf 9a48 	vldr	s19, [pc, #288]	@ 801d974 <iNemoEngine_API_Update+0x3254>
 801d856:	edcd 7a03 	vstr	s15, [sp, #12]
 801d85a:	eef0 caed 	vabs.f32	s25, s27
 801d85e:	eeb0 bace 	vabs.f32	s22, s28
 801d862:	46b2      	mov	sl, r6
 801d864:	e062      	b.n	801d92c <iNemoEngine_API_Update+0x320c>
 801d866:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801d984 <iNemoEngine_API_Update+0x3264>
 801d86a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801d86e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d872:	f280 82d3 	bge.w	801de1c <iNemoEngine_API_Update+0x36fc>
 801d876:	eddf 7a44 	vldr	s15, [pc, #272]	@ 801d988 <iNemoEngine_API_Update+0x3268>
 801d87a:	eeb4 cae7 	vcmpe.f32	s24, s15
 801d87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d882:	f300 82e5 	bgt.w	801de50 <iNemoEngine_API_Update+0x3730>
 801d886:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801d88a:	f004 fc9d 	bl	80221c8 <ceil>
 801d88e:	ec51 0b10 	vmov	r0, r1, d0
 801d892:	f7e3 f9b1 	bl	8000bf8 <__aeabi_d2f>
 801d896:	4603      	mov	r3, r0
 801d898:	eeb4 bae9 	vcmpe.f32	s22, s19
 801d89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a0:	f8ca 3000 	str.w	r3, [sl]
 801d8a4:	d550      	bpl.n	801d948 <iNemoEngine_API_Update+0x3228>
 801d8a6:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801d984 <iNemoEngine_API_Update+0x3264>
 801d8aa:	eeb4 dae7 	vcmpe.f32	s26, s15
 801d8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8b2:	f280 82a9 	bge.w	801de08 <iNemoEngine_API_Update+0x36e8>
 801d8b6:	eddf 7a34 	vldr	s15, [pc, #208]	@ 801d988 <iNemoEngine_API_Update+0x3268>
 801d8ba:	eeb4 dae7 	vcmpe.f32	s26, s15
 801d8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8c2:	f300 82c2 	bgt.w	801de4a <iNemoEngine_API_Update+0x372a>
 801d8c6:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 801d8ca:	f004 fc7d 	bl	80221c8 <ceil>
 801d8ce:	ec51 0b10 	vmov	r0, r1, d0
 801d8d2:	f7e3 f991 	bl	8000bf8 <__aeabi_d2f>
 801d8d6:	4603      	mov	r3, r0
 801d8d8:	eddd 7a03 	vldr	s15, [sp, #12]
 801d8dc:	f8ca 3004 	str.w	r3, [sl, #4]
 801d8e0:	eef4 7ae9 	vcmpe.f32	s15, s19
 801d8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8e8:	f140 8166 	bpl.w	801dbb8 <iNemoEngine_API_Update+0x3498>
 801d8ec:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801d984 <iNemoEngine_API_Update+0x3264>
 801d8f0:	eef4 bae7 	vcmpe.f32	s23, s15
 801d8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8f8:	f280 829a 	bge.w	801de30 <iNemoEngine_API_Update+0x3710>
 801d8fc:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801d988 <iNemoEngine_API_Update+0x3268>
 801d900:	eef4 bae7 	vcmpe.f32	s23, s15
 801d904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d908:	f300 829c 	bgt.w	801de44 <iNemoEngine_API_Update+0x3724>
 801d90c:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 801d910:	f004 fc5a 	bl	80221c8 <ceil>
 801d914:	ec51 0b10 	vmov	r0, r1, d0
 801d918:	f7e3 f96e 	bl	8000bf8 <__aeabi_d2f>
 801d91c:	4603      	mov	r3, r0
 801d91e:	f8ca 3008 	str.w	r3, [sl, #8]
 801d922:	f10a 0a0c 	add.w	sl, sl, #12
 801d926:	45ca      	cmp	sl, r9
 801d928:	f000 814f 	beq.w	801dbca <iNemoEngine_API_Update+0x34aa>
 801d92c:	eef4 cae9 	vcmpe.f32	s25, s19
 801d930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d934:	d497      	bmi.n	801d866 <iNemoEngine_API_Update+0x3146>
 801d936:	ee1d 3a90 	vmov	r3, s27
 801d93a:	eeb4 bae9 	vcmpe.f32	s22, s19
 801d93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d942:	f8ca 3000 	str.w	r3, [sl]
 801d946:	d4ae      	bmi.n	801d8a6 <iNemoEngine_API_Update+0x3186>
 801d948:	ee1e 3a10 	vmov	r3, s28
 801d94c:	e7c4      	b.n	801d8d8 <iNemoEngine_API_Update+0x31b8>
 801d94e:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801d952:	f004 fcb5 	bl	80222c0 <floor>
 801d956:	ec51 0b10 	vmov	r0, r1, d0
 801d95a:	f7e3 f94d 	bl	8000bf8 <__aeabi_d2f>
 801d95e:	4603      	mov	r3, r0
 801d960:	e6eb      	b.n	801d73a <iNemoEngine_API_Update+0x301a>
 801d962:	bf00      	nop
 801d964:	3a7001e0 	.word	0x3a7001e0
 801d968:	3a000100 	.word	0x3a000100
 801d96c:	3a8c0118 	.word	0x3a8c0118
 801d970:	44888777 	.word	0x44888777
 801d974:	4b000000 	.word	0x4b000000
 801d978:	39f001e1 	.word	0x39f001e1
 801d97c:	b9f001e1 	.word	0xb9f001e1
 801d980:	44fffe00 	.word	0x44fffe00
 801d984:	39800100 	.word	0x39800100
 801d988:	b9800100 	.word	0xb9800100
 801d98c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801d990:	f004 fc96 	bl	80222c0 <floor>
 801d994:	ec51 0b10 	vmov	r0, r1, d0
 801d998:	f7e3 f92e 	bl	8000bf8 <__aeabi_d2f>
 801d99c:	4603      	mov	r3, r0
 801d99e:	e6ac      	b.n	801d6fa <iNemoEngine_API_Update+0x2fda>
 801d9a0:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 801d9a4:	f004 fc8c 	bl	80222c0 <floor>
 801d9a8:	ec51 0b10 	vmov	r0, r1, d0
 801d9ac:	f7e3 f924 	bl	8000bf8 <__aeabi_d2f>
 801d9b0:	4603      	mov	r3, r0
 801d9b2:	e6e4      	b.n	801d77e <iNemoEngine_API_Update+0x305e>
 801d9b4:	464b      	mov	r3, r9
 801d9b6:	e6e2      	b.n	801d77e <iNemoEngine_API_Update+0x305e>
 801d9b8:	464b      	mov	r3, r9
 801d9ba:	e6be      	b.n	801d73a <iNemoEngine_API_Update+0x301a>
 801d9bc:	464b      	mov	r3, r9
 801d9be:	e69c      	b.n	801d6fa <iNemoEngine_API_Update+0x2fda>
 801d9c0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 801d9c4:	4bb1      	ldr	r3, [pc, #708]	@ (801dc8c <iNemoEngine_API_Update+0x356c>)
 801d9c6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 801d9ca:	2100      	movs	r1, #0
 801d9cc:	f8c7 51cc 	str.w	r5, [r7, #460]	@ 0x1cc
 801d9d0:	f8c7 51d0 	str.w	r5, [r7, #464]	@ 0x1d0
 801d9d4:	f887 11ac 	strb.w	r1, [r7, #428]	@ 0x1ac
 801d9d8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801d9dc:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801d9e0:	f007 f9fb 	bl	8024dda <memset>
 801d9e4:	ed97 6a02 	vldr	s12, [r7, #8]
 801d9e8:	eddf 7aa9 	vldr	s15, [pc, #676]	@ 801dc90 <iNemoEngine_API_Update+0x3570>
 801d9ec:	eddf 5aa9 	vldr	s11, [pc, #676]	@ 801dc94 <iNemoEngine_API_Update+0x3574>
 801d9f0:	ed9f 5aa9 	vldr	s10, [pc, #676]	@ 801dc98 <iNemoEngine_API_Update+0x3578>
 801d9f4:	eddf 3aa9 	vldr	s7, [pc, #676]	@ 801dc9c <iNemoEngine_API_Update+0x357c>
 801d9f8:	ed9f 4aa9 	vldr	s8, [pc, #676]	@ 801dca0 <iNemoEngine_API_Update+0x3580>
 801d9fc:	f8c7 50c4 	str.w	r5, [r7, #196]	@ 0xc4
 801da00:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da04:	2300      	movs	r3, #0
 801da06:	edc7 7a34 	vstr	s15, [r7, #208]	@ 0xd0
 801da0a:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801dca4 <iNemoEngine_API_Update+0x3584>
 801da0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801da12:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801da1a:	edc7 7a4e 	vstr	s15, [r7, #312]	@ 0x138
 801da1e:	eddf 7aa2 	vldr	s15, [pc, #648]	@ 801dca8 <iNemoEngine_API_Update+0x3588>
 801da22:	4ba2      	ldr	r3, [pc, #648]	@ (801dcac <iNemoEngine_API_Update+0x358c>)
 801da24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801da28:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801da30:	edc7 7a50 	vstr	s15, [r7, #320]	@ 0x140
 801da34:	eddf 7a9e 	vldr	s15, [pc, #632]	@ 801dcb0 <iNemoEngine_API_Update+0x3590>
 801da38:	4b9e      	ldr	r3, [pc, #632]	@ (801dcb4 <iNemoEngine_API_Update+0x3594>)
 801da3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801da3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da42:	4b9d      	ldr	r3, [pc, #628]	@ (801dcb8 <iNemoEngine_API_Update+0x3598>)
 801da44:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0
 801da48:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 801dcbc <iNemoEngine_API_Update+0x359c>
 801da4c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801da50:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da54:	4b9a      	ldr	r3, [pc, #616]	@ (801dcc0 <iNemoEngine_API_Update+0x35a0>)
 801da56:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148
 801da5a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801da5e:	eddf 7a99 	vldr	s15, [pc, #612]	@ 801dcc4 <iNemoEngine_API_Update+0x35a4>
 801da62:	4b99      	ldr	r3, [pc, #612]	@ (801dcc8 <iNemoEngine_API_Update+0x35a8>)
 801da64:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 801da68:	4b98      	ldr	r3, [pc, #608]	@ (801dccc <iNemoEngine_API_Update+0x35ac>)
 801da6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801da6e:	ee66 5a25 	vmul.f32	s11, s12, s11
 801da72:	4b97      	ldr	r3, [pc, #604]	@ (801dcd0 <iNemoEngine_API_Update+0x35b0>)
 801da74:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 801da78:	ee26 5a05 	vmul.f32	s10, s12, s10
 801da7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 801da80:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 801da84:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 801da88:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801da8c:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801da90:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801da94:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801da98:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801da9c:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 801daa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801daa4:	f8c7 512c 	str.w	r5, [r7, #300]	@ 0x12c
 801daa8:	f8c7 50cc 	str.w	r5, [r7, #204]	@ 0xcc
 801daac:	f8c7 5134 	str.w	r5, [r7, #308]	@ 0x134
 801dab0:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
 801dab4:	eddf 6a87 	vldr	s13, [pc, #540]	@ 801dcd4 <iNemoEngine_API_Update+0x35b4>
 801dab8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 801dcd8 <iNemoEngine_API_Update+0x35b8>
 801dabc:	eddf 7a87 	vldr	s15, [pc, #540]	@ 801dcdc <iNemoEngine_API_Update+0x35bc>
 801dac0:	eddf 4a87 	vldr	s9, [pc, #540]	@ 801dce0 <iNemoEngine_API_Update+0x35c0>
 801dac4:	edc7 5a32 	vstr	s11, [r7, #200]	@ 0xc8
 801dac8:	edc7 5a4c 	vstr	s11, [r7, #304]	@ 0x130
 801dacc:	ed87 5a36 	vstr	s10, [r7, #216]	@ 0xd8
 801dad0:	ed87 5a54 	vstr	s10, [r7, #336]	@ 0x150
 801dad4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 801dad8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801dadc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801dae0:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 801dae4:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 801dae8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801daec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801daf0:	ee66 6a26 	vmul.f32	s13, s12, s13
 801daf4:	ee26 7a07 	vmul.f32	s14, s12, s14
 801daf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 801dafc:	ee66 2a23 	vmul.f32	s5, s12, s7
 801db00:	ee26 3a02 	vmul.f32	s6, s12, s4
 801db04:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801db08:	ee66 4a24 	vmul.f32	s9, s12, s9
 801db0c:	4b75      	ldr	r3, [pc, #468]	@ (801dce4 <iNemoEngine_API_Update+0x35c4>)
 801db0e:	4a76      	ldr	r2, [pc, #472]	@ (801dce8 <iNemoEngine_API_Update+0x35c8>)
 801db10:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 801db14:	ee66 1a04 	vmul.f32	s3, s12, s8
 801db18:	4b74      	ldr	r3, [pc, #464]	@ (801dcec <iNemoEngine_API_Update+0x35cc>)
 801db1a:	f8df e1ec 	ldr.w	lr, [pc, #492]	@ 801dd08 <iNemoEngine_API_Update+0x35e8>
 801db1e:	f8df c1ec 	ldr.w	ip, [pc, #492]	@ 801dd0c <iNemoEngine_API_Update+0x35ec>
 801db22:	4e73      	ldr	r6, [pc, #460]	@ (801dcf0 <iNemoEngine_API_Update+0x35d0>)
 801db24:	4d73      	ldr	r5, [pc, #460]	@ (801dcf4 <iNemoEngine_API_Update+0x35d4>)
 801db26:	4874      	ldr	r0, [pc, #464]	@ (801dcf8 <iNemoEngine_API_Update+0x35d8>)
 801db28:	4974      	ldr	r1, [pc, #464]	@ (801dcfc <iNemoEngine_API_Update+0x35dc>)
 801db2a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801db2e:	edc7 3a3d 	vstr	s7, [r7, #244]	@ 0xf4
 801db32:	f8c7 e15c 	str.w	lr, [r7, #348]	@ 0x15c
 801db36:	f8c7 c0fc 	str.w	ip, [r7, #252]	@ 0xfc
 801db3a:	f8c7 6164 	str.w	r6, [r7, #356]	@ 0x164
 801db3e:	f8c7 516c 	str.w	r5, [r7, #364]	@ 0x16c
 801db42:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
 801db46:	edc7 1a46 	vstr	s3, [r7, #280]	@ 0x118
 801db4a:	edc7 4a60 	vstr	s9, [r7, #384]	@ 0x180
 801db4e:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 801db52:	ed87 2a66 	vstr	s4, [r7, #408]	@ 0x198
 801db56:	ed87 4a65 	vstr	s8, [r7, #404]	@ 0x194
 801db5a:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801db5e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801db62:	edc7 6a3c 	vstr	s13, [r7, #240]	@ 0xf0
 801db66:	edc7 6a56 	vstr	s13, [r7, #344]	@ 0x158
 801db6a:	ed87 7a3e 	vstr	s14, [r7, #248]	@ 0xf8
 801db6e:	ed87 7a58 	vstr	s14, [r7, #352]	@ 0x160
 801db72:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
 801db76:	edc7 7a5a 	vstr	s15, [r7, #360]	@ 0x168
 801db7a:	edc7 2a42 	vstr	s5, [r7, #264]	@ 0x108
 801db7e:	edc7 2a5c 	vstr	s5, [r7, #368]	@ 0x170
 801db82:	ed87 3a44 	vstr	s6, [r7, #272]	@ 0x110
 801db86:	ed87 3a5e 	vstr	s6, [r7, #376]	@ 0x178
 801db8a:	ed87 6a48 	vstr	s12, [r7, #288]	@ 0x120
 801db8e:	ed87 6a62 	vstr	s12, [r7, #392]	@ 0x188
 801db92:	edc7 5a64 	vstr	s11, [r7, #400]	@ 0x190
 801db96:	787b      	ldrb	r3, [r7, #1]
 801db98:	2b00      	cmp	r3, #0
 801db9a:	f000 81a7 	beq.w	801deec <iNemoEngine_API_Update+0x37cc>
 801db9e:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 801dba2:	932b      	str	r3, [sp, #172]	@ 0xac
 801dba4:	f607 1344 	addw	r3, r7, #2372	@ 0x944
 801dba8:	932c      	str	r3, [sp, #176]	@ 0xb0
 801dbaa:	f607 1348 	addw	r3, r7, #2376	@ 0x948
 801dbae:	932d      	str	r3, [sp, #180]	@ 0xb4
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	707b      	strb	r3, [r7, #1]
 801dbb4:	f7fd b8ad 	b.w	801ad12 <iNemoEngine_API_Update+0x5f2>
 801dbb8:	ee1a 3a90 	vmov	r3, s21
 801dbbc:	f10a 0a0c 	add.w	sl, sl, #12
 801dbc0:	f84a 3c04 	str.w	r3, [sl, #-4]
 801dbc4:	45ca      	cmp	sl, r9
 801dbc6:	f47f aeb1 	bne.w	801d92c <iNemoEngine_API_Update+0x320c>
 801dbca:	f897 a791 	ldrb.w	sl, [r7, #1937]	@ 0x791
 801dbce:	f1ba 0f00 	cmp.w	sl, #0
 801dbd2:	f000 87f3 	beq.w	801ebbc <iNemoEngine_API_Update+0x449c>
 801dbd6:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801dd00 <iNemoEngine_API_Update+0x35e0>
 801dbda:	ed9d 7a10 	vldr	s14, [sp, #64]	@ 0x40
 801dbde:	ee6f daa7 	vmul.f32	s27, s31, s15
 801dbe2:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 801dbe6:	ee67 aa27 	vmul.f32	s21, s14, s15
 801dbea:	ee2f ea27 	vmul.f32	s28, s30, s15
 801dbee:	ee7d 7ae9 	vsub.f32	s15, s27, s19
 801dbf2:	eef0 caed 	vabs.f32	s25, s27
 801dbf6:	ee17 0a90 	vmov	r0, s15
 801dbfa:	f7e2 fccd 	bl	8000598 <__aeabi_f2d>
 801dbfe:	ee7d 7aa9 	vadd.f32	s15, s27, s19
 801dc02:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801dc06:	ee17 0a90 	vmov	r0, s15
 801dc0a:	f7e2 fcc5 	bl	8000598 <__aeabi_f2d>
 801dc0e:	ee7e 7a69 	vsub.f32	s15, s28, s19
 801dc12:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801dc16:	ee17 0a90 	vmov	r0, s15
 801dc1a:	f7e2 fcbd 	bl	8000598 <__aeabi_f2d>
 801dc1e:	ee7e 7a29 	vadd.f32	s15, s28, s19
 801dc22:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 801dc26:	ee17 0a90 	vmov	r0, s15
 801dc2a:	f7e2 fcb5 	bl	8000598 <__aeabi_f2d>
 801dc2e:	ee7a 7ae9 	vsub.f32	s15, s21, s19
 801dc32:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
 801dc36:	ee17 0a90 	vmov	r0, s15
 801dc3a:	f7e2 fcad 	bl	8000598 <__aeabi_f2d>
 801dc3e:	ee7a 7aa9 	vadd.f32	s15, s21, s19
 801dc42:	4602      	mov	r2, r0
 801dc44:	460b      	mov	r3, r1
 801dc46:	ee17 0a90 	vmov	r0, s15
 801dc4a:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 801dc4e:	f7e2 fca3 	bl	8000598 <__aeabi_f2d>
 801dc52:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 801dc56:	eef0 7aea 	vabs.f32	s15, s21
 801dc5a:	220c      	movs	r2, #12
 801dc5c:	fb12 320a 	smlabb	r2, r2, sl, r3
 801dc60:	edcd 7a03 	vstr	s15, [sp, #12]
 801dc64:	eef0 7a4d 	vmov.f32	s15, s26
 801dc68:	e9cd 011a 	strd	r0, r1, [sp, #104]	@ 0x68
 801dc6c:	eeb0 da6e 	vmov.f32	s26, s29
 801dc70:	eddf 9a24 	vldr	s19, [pc, #144]	@ 801dd04 <iNemoEngine_API_Update+0x35e4>
 801dc74:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc76:	eef0 ea6b 	vmov.f32	s29, s23
 801dc7a:	eeb0 bace 	vabs.f32	s22, s28
 801dc7e:	eef0 ba49 	vmov.f32	s23, s18
 801dc82:	469a      	mov	sl, r3
 801dc84:	4691      	mov	r9, r2
 801dc86:	eeb0 9a67 	vmov.f32	s18, s15
 801dc8a:	e0ac      	b.n	801dde6 <iNemoEngine_API_Update+0x36c6>
 801dc8c:	bf666666 	.word	0xbf666666
 801dc90:	3d072b02 	.word	0x3d072b02
 801dc94:	3ca3d70a 	.word	0x3ca3d70a
 801dc98:	3d4ccccd 	.word	0x3d4ccccd
 801dc9c:	3ecccccd 	.word	0x3ecccccd
 801dca0:	3f4ccccd 	.word	0x3f4ccccd
 801dca4:	3cb43958 	.word	0x3cb43958
 801dca8:	3cf5c28f 	.word	0x3cf5c28f
 801dcac:	3eb33333 	.word	0x3eb33333
 801dcb0:	3d75c28f 	.word	0x3d75c28f
 801dcb4:	3ee66666 	.word	0x3ee66666
 801dcb8:	3f866666 	.word	0x3f866666
 801dcbc:	3d23d70a 	.word	0x3d23d70a
 801dcc0:	3f8ccccd 	.word	0x3f8ccccd
 801dcc4:	3d8f5c29 	.word	0x3d8f5c29
 801dcc8:	3f933333 	.word	0x3f933333
 801dccc:	3ebd70a4 	.word	0x3ebd70a4
 801dcd0:	40a00000 	.word	0x40a00000
 801dcd4:	3dcccccd 	.word	0x3dcccccd
 801dcd8:	3e4ccccd 	.word	0x3e4ccccd
 801dcdc:	3e99999a 	.word	0x3e99999a
 801dce0:	3f666666 	.word	0x3f666666
 801dce4:	40200000 	.word	0x40200000
 801dce8:	3f99999a 	.word	0x3f99999a
 801dcec:	40400000 	.word	0x40400000
 801dcf0:	3fb9999a 	.word	0x3fb9999a
 801dcf4:	3fcccccd 	.word	0x3fcccccd
 801dcf8:	3fe66666 	.word	0x3fe66666
 801dcfc:	3f333333 	.word	0x3f333333
 801dd00:	446a0ccd 	.word	0x446a0ccd
 801dd04:	4b000000 	.word	0x4b000000
 801dd08:	3fa66666 	.word	0x3fa66666
 801dd0c:	3f19999a 	.word	0x3f19999a
 801dd10:	3cfaad3b 	.word	0x3cfaad3b
 801dd14:	bcfaad3b 	.word	0xbcfaad3b
 801dd18:	80000000 	.word	0x80000000
 801dd1c:	eddd 7a1d 	vldr	s15, [sp, #116]	@ 0x74
 801dd20:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 801dd10 <iNemoEngine_API_Update+0x35f0>
 801dd24:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd2c:	f280 80b1 	bge.w	801de92 <iNemoEngine_API_Update+0x3772>
 801dd30:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 801dd14 <iNemoEngine_API_Update+0x35f4>
 801dd34:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd3c:	f300 80c3 	bgt.w	801dec6 <iNemoEngine_API_Update+0x37a6>
 801dd40:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801dd44:	f004 fa40 	bl	80221c8 <ceil>
 801dd48:	ec51 0b10 	vmov	r0, r1, d0
 801dd4c:	f7e2 ff54 	bl	8000bf8 <__aeabi_d2f>
 801dd50:	4603      	mov	r3, r0
 801dd52:	eeb4 bae9 	vcmpe.f32	s22, s19
 801dd56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd5a:	f8ca 3000 	str.w	r3, [sl]
 801dd5e:	d550      	bpl.n	801de02 <iNemoEngine_API_Update+0x36e2>
 801dd60:	eddd 7a1e 	vldr	s15, [sp, #120]	@ 0x78
 801dd64:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 801dd10 <iNemoEngine_API_Update+0x35f0>
 801dd68:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd70:	f280 8085 	bge.w	801de7e <iNemoEngine_API_Update+0x375e>
 801dd74:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 801dd14 <iNemoEngine_API_Update+0x35f4>
 801dd78:	eef4 7ac7 	vcmpe.f32	s15, s14
 801dd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd80:	f300 809e 	bgt.w	801dec0 <iNemoEngine_API_Update+0x37a0>
 801dd84:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801dd88:	f004 fa1e 	bl	80221c8 <ceil>
 801dd8c:	ec51 0b10 	vmov	r0, r1, d0
 801dd90:	f7e2 ff32 	bl	8000bf8 <__aeabi_d2f>
 801dd94:	4603      	mov	r3, r0
 801dd96:	eddd 7a03 	vldr	s15, [sp, #12]
 801dd9a:	f8ca 3004 	str.w	r3, [sl, #4]
 801dd9e:	eef4 7ae9 	vcmpe.f32	s15, s19
 801dda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dda6:	d556      	bpl.n	801de56 <iNemoEngine_API_Update+0x3736>
 801dda8:	eddd 7a08 	vldr	s15, [sp, #32]
 801ddac:	ed1f 7a28 	vldr	s14, [pc, #-160]	@ 801dd10 <iNemoEngine_API_Update+0x35f0>
 801ddb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddb8:	da75      	bge.n	801dea6 <iNemoEngine_API_Update+0x3786>
 801ddba:	ed1f 7a2a 	vldr	s14, [pc, #-168]	@ 801dd14 <iNemoEngine_API_Update+0x35f4>
 801ddbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ddc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddc6:	dc78      	bgt.n	801deba <iNemoEngine_API_Update+0x379a>
 801ddc8:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 801ddcc:	f004 f9fc 	bl	80221c8 <ceil>
 801ddd0:	ec51 0b10 	vmov	r0, r1, d0
 801ddd4:	f7e2 ff10 	bl	8000bf8 <__aeabi_d2f>
 801ddd8:	4603      	mov	r3, r0
 801ddda:	f8ca 3008 	str.w	r3, [sl, #8]
 801ddde:	f10a 0a0c 	add.w	sl, sl, #12
 801dde2:	45ca      	cmp	sl, r9
 801dde4:	d03f      	beq.n	801de66 <iNemoEngine_API_Update+0x3746>
 801dde6:	eef4 cae9 	vcmpe.f32	s25, s19
 801ddea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddee:	d495      	bmi.n	801dd1c <iNemoEngine_API_Update+0x35fc>
 801ddf0:	ee1d 3a90 	vmov	r3, s27
 801ddf4:	eeb4 bae9 	vcmpe.f32	s22, s19
 801ddf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddfc:	f8ca 3000 	str.w	r3, [sl]
 801de00:	d4ae      	bmi.n	801dd60 <iNemoEngine_API_Update+0x3640>
 801de02:	ee1e 3a10 	vmov	r3, s28
 801de06:	e7c6      	b.n	801dd96 <iNemoEngine_API_Update+0x3676>
 801de08:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 801de0c:	f004 fa58 	bl	80222c0 <floor>
 801de10:	ec51 0b10 	vmov	r0, r1, d0
 801de14:	f7e2 fef0 	bl	8000bf8 <__aeabi_d2f>
 801de18:	4603      	mov	r3, r0
 801de1a:	e55d      	b.n	801d8d8 <iNemoEngine_API_Update+0x31b8>
 801de1c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801de20:	f004 fa4e 	bl	80222c0 <floor>
 801de24:	ec51 0b10 	vmov	r0, r1, d0
 801de28:	f7e2 fee6 	bl	8000bf8 <__aeabi_d2f>
 801de2c:	4603      	mov	r3, r0
 801de2e:	e533      	b.n	801d898 <iNemoEngine_API_Update+0x3178>
 801de30:	ed9d 0b18 	vldr	d0, [sp, #96]	@ 0x60
 801de34:	f004 fa44 	bl	80222c0 <floor>
 801de38:	ec51 0b10 	vmov	r0, r1, d0
 801de3c:	f7e2 fedc 	bl	8000bf8 <__aeabi_d2f>
 801de40:	4603      	mov	r3, r0
 801de42:	e56c      	b.n	801d91e <iNemoEngine_API_Update+0x31fe>
 801de44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801de48:	e569      	b.n	801d91e <iNemoEngine_API_Update+0x31fe>
 801de4a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801de4e:	e543      	b.n	801d8d8 <iNemoEngine_API_Update+0x31b8>
 801de50:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801de54:	e520      	b.n	801d898 <iNemoEngine_API_Update+0x3178>
 801de56:	ee1a 3a90 	vmov	r3, s21
 801de5a:	f10a 0a0c 	add.w	sl, sl, #12
 801de5e:	f84a 3c04 	str.w	r3, [sl, #-4]
 801de62:	45ca      	cmp	sl, r9
 801de64:	d1bf      	bne.n	801dde6 <iNemoEngine_API_Update+0x36c6>
 801de66:	eef0 7a49 	vmov.f32	s15, s18
 801de6a:	eeb0 9a6b 	vmov.f32	s18, s23
 801de6e:	eef0 ba6e 	vmov.f32	s23, s29
 801de72:	eef0 ea4d 	vmov.f32	s29, s26
 801de76:	eeb0 da67 	vmov.f32	s26, s15
 801de7a:	f7fc bf5e 	b.w	801ad3a <iNemoEngine_API_Update+0x61a>
 801de7e:	ed9d 0b16 	vldr	d0, [sp, #88]	@ 0x58
 801de82:	f004 fa1d 	bl	80222c0 <floor>
 801de86:	ec51 0b10 	vmov	r0, r1, d0
 801de8a:	f7e2 feb5 	bl	8000bf8 <__aeabi_d2f>
 801de8e:	4603      	mov	r3, r0
 801de90:	e781      	b.n	801dd96 <iNemoEngine_API_Update+0x3676>
 801de92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801de96:	f004 fa13 	bl	80222c0 <floor>
 801de9a:	ec51 0b10 	vmov	r0, r1, d0
 801de9e:	f7e2 feab 	bl	8000bf8 <__aeabi_d2f>
 801dea2:	4603      	mov	r3, r0
 801dea4:	e755      	b.n	801dd52 <iNemoEngine_API_Update+0x3632>
 801dea6:	ed9d 0b1a 	vldr	d0, [sp, #104]	@ 0x68
 801deaa:	f004 fa09 	bl	80222c0 <floor>
 801deae:	ec51 0b10 	vmov	r0, r1, d0
 801deb2:	f7e2 fea1 	bl	8000bf8 <__aeabi_d2f>
 801deb6:	4603      	mov	r3, r0
 801deb8:	e78f      	b.n	801ddda <iNemoEngine_API_Update+0x36ba>
 801deba:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801debe:	e78c      	b.n	801ddda <iNemoEngine_API_Update+0x36ba>
 801dec0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801dec4:	e767      	b.n	801dd96 <iNemoEngine_API_Update+0x3676>
 801dec6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801deca:	e742      	b.n	801dd52 <iNemoEngine_API_Update+0x3632>
 801decc:	edd7 ea4b 	vldr	s29, [r7, #300]	@ 0x12c
 801ded0:	ee2a aa2e 	vmul.f32	s20, s20, s29
 801ded4:	f7fd bfd2 	b.w	801be7c <iNemoEngine_API_Update+0x175c>
 801ded8:	edd7 ea63 	vldr	s29, [r7, #396]	@ 0x18c
 801dedc:	ee2a aa2e 	vmul.f32	s20, s20, s29
 801dee0:	f7fd bfcc 	b.w	801be7c <iNemoEngine_API_Update+0x175c>
 801dee4:	ed97 9a49 	vldr	s18, [r7, #292]	@ 0x124
 801dee8:	f7fd be41 	b.w	801bb6e <iNemoEngine_API_Update+0x144e>
 801deec:	f507 6314 	add.w	r3, r7, #2368	@ 0x940
 801def0:	f607 1244 	addw	r2, r7, #2372	@ 0x944
 801def4:	f607 1148 	addw	r1, r7, #2376	@ 0x948
 801def8:	932b      	str	r3, [sp, #172]	@ 0xac
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 801df00:	6813      	ldr	r3, [r2, #0]
 801df02:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801df06:	680b      	ldr	r3, [r1, #0]
 801df08:	922c      	str	r2, [sp, #176]	@ 0xb0
 801df0a:	912d      	str	r1, [sp, #180]	@ 0xb4
 801df0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 801df10:	e64e      	b.n	801dbb0 <iNemoEngine_API_Update+0x3490>
 801df12:	f207 43b4 	addw	r3, r7, #1204	@ 0x4b4
 801df16:	ed93 0a00 	vldr	s0, [r3]
 801df1a:	f507 6097 	add.w	r0, r7, #1208	@ 0x4b8
 801df1e:	f7fa fced 	bl	80188fc <dataDerivative5>
 801df22:	f207 6324 	addw	r3, r7, #1572	@ 0x624
 801df26:	eeb0 3a40 	vmov.f32	s6, s0
 801df2a:	f507 60c5 	add.w	r0, r7, #1576	@ 0x628
 801df2e:	ed93 0a00 	vldr	s0, [r3]
 801df32:	f7fa fce3 	bl	80188fc <dataDerivative5>
 801df36:	f207 7b94 	addw	fp, r7, #1940	@ 0x794
 801df3a:	eef0 2a40 	vmov.f32	s5, s0
 801df3e:	f507 60f3 	add.w	r0, r7, #1944	@ 0x798
 801df42:	ed9b 0a00 	vldr	s0, [fp]
 801df46:	f7fa fcd9 	bl	80188fc <dataDerivative5>
 801df4a:	f9b7 3976 	ldrsh.w	r3, [r7, #2422]	@ 0x976
 801df4e:	ee07 3a90 	vmov	s15, r3
 801df52:	3301      	adds	r3, #1
 801df54:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801df58:	ee07 3a90 	vmov	s15, r3
 801df5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801df60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df64:	ee87 6a27 	vdiv.f32	s12, s14, s15
 801df68:	f607 106c 	addw	r0, r7, #2412	@ 0x96c
 801df6c:	f607 1168 	addw	r1, r7, #2408	@ 0x968
 801df70:	f507 6217 	add.w	r2, r7, #2416	@ 0x970
 801df74:	b21b      	sxth	r3, r3
 801df76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801df7a:	ed90 7a00 	vldr	s14, [r0]
 801df7e:	ed91 5a00 	vldr	s10, [r1]
 801df82:	eef0 7a43 	vmov.f32	s15, s6
 801df86:	eee7 7a25 	vfma.f32	s15, s14, s11
 801df8a:	eeb0 7a62 	vmov.f32	s14, s5
 801df8e:	eea5 7a85 	vfma.f32	s14, s11, s10
 801df92:	ed92 5a00 	vldr	s10, [r2]
 801df96:	eef0 6a40 	vmov.f32	s13, s0
 801df9a:	eee5 6a85 	vfma.f32	s13, s11, s10
 801df9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dfa2:	ee27 7a06 	vmul.f32	s14, s14, s12
 801dfa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801dfaa:	edc0 7a00 	vstr	s15, [r0]
 801dfae:	ed81 7a00 	vstr	s14, [r1]
 801dfb2:	edc2 6a00 	vstr	s13, [r2]
 801dfb6:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 801dfba:	f47c abd8 	bne.w	801a76e <iNemoEngine_API_Update+0x4e>
 801dfbe:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801dfc2:	ee27 7a06 	vmul.f32	s14, s14, s12
 801dfc6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801dfca:	ee67 7a86 	vmul.f32	s15, s15, s12
 801dfce:	2300      	movs	r3, #0
 801dfd0:	ed87 7a07 	vstr	s14, [r7, #28]
 801dfd4:	edc7 6a08 	vstr	s13, [r7, #32]
 801dfd8:	edc7 7a06 	vstr	s15, [r7, #24]
 801dfdc:	6003      	str	r3, [r0, #0]
 801dfde:	600b      	str	r3, [r1, #0]
 801dfe0:	6013      	str	r3, [r2, #0]
 801dfe2:	2300      	movs	r3, #0
 801dfe4:	f8a7 3976 	strh.w	r3, [r7, #2422]	@ 0x976
 801dfe8:	f887 3978 	strb.w	r3, [r7, #2424]	@ 0x978
 801dfec:	f7fc bbbf 	b.w	801a76e <iNemoEngine_API_Update+0x4e>
 801dff0:	ed1f 9ab7 	vldr	s18, [pc, #-732]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801dff4:	f7fd b942 	b.w	801b27c <iNemoEngine_API_Update+0xb5c>
 801dff8:	ed1f 8ab9 	vldr	s16, [pc, #-740]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801dffc:	f7fd b994 	b.w	801b328 <iNemoEngine_API_Update+0xc08>
 801e000:	9b03      	ldr	r3, [sp, #12]
 801e002:	9309      	str	r3, [sp, #36]	@ 0x24
 801e004:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801e008:	939f      	str	r3, [sp, #636]	@ 0x27c
 801e00a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 801e00e:	93a0      	str	r3, [sp, #640]	@ 0x280
 801e010:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801e014:	93a1      	str	r3, [sp, #644]	@ 0x284
 801e016:	2300      	movs	r3, #0
 801e018:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 801e01c:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801e020:	f7fe bc68 	b.w	801c8f4 <iNemoEngine_API_Update+0x21d4>
 801e024:	ed5f eac4 	vldr	s29, [pc, #-784]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e028:	f7fd b953 	b.w	801b2d2 <iNemoEngine_API_Update+0xbb2>
 801e02c:	ed1f 9ac6 	vldr	s18, [pc, #-792]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e030:	f7fd b8bb 	b.w	801b1aa <iNemoEngine_API_Update+0xa8a>
 801e034:	ed5f eac8 	vldr	s29, [pc, #-800]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e038:	f7fd b88c 	b.w	801b154 <iNemoEngine_API_Update+0xa34>
 801e03c:	ed1f 8aca 	vldr	s16, [pc, #-808]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e040:	f7fd b85d 	b.w	801b0fe <iNemoEngine_API_Update+0x9de>
 801e044:	ed5f eacc 	vldr	s29, [pc, #-816]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e048:	f7fc bff0 	b.w	801b02c <iNemoEngine_API_Update+0x90c>
 801e04c:	ed1f 8ace 	vldr	s16, [pc, #-824]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e050:	f7fc bfc1 	b.w	801afd6 <iNemoEngine_API_Update+0x8b6>
 801e054:	ed1f 9ad0 	vldr	s18, [pc, #-832]	@ 801dd18 <iNemoEngine_API_Update+0x35f8>
 801e058:	f7fc bf92 	b.w	801af80 <iNemoEngine_API_Update+0x860>
 801e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e060:	f280 836c 	bge.w	801e73c <iNemoEngine_API_Update+0x401c>
 801e064:	ed97 3a31 	vldr	s6, [r7, #196]	@ 0xc4
 801e068:	edd7 7a33 	vldr	s15, [r7, #204]	@ 0xcc
 801e06c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 801e070:	ee77 7ac3 	vsub.f32	s15, s15, s6
 801e074:	ee78 3a63 	vsub.f32	s7, s16, s7
 801e078:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801e07c:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 801e080:	ee39 9a03 	vadd.f32	s18, s18, s6
 801e084:	f7ff b82c 	b.w	801d0e0 <iNemoEngine_API_Update+0x29c0>
 801e088:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 801e08c:	3301      	adds	r3, #1
 801e08e:	b29b      	uxth	r3, r3
 801e090:	2a00      	cmp	r2, #0
 801e092:	f040 85cf 	bne.w	801ec34 <iNemoEngine_API_Update+0x4514>
 801e096:	eddf 7ae6 	vldr	s15, [pc, #920]	@ 801e430 <iNemoEngine_API_Update+0x3d10>
 801e09a:	eddf 6ae6 	vldr	s13, [pc, #920]	@ 801e434 <iNemoEngine_API_Update+0x3d14>
 801e09e:	2b31      	cmp	r3, #49	@ 0x31
 801e0a0:	bf98      	it	ls
 801e0a2:	eef0 7a66 	vmovls.f32	s15, s13
 801e0a6:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 801e0aa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801e0ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801e0b2:	f5b3 0f8c 	cmp.w	r3, #4587520	@ 0x460000
 801e0b6:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801e0ba:	f000 85b1 	beq.w	801ec20 <iNemoEngine_API_Update+0x4500>
 801e0be:	f5b3 0fc8 	cmp.w	r3, #6553600	@ 0x640000
 801e0c2:	f47e adc9 	bne.w	801cc58 <iNemoEngine_API_Update+0x2538>
 801e0c6:	2301      	movs	r3, #1
 801e0c8:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
 801e0cc:	f507 63c3 	add.w	r3, r7, #1560	@ 0x618
 801e0d0:	edd3 5a00 	vldr	s11, [r3]
 801e0d4:	f507 63f1 	add.w	r3, r7, #1928	@ 0x788
 801e0d8:	ed93 7a00 	vldr	s14, [r3]
 801e0dc:	f207 6314 	addw	r3, r7, #1556	@ 0x614
 801e0e0:	ed93 5a00 	vldr	s10, [r3]
 801e0e4:	ee65 4aa5 	vmul.f32	s9, s11, s11
 801e0e8:	f207 7384 	addw	r3, r7, #1924	@ 0x784
 801e0ec:	eee5 4a05 	vfma.f32	s9, s10, s10
 801e0f0:	a84d      	add	r0, sp, #308	@ 0x134
 801e0f2:	462a      	mov	r2, r5
 801e0f4:	edd3 6a00 	vldr	s13, [r3]
 801e0f8:	f207 631c 	addw	r3, r7, #1564	@ 0x61c
 801e0fc:	edd3 7a00 	vldr	s15, [r3]
 801e100:	eee7 4aa7 	vfma.f32	s9, s15, s15
 801e104:	f207 738c 	addw	r3, r7, #1932	@ 0x78c
 801e108:	a947      	add	r1, sp, #284	@ 0x11c
 801e10a:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 801e10e:	eef1 3ae4 	vsqrt.f32	s7, s9
 801e112:	462e      	mov	r6, r5
 801e114:	4654      	mov	r4, sl
 801e116:	ee27 6a07 	vmul.f32	s12, s14, s14
 801e11a:	eec4 4a23 	vdiv.f32	s9, s8, s7
 801e11e:	eea6 6aa6 	vfma.f32	s12, s13, s13
 801e122:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801e126:	ee65 5aa4 	vmul.f32	s11, s11, s9
 801e12a:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801e12e:	edd3 7a00 	vldr	s15, [r3]
 801e132:	edcd 5a48 	vstr	s11, [sp, #288]	@ 0x120
 801e136:	eea7 6aa7 	vfma.f32	s12, s15, s15
 801e13a:	ee25 5a24 	vmul.f32	s10, s10, s9
 801e13e:	eef1 5ac6 	vsqrt.f32	s11, s12
 801e142:	ed8d 5a47 	vstr	s10, [sp, #284]	@ 0x11c
 801e146:	ee84 6a25 	vdiv.f32	s12, s8, s11
 801e14a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801e14e:	ee67 7a86 	vmul.f32	s15, s15, s12
 801e152:	ee66 6a86 	vmul.f32	s13, s13, s12
 801e156:	ed8d 7a4e 	vstr	s14, [sp, #312]	@ 0x138
 801e15a:	edcd 7a4f 	vstr	s15, [sp, #316]	@ 0x13c
 801e15e:	edcd 6a4d 	vstr	s13, [sp, #308]	@ 0x134
 801e162:	f7fa fcb1 	bl	8018ac8 <getRotationMatrix>
 801e166:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e168:	46de      	mov	lr, fp
 801e16a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e16e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e170:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801e174:	6836      	ldr	r6, [r6, #0]
 801e176:	f8ce 6000 	str.w	r6, [lr]
 801e17a:	46dc      	mov	ip, fp
 801e17c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e182:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801e188:	ed9b 7a00 	vldr	s14, [fp]
 801e18c:	eddb 7a01 	vldr	s15, [fp, #4]
 801e190:	6026      	str	r6, [r4, #0]
 801e192:	eeb0 7ac7 	vabs.f32	s14, s14
 801e196:	eef0 7ae7 	vabs.f32	s15, s15
 801e19a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1a2:	f100 8574 	bmi.w	801ec8e <iNemoEngine_API_Update+0x456e>
 801e1a6:	2304      	movs	r3, #4
 801e1a8:	2000      	movs	r0, #0
 801e1aa:	eef0 7a47 	vmov.f32	s15, s14
 801e1ae:	4699      	mov	r9, r3
 801e1b0:	2103      	movs	r1, #3
 801e1b2:	2606      	movs	r6, #6
 801e1b4:	f04f 0e07 	mov.w	lr, #7
 801e1b8:	461a      	mov	r2, r3
 801e1ba:	f04f 0c01 	mov.w	ip, #1
 801e1be:	9004      	str	r0, [sp, #16]
 801e1c0:	ed9b 7a02 	vldr	s14, [fp, #8]
 801e1c4:	eeb0 7ac7 	vabs.f32	s14, s14
 801e1c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e1d0:	f300 854d 	bgt.w	801ec6e <iNemoEngine_API_Update+0x454e>
 801e1d4:	2305      	movs	r3, #5
 801e1d6:	2408      	movs	r4, #8
 801e1d8:	e9cd 3405 	strd	r3, r4, [sp, #20]
 801e1dc:	2302      	movs	r3, #2
 801e1de:	464c      	mov	r4, r9
 801e1e0:	445c      	add	r4, fp
 801e1e2:	4458      	add	r0, fp
 801e1e4:	edd4 6a00 	vldr	s13, [r4]
 801e1e8:	ed90 7a00 	vldr	s14, [r0]
 801e1ec:	9804      	ldr	r0, [sp, #16]
 801e1ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e1f2:	eb0a 0b8c 	add.w	fp, sl, ip, lsl #2
 801e1f6:	eb0a 0483 	add.w	r4, sl, r3, lsl #2
 801e1fa:	eb0a 0980 	add.w	r9, sl, r0, lsl #2
 801e1fe:	0080      	lsls	r0, r0, #2
 801e200:	9004      	str	r0, [sp, #16]
 801e202:	eb0a 0081 	add.w	r0, sl, r1, lsl #2
 801e206:	0089      	lsls	r1, r1, #2
 801e208:	9107      	str	r1, [sp, #28]
 801e20a:	009b      	lsls	r3, r3, #2
 801e20c:	edcb 7a00 	vstr	s15, [fp]
 801e210:	ed94 7a00 	vldr	s14, [r4]
 801e214:	edd9 7a00 	vldr	s15, [r9]
 801e218:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801e21c:	ea4f 098e 	mov.w	r9, lr, lsl #2
 801e220:	edc4 6a00 	vstr	s13, [r4]
 801e224:	eb0a 0482 	add.w	r4, sl, r2, lsl #2
 801e228:	ed9b 6a00 	vldr	s12, [fp]
 801e22c:	ed90 7a00 	vldr	s14, [r0]
 801e230:	edd4 7a00 	vldr	s15, [r4]
 801e234:	eee6 7a47 	vfms.f32	s15, s12, s14
 801e238:	edc4 7a00 	vstr	s15, [r4]
 801e23c:	edd0 7a00 	vldr	s15, [r0]
 801e240:	9805      	ldr	r0, [sp, #20]
 801e242:	eb0a 0180 	add.w	r1, sl, r0, lsl #2
 801e246:	ed91 7a00 	vldr	s14, [r1]
 801e24a:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801e24e:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 801e252:	00b0      	lsls	r0, r6, #2
 801e254:	9005      	str	r0, [sp, #20]
 801e256:	ed81 7a00 	vstr	s14, [r1]
 801e25a:	eb0a 008e 	add.w	r0, sl, lr, lsl #2
 801e25e:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 801e262:	ed91 5a00 	vldr	s10, [r1]
 801e266:	edd0 7a00 	vldr	s15, [r0]
 801e26a:	9e06      	ldr	r6, [sp, #24]
 801e26c:	eee6 7a45 	vfms.f32	s15, s12, s10
 801e270:	eef0 5ac7 	vabs.f32	s11, s14
 801e274:	edc0 7a00 	vstr	s15, [r0]
 801e278:	ed91 6a00 	vldr	s12, [r1]
 801e27c:	eb0a 0186 	add.w	r1, sl, r6, lsl #2
 801e280:	edd1 7a00 	vldr	s15, [r1]
 801e284:	eee6 7ac6 	vfms.f32	s15, s13, s12
 801e288:	00b6      	lsls	r6, r6, #2
 801e28a:	edc1 7a00 	vstr	s15, [r1]
 801e28e:	edd4 6a00 	vldr	s13, [r4]
 801e292:	eeb0 6ae6 	vabs.f32	s12, s13
 801e296:	eef4 5ac6 	vcmpe.f32	s11, s12
 801e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e29e:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801e2a2:	ea4f 0482 	mov.w	r4, r2, lsl #2
 801e2a6:	f300 84cd 	bgt.w	801ec44 <iNemoEngine_API_Update+0x4524>
 801e2aa:	ed90 6a00 	vldr	s12, [r0]
 801e2ae:	9804      	ldr	r0, [sp, #16]
 801e2b0:	eec7 1a26 	vdiv.f32	s3, s14, s13
 801e2b4:	eb0a 020b 	add.w	r2, sl, fp
 801e2b8:	4456      	add	r6, sl
 801e2ba:	4454      	add	r4, sl
 801e2bc:	eb0a 0b09 	add.w	fp, sl, r9
 801e2c0:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 801e2c4:	eee1 7ac6 	vfms.f32	s15, s3, s12
 801e2c8:	edc2 1a00 	vstr	s3, [r2]
 801e2cc:	9a05      	ldr	r2, [sp, #20]
 801e2ce:	edc6 7a00 	vstr	s15, [r6]
 801e2d2:	4452      	add	r2, sl
 801e2d4:	ed92 3a00 	vldr	s6, [r2]
 801e2d8:	9a07      	ldr	r2, [sp, #28]
 801e2da:	ed9b 2a00 	vldr	s4, [fp]
 801e2de:	4452      	add	r2, sl
 801e2e0:	edd2 4a00 	vldr	s9, [r2]
 801e2e4:	9a03      	ldr	r2, [sp, #12]
 801e2e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801e2e8:	eb0a 0201 	add.w	r2, sl, r1
 801e2ec:	ed92 0a00 	vldr	s0, [r2]
 801e2f0:	eb0a 0203 	add.w	r2, sl, r3
 801e2f4:	edd2 2a00 	vldr	s5, [r2]
 801e2f8:	aa72      	add	r2, sp, #456	@ 0x1c8
 801e2fa:	ee80 1aa7 	vdiv.f32	s2, s1, s15
 801e2fe:	4402      	add	r2, r0
 801e300:	edd2 6a00 	vldr	s13, [r2]
 801e304:	edd4 7a00 	vldr	s15, [r4]
 801e308:	aa72      	add	r2, sp, #456	@ 0x1c8
 801e30a:	440a      	add	r2, r1
 801e30c:	eec0 3aa7 	vdiv.f32	s7, s1, s15
 801e310:	edd2 7a00 	vldr	s15, [r2]
 801e314:	aa72      	add	r2, sp, #456	@ 0x1c8
 801e316:	441a      	add	r2, r3
 801e318:	ed92 7a00 	vldr	s14, [r2]
 801e31c:	eee0 7a66 	vfms.f32	s15, s0, s13
 801e320:	aa75      	add	r2, sp, #468	@ 0x1d4
 801e322:	4402      	add	r2, r0
 801e324:	eea2 7ae6 	vfms.f32	s14, s5, s13
 801e328:	eea1 7ae7 	vfms.f32	s14, s3, s15
 801e32c:	ee21 7a07 	vmul.f32	s14, s2, s14
 801e330:	eee2 7a47 	vfms.f32	s15, s4, s14
 801e334:	eee3 6a47 	vfms.f32	s13, s6, s14
 801e338:	ee63 7aa7 	vmul.f32	s15, s7, s15
 801e33c:	ed85 7a02 	vstr	s14, [r5, #8]
 801e340:	eee4 6ae7 	vfms.f32	s13, s9, s15
 801e344:	edc5 7a01 	vstr	s15, [r5, #4]
 801e348:	eeb0 4a66 	vmov.f32	s8, s13
 801e34c:	edd2 6a00 	vldr	s13, [r2]
 801e350:	aa75      	add	r2, sp, #468	@ 0x1d4
 801e352:	440a      	add	r2, r1
 801e354:	ed92 6a00 	vldr	s12, [r2]
 801e358:	aa75      	add	r2, sp, #468	@ 0x1d4
 801e35a:	441a      	add	r2, r3
 801e35c:	edd2 5a00 	vldr	s11, [r2]
 801e360:	aa78      	add	r2, sp, #480	@ 0x1e0
 801e362:	4411      	add	r1, r2
 801e364:	4413      	add	r3, r2
 801e366:	4402      	add	r2, r0
 801e368:	ed92 5a00 	vldr	s10, [r2]
 801e36c:	edd1 7a00 	vldr	s15, [r1]
 801e370:	ed93 7a00 	vldr	s14, [r3]
 801e374:	eea0 6a66 	vfms.f32	s12, s0, s13
 801e378:	eb0a 0300 	add.w	r3, sl, r0
 801e37c:	a95c      	add	r1, sp, #368	@ 0x170
 801e37e:	eee5 7a40 	vfms.f32	s15, s10, s0
 801e382:	4628      	mov	r0, r5
 801e384:	eee2 5ae6 	vfms.f32	s11, s5, s13
 801e388:	eea5 7a62 	vfms.f32	s14, s10, s5
 801e38c:	ed93 0a00 	vldr	s0, [r3]
 801e390:	eee1 5ac6 	vfms.f32	s11, s3, s12
 801e394:	2300      	movs	r3, #0
 801e396:	eea1 7ae7 	vfms.f32	s14, s3, s15
 801e39a:	eec0 2a80 	vdiv.f32	s5, s1, s0
 801e39e:	ee27 7a01 	vmul.f32	s14, s14, s2
 801e3a2:	ee61 5a25 	vmul.f32	s11, s2, s11
 801e3a6:	eee7 7a42 	vfms.f32	s15, s14, s4
 801e3aa:	eea2 6a65 	vfms.f32	s12, s4, s11
 801e3ae:	eee3 6a65 	vfms.f32	s13, s6, s11
 801e3b2:	edc5 5a05 	vstr	s11, [r5, #20]
 801e3b6:	eef0 5a45 	vmov.f32	s11, s10
 801e3ba:	eee7 5a43 	vfms.f32	s11, s14, s6
 801e3be:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801e3c2:	ee23 6a86 	vmul.f32	s12, s7, s12
 801e3c6:	eee7 5ae4 	vfms.f32	s11, s15, s9
 801e3ca:	eee4 6ac6 	vfms.f32	s13, s9, s12
 801e3ce:	ee22 4a84 	vmul.f32	s8, s5, s8
 801e3d2:	ee62 6aa6 	vmul.f32	s13, s5, s13
 801e3d6:	ee62 2aa5 	vmul.f32	s5, s5, s11
 801e3da:	edc5 6a03 	vstr	s13, [r5, #12]
 801e3de:	ed85 7a08 	vstr	s14, [r5, #32]
 801e3e2:	edc5 7a07 	vstr	s15, [r5, #28]
 801e3e6:	ed85 4a00 	vstr	s8, [r5]
 801e3ea:	ed85 6a04 	vstr	s12, [r5, #16]
 801e3ee:	edc5 2a06 	vstr	s5, [r5, #24]
 801e3f2:	f7fa fac9 	bl	8018988 <b_dcm2q>
 801e3f6:	ed9d 7a5d 	vldr	s14, [sp, #372]	@ 0x174
 801e3fa:	eddd 7a5e 	vldr	s15, [sp, #376]	@ 0x178
 801e3fe:	eddd 6a5c 	vldr	s13, [sp, #368]	@ 0x170
 801e402:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 801e406:	ee37 7a07 	vadd.f32	s14, s14, s14
 801e40a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801e40e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801e412:	edcd 6a47 	vstr	s13, [sp, #284]	@ 0x11c
 801e416:	ed8d 7a48 	vstr	s14, [sp, #288]	@ 0x120
 801e41a:	edcd 7a49 	vstr	s15, [sp, #292]	@ 0x124
 801e41e:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801e422:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801e426:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801e42a:	f7fe ba63 	b.w	801c8f4 <iNemoEngine_API_Update+0x21d4>
 801e42e:	bf00      	nop
 801e430:	3e4cccce 	.word	0x3e4cccce
 801e434:	3eaaaaab 	.word	0x3eaaaaab
 801e438:	a958      	add	r1, sp, #352	@ 0x160
 801e43a:	a872      	add	r0, sp, #456	@ 0x1c8
 801e43c:	edcd 5a18 	vstr	s11, [sp, #96]	@ 0x60
 801e440:	ed8d 0a08 	vstr	s0, [sp, #32]
 801e444:	edcd 6a07 	vstr	s13, [sp, #28]
 801e448:	ed8d 7a06 	vstr	s14, [sp, #24]
 801e44c:	f7fa fa9c 	bl	8018988 <b_dcm2q>
 801e450:	eddd 7a22 	vldr	s15, [sp, #136]	@ 0x88
 801e454:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801e458:	edc7 7a72 	vstr	s15, [r7, #456]	@ 0x1c8
 801e45c:	edc7 9a73 	vstr	s19, [r7, #460]	@ 0x1cc
 801e460:	4631      	mov	r1, r6
 801e462:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801e466:	f507 70ea 	add.w	r0, r7, #468	@ 0x1d4
 801e46a:	f006 fcb6 	bl	8024dda <memset>
 801e46e:	4ba0      	ldr	r3, [pc, #640]	@ (801e6f0 <iNemoEngine_API_Update+0x3fd0>)
 801e470:	703e      	strb	r6, [r7, #0]
 801e472:	eef0 7a69 	vmov.f32	s15, s19
 801e476:	ed9d ba58 	vldr	s22, [sp, #352]	@ 0x160
 801e47a:	eddd aa59 	vldr	s21, [sp, #356]	@ 0x164
 801e47e:	eddd 9a5a 	vldr	s19, [sp, #360]	@ 0x168
 801e482:	eddd ca5b 	vldr	s25, [sp, #364]	@ 0x16c
 801e486:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801e48a:	eddd 5a18 	vldr	s11, [sp, #96]	@ 0x60
 801e48e:	ed9d 0a08 	vldr	s0, [sp, #32]
 801e492:	eddd 6a07 	vldr	s13, [sp, #28]
 801e496:	ed9d 7a06 	vldr	s14, [sp, #24]
 801e49a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 801e49e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 801e4a2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 801e4a6:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801e4aa:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801e4ae:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801e4b2:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801e4b6:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801e4ba:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 801e4be:	2601      	movs	r6, #1
 801e4c0:	f7fd bd29 	b.w	801bf16 <iNemoEngine_API_Update+0x17f6>
 801e4c4:	eddf 7a94 	vldr	s15, [pc, #592]	@ 801e718 <iNemoEngine_API_Update+0x3ff8>
 801e4c8:	eeb4 eae7 	vcmpe.f32	s28, s15
 801e4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4d0:	f53d aeb2 	bmi.w	801c238 <iNemoEngine_API_Update+0x1b18>
 801e4d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	f47d aeb7 	bne.w	801c24a <iNemoEngine_API_Update+0x1b2a>
 801e4dc:	f7fd beac 	b.w	801c238 <iNemoEngine_API_Update+0x1b18>
 801e4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4e4:	d511      	bpl.n	801e50a <iNemoEngine_API_Update+0x3dea>
 801e4e6:	ed97 3a4d 	vldr	s6, [r7, #308]	@ 0x134
 801e4ea:	edd7 3a4f 	vldr	s7, [r7, #316]	@ 0x13c
 801e4ee:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801e4f2:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e4f6:	ee78 5a65 	vsub.f32	s11, s16, s11
 801e4fa:	ee63 5aa5 	vmul.f32	s11, s7, s11
 801e4fe:	eec5 eaa7 	vdiv.f32	s29, s11, s15
 801e502:	ee7e ea83 	vadd.f32	s29, s29, s6
 801e506:	f7fd bb68 	b.w	801bbda <iNemoEngine_API_Update+0x14ba>
 801e50a:	edd7 5a50 	vldr	s11, [r7, #320]	@ 0x140
 801e50e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e516:	f140 834a 	bpl.w	801ebae <iNemoEngine_API_Update+0x448e>
 801e51a:	ed97 3a4f 	vldr	s6, [r7, #316]	@ 0x13c
 801e51e:	edd7 3a51 	vldr	s7, [r7, #324]	@ 0x144
 801e522:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e526:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e52a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e52e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e532:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801e536:	ee7e ea83 	vadd.f32	s29, s29, s6
 801e53a:	edd7 7a52 	vldr	s15, [r7, #328]	@ 0x148
 801e53e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e546:	f6fd ab68 	blt.w	801bc1a <iNemoEngine_API_Update+0x14fa>
 801e54a:	edd7 5a54 	vldr	s11, [r7, #336]	@ 0x150
 801e54e:	eef4 5ac8 	vcmpe.f32	s11, s16
 801e552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e556:	f340 8295 	ble.w	801ea84 <iNemoEngine_API_Update+0x4364>
 801e55a:	ed97 3a53 	vldr	s6, [r7, #332]	@ 0x14c
 801e55e:	edd7 3a55 	vldr	s7, [r7, #340]	@ 0x154
 801e562:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e566:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e56a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e56e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e572:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801e576:	ee7e ea83 	vadd.f32	s29, s29, s6
 801e57a:	edd7 7a56 	vldr	s15, [r7, #344]	@ 0x158
 801e57e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e586:	f6fd ab68 	blt.w	801bc5a <iNemoEngine_API_Update+0x153a>
 801e58a:	edd7 5a58 	vldr	s11, [r7, #352]	@ 0x160
 801e58e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e596:	f140 8258 	bpl.w	801ea4a <iNemoEngine_API_Update+0x432a>
 801e59a:	ed97 3a57 	vldr	s6, [r7, #348]	@ 0x15c
 801e59e:	edd7 3a59 	vldr	s7, [r7, #356]	@ 0x164
 801e5a2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e5a6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e5aa:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e5ae:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e5b2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801e5b6:	ee7e ea83 	vadd.f32	s29, s29, s6
 801e5ba:	edd7 7a5a 	vldr	s15, [r7, #360]	@ 0x168
 801e5be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5c6:	f6fd ab68 	blt.w	801bc9a <iNemoEngine_API_Update+0x157a>
 801e5ca:	edd7 5a5c 	vldr	s11, [r7, #368]	@ 0x170
 801e5ce:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e5d6:	f140 825f 	bpl.w	801ea98 <iNemoEngine_API_Update+0x4378>
 801e5da:	ed97 3a5b 	vldr	s6, [r7, #364]	@ 0x16c
 801e5de:	edd7 3a5d 	vldr	s7, [r7, #372]	@ 0x174
 801e5e2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e5e6:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e5ea:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e5ee:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e5f2:	eec3 eaa5 	vdiv.f32	s29, s7, s11
 801e5f6:	ee7e ea83 	vadd.f32	s29, s29, s6
 801e5fa:	edd7 7a5e 	vldr	s15, [r7, #376]	@ 0x178
 801e5fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e606:	f6fd ab68 	blt.w	801bcda <iNemoEngine_API_Update+0x15ba>
 801e60a:	edd7 5a60 	vldr	s11, [r7, #384]	@ 0x180
 801e60e:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e616:	f140 82d6 	bpl.w	801ebc6 <iNemoEngine_API_Update+0x44a6>
 801e61a:	edd7 3a5f 	vldr	s7, [r7, #380]	@ 0x17c
 801e61e:	ed97 5a61 	vldr	s10, [r7, #388]	@ 0x184
 801e622:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e626:	ee35 5a63 	vsub.f32	s10, s10, s7
 801e62a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e62e:	ee25 5a27 	vmul.f32	s10, s10, s15
 801e632:	eec5 ea25 	vdiv.f32	s29, s10, s11
 801e636:	ee7e eaa3 	vadd.f32	s29, s29, s7
 801e63a:	f7fd bb65 	b.w	801bd08 <iNemoEngine_API_Update+0x15e8>
 801e63e:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e646:	f57e aef1 	bpl.w	801d42c <iNemoEngine_API_Update+0x2d0c>
 801e64a:	ed9f 4a2a 	vldr	s8, [pc, #168]	@ 801e6f4 <iNemoEngine_API_Update+0x3fd4>
 801e64e:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e656:	da03      	bge.n	801e660 <iNemoEngine_API_Update+0x3f40>
 801e658:	eef7 9a00 	vmov.f32	s19, #112	@ 0x3f800000  1.0
 801e65c:	f7fe bef8 	b.w	801d450 <iNemoEngine_API_Update+0x2d30>
 801e660:	ed9f 4a25 	vldr	s8, [pc, #148]	@ 801e6f8 <iNemoEngine_API_Update+0x3fd8>
 801e664:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e66c:	f57e aef8 	bpl.w	801d460 <iNemoEngine_API_Update+0x2d40>
 801e670:	ed9f 4a20 	vldr	s8, [pc, #128]	@ 801e6f4 <iNemoEngine_API_Update+0x3fd4>
 801e674:	ed9f 3a21 	vldr	s6, [pc, #132]	@ 801e6fc <iNemoEngine_API_Update+0x3fdc>
 801e678:	eddf 9a21 	vldr	s19, [pc, #132]	@ 801e700 <iNemoEngine_API_Update+0x3fe0>
 801e67c:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801e680:	eee4 9a03 	vfma.f32	s19, s8, s6
 801e684:	ed9f 4a1f 	vldr	s8, [pc, #124]	@ 801e704 <iNemoEngine_API_Update+0x3fe4>
 801e688:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e690:	f6fe aef8 	blt.w	801d484 <iNemoEngine_API_Update+0x2d64>
 801e694:	ed9f 4a1c 	vldr	s8, [pc, #112]	@ 801e708 <iNemoEngine_API_Update+0x3fe8>
 801e698:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6a0:	f57e aef8 	bpl.w	801d494 <iNemoEngine_API_Update+0x2d74>
 801e6a4:	ed9f 4a17 	vldr	s8, [pc, #92]	@ 801e704 <iNemoEngine_API_Update+0x3fe4>
 801e6a8:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801e6ac:	eeb1 3a04 	vmov.f32	s6, #20	@ 0x40a00000  5.0
 801e6b0:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 801e6b4:	eee4 9a03 	vfma.f32	s19, s8, s6
 801e6b8:	ed9f 4a14 	vldr	s8, [pc, #80]	@ 801e70c <iNemoEngine_API_Update+0x3fec>
 801e6bc:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6c4:	f6fe aef8 	blt.w	801d4b8 <iNemoEngine_API_Update+0x2d98>
 801e6c8:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 801e6cc:	eef4 7ac4 	vcmpe.f32	s15, s8
 801e6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d4:	f57e aef7 	bpl.w	801d4c6 <iNemoEngine_API_Update+0x2da6>
 801e6d8:	ed9f 4a0c 	vldr	s8, [pc, #48]	@ 801e70c <iNemoEngine_API_Update+0x3fec>
 801e6dc:	ed9f 3a0c 	vldr	s6, [pc, #48]	@ 801e710 <iNemoEngine_API_Update+0x3ff0>
 801e6e0:	ee37 4ac4 	vsub.f32	s8, s15, s8
 801e6e4:	eef2 9a05 	vmov.f32	s19, #37	@ 0x41280000  10.5
 801e6e8:	eee4 9a03 	vfma.f32	s19, s8, s6
 801e6ec:	f7fe bef5 	b.w	801d4da <iNemoEngine_API_Update+0x2dba>
 801e6f0:	40a00000 	.word	0x40a00000
 801e6f4:	3c75c28f 	.word	0x3c75c28f
 801e6f8:	3cf5c28f 	.word	0x3cf5c28f
 801e6fc:	40d5555a 	.word	0x40d5555a
 801e700:	3f866666 	.word	0x3f866666
 801e704:	3d4ccccd 	.word	0x3d4ccccd
 801e708:	3dcccccd 	.word	0x3dcccccd
 801e70c:	3e4ccccd 	.word	0x3e4ccccd
 801e710:	43055555 	.word	0x43055555
 801e714:	43c7ffff 	.word	0x43c7ffff
 801e718:	3ecccccd 	.word	0x3ecccccd
 801e71c:	3e999998 	.word	0x3e999998
 801e720:	3f99999a 	.word	0x3f99999a
 801e724:	42100000 	.word	0x42100000
 801e728:	42c7ffff 	.word	0x42c7ffff
 801e72c:	3d088889 	.word	0x3d088889
 801e730:	3d0d3dcb 	.word	0x3d0d3dcb
 801e734:	3e4cccd0 	.word	0x3e4cccd0
 801e738:	3f8ccccd 	.word	0x3f8ccccd
 801e73c:	edd7 5a36 	vldr	s11, [r7, #216]	@ 0xd8
 801e740:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e748:	f140 8278 	bpl.w	801ec3c <iNemoEngine_API_Update+0x451c>
 801e74c:	ed97 3a35 	vldr	s6, [r7, #212]	@ 0xd4
 801e750:	edd7 3a37 	vldr	s7, [r7, #220]	@ 0xdc
 801e754:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e758:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e75c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e760:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e764:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801e768:	ee39 9a03 	vadd.f32	s18, s18, s6
 801e76c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801e770:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e778:	f6fe acd2 	blt.w	801d120 <iNemoEngine_API_Update+0x2a00>
 801e77c:	edd7 5a3a 	vldr	s11, [r7, #232]	@ 0xe8
 801e780:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e788:	f140 8178 	bpl.w	801ea7c <iNemoEngine_API_Update+0x435c>
 801e78c:	ed97 3a39 	vldr	s6, [r7, #228]	@ 0xe4
 801e790:	edd7 3a3b 	vldr	s7, [r7, #236]	@ 0xec
 801e794:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e798:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e79c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e7a0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e7a4:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801e7a8:	ee39 9a03 	vadd.f32	s18, s18, s6
 801e7ac:	edd7 7a3c 	vldr	s15, [r7, #240]	@ 0xf0
 801e7b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7b8:	f6fe acd2 	blt.w	801d160 <iNemoEngine_API_Update+0x2a40>
 801e7bc:	edd7 5a3e 	vldr	s11, [r7, #248]	@ 0xf8
 801e7c0:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7c8:	f140 8154 	bpl.w	801ea74 <iNemoEngine_API_Update+0x4354>
 801e7cc:	ed97 3a3d 	vldr	s6, [r7, #244]	@ 0xf4
 801e7d0:	edd7 3a3f 	vldr	s7, [r7, #252]	@ 0xfc
 801e7d4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e7d8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e7dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e7e0:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e7e4:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801e7e8:	ee39 9a03 	vadd.f32	s18, s18, s6
 801e7ec:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 801e7f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e7f8:	f6fe acd2 	blt.w	801d1a0 <iNemoEngine_API_Update+0x2a80>
 801e7fc:	edd7 5a42 	vldr	s11, [r7, #264]	@ 0x108
 801e800:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e808:	f140 8130 	bpl.w	801ea6c <iNemoEngine_API_Update+0x434c>
 801e80c:	ed97 3a41 	vldr	s6, [r7, #260]	@ 0x104
 801e810:	edd7 3a43 	vldr	s7, [r7, #268]	@ 0x10c
 801e814:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e818:	ee73 3ac3 	vsub.f32	s7, s7, s6
 801e81c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e820:	ee63 3aa7 	vmul.f32	s7, s7, s15
 801e824:	ee83 9aa5 	vdiv.f32	s18, s7, s11
 801e828:	ee39 9a03 	vadd.f32	s18, s18, s6
 801e82c:	edd7 7a44 	vldr	s15, [r7, #272]	@ 0x110
 801e830:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801e834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e838:	f6fe acd2 	blt.w	801d1e0 <iNemoEngine_API_Update+0x2ac0>
 801e83c:	edd7 5a46 	vldr	s11, [r7, #280]	@ 0x118
 801e840:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801e844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e848:	f140 8109 	bpl.w	801ea5e <iNemoEngine_API_Update+0x433e>
 801e84c:	edd7 3a45 	vldr	s7, [r7, #276]	@ 0x114
 801e850:	ed97 5a47 	vldr	s10, [r7, #284]	@ 0x11c
 801e854:	ee75 5ae7 	vsub.f32	s11, s11, s15
 801e858:	ee35 5a63 	vsub.f32	s10, s10, s7
 801e85c:	ee78 7a67 	vsub.f32	s15, s16, s15
 801e860:	ee65 7a27 	vmul.f32	s15, s10, s15
 801e864:	ee87 9aa5 	vdiv.f32	s18, s15, s11
 801e868:	ee39 9a23 	vadd.f32	s18, s18, s7
 801e86c:	f7fd b97f 	b.w	801bb6e <iNemoEngine_API_Update+0x144e>
 801e870:	eeb0 ba6a 	vmov.f32	s22, s21
 801e874:	f7fc bac7 	b.w	801ae06 <iNemoEngine_API_Update+0x6e6>
 801e878:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801e87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e880:	dd45      	ble.n	801e90e <iNemoEngine_API_Update+0x41ee>
 801e882:	ed5f 7a5c 	vldr	s15, [pc, #-368]	@ 801e714 <iNemoEngine_API_Update+0x3ff4>
 801e886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e88e:	f140 80d7 	bpl.w	801ea40 <iNemoEngine_API_Update+0x4320>
 801e892:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e89e:	f140 80bc 	bpl.w	801ea1a <iNemoEngine_API_Update+0x42fa>
 801e8a2:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 801e8a6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8ae:	da33      	bge.n	801e918 <iNemoEngine_API_Update+0x41f8>
 801e8b0:	ed1f 6a60 	vldr	s12, [pc, #-384]	@ 801e734 <iNemoEngine_API_Update+0x4014>
 801e8b4:	eee6 7a86 	vfma.f32	s15, s13, s12
 801e8b8:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 801e8bc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8c4:	db39      	blt.n	801e93a <iNemoEngine_API_Update+0x421a>
 801e8c6:	ed5f 7a69 	vldr	s15, [pc, #-420]	@ 801e724 <iNemoEngine_API_Update+0x4004>
 801e8ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8d2:	d539      	bpl.n	801e948 <iNemoEngine_API_Update+0x4228>
 801e8d4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801e8d8:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801e8dc:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 801e8e0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801e8e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e8e8:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 801e728 <iNemoEngine_API_Update+0x4008>
 801e8ec:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8f4:	db09      	blt.n	801e90a <iNemoEngine_API_Update+0x41ea>
 801e8f6:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801e8fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801e8fe:	ed1f 6a7a 	vldr	s12, [pc, #-488]	@ 801e718 <iNemoEngine_API_Update+0x3ff8>
 801e902:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801e906:	eee6 7a86 	vfma.f32	s15, s13, s12
 801e90a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801e90e:	2300      	movs	r3, #0
 801e910:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6
 801e914:	f7fe b9a0 	b.w	801cc58 <iNemoEngine_API_Update+0x2538>
 801e918:	eef3 7a00 	vmov.f32	s15, #48	@ 0x41800000  16.0
 801e91c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e924:	d5cf      	bpl.n	801e8c6 <iNemoEngine_API_Update+0x41a6>
 801e926:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801e92a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801e92e:	ed5f 5a85 	vldr	s11, [pc, #-532]	@ 801e71c <iNemoEngine_API_Update+0x3ffc>
 801e932:	ed5f 7a85 	vldr	s15, [pc, #-532]	@ 801e720 <iNemoEngine_API_Update+0x4000>
 801e936:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e93a:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 801e724 <iNemoEngine_API_Update+0x4004>
 801e93e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801e942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e946:	dbcf      	blt.n	801e8e8 <iNemoEngine_API_Update+0x41c8>
 801e948:	ed5f 7a89 	vldr	s15, [pc, #-548]	@ 801e728 <iNemoEngine_API_Update+0x4008>
 801e94c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801e950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e954:	d5cf      	bpl.n	801e8f6 <iNemoEngine_API_Update+0x41d6>
 801e956:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801e95a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801e95e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801e962:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801e966:	eee6 7a86 	vfma.f32	s15, s13, s12
 801e96a:	e7ce      	b.n	801e90a <iNemoEngine_API_Update+0x41ea>
 801e96c:	ed1f 4a91 	vldr	s8, [pc, #-580]	@ 801e72c <iNemoEngine_API_Update+0x400c>
 801e970:	ed5f 5a91 	vldr	s11, [pc, #-580]	@ 801e730 <iNemoEngine_API_Update+0x4010>
 801e974:	ac4d      	add	r4, sp, #308	@ 0x134
 801e976:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e97a:	edd0 7a7c 	vldr	s15, [r0, #496]	@ 0x1f0
 801e97e:	f5a0 73ae 	sub.w	r3, r0, #348	@ 0x15c
 801e982:	3101      	adds	r1, #1
 801e984:	eeb0 7a67 	vmov.f32	s14, s15
 801e988:	461a      	mov	r2, r3
 801e98a:	ed92 6ad6 	vldr	s12, [r2, #856]	@ 0x358
 801e98e:	320c      	adds	r2, #12
 801e990:	4290      	cmp	r0, r2
 801e992:	ee37 7a06 	vadd.f32	s14, s14, s12
 801e996:	d1f8      	bne.n	801e98a <iNemoEngine_API_Update+0x426a>
 801e998:	ee27 7a04 	vmul.f32	s14, s14, s8
 801e99c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e9a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e9a4:	ed93 6ad6 	vldr	s12, [r3, #856]	@ 0x358
 801e9a8:	330c      	adds	r3, #12
 801e9aa:	ee36 6a47 	vsub.f32	s12, s12, s14
 801e9ae:	4298      	cmp	r0, r3
 801e9b0:	eee6 7a06 	vfma.f32	s15, s12, s12
 801e9b4:	d1f6      	bne.n	801e9a4 <iNemoEngine_API_Update+0x4284>
 801e9b6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801e9ba:	2902      	cmp	r1, #2
 801e9bc:	f100 0004 	add.w	r0, r0, #4
 801e9c0:	ece4 7a01 	vstmia	r4!, {s15}
 801e9c4:	d1d9      	bne.n	801e97a <iNemoEngine_API_Update+0x425a>
 801e9c6:	ed9d 6a4d 	vldr	s12, [sp, #308]	@ 0x134
 801e9ca:	eddd 7a4e 	vldr	s15, [sp, #312]	@ 0x138
 801e9ce:	ed9d 7a4f 	vldr	s14, [sp, #316]	@ 0x13c
 801e9d2:	eef1 3ac6 	vsqrt.f32	s7, s12
 801e9d6:	eeb1 4ae7 	vsqrt.f32	s8, s15
 801e9da:	eef1 5ac7 	vsqrt.f32	s11, s14
 801e9de:	ee77 7a86 	vadd.f32	s15, s15, s12
 801e9e2:	eeb3 6a00 	vmov.f32	s12, #48	@ 0x41800000  16.0
 801e9e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e9ea:	edcd 3a4d 	vstr	s7, [sp, #308]	@ 0x134
 801e9ee:	eef4 7ac6 	vcmpe.f32	s15, s12
 801e9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9f6:	ed8d 4a4e 	vstr	s8, [sp, #312]	@ 0x138
 801e9fa:	edcd 5a4f 	vstr	s11, [sp, #316]	@ 0x13c
 801e9fe:	f57e a98e 	bpl.w	801cd1e <iNemoEngine_API_Update+0x25fe>
 801ea02:	2300      	movs	r3, #0
 801ea04:	edcd 4a9f 	vstr	s9, [sp, #636]	@ 0x27c
 801ea08:	ed8d 5aa0 	vstr	s10, [sp, #640]	@ 0x280
 801ea0c:	edcd 6aa1 	vstr	s13, [sp, #644]	@ 0x284
 801ea10:	707b      	strb	r3, [r7, #1]
 801ea12:	9b03      	ldr	r3, [sp, #12]
 801ea14:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea16:	f7fd bf6d 	b.w	801c8f4 <iNemoEngine_API_Update+0x21d4>
 801ea1a:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 801ea1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ea22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea26:	f57f af77 	bpl.w	801e918 <iNemoEngine_API_Update+0x41f8>
 801ea2a:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801ea2e:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801ea32:	ed5f 5ac0 	vldr	s11, [pc, #-768]	@ 801e734 <iNemoEngine_API_Update+0x4014>
 801ea36:	ed5f 7ac0 	vldr	s15, [pc, #-768]	@ 801e738 <iNemoEngine_API_Update+0x4018>
 801ea3a:	eee6 7a25 	vfma.f32	s15, s12, s11
 801ea3e:	e73b      	b.n	801e8b8 <iNemoEngine_API_Update+0x4198>
 801ea40:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
 801ea44:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801ea48:	e761      	b.n	801e90e <iNemoEngine_API_Update+0x41ee>
 801ea4a:	eef0 7a65 	vmov.f32	s15, s11
 801ea4e:	f7fd b90c 	b.w	801bc6a <iNemoEngine_API_Update+0x154a>
 801ea52:	eef0 7a65 	vmov.f32	s15, s11
 801ea56:	e6d1      	b.n	801e7fc <iNemoEngine_API_Update+0x40dc>
 801ea58:	eef0 7a65 	vmov.f32	s15, s11
 801ea5c:	e6ae      	b.n	801e7bc <iNemoEngine_API_Update+0x409c>
 801ea5e:	eef0 7a65 	vmov.f32	s15, s11
 801ea62:	f7fe bbc5 	b.w	801d1f0 <iNemoEngine_API_Update+0x2ad0>
 801ea66:	eef0 7a65 	vmov.f32	s15, s11
 801ea6a:	e687      	b.n	801e77c <iNemoEngine_API_Update+0x405c>
 801ea6c:	eef0 7a65 	vmov.f32	s15, s11
 801ea70:	f7fe bb9e 	b.w	801d1b0 <iNemoEngine_API_Update+0x2a90>
 801ea74:	eef0 7a65 	vmov.f32	s15, s11
 801ea78:	f7fe bb7a 	b.w	801d170 <iNemoEngine_API_Update+0x2a50>
 801ea7c:	eef0 7a65 	vmov.f32	s15, s11
 801ea80:	f7fe bb56 	b.w	801d130 <iNemoEngine_API_Update+0x2a10>
 801ea84:	eef0 7a65 	vmov.f32	s15, s11
 801ea88:	f7fd b8cf 	b.w	801bc2a <iNemoEngine_API_Update+0x150a>
 801ea8c:	eef0 7a65 	vmov.f32	s15, s11
 801ea90:	e59b      	b.n	801e5ca <iNemoEngine_API_Update+0x3eaa>
 801ea92:	eef0 7a65 	vmov.f32	s15, s11
 801ea96:	e5b8      	b.n	801e60a <iNemoEngine_API_Update+0x3eea>
 801ea98:	eef0 7a65 	vmov.f32	s15, s11
 801ea9c:	f7fd b905 	b.w	801bcaa <iNemoEngine_API_Update+0x158a>
 801eaa0:	eef0 aa69 	vmov.f32	s21, s19
 801eaa4:	eeb0 ba69 	vmov.f32	s22, s19
 801eaa8:	f7fc b9ad 	b.w	801ae06 <iNemoEngine_API_Update+0x6e6>
 801eaac:	2a00      	cmp	r2, #0
 801eaae:	f73e a94d 	bgt.w	801cd4c <iNemoEngine_API_Update+0x262c>
 801eab2:	ed9d 5a8d 	vldr	s10, [sp, #564]	@ 0x234
 801eab6:	ed9d 6a8e 	vldr	s12, [sp, #568]	@ 0x238
 801eaba:	eddd 7a8f 	vldr	s15, [sp, #572]	@ 0x23c
 801eabe:	eef1 5a00 	vmov.f32	s11, #16	@ 0x40800000  4.0
 801eac2:	ee25 5a25 	vmul.f32	s10, s10, s11
 801eac6:	ee26 6a25 	vmul.f32	s12, s12, s11
 801eaca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801eace:	ed8d 5a8d 	vstr	s10, [sp, #564]	@ 0x234
 801ead2:	ed8d 6a8e 	vstr	s12, [sp, #568]	@ 0x238
 801ead6:	edcd 7a8f 	vstr	s15, [sp, #572]	@ 0x23c
 801eada:	f7fd bbfa 	b.w	801c2d2 <iNemoEngine_API_Update+0x1bb2>
 801eade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eae0:	f002 02fd 	and.w	r2, r2, #253	@ 0xfd
 801eae4:	2a01      	cmp	r2, #1
 801eae6:	d002      	beq.n	801eaee <iNemoEngine_API_Update+0x43ce>
 801eae8:	2301      	movs	r3, #1
 801eaea:	f7fe b84a 	b.w	801cb82 <iNemoEngine_API_Update+0x2462>
 801eaee:	2b0a      	cmp	r3, #10
 801eaf0:	d01b      	beq.n	801eb2a <iNemoEngine_API_Update+0x440a>
 801eaf2:	eddf 7a6f 	vldr	s15, [pc, #444]	@ 801ecb0 <iNemoEngine_API_Update+0x4590>
 801eaf6:	3301      	adds	r3, #1
 801eaf8:	eef4 9ae7 	vcmpe.f32	s19, s15
 801eafc:	f887 31a0 	strb.w	r3, [r7, #416]	@ 0x1a0
 801eb00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb04:	f04f 0300 	mov.w	r3, #0
 801eb08:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801eb0c:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801eb10:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801eb14:	da32      	bge.n	801eb7c <iNemoEngine_API_Update+0x445c>
 801eb16:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 801eb1a:	2b31      	cmp	r3, #49	@ 0x31
 801eb1c:	f63e a942 	bhi.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801eb20:	3301      	adds	r3, #1
 801eb22:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801eb26:	f7fe b93d 	b.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801eb2a:	f897 31a3 	ldrb.w	r3, [r7, #419]	@ 0x1a3
 801eb2e:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801eb32:	f88d 2118 	strb.w	r2, [sp, #280]	@ 0x118
 801eb36:	3301      	adds	r3, #1
 801eb38:	f887 31a3 	strb.w	r3, [r7, #419]	@ 0x1a3
 801eb3c:	787b      	ldrb	r3, [r7, #1]
 801eb3e:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 801eb42:	f240 1201 	movw	r2, #257	@ 0x101
 801eb46:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 801eb4a:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 801eb4e:	f8ad 2116 	strh.w	r2, [sp, #278]	@ 0x116
 801eb52:	b13b      	cbz	r3, 801eb64 <iNemoEngine_API_Update+0x4444>
 801eb54:	2300      	movs	r3, #0
 801eb56:	edc7 fa6f 	vstr	s31, [r7, #444]	@ 0x1bc
 801eb5a:	ed87 fa70 	vstr	s30, [r7, #448]	@ 0x1c0
 801eb5e:	edc7 7a71 	vstr	s15, [r7, #452]	@ 0x1c4
 801eb62:	707b      	strb	r3, [r7, #1]
 801eb64:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801ecb0 <iNemoEngine_API_Update+0x4590>
 801eb68:	eef4 9ae7 	vcmpe.f32	s19, s15
 801eb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb70:	db08      	blt.n	801eb84 <iNemoEngine_API_Update+0x4464>
 801eb72:	2300      	movs	r3, #0
 801eb74:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801eb78:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801eb7c:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801eb80:	f7fe b910 	b.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801eb84:	f897 31a2 	ldrb.w	r3, [r7, #418]	@ 0x1a2
 801eb88:	2b31      	cmp	r3, #49	@ 0x31
 801eb8a:	f63e a90b 	bhi.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801eb8e:	3301      	adds	r3, #1
 801eb90:	f887 31a2 	strb.w	r3, [r7, #418]	@ 0x1a2
 801eb94:	2300      	movs	r3, #0
 801eb96:	f8ad 3116 	strh.w	r3, [sp, #278]	@ 0x116
 801eb9a:	f88d 3118 	strb.w	r3, [sp, #280]	@ 0x118
 801eb9e:	f7fe b901 	b.w	801cda4 <iNemoEngine_API_Update+0x2684>
 801eba2:	eef0 7a65 	vmov.f32	s15, s11
 801eba6:	e649      	b.n	801e83c <iNemoEngine_API_Update+0x411c>
 801eba8:	eef0 7a65 	vmov.f32	s15, s11
 801ebac:	e4cd      	b.n	801e54a <iNemoEngine_API_Update+0x3e2a>
 801ebae:	eef0 7a65 	vmov.f32	s15, s11
 801ebb2:	f7fd b81a 	b.w	801bbea <iNemoEngine_API_Update+0x14ca>
 801ebb6:	eef0 7a65 	vmov.f32	s15, s11
 801ebba:	e4e6      	b.n	801e58a <iNemoEngine_API_Update+0x3e6a>
 801ebbc:	f507 63f3 	add.w	r3, r7, #1944	@ 0x798
 801ebc0:	930e      	str	r3, [sp, #56]	@ 0x38
 801ebc2:	f7fc b8ba 	b.w	801ad3a <iNemoEngine_API_Update+0x61a>
 801ebc6:	eef0 7a65 	vmov.f32	s15, s11
 801ebca:	f7fd b88d 	b.w	801bce8 <iNemoEngine_API_Update+0x15c8>
 801ebce:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 801ebd2:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 801ebd6:	2b27      	cmp	r3, #39	@ 0x27
 801ebd8:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	@ 0x1a8
 801ebdc:	f103 0301 	add.w	r3, r3, #1
 801ebe0:	bf98      	it	ls
 801ebe2:	eef0 fa64 	vmovls.f32	s31, s9
 801ebe6:	bf98      	it	ls
 801ebe8:	eeb0 fa45 	vmovls.f32	s30, s10
 801ebec:	bf98      	it	ls
 801ebee:	eef0 7a66 	vmovls.f32	s15, s13
 801ebf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ebf6:	f04f 0201 	mov.w	r2, #1
 801ebfa:	bf14      	ite	ne
 801ebfc:	b29b      	uxthne	r3, r3
 801ebfe:	f64f 73ff 	movweq	r3, #65535	@ 0xffff
 801ec02:	edcd fa9f 	vstr	s31, [sp, #636]	@ 0x27c
 801ec06:	ed8d faa0 	vstr	s30, [sp, #640]	@ 0x280
 801ec0a:	edcd 7aa1 	vstr	s15, [sp, #644]	@ 0x284
 801ec0e:	f887 21a3 	strb.w	r2, [r7, #419]	@ 0x1a3
 801ec12:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8
 801ec16:	e6fc      	b.n	801ea12 <iNemoEngine_API_Update+0x42f2>
 801ec18:	f507 6597 	add.w	r5, r7, #1208	@ 0x4b8
 801ec1c:	f7fe bdce 	b.w	801d7bc <iNemoEngine_API_Update+0x309c>
 801ec20:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801ec24:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 801ec28:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 801ec2c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801ec30:	f7fe b812 	b.w	801cc58 <iNemoEngine_API_Update+0x2538>
 801ec34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ec38:	f7ff ba35 	b.w	801e0a6 <iNemoEngine_API_Update+0x3986>
 801ec3c:	eef0 7a65 	vmov.f32	s15, s11
 801ec40:	f7fe ba56 	b.w	801d0f0 <iNemoEngine_API_Update+0x29d0>
 801ec44:	eef0 5a47 	vmov.f32	s11, s14
 801ec48:	eeb0 6a67 	vmov.f32	s12, s15
 801ec4c:	eeb0 7a66 	vmov.f32	s14, s13
 801ec50:	4619      	mov	r1, r3
 801ec52:	465c      	mov	r4, fp
 801ec54:	46b1      	mov	r9, r6
 801ec56:	edd0 7a00 	vldr	s15, [r0]
 801ec5a:	eef0 6a65 	vmov.f32	s13, s11
 801ec5e:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801ec62:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 801ec66:	ea4f 068e 	mov.w	r6, lr, lsl #2
 801ec6a:	f7ff bb20 	b.w	801e2ae <iNemoEngine_API_Update+0x3b8e>
 801ec6e:	2306      	movs	r3, #6
 801ec70:	2608      	movs	r6, #8
 801ec72:	2204      	movs	r2, #4
 801ec74:	2402      	movs	r4, #2
 801ec76:	9306      	str	r3, [sp, #24]
 801ec78:	f04f 0e07 	mov.w	lr, #7
 801ec7c:	2105      	movs	r1, #5
 801ec7e:	4630      	mov	r0, r6
 801ec80:	4691      	mov	r9, r2
 801ec82:	2300      	movs	r3, #0
 801ec84:	f04f 0c01 	mov.w	ip, #1
 801ec88:	9404      	str	r4, [sp, #16]
 801ec8a:	f7ff baa8 	b.w	801e1de <iNemoEngine_API_Update+0x3abe>
 801ec8e:	2104      	movs	r1, #4
 801ec90:	2301      	movs	r3, #1
 801ec92:	2203      	movs	r2, #3
 801ec94:	2607      	movs	r6, #7
 801ec96:	f04f 0e06 	mov.w	lr, #6
 801ec9a:	4608      	mov	r0, r1
 801ec9c:	f04f 0c00 	mov.w	ip, #0
 801eca0:	9304      	str	r3, [sp, #16]
 801eca2:	f7ff ba8d 	b.w	801e1c0 <iNemoEngine_API_Update+0x3aa0>
 801eca6:	eddf 9a03 	vldr	s19, [pc, #12]	@ 801ecb4 <iNemoEngine_API_Update+0x4594>
 801ecaa:	f7fb be94 	b.w	801a9d6 <iNemoEngine_API_Update+0x2b6>
 801ecae:	bf00      	nop
 801ecb0:	42480000 	.word	0x42480000
 801ecb4:	00000000 	.word	0x00000000

0801ecb8 <MEMS_runMagCal.constprop.0>:
 801ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801ed80 <MEMS_runMagCal.constprop.0+0xc8>
 801ecc0:	ed2d 8b0e 	vpush	{d8-d14}
 801ecc4:	f8ba 2008 	ldrh.w	r2, [sl, #8]
 801ecc8:	f2ad 5d64 	subw	sp, sp, #1380	@ 0x564
 801eccc:	2a82      	cmp	r2, #130	@ 0x82
 801ecce:	9201      	str	r2, [sp, #4]
 801ecd0:	f102 35ff 	add.w	r5, r2, #4294967295	@ 0xffffffff
 801ecd4:	d946      	bls.n	801ed64 <MEMS_runMagCal.constprop.0+0xac>
 801ecd6:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 801ecda:	f8da 300c 	ldr.w	r3, [sl, #12]
 801ecde:	9108      	str	r1, [sp, #32]
 801ece0:	fb05 3311 	mls	r3, r5, r1, r3
 801ece4:	f102 007e 	add.w	r0, r2, #126	@ 0x7e
 801ece8:	9303      	str	r3, [sp, #12]
 801ecea:	2581      	movs	r5, #129	@ 0x81
 801ecec:	2382      	movs	r3, #130	@ 0x82
 801ecee:	b2c0      	uxtb	r0, r0
 801ecf0:	fb01 f505 	mul.w	r5, r1, r5
 801ecf4:	9301      	str	r3, [sp, #4]
 801ecf6:	461c      	mov	r4, r3
 801ecf8:	f8da 6010 	ldr.w	r6, [sl, #16]
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 801ed02:	f816 c033 	ldrb.w	ip, [r6, r3, lsl #3]
 801ed06:	f809 c033 	strb.w	ip, [r9, r3, lsl #3]
 801ed0a:	eb06 07c3 	add.w	r7, r6, r3, lsl #3
 801ed0e:	eb09 01c3 	add.w	r1, r9, r3, lsl #3
 801ed12:	3301      	adds	r3, #1
 801ed14:	b2db      	uxtb	r3, r3
 801ed16:	f8d7 c002 	ldr.w	ip, [r7, #2]
 801ed1a:	88ff      	ldrh	r7, [r7, #6]
 801ed1c:	f8c1 c002 	str.w	ip, [r1, #2]
 801ed20:	42a3      	cmp	r3, r4
 801ed22:	80cf      	strh	r7, [r1, #6]
 801ed24:	d3ed      	bcc.n	801ed02 <MEMS_runMagCal.constprop.0+0x4a>
 801ed26:	2a82      	cmp	r2, #130	@ 0x82
 801ed28:	bf38      	it	cc
 801ed2a:	2282      	movcc	r2, #130	@ 0x82
 801ed2c:	3a82      	subs	r2, #130	@ 0x82
 801ed2e:	f8aa 2008 	strh.w	r2, [sl, #8]
 801ed32:	b1a0      	cbz	r0, 801ed5e <MEMS_runMagCal.constprop.0+0xa6>
 801ed34:	f8da 3010 	ldr.w	r3, [sl, #16]
 801ed38:	3302      	adds	r3, #2
 801ed3a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801ed3e:	2700      	movs	r7, #0
 801ed40:	f893 640e 	ldrb.w	r6, [r3, #1038]	@ 0x40e
 801ed44:	f8d3 1410 	ldr.w	r1, [r3, #1040]	@ 0x410
 801ed48:	f8b3 2414 	ldrh.w	r2, [r3, #1044]	@ 0x414
 801ed4c:	f803 6c02 	strb.w	r6, [r3, #-2]
 801ed50:	6019      	str	r1, [r3, #0]
 801ed52:	809a      	strh	r2, [r3, #4]
 801ed54:	f883 740e 	strb.w	r7, [r3, #1038]	@ 0x40e
 801ed58:	3308      	adds	r3, #8
 801ed5a:	4298      	cmp	r0, r3
 801ed5c:	d1f0      	bne.n	801ed40 <MEMS_runMagCal.constprop.0+0x88>
 801ed5e:	9b03      	ldr	r3, [sp, #12]
 801ed60:	4622      	mov	r2, r4
 801ed62:	e01b      	b.n	801ed9c <MEMS_runMagCal.constprop.0+0xe4>
 801ed64:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 801ed68:	9308      	str	r3, [sp, #32]
 801ed6a:	fb03 f505 	mul.w	r5, r3, r5
 801ed6e:	f8da 300c 	ldr.w	r3, [sl, #12]
 801ed72:	1b5b      	subs	r3, r3, r5
 801ed74:	9303      	str	r3, [sp, #12]
 801ed76:	b17a      	cbz	r2, 801ed98 <MEMS_runMagCal.constprop.0+0xe0>
 801ed78:	4614      	mov	r4, r2
 801ed7a:	2000      	movs	r0, #0
 801ed7c:	e7bc      	b.n	801ecf8 <MEMS_runMagCal.constprop.0+0x40>
 801ed7e:	bf00      	nop
 801ed80:	2000038c 	.word	0x2000038c
 801ed84:	00000000 	.word	0x00000000
 801ed88:	43020000 	.word	0x43020000
 801ed8c:	447a0000 	.word	0x447a0000
 801ed90:	4423d666 	.word	0x4423d666
 801ed94:	42c80000 	.word	0x42c80000
 801ed98:	f8aa 2008 	strh.w	r2, [sl, #8]
 801ed9c:	18eb      	adds	r3, r5, r3
 801ed9e:	9302      	str	r3, [sp, #8]
 801eda0:	f8ca 304c 	str.w	r3, [sl, #76]	@ 0x4c
 801eda4:	2a00      	cmp	r2, #0
 801eda6:	f000 8391 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801edaa:	4619      	mov	r1, r3
 801edac:	f8da 301c 	ldr.w	r3, [sl, #28]
 801edb0:	f501 30c3 	add.w	r0, r1, #99840	@ 0x18600
 801edb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801edb8:	30a0      	adds	r0, #160	@ 0xa0
 801edba:	fb03 f101 	mul.w	r1, r3, r1
 801edbe:	4288      	cmp	r0, r1
 801edc0:	f0c0 838f 	bcc.w	801f4e2 <MEMS_runMagCal.constprop.0+0x82a>
 801edc4:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 801edc8:	4288      	cmp	r0, r1
 801edca:	f0c0 838a 	bcc.w	801f4e2 <MEMS_runMagCal.constprop.0+0x82a>
 801edce:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	f000 838f 	beq.w	801f4f6 <MEMS_runMagCal.constprop.0+0x83e>
 801edd8:	f04f 2380 	mov.w	r3, #2147516416	@ 0x80008000
 801eddc:	1e54      	subs	r4, r2, #1
 801edde:	9334      	str	r3, [sp, #208]	@ 0xd0
 801ede0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ede4:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 801ed84 <MEMS_runMagCal.constprop.0+0xcc>
 801ede8:	edda 8a01 	vldr	s17, [sl, #4]
 801edec:	f8ad 30d4 	strh.w	r3, [sp, #212]	@ 0xd4
 801edf0:	b2a4      	uxth	r4, r4
 801edf2:	f06f 2380 	mvn.w	r3, #2147516416	@ 0x80008000
 801edf6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801edfa:	2c03      	cmp	r4, #3
 801edfc:	9344      	str	r3, [sp, #272]	@ 0x110
 801edfe:	f50d 79a8 	add.w	r9, sp, #336	@ 0x150
 801ee02:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801ee06:	f04f 0100 	mov.w	r1, #0
 801ee0a:	ed9a 6a1f 	vldr	s12, [sl, #124]	@ 0x7c
 801ee0e:	edda 5a1c 	vldr	s11, [sl, #112]	@ 0x70
 801ee12:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 801ee16:	edda 4a1d 	vldr	s9, [sl, #116]	@ 0x74
 801ee1a:	ed9a 4a27 	vldr	s8, [sl, #156]	@ 0x9c
 801ee1e:	edda 3a1e 	vldr	s7, [sl, #120]	@ 0x78
 801ee22:	f8ad 3114 	strh.w	r3, [sp, #276]	@ 0x114
 801ee26:	ee87 8aa8 	vdiv.f32	s16, s15, s17
 801ee2a:	bf28      	it	cs
 801ee2c:	2403      	movcs	r4, #3
 801ee2e:	4648      	mov	r0, r9
 801ee30:	460b      	mov	r3, r1
 801ee32:	eef0 7a47 	vmov.f32	s15, s14
 801ee36:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 801ee3a:	7805      	ldrb	r5, [r0, #0]
 801ee3c:	3301      	adds	r3, #1
 801ee3e:	b29b      	uxth	r3, r3
 801ee40:	2d00      	cmp	r5, #0
 801ee42:	d052      	beq.n	801eeea <MEMS_runMagCal.constprop.0+0x232>
 801ee44:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801ee48:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801ee4c:	f9bd 50d0 	ldrsh.w	r5, [sp, #208]	@ 0xd0
 801ee50:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 801ee54:	ee07 ca10 	vmov	s14, ip
 801ee58:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801ee5c:	ee07 7a10 	vmov	s14, r7
 801ee60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ee64:	4565      	cmp	r5, ip
 801ee66:	bfb8      	it	lt
 801ee68:	4665      	movlt	r5, ip
 801ee6a:	ee37 7a64 	vsub.f32	s14, s14, s9
 801ee6e:	f8ad 50d0 	strh.w	r5, [sp, #208]	@ 0xd0
 801ee72:	f9bd 5110 	ldrsh.w	r5, [sp, #272]	@ 0x110
 801ee76:	ee76 6ae5 	vsub.f32	s13, s13, s11
 801ee7a:	ee27 7a05 	vmul.f32	s14, s14, s10
 801ee7e:	4565      	cmp	r5, ip
 801ee80:	bfa8      	it	ge
 801ee82:	4665      	movge	r5, ip
 801ee84:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ee88:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ee8c:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 801ee90:	f9bd 50d2 	ldrsh.w	r5, [sp, #210]	@ 0xd2
 801ee94:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801ee98:	42bd      	cmp	r5, r7
 801ee9a:	bfb8      	it	lt
 801ee9c:	463d      	movlt	r5, r7
 801ee9e:	f8ad 50d2 	strh.w	r5, [sp, #210]	@ 0xd2
 801eea2:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 801eea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801eeaa:	ee07 6a10 	vmov	s14, r6
 801eeae:	42bd      	cmp	r5, r7
 801eeb0:	bfa8      	it	ge
 801eeb2:	463d      	movge	r5, r7
 801eeb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801eeb8:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 801eebc:	f9bd 50d4 	ldrsh.w	r5, [sp, #212]	@ 0xd4
 801eec0:	ee37 7a63 	vsub.f32	s14, s14, s7
 801eec4:	42b5      	cmp	r5, r6
 801eec6:	bfb8      	it	lt
 801eec8:	4635      	movlt	r5, r6
 801eeca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801eece:	f8ad 50d4 	strh.w	r5, [sp, #212]	@ 0xd4
 801eed2:	f9bd 5114 	ldrsh.w	r5, [sp, #276]	@ 0x114
 801eed6:	eee7 7a07 	vfma.f32	s15, s14, s14
 801eeda:	42b5      	cmp	r5, r6
 801eedc:	f101 0101 	add.w	r1, r1, #1
 801eee0:	bfa8      	it	ge
 801eee2:	4635      	movge	r5, r6
 801eee4:	b249      	sxtb	r1, r1
 801eee6:	f8ad 5114 	strh.w	r5, [sp, #276]	@ 0x114
 801eeea:	42a3      	cmp	r3, r4
 801eeec:	f100 0008 	add.w	r0, r0, #8
 801eef0:	d9a3      	bls.n	801ee3a <MEMS_runMagCal.constprop.0+0x182>
 801eef2:	4293      	cmp	r3, r2
 801eef4:	f081 8117 	bcs.w	8020126 <MEMS_runMagCal.constprop.0+0x146e>
 801eef8:	1ad2      	subs	r2, r2, r3
 801eefa:	3a01      	subs	r2, #1
 801eefc:	fa13 f282 	uxtah	r2, r3, r2
 801ef00:	f109 0708 	add.w	r7, r9, #8
 801ef04:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801ef08:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
 801ef0c:	f04f 0c00 	mov.w	ip, #0
 801ef10:	781a      	ldrb	r2, [r3, #0]
 801ef12:	1c4e      	adds	r6, r1, #1
 801ef14:	2a00      	cmp	r2, #0
 801ef16:	f000 8095 	beq.w	801f044 <MEMS_runMagCal.constprop.0+0x38c>
 801ef1a:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801ef1e:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801ef22:	f9bd 10d0 	ldrsh.w	r1, [sp, #208]	@ 0xd0
 801ef26:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 801ef2a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801ef2e:	ee07 5a10 	vmov	s14, r5
 801ef32:	eeb8 3ac7 	vcvt.f32.s32	s6, s14
 801ef36:	ee07 4a10 	vmov	s14, r4
 801ef3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef3e:	42a9      	cmp	r1, r5
 801ef40:	ee37 7a64 	vsub.f32	s14, s14, s9
 801ef44:	ee33 3a65 	vsub.f32	s6, s6, s11
 801ef48:	ee27 7a05 	vmul.f32	s14, s14, s10
 801ef4c:	bfb8      	it	lt
 801ef4e:	4629      	movlt	r1, r5
 801ef50:	ee23 3a06 	vmul.f32	s6, s6, s12
 801ef54:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ef58:	f8ad 10d0 	strh.w	r1, [sp, #208]	@ 0xd0
 801ef5c:	b271      	sxtb	r1, r6
 801ef5e:	f933 6c16 	ldrsh.w	r6, [r3, #-22]
 801ef62:	eea3 7a03 	vfma.f32	s14, s6, s6
 801ef66:	1b92      	subs	r2, r2, r6
 801ef68:	f933 6c1e 	ldrsh.w	r6, [r3, #-30]
 801ef6c:	ee06 0a90 	vmov	s13, r0
 801ef70:	1bae      	subs	r6, r5, r6
 801ef72:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 801ef76:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ef7a:	f933 6c14 	ldrsh.w	r6, [r3, #-20]
 801ef7e:	ee07 2a10 	vmov	s14, r2
 801ef82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801ef86:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 801ef8a:	ee76 6ae3 	vsub.f32	s13, s13, s7
 801ef8e:	1b92      	subs	r2, r2, r6
 801ef90:	f933 6c1c 	ldrsh.w	r6, [r3, #-28]
 801ef94:	ee66 6a84 	vmul.f32	s13, s13, s8
 801ef98:	1ba6      	subs	r6, r4, r6
 801ef9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801ef9e:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 801efa2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801efa6:	f933 6c12 	ldrsh.w	r6, [r3, #-18]
 801efaa:	ee06 2a90 	vmov	s13, r2
 801efae:	eeb0 7ac7 	vabs.f32	s14, s14
 801efb2:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 801efb6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801efba:	1b92      	subs	r2, r2, r6
 801efbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801efc0:	f933 6c1a 	ldrsh.w	r6, [r3, #-26]
 801efc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801efc8:	eef0 6ae6 	vabs.f32	s13, s13
 801efcc:	1b86      	subs	r6, r0, r6
 801efce:	ee37 7a26 	vadd.f32	s14, s14, s13
 801efd2:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 801efd6:	ee06 2a90 	vmov	s13, r2
 801efda:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801efde:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801efe2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801efe6:	eef0 6ae6 	vabs.f32	s13, s13
 801efea:	ee36 7a87 	vadd.f32	s14, s13, s14
 801efee:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801eff2:	ee17 2a10 	vmov	r2, s14
 801eff6:	4594      	cmp	ip, r2
 801eff8:	bf38      	it	cc
 801effa:	4694      	movcc	ip, r2
 801effc:	f9bd 2110 	ldrsh.w	r2, [sp, #272]	@ 0x110
 801f000:	4295      	cmp	r5, r2
 801f002:	bfa8      	it	ge
 801f004:	4615      	movge	r5, r2
 801f006:	f9bd 20d2 	ldrsh.w	r2, [sp, #210]	@ 0xd2
 801f00a:	f8ad 5110 	strh.w	r5, [sp, #272]	@ 0x110
 801f00e:	42a2      	cmp	r2, r4
 801f010:	bfb8      	it	lt
 801f012:	4622      	movlt	r2, r4
 801f014:	f9bd 5112 	ldrsh.w	r5, [sp, #274]	@ 0x112
 801f018:	f8ad 20d2 	strh.w	r2, [sp, #210]	@ 0xd2
 801f01c:	f9bd 20d4 	ldrsh.w	r2, [sp, #212]	@ 0xd4
 801f020:	42a5      	cmp	r5, r4
 801f022:	bfa8      	it	ge
 801f024:	4625      	movge	r5, r4
 801f026:	4282      	cmp	r2, r0
 801f028:	bfb8      	it	lt
 801f02a:	4602      	movlt	r2, r0
 801f02c:	4614      	mov	r4, r2
 801f02e:	f9bd 2114 	ldrsh.w	r2, [sp, #276]	@ 0x114
 801f032:	f8ad 5112 	strh.w	r5, [sp, #274]	@ 0x112
 801f036:	4282      	cmp	r2, r0
 801f038:	bfa8      	it	ge
 801f03a:	4602      	movge	r2, r0
 801f03c:	f8ad 40d4 	strh.w	r4, [sp, #212]	@ 0xd4
 801f040:	f8ad 2114 	strh.w	r2, [sp, #276]	@ 0x114
 801f044:	3308      	adds	r3, #8
 801f046:	429f      	cmp	r7, r3
 801f048:	f47f af62 	bne.w	801ef10 <MEMS_runMagCal.constprop.0+0x258>
 801f04c:	2900      	cmp	r1, #0
 801f04e:	f000 8244 	beq.w	801f4da <MEMS_runMagCal.constprop.0+0x822>
 801f052:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	@ 0xd0
 801f056:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 801f05a:	f280 823d 	bge.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f05e:	f9bd 4110 	ldrsh.w	r4, [sp, #272]	@ 0x110
 801f062:	f514 4f80 	cmn.w	r4, #16384	@ 0x4000
 801f066:	f2c0 8237 	blt.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f06a:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	@ 0xd2
 801f06e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801f072:	f280 8231 	bge.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f076:	f9bd 7112 	ldrsh.w	r7, [sp, #274]	@ 0x112
 801f07a:	f517 4f80 	cmn.w	r7, #16384	@ 0x4000
 801f07e:	f2c0 822b 	blt.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f082:	f9bd 00d4 	ldrsh.w	r0, [sp, #212]	@ 0xd4
 801f086:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 801f08a:	f280 8225 	bge.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f08e:	f9bd 6114 	ldrsh.w	r6, [sp, #276]	@ 0x114
 801f092:	f516 4f80 	cmn.w	r6, #16384	@ 0x4000
 801f096:	f2c0 821f 	blt.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f09a:	ee07 1a10 	vmov	s14, r1
 801f09e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f0a2:	1bd9      	subs	r1, r3, r7
 801f0a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f0a8:	1b12      	subs	r2, r2, r4
 801f0aa:	428a      	cmp	r2, r1
 801f0ac:	4613      	mov	r3, r2
 801f0ae:	eba0 0006 	sub.w	r0, r0, r6
 801f0b2:	bfb8      	it	lt
 801f0b4:	460b      	movlt	r3, r1
 801f0b6:	4283      	cmp	r3, r0
 801f0b8:	bfb8      	it	lt
 801f0ba:	4603      	movlt	r3, r0
 801f0bc:	ed1f 7ace 	vldr	s14, [pc, #-824]	@ 801ed88 <MEMS_runMagCal.constprop.0+0xd0>
 801f0c0:	eef1 7ae6 	vsqrt.f32	s15, s13
 801f0c4:	ee06 3a90 	vmov	s13, r3
 801f0c8:	ee28 7a07 	vmul.f32	s14, s16, s14
 801f0cc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f0d0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801f0d4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0dc:	f100 81fc 	bmi.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f0e0:	ee07 ca10 	vmov	s14, ip
 801f0e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801f0e8:	ed1f 6ad8 	vldr	s12, [pc, #-864]	@ 801ed8c <MEMS_runMagCal.constprop.0+0xd4>
 801f0ec:	ee27 7a28 	vmul.f32	s14, s14, s17
 801f0f0:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f0f8:	f300 81ee 	bgt.w	801f4d8 <MEMS_runMagCal.constprop.0+0x820>
 801f0fc:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 801f100:	ee28 6a06 	vmul.f32	s12, s16, s12
 801f104:	eeb4 6ae6 	vcmpe.f32	s12, s13
 801f108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f10c:	f301 805a 	bgt.w	80201c4 <MEMS_runMagCal.constprop.0+0x150c>
 801f110:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801f114:	ee26 7a07 	vmul.f32	s14, s12, s14
 801f118:	eef4 6ac7 	vcmpe.f32	s13, s14
 801f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f120:	f301 8078 	bgt.w	8020214 <MEMS_runMagCal.constprop.0+0x155c>
 801f124:	2300      	movs	r3, #0
 801f126:	930d      	str	r3, [sp, #52]	@ 0x34
 801f128:	9304      	str	r3, [sp, #16]
 801f12a:	2100      	movs	r1, #0
 801f12c:	ed1f 7ae8 	vldr	s14, [pc, #-928]	@ 801ed90 <MEMS_runMagCal.constprop.0+0xd8>
 801f130:	f89a 406c 	ldrb.w	r4, [sl, #108]	@ 0x6c
 801f134:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f13c:	f140 81e6 	bpl.w	801f50c <MEMS_runMagCal.constprop.0+0x854>
 801f140:	ed1f 7aec 	vldr	s14, [pc, #-944]	@ 801ed94 <MEMS_runMagCal.constprop.0+0xdc>
 801f144:	ee27 0a87 	vmul.f32	s0, s15, s14
 801f148:	2c01      	cmp	r4, #1
 801f14a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f14e:	ed8d 0a13 	vstr	s0, [sp, #76]	@ 0x4c
 801f152:	ee17 3a90 	vmov	r3, s15
 801f156:	b29b      	uxth	r3, r3
 801f158:	d90c      	bls.n	801f174 <MEMS_runMagCal.constprop.0+0x4bc>
 801f15a:	2bc7      	cmp	r3, #199	@ 0xc7
 801f15c:	f200 8791 	bhi.w	8020082 <MEMS_runMagCal.constprop.0+0x13ca>
 801f160:	2400      	movs	r4, #0
 801f162:	23ff      	movs	r3, #255	@ 0xff
 801f164:	f88a 406c 	strb.w	r4, [sl, #108]	@ 0x6c
 801f168:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801f16c:	f88a 4054 	strb.w	r4, [sl, #84]	@ 0x54
 801f170:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801f174:	2900      	cmp	r1, #0
 801f176:	f040 81a0 	bne.w	801f4ba <MEMS_runMagCal.constprop.0+0x802>
 801f17a:	f99a 3026 	ldrsb.w	r3, [sl, #38]	@ 0x26
 801f17e:	f89a 8025 	ldrb.w	r8, [sl, #37]	@ 0x25
 801f182:	2b00      	cmp	r3, #0
 801f184:	f2c0 874c 	blt.w	8020020 <MEMS_runMagCal.constprop.0+0x1368>
 801f188:	3301      	adds	r3, #1
 801f18a:	fbb3 f2f8 	udiv	r2, r3, r8
 801f18e:	fb08 3312 	mls	r3, r8, r2, r3
 801f192:	b25b      	sxtb	r3, r3
 801f194:	461f      	mov	r7, r3
 801f196:	f89a 6024 	ldrb.w	r6, [sl, #36]	@ 0x24
 801f19a:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 801f19e:	3601      	adds	r6, #1
 801f1a0:	4546      	cmp	r6, r8
 801f1a2:	bfa8      	it	ge
 801f1a4:	4646      	movge	r6, r8
 801f1a6:	b2f5      	uxtb	r5, r6
 801f1a8:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
 801f1ac:	f003 f904 	bl	80223b8 <roundf>
 801f1b0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801f1b4:	eb0a 0347 	add.w	r3, sl, r7, lsl #1
 801f1b8:	ee10 2a10 	vmov	r2, s0
 801f1bc:	f8da 1020 	ldr.w	r1, [sl, #32]
 801f1c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 801f1c2:	b129      	cbz	r1, 801f1d0 <MEMS_runMagCal.constprop.0+0x518>
 801f1c4:	9a02      	ldr	r2, [sp, #8]
 801f1c6:	f501 6396 	add.w	r3, r1, #1200	@ 0x4b0
 801f1ca:	429a      	cmp	r2, r3
 801f1cc:	f0c0 817e 	bcc.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801f1d0:	9b04      	ldr	r3, [sp, #16]
 801f1d2:	2b01      	cmp	r3, #1
 801f1d4:	f000 817a 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801f1d8:	1ea3      	subs	r3, r4, #2
 801f1da:	2b01      	cmp	r3, #1
 801f1dc:	f240 8761 	bls.w	80200a2 <MEMS_runMagCal.constprop.0+0x13ea>
 801f1e0:	f8da 501c 	ldr.w	r5, [sl, #28]
 801f1e4:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 801f1e8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f1ea:	eeb0 ba08 	vmov.f32	s22, #8	@ 0x40400000  3.0
 801f1ee:	ee28 ba0b 	vmul.f32	s22, s16, s22
 801f1f2:	eddf 7acb 	vldr	s15, [pc, #812]	@ 801f520 <MEMS_runMagCal.constprop.0+0x868>
 801f1f6:	f8da 30a4 	ldr.w	r3, [sl, #164]	@ 0xa4
 801f1fa:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 801f524 <MEMS_runMagCal.constprop.0+0x86c>
 801f1fe:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 801f202:	ee6b 7a27 	vmul.f32	s15, s22, s15
 801f206:	f503 521c 	add.w	r2, r3, #9984	@ 0x2700
 801f20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f20e:	ee6b aa0b 	vmul.f32	s21, s22, s22
 801f212:	ee17 1a90 	vmov	r1, s15
 801f216:	b28f      	uxth	r7, r1
 801f218:	9902      	ldr	r1, [sp, #8]
 801f21a:	3210      	adds	r2, #16
 801f21c:	eef7 9a08 	vmov.f32	s19, #120	@ 0x3fc00000  1.5
 801f220:	4291      	cmp	r1, r2
 801f222:	ee6a aa87 	vmul.f32	s21, s21, s14
 801f226:	ee6b 9a29 	vmul.f32	s19, s22, s19
 801f22a:	d951      	bls.n	801f2d0 <MEMS_runMagCal.constprop.0+0x618>
 801f22c:	f242 3228 	movw	r2, #9000	@ 0x2328
 801f230:	4291      	cmp	r1, r2
 801f232:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801f236:	bf18      	it	ne
 801f238:	f5a1 560c 	subne.w	r6, r1, #8960	@ 0x2300
 801f23c:	f99a 10a2 	ldrsb.w	r1, [sl, #162]	@ 0xa2
 801f240:	bf14      	ite	ne
 801f242:	3e28      	subne	r6, #40	@ 0x28
 801f244:	2600      	moveq	r6, #0
 801f246:	42a0      	cmp	r0, r4
 801f248:	f101 0101 	add.w	r1, r1, #1
 801f24c:	f001 8034 	beq.w	80202b8 <MEMS_runMagCal.constprop.0+0x1600>
 801f250:	1b0a      	subs	r2, r1, r4
 801f252:	fb92 f1f0 	sdiv	r1, r2, r0
 801f256:	fb00 2111 	mls	r1, r0, r1, r2
 801f25a:	2900      	cmp	r1, #0
 801f25c:	bfb8      	it	lt
 801f25e:	1809      	addlt	r1, r1, r0
 801f260:	b209      	sxth	r1, r1
 801f262:	2c00      	cmp	r4, #0
 801f264:	f001 80c6 	beq.w	80203f4 <MEMS_runMagCal.constprop.0+0x173c>
 801f268:	1b9b      	subs	r3, r3, r6
 801f26a:	f8dd e010 	ldr.w	lr, [sp, #16]
 801f26e:	fa1f f883 	uxth.w	r8, r3
 801f272:	eb04 0c01 	add.w	ip, r4, r1
 801f276:	e006      	b.n	801f286 <MEMS_runMagCal.constprop.0+0x5ce>
 801f278:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f27c:	3101      	adds	r1, #1
 801f27e:	4561      	cmp	r1, ip
 801f280:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801f284:	d01b      	beq.n	801f2be <MEMS_runMagCal.constprop.0+0x606>
 801f286:	fb91 f3f0 	sdiv	r3, r1, r0
 801f28a:	fb00 1313 	mls	r3, r0, r3, r1
 801f28e:	b2db      	uxtb	r3, r3
 801f290:	3304      	adds	r3, #4
 801f292:	eb0a 02c3 	add.w	r2, sl, r3, lsl #3
 801f296:	f8b2 20a0 	ldrh.w	r2, [r2, #160]	@ 0xa0
 801f29a:	4442      	add	r2, r8
 801f29c:	b212      	sxth	r2, r2
 801f29e:	2a00      	cmp	r2, #0
 801f2a0:	daea      	bge.n	801f278 <MEMS_runMagCal.constprop.0+0x5c0>
 801f2a2:	2c00      	cmp	r4, #0
 801f2a4:	f000 86b8 	beq.w	8020018 <MEMS_runMagCal.constprop.0+0x1360>
 801f2a8:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f2ac:	3101      	adds	r1, #1
 801f2ae:	3c01      	subs	r4, #1
 801f2b0:	4561      	cmp	r1, ip
 801f2b2:	b2e4      	uxtb	r4, r4
 801f2b4:	f04f 0e01 	mov.w	lr, #1
 801f2b8:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
 801f2bc:	d1e3      	bne.n	801f286 <MEMS_runMagCal.constprop.0+0x5ce>
 801f2be:	f1be 0f01 	cmp.w	lr, #1
 801f2c2:	f88a 40a0 	strb.w	r4, [sl, #160]	@ 0xa0
 801f2c6:	f001 8069 	beq.w	802039c <MEMS_runMagCal.constprop.0+0x16e4>
 801f2ca:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 801f2ce:	4633      	mov	r3, r6
 801f2d0:	2c00      	cmp	r4, #0
 801f2d2:	f000 86ce 	beq.w	8020072 <MEMS_runMagCal.constprop.0+0x13ba>
 801f2d6:	f99a 20a2 	ldrsb.w	r2, [sl, #162]	@ 0xa2
 801f2da:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801f2de:	f9b2 20c0 	ldrsh.w	r2, [r2, #192]	@ 0xc0
 801f2e2:	f502 529c 	add.w	r2, r2, #4992	@ 0x1380
 801f2e6:	3208      	adds	r2, #8
 801f2e8:	441a      	add	r2, r3
 801f2ea:	9b03      	ldr	r3, [sp, #12]
 801f2ec:	429a      	cmp	r2, r3
 801f2ee:	f0c0 86b4 	bcc.w	802005a <MEMS_runMagCal.constprop.0+0x13a2>
 801f2f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f2f4:	b913      	cbnz	r3, 801f2fc <MEMS_runMagCal.constprop.0+0x644>
 801f2f6:	2c0a      	cmp	r4, #10
 801f2f8:	f240 86bf 	bls.w	802007a <MEMS_runMagCal.constprop.0+0x13c2>
 801f2fc:	ed9f 9a8a 	vldr	s18, [pc, #552]	@ 801f528 <MEMS_runMagCal.constprop.0+0x870>
 801f300:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801f304:	9306      	str	r3, [sp, #24]
 801f306:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 801f30a:	9b04      	ldr	r3, [sp, #16]
 801f30c:	930e      	str	r3, [sp, #56]	@ 0x38
 801f30e:	f04f 0b00 	mov.w	fp, #0
 801f312:	ee28 aa0a 	vmul.f32	s20, s16, s20
 801f316:	ee28 9a89 	vmul.f32	s18, s17, s18
 801f31a:	465b      	mov	r3, fp
 801f31c:	46d8      	mov	r8, fp
 801f31e:	9510      	str	r5, [sp, #64]	@ 0x40
 801f320:	f8cd 901c 	str.w	r9, [sp, #28]
 801f324:	9a07      	ldr	r2, [sp, #28]
 801f326:	f812 1038 	ldrb.w	r1, [r2, r8, lsl #3]
 801f32a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 801f32e:	2900      	cmp	r1, #0
 801f330:	f000 8150 	beq.w	801f5d4 <MEMS_runMagCal.constprop.0+0x91c>
 801f334:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
 801f338:	f8d2 4002 	ldr.w	r4, [r2, #2]
 801f33c:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801f340:	6852      	ldr	r2, [r2, #4]
 801f342:	920c      	str	r2, [sp, #48]	@ 0x30
 801f344:	ee07 5a90 	vmov	s15, r5
 801f348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f34c:	f344 420f 	sbfx	r2, r4, #16, #16
 801f350:	eef0 7ae7 	vabs.f32	s15, s15
 801f354:	eef4 7aca 	vcmpe.f32	s15, s20
 801f358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f35c:	ea4f 4924 	mov.w	r9, r4, asr #16
 801f360:	d516      	bpl.n	801f390 <MEMS_runMagCal.constprop.0+0x6d8>
 801f362:	ee07 9a90 	vmov	s15, r9
 801f366:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f36a:	eef0 7ae7 	vabs.f32	s15, s15
 801f36e:	eeb4 aae7 	vcmpe.f32	s20, s15
 801f372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f376:	dd0b      	ble.n	801f390 <MEMS_runMagCal.constprop.0+0x6d8>
 801f378:	ee07 6a90 	vmov	s15, r6
 801f37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f380:	eef0 7ae7 	vabs.f32	s15, s15
 801f384:	eeb4 aae7 	vcmpe.f32	s20, s15
 801f388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f38c:	f300 8122 	bgt.w	801f5d4 <MEMS_runMagCal.constprop.0+0x91c>
 801f390:	f89a 10a0 	ldrb.w	r1, [sl, #160]	@ 0xa0
 801f394:	9105      	str	r1, [sp, #20]
 801f396:	2900      	cmp	r1, #0
 801f398:	f000 85ad 	beq.w	801fef6 <MEMS_runMagCal.constprop.0+0x123e>
 801f39c:	f9ba 33ba 	ldrsh.w	r3, [sl, #954]	@ 0x3ba
 801f3a0:	f9ba 23b8 	ldrsh.w	r2, [sl, #952]	@ 0x3b8
 801f3a4:	eba3 0309 	sub.w	r3, r3, r9
 801f3a8:	fb03 f303 	mul.w	r3, r3, r3
 801f3ac:	1b52      	subs	r2, r2, r5
 801f3ae:	fb02 3202 	mla	r2, r2, r2, r3
 801f3b2:	f9ba 33bc 	ldrsh.w	r3, [sl, #956]	@ 0x3bc
 801f3b6:	1b9b      	subs	r3, r3, r6
 801f3b8:	fb03 2303 	mla	r3, r3, r3, r2
 801f3bc:	ee07 3a90 	vmov	s15, r3
 801f3c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3c4:	eef4 aae7 	vcmpe.f32	s21, s15
 801f3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3cc:	f300 8102 	bgt.w	801f5d4 <MEMS_runMagCal.constprop.0+0x91c>
 801f3d0:	fb95 f3f7 	sdiv	r3, r5, r7
 801f3d4:	fb07 5313 	mls	r3, r7, r3, r5
 801f3d8:	2b00      	cmp	r3, #0
 801f3da:	bfb8      	it	lt
 801f3dc:	19db      	addlt	r3, r3, r7
 801f3de:	b21b      	sxth	r3, r3
 801f3e0:	ee07 3a90 	vmov	s15, r3
 801f3e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f3e8:	ee27 0a89 	vmul.f32	s0, s15, s18
 801f3ec:	f002 ffe4 	bl	80223b8 <roundf>
 801f3f0:	fb99 f3f7 	sdiv	r3, r9, r7
 801f3f4:	fb07 9313 	mls	r3, r7, r3, r9
 801f3f8:	2b00      	cmp	r3, #0
 801f3fa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f3fe:	bfb8      	it	lt
 801f400:	19db      	addlt	r3, r3, r7
 801f402:	b21b      	sxth	r3, r3
 801f404:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 801f408:	ee07 3a90 	vmov	s15, r3
 801f40c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f410:	f89d 2024 	ldrb.w	r2, [sp, #36]	@ 0x24
 801f414:	9209      	str	r2, [sp, #36]	@ 0x24
 801f416:	ee27 0a89 	vmul.f32	s0, s15, s18
 801f41a:	f002 ffcd 	bl	80223b8 <roundf>
 801f41e:	fb96 f3f7 	sdiv	r3, r6, r7
 801f422:	fb07 6313 	mls	r3, r7, r3, r6
 801f426:	2b00      	cmp	r3, #0
 801f428:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f42c:	bfb8      	it	lt
 801f42e:	19db      	addlt	r3, r3, r7
 801f430:	b21b      	sxth	r3, r3
 801f432:	edcd 7a0a 	vstr	s15, [sp, #40]	@ 0x28
 801f436:	ee07 3a90 	vmov	s15, r3
 801f43a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f43e:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
 801f442:	920a      	str	r2, [sp, #40]	@ 0x28
 801f444:	ee27 0a89 	vmul.f32	s0, s15, s18
 801f448:	f002 ffb6 	bl	80223b8 <roundf>
 801f44c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801f450:	e9da 312a 	ldrd	r3, r1, [sl, #168]	@ 0xa8
 801f454:	edcd 7a0b 	vstr	s15, [sp, #44]	@ 0x2c
 801f458:	f89d 202c 	ldrb.w	r2, [sp, #44]	@ 0x2c
 801f45c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f460:	2a1f      	cmp	r2, #31
 801f462:	f240 85d3 	bls.w	802000c <MEMS_runMagCal.constprop.0+0x1354>
 801f466:	3a20      	subs	r2, #32
 801f468:	2101      	movs	r1, #1
 801f46a:	fa01 f202 	lsl.w	r2, r1, r2
 801f46e:	401a      	ands	r2, r3
 801f470:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f472:	291f      	cmp	r1, #31
 801f474:	e9da 302c 	ldrd	r3, r0, [sl, #176]	@ 0xb0
 801f478:	f240 85c1 	bls.w	801fffe <MEMS_runMagCal.constprop.0+0x1346>
 801f47c:	3920      	subs	r1, #32
 801f47e:	2001      	movs	r0, #1
 801f480:	fa00 f101 	lsl.w	r1, r0, r1
 801f484:	ea01 0c03 	and.w	ip, r1, r3
 801f488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f48a:	291f      	cmp	r1, #31
 801f48c:	e9da 032e 	ldrd	r0, r3, [sl, #184]	@ 0xb8
 801f490:	f240 85ae 	bls.w	801fff0 <MEMS_runMagCal.constprop.0+0x1338>
 801f494:	f1a1 0020 	sub.w	r0, r1, #32
 801f498:	2101      	movs	r1, #1
 801f49a:	fa01 f000 	lsl.w	r0, r1, r0
 801f49e:	4003      	ands	r3, r0
 801f4a0:	2b00      	cmp	r3, #0
 801f4a2:	d149      	bne.n	801f538 <MEMS_runMagCal.constprop.0+0x880>
 801f4a4:	ea5c 0102 	orrs.w	r1, ip, r2
 801f4a8:	d14a      	bne.n	801f540 <MEMS_runMagCal.constprop.0+0x888>
 801f4aa:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801f4ae:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801f4b2:	f103 0e01 	add.w	lr, r3, #1
 801f4b6:	f000 be3b 	b.w	8020130 <MEMS_runMagCal.constprop.0+0x1478>
 801f4ba:	9902      	ldr	r1, [sp, #8]
 801f4bc:	f8ca 1020 	str.w	r1, [sl, #32]
 801f4c0:	2200      	movs	r2, #0
 801f4c2:	23ff      	movs	r3, #255	@ 0xff
 801f4c4:	f88a 20a0 	strb.w	r2, [sl, #160]	@ 0xa0
 801f4c8:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801f4cc:	f20d 5d64 	addw	sp, sp, #1380	@ 0x564
 801f4d0:	ecbd 8b0e 	vpop	{d8-d14}
 801f4d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4d8:	2102      	movs	r1, #2
 801f4da:	2300      	movs	r3, #0
 801f4dc:	930d      	str	r3, [sp, #52]	@ 0x34
 801f4de:	9304      	str	r3, [sp, #16]
 801f4e0:	e624      	b.n	801f12c <MEMS_runMagCal.constprop.0+0x474>
 801f4e2:	3b00      	subs	r3, #0
 801f4e4:	bf18      	it	ne
 801f4e6:	2301      	movne	r3, #1
 801f4e8:	e9ca 3306 	strd	r3, r3, [sl, #24]
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801f4f2:	f8ca 3020 	str.w	r3, [sl, #32]
 801f4f6:	2300      	movs	r3, #0
 801f4f8:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 801f4fc:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 801f500:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 801f504:	23ff      	movs	r3, #255	@ 0xff
 801f506:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801f50a:	e465      	b.n	801edd8 <MEMS_runMagCal.constprop.0+0x120>
 801f50c:	eddf 7a07 	vldr	s15, [pc, #28]	@ 801f52c <MEMS_runMagCal.constprop.0+0x874>
 801f510:	2c01      	cmp	r4, #1
 801f512:	edcd 7a13 	vstr	s15, [sp, #76]	@ 0x4c
 801f516:	eeb0 0a67 	vmov.f32	s0, s15
 801f51a:	f67f ae2b 	bls.w	801f174 <MEMS_runMagCal.constprop.0+0x4bc>
 801f51e:	e61f      	b.n	801f160 <MEMS_runMagCal.constprop.0+0x4a8>
 801f520:	427c0000 	.word	0x427c0000
 801f524:	3f666666 	.word	0x3f666666
 801f528:	3eaaaaab 	.word	0x3eaaaaab
 801f52c:	477fff00 	.word	0x477fff00
 801f530:	42340000 	.word	0x42340000
 801f534:	3faccccd 	.word	0x3faccccd
 801f538:	b112      	cbz	r2, 801f540 <MEMS_runMagCal.constprop.0+0x888>
 801f53a:	f1bc 0f00 	cmp.w	ip, #0
 801f53e:	d149      	bne.n	801f5d4 <MEMS_runMagCal.constprop.0+0x91c>
 801f540:	f99a 30a2 	ldrsb.w	r3, [sl, #162]	@ 0xa2
 801f544:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 801f548:	f103 0e01 	add.w	lr, r3, #1
 801f54c:	9b05      	ldr	r3, [sp, #20]
 801f54e:	4283      	cmp	r3, r0
 801f550:	f000 863e 	beq.w	80201d0 <MEMS_runMagCal.constprop.0+0x1518>
 801f554:	ebae 0303 	sub.w	r3, lr, r3
 801f558:	fb93 f2f0 	sdiv	r2, r3, r0
 801f55c:	fb00 3212 	mls	r2, r0, r2, r3
 801f560:	2a00      	cmp	r2, #0
 801f562:	bfb8      	it	lt
 801f564:	1812      	addlt	r2, r2, r0
 801f566:	b212      	sxth	r2, r2
 801f568:	9b05      	ldr	r3, [sp, #20]
 801f56a:	9411      	str	r4, [sp, #68]	@ 0x44
 801f56c:	eb03 0c02 	add.w	ip, r3, r2
 801f570:	e002      	b.n	801f578 <MEMS_runMagCal.constprop.0+0x8c0>
 801f572:	4562      	cmp	r2, ip
 801f574:	f000 85db 	beq.w	802012e <MEMS_runMagCal.constprop.0+0x1476>
 801f578:	fb92 f3f0 	sdiv	r3, r2, r0
 801f57c:	fb00 2313 	mls	r3, r0, r3, r2
 801f580:	b2db      	uxtb	r3, r3
 801f582:	3304      	adds	r3, #4
 801f584:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f588:	3201      	adds	r2, #1
 801f58a:	f9b3 40a2 	ldrsh.w	r4, [r3, #162]	@ 0xa2
 801f58e:	f9b3 10a4 	ldrsh.w	r1, [r3, #164]	@ 0xa4
 801f592:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	@ 0xa6
 801f596:	1b2c      	subs	r4, r5, r4
 801f598:	eba9 0101 	sub.w	r1, r9, r1
 801f59c:	ee07 4a90 	vmov	s15, r4
 801f5a0:	ee06 1a90 	vmov	s13, r1
 801f5a4:	1af3      	subs	r3, r6, r3
 801f5a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f5aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f5ae:	ee07 3a10 	vmov	s14, r3
 801f5b2:	eef0 7ae7 	vabs.f32	s15, s15
 801f5b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f5ba:	eef0 6ae6 	vabs.f32	s13, s13
 801f5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f5c2:	eeb0 7ac7 	vabs.f32	s14, s14
 801f5c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f5ca:	eef4 9ae7 	vcmpe.f32	s19, s15
 801f5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f5d2:	ddce      	ble.n	801f572 <MEMS_runMagCal.constprop.0+0x8ba>
 801f5d4:	9b06      	ldr	r3, [sp, #24]
 801f5d6:	9a01      	ldr	r2, [sp, #4]
 801f5d8:	f108 0801 	add.w	r8, r8, #1
 801f5dc:	fa0f f888 	sxth.w	r8, r8
 801f5e0:	445b      	add	r3, fp
 801f5e2:	4590      	cmp	r8, r2
 801f5e4:	fa1f fb83 	uxth.w	fp, r3
 801f5e8:	4643      	mov	r3, r8
 801f5ea:	f6ff ae9b 	blt.w	801f324 <MEMS_runMagCal.constprop.0+0x66c>
 801f5ee:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801f5f0:	f89a 3014 	ldrb.w	r3, [sl, #20]
 801f5f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f5f6:	431a      	orrs	r2, r3
 801f5f8:	b2d3      	uxtb	r3, r2
 801f5fa:	f88a 3014 	strb.w	r3, [sl, #20]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	f43f af64 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801f604:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 801f608:	9301      	str	r3, [sp, #4]
 801f60a:	2b19      	cmp	r3, #25
 801f60c:	f67f af5e 	bls.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801f610:	b125      	cbz	r5, 801f61c <MEMS_runMagCal.constprop.0+0x964>
 801f612:	f8da 3018 	ldr.w	r3, [sl, #24]
 801f616:	2b00      	cmp	r3, #0
 801f618:	f040 8622 	bne.w	8020260 <MEMS_runMagCal.constprop.0+0x15a8>
 801f61c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f61e:	2b00      	cmp	r3, #0
 801f620:	f040 8651 	bne.w	80202c6 <MEMS_runMagCal.constprop.0+0x160e>
 801f624:	2300      	movs	r3, #0
 801f626:	9804      	ldr	r0, [sp, #16]
 801f628:	f8da c0b0 	ldr.w	ip, [sl, #176]	@ 0xb0
 801f62c:	f8da 70bc 	ldr.w	r7, [sl, #188]	@ 0xbc
 801f630:	932b      	str	r3, [sp, #172]	@ 0xac
 801f632:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 801f636:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
 801f63a:	e9da 592a 	ldrd	r5, r9, [sl, #168]	@ 0xa8
 801f63e:	e9da 8e2d 	ldrd	r8, lr, [sl, #180]	@ 0xb4
 801f642:	4602      	mov	r2, r0
 801f644:	4604      	mov	r4, r0
 801f646:	2601      	movs	r6, #1
 801f648:	2b1f      	cmp	r3, #31
 801f64a:	f240 843e 	bls.w	801feca <MEMS_runMagCal.constprop.0+0x1212>
 801f64e:	f1a3 0120 	sub.w	r1, r3, #32
 801f652:	fa06 f101 	lsl.w	r1, r6, r1
 801f656:	420d      	tst	r5, r1
 801f658:	bf1c      	itt	ne
 801f65a:	3001      	addne	r0, #1
 801f65c:	b2c0      	uxtbne	r0, r0
 801f65e:	ea1c 0f01 	tst.w	ip, r1
 801f662:	bf18      	it	ne
 801f664:	3401      	addne	r4, #1
 801f666:	ea01 0107 	and.w	r1, r1, r7
 801f66a:	f103 0301 	add.w	r3, r3, #1
 801f66e:	bf18      	it	ne
 801f670:	b2e4      	uxtbne	r4, r4
 801f672:	2900      	cmp	r1, #0
 801f674:	bf18      	it	ne
 801f676:	3201      	addne	r2, #1
 801f678:	2b40      	cmp	r3, #64	@ 0x40
 801f67a:	b2d2      	uxtb	r2, r2
 801f67c:	d1e4      	bne.n	801f648 <MEMS_runMagCal.constprop.0+0x990>
 801f67e:	2805      	cmp	r0, #5
 801f680:	f240 841e 	bls.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801f684:	2c05      	cmp	r4, #5
 801f686:	f240 841b 	bls.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801f68a:	2a05      	cmp	r2, #5
 801f68c:	f240 8418 	bls.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801f690:	f89a 40a1 	ldrb.w	r4, [sl, #161]	@ 0xa1
 801f694:	9b01      	ldr	r3, [sp, #4]
 801f696:	f99a 50a2 	ldrsb.w	r5, [sl, #162]	@ 0xa2
 801f69a:	42a3      	cmp	r3, r4
 801f69c:	f105 0701 	add.w	r7, r5, #1
 801f6a0:	f000 86ab 	beq.w	80203fa <MEMS_runMagCal.constprop.0+0x1742>
 801f6a4:	1afa      	subs	r2, r7, r3
 801f6a6:	fb92 f3f4 	sdiv	r3, r2, r4
 801f6aa:	fb04 2213 	mls	r2, r4, r3, r2
 801f6ae:	2a00      	cmp	r2, #0
 801f6b0:	bfb8      	it	lt
 801f6b2:	1912      	addlt	r2, r2, r4
 801f6b4:	b212      	sxth	r2, r2
 801f6b6:	f102 0315 	add.w	r3, r2, #21
 801f6ba:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f6be:	f9b3 601a 	ldrsh.w	r6, [r3, #26]
 801f6c2:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 801f6c6:	f9b3 101e 	ldrsh.w	r1, [r3, #30]
 801f6ca:	9b01      	ldr	r3, [sp, #4]
 801f6cc:	468c      	mov	ip, r1
 801f6ce:	eb03 0902 	add.w	r9, r3, r2
 801f6d2:	4686      	mov	lr, r0
 801f6d4:	46b0      	mov	r8, r6
 801f6d6:	fb92 f3f4 	sdiv	r3, r2, r4
 801f6da:	fb04 2313 	mls	r3, r4, r3, r2
 801f6de:	b2db      	uxtb	r3, r3
 801f6e0:	3315      	adds	r3, #21
 801f6e2:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f6e6:	3201      	adds	r2, #1
 801f6e8:	f9b3 b01a 	ldrsh.w	fp, [r3, #26]
 801f6ec:	455e      	cmp	r6, fp
 801f6ee:	bfb8      	it	lt
 801f6f0:	465e      	movlt	r6, fp
 801f6f2:	45d8      	cmp	r8, fp
 801f6f4:	bfa8      	it	ge
 801f6f6:	46d8      	movge	r8, fp
 801f6f8:	f9b3 b01c 	ldrsh.w	fp, [r3, #28]
 801f6fc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801f700:	4558      	cmp	r0, fp
 801f702:	bfb8      	it	lt
 801f704:	4658      	movlt	r0, fp
 801f706:	45de      	cmp	lr, fp
 801f708:	bfa8      	it	ge
 801f70a:	46de      	movge	lr, fp
 801f70c:	4299      	cmp	r1, r3
 801f70e:	bfb8      	it	lt
 801f710:	4619      	movlt	r1, r3
 801f712:	459c      	cmp	ip, r3
 801f714:	bfa8      	it	ge
 801f716:	469c      	movge	ip, r3
 801f718:	454a      	cmp	r2, r9
 801f71a:	d1dc      	bne.n	801f6d6 <MEMS_runMagCal.constprop.0+0xa1e>
 801f71c:	eba6 0308 	sub.w	r3, r6, r8
 801f720:	ed5f 7a7d 	vldr	s15, [pc, #-500]	@ 801f530 <MEMS_runMagCal.constprop.0+0x878>
 801f724:	f89a b054 	ldrb.w	fp, [sl, #84]	@ 0x54
 801f728:	f89a 606c 	ldrb.w	r6, [sl, #108]	@ 0x6c
 801f72c:	b21b      	sxth	r3, r3
 801f72e:	ee68 7a27 	vmul.f32	s15, s16, s15
 801f732:	ee06 3a90 	vmov	s13, r3
 801f736:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 801f73a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801f73e:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f742:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801f746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f74a:	f300 8636 	bgt.w	80203ba <MEMS_runMagCal.constprop.0+0x1702>
 801f74e:	eba0 020e 	sub.w	r2, r0, lr
 801f752:	b212      	sxth	r2, r2
 801f754:	ee06 2a90 	vmov	s13, r2
 801f758:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f75c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801f760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f764:	f100 8629 	bmi.w	80203ba <MEMS_runMagCal.constprop.0+0x1702>
 801f768:	eba1 010c 	sub.w	r1, r1, ip
 801f76c:	b209      	sxth	r1, r1
 801f76e:	ee05 1a90 	vmov	s11, r1
 801f772:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801f776:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f77e:	f100 861c 	bmi.w	80203ba <MEMS_runMagCal.constprop.0+0x1702>
 801f782:	429a      	cmp	r2, r3
 801f784:	4610      	mov	r0, r2
 801f786:	bfb8      	it	lt
 801f788:	4618      	movlt	r0, r3
 801f78a:	4288      	cmp	r0, r1
 801f78c:	bfb8      	it	lt
 801f78e:	4608      	movlt	r0, r1
 801f790:	ee09 0a10 	vmov	s18, r0
 801f794:	429a      	cmp	r2, r3
 801f796:	4610      	mov	r0, r2
 801f798:	ee19 5a10 	vmov	r5, s18
 801f79c:	bfa8      	it	ge
 801f79e:	4618      	movge	r0, r3
 801f7a0:	4288      	cmp	r0, r1
 801f7a2:	bfa8      	it	ge
 801f7a4:	4608      	movge	r0, r1
 801f7a6:	429d      	cmp	r5, r3
 801f7a8:	f8ad 005e 	strh.w	r0, [sp, #94]	@ 0x5e
 801f7ac:	dd03      	ble.n	801f7b6 <MEMS_runMagCal.constprop.0+0xafe>
 801f7ae:	4298      	cmp	r0, r3
 801f7b0:	bfb8      	it	lt
 801f7b2:	f8ad 305e 	strhlt.w	r3, [sp, #94]	@ 0x5e
 801f7b6:	ee19 3a10 	vmov	r3, s18
 801f7ba:	4293      	cmp	r3, r2
 801f7bc:	dd03      	ble.n	801f7c6 <MEMS_runMagCal.constprop.0+0xb0e>
 801f7be:	4290      	cmp	r0, r2
 801f7c0:	bfb8      	it	lt
 801f7c2:	f8ad 205e 	strhlt.w	r2, [sp, #94]	@ 0x5e
 801f7c6:	ee19 3a10 	vmov	r3, s18
 801f7ca:	4299      	cmp	r1, r3
 801f7cc:	da03      	bge.n	801f7d6 <MEMS_runMagCal.constprop.0+0xb1e>
 801f7ce:	4281      	cmp	r1, r0
 801f7d0:	bfc8      	it	gt
 801f7d2:	f8ad 105e 	strhgt.w	r1, [sp, #94]	@ 0x5e
 801f7d6:	ea5b 0306 	orrs.w	r3, fp, r6
 801f7da:	f040 8627 	bne.w	802042c <MEMS_runMagCal.constprop.0+0x1774>
 801f7de:	eef4 7ac6 	vcmpe.f32	s15, s12
 801f7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7e6:	f300 866a 	bgt.w	80204be <MEMS_runMagCal.constprop.0+0x1806>
 801f7ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 801f7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7f2:	f300 8664 	bgt.w	80204be <MEMS_runMagCal.constprop.0+0x1806>
 801f7f6:	eef4 7ae5 	vcmpe.f32	s15, s11
 801f7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f7fe:	bfcc      	ite	gt
 801f800:	f04f 0901 	movgt.w	r9, #1
 801f804:	f04f 0900 	movle.w	r9, #0
 801f808:	ed1f 7ab6 	vldr	s14, [pc, #-728]	@ 801f534 <MEMS_runMagCal.constprop.0+0x87c>
 801f80c:	eeb8 5ac9 	vcvt.f32.s32	s10, s18
 801f810:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f814:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801f818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f81c:	f2c0 8338 	blt.w	801fe90 <MEMS_runMagCal.constprop.0+0x11d8>
 801f820:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 801f824:	ee05 3a10 	vmov	s10, r3
 801f828:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801f82c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801f830:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f834:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801f838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f83c:	f2c0 8328 	blt.w	801fe90 <MEMS_runMagCal.constprop.0+0x11d8>
 801f840:	ee19 3a10 	vmov	r3, s18
 801f844:	ebb3 0f40 	cmp.w	r3, r0, lsl #1
 801f848:	f280 8322 	bge.w	801fe90 <MEMS_runMagCal.constprop.0+0x11d8>
 801f84c:	ee07 0a10 	vmov	s14, r0
 801f850:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801f854:	eeb7 5a04 	vmov.f32	s10, #116	@ 0x3fa00000  1.250
 801f858:	ee27 7a05 	vmul.f32	s14, s14, s10
 801f85c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801f860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f864:	f140 8314 	bpl.w	801fe90 <MEMS_runMagCal.constprop.0+0x11d8>
 801f868:	9b01      	ldr	r3, [sp, #4]
 801f86a:	42a3      	cmp	r3, r4
 801f86c:	f001 842a 	beq.w	80210c4 <MEMS_runMagCal.constprop.0+0x240c>
 801f870:	1afb      	subs	r3, r7, r3
 801f872:	fb93 f2f4 	sdiv	r2, r3, r4
 801f876:	fb04 3312 	mls	r3, r4, r2, r3
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	bfb8      	it	lt
 801f87e:	191b      	addlt	r3, r3, r4
 801f880:	b21b      	sxth	r3, r3
 801f882:	fa4f f883 	sxtb.w	r8, r3
 801f886:	9b04      	ldr	r3, [sp, #16]
 801f888:	9303      	str	r3, [sp, #12]
 801f88a:	469e      	mov	lr, r3
 801f88c:	f1c8 0301 	rsb	r3, r8, #1
 801f890:	e9cd 3605 	strd	r3, r6, [sp, #20]
 801f894:	9707      	str	r7, [sp, #28]
 801f896:	4641      	mov	r1, r8
 801f898:	f108 0801 	add.w	r8, r8, #1
 801f89c:	fb91 f3f4 	sdiv	r3, r1, r4
 801f8a0:	fb04 1113 	mls	r1, r4, r3, r1
 801f8a4:	b24a      	sxtb	r2, r1
 801f8a6:	fb98 f3f4 	sdiv	r3, r8, r4
 801f8aa:	fb04 8313 	mls	r3, r4, r3, r8
 801f8ae:	2a00      	cmp	r2, #0
 801f8b0:	b25b      	sxtb	r3, r3
 801f8b2:	f103 0304 	add.w	r3, r3, #4
 801f8b6:	bfbc      	itt	lt
 801f8b8:	1909      	addlt	r1, r1, r4
 801f8ba:	b24a      	sxtblt	r2, r1
 801f8bc:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801f8c0:	3204      	adds	r2, #4
 801f8c2:	f9b1 c0a2 	ldrsh.w	ip, [r1, #162]	@ 0xa2
 801f8c6:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801f8ca:	f9b1 50a2 	ldrsh.w	r5, [r1, #162]	@ 0xa2
 801f8ce:	fa1f f18c 	uxth.w	r1, ip
 801f8d2:	45ac      	cmp	ip, r5
 801f8d4:	b2a8      	uxth	r0, r5
 801f8d6:	bfaa      	itet	ge
 801f8d8:	1a09      	subge	r1, r1, r0
 801f8da:	1a40      	sublt	r0, r0, r1
 801f8dc:	b20e      	sxthge	r6, r1
 801f8de:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801f8e2:	bfb8      	it	lt
 801f8e4:	b206      	sxthlt	r6, r0
 801f8e6:	f9b1 c0a4 	ldrsh.w	ip, [r1, #164]	@ 0xa4
 801f8ea:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801f8ee:	f9b1 50a4 	ldrsh.w	r5, [r1, #164]	@ 0xa4
 801f8f2:	fa1f f18c 	uxth.w	r1, ip
 801f8f6:	45ac      	cmp	ip, r5
 801f8f8:	b2a8      	uxth	r0, r5
 801f8fa:	bfaa      	itet	ge
 801f8fc:	1a09      	subge	r1, r1, r0
 801f8fe:	1a40      	sublt	r0, r0, r1
 801f900:	b20f      	sxthge	r7, r1
 801f902:	eb0a 01c3 	add.w	r1, sl, r3, lsl #3
 801f906:	bfb8      	it	lt
 801f908:	b207      	sxthlt	r7, r0
 801f90a:	f9b1 c0a6 	ldrsh.w	ip, [r1, #166]	@ 0xa6
 801f90e:	eb0a 01c2 	add.w	r1, sl, r2, lsl #3
 801f912:	fa1f f08c 	uxth.w	r0, ip
 801f916:	f9b1 50a6 	ldrsh.w	r5, [r1, #166]	@ 0xa6
 801f91a:	b2a9      	uxth	r1, r5
 801f91c:	45ac      	cmp	ip, r5
 801f91e:	bfb4      	ite	lt
 801f920:	1a09      	sublt	r1, r1, r0
 801f922:	1a41      	subge	r1, r0, r1
 801f924:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 801f928:	eb0a 00c2 	add.w	r0, sl, r2, lsl #3
 801f92c:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	@ 0xa0
 801f930:	f8b0 30a0 	ldrh.w	r3, [r0, #160]	@ 0xa0
 801f934:	1ad2      	subs	r2, r2, r3
 801f936:	b212      	sxth	r2, r2
 801f938:	2a00      	cmp	r2, #0
 801f93a:	b209      	sxth	r1, r1
 801f93c:	dd20      	ble.n	801f980 <MEMS_runMagCal.constprop.0+0xcc8>
 801f93e:	19bb      	adds	r3, r7, r6
 801f940:	ee07 2a90 	vmov	s15, r2
 801f944:	440b      	add	r3, r1
 801f946:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801f94a:	fb02 f303 	mul.w	r3, r2, r3
 801f94e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f952:	ee07 3a90 	vmov	s15, r3
 801f956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f95a:	f10e 0e01 	add.w	lr, lr, #1
 801f95e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801f962:	fa5f fe8e 	uxtb.w	lr, lr
 801f966:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f96a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801f96e:	ee17 3a90 	vmov	r3, s15
 801f972:	b21b      	sxth	r3, r3
 801f974:	2b96      	cmp	r3, #150	@ 0x96
 801f976:	dd03      	ble.n	801f980 <MEMS_runMagCal.constprop.0+0xcc8>
 801f978:	9b03      	ldr	r3, [sp, #12]
 801f97a:	3301      	adds	r3, #1
 801f97c:	b2db      	uxtb	r3, r3
 801f97e:	9303      	str	r3, [sp, #12]
 801f980:	9b05      	ldr	r3, [sp, #20]
 801f982:	9a01      	ldr	r2, [sp, #4]
 801f984:	4443      	add	r3, r8
 801f986:	b2db      	uxtb	r3, r3
 801f988:	429a      	cmp	r2, r3
 801f98a:	d884      	bhi.n	801f896 <MEMS_runMagCal.constprop.0+0xbde>
 801f98c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f994:	4573      	cmp	r3, lr
 801f996:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 801f99a:	f340 8291 	ble.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801f99e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f9a0:	b91b      	cbnz	r3, 801f9aa <MEMS_runMagCal.constprop.0+0xcf2>
 801f9a2:	3e02      	subs	r6, #2
 801f9a4:	2e01      	cmp	r6, #1
 801f9a6:	f241 831b 	bls.w	8020fe0 <MEMS_runMagCal.constprop.0+0x2328>
 801f9aa:	9b01      	ldr	r3, [sp, #4]
 801f9ac:	42a3      	cmp	r3, r4
 801f9ae:	f000 8590 	beq.w	80204d2 <MEMS_runMagCal.constprop.0+0x181a>
 801f9b2:	1afb      	subs	r3, r7, r3
 801f9b4:	fb93 f2f4 	sdiv	r2, r3, r4
 801f9b8:	fb04 3312 	mls	r3, r4, r2, r3
 801f9bc:	2b00      	cmp	r3, #0
 801f9be:	bfb8      	it	lt
 801f9c0:	191b      	addlt	r3, r3, r4
 801f9c2:	b21b      	sxth	r3, r3
 801f9c4:	eddf 9aea 	vldr	s19, [pc, #936]	@ 801fd70 <MEMS_runMagCal.constprop.0+0x10b8>
 801f9c8:	4619      	mov	r1, r3
 801f9ca:	eeb0 aa69 	vmov.f32	s20, s19
 801f9ce:	eef0 aa69 	vmov.f32	s21, s19
 801f9d2:	2000      	movs	r0, #0
 801f9d4:	fb91 f2f4 	sdiv	r2, r1, r4
 801f9d8:	fb04 1212 	mls	r2, r4, r2, r1
 801f9dc:	b2d2      	uxtb	r2, r2
 801f9de:	3204      	adds	r2, #4
 801f9e0:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801f9e4:	3001      	adds	r0, #1
 801f9e6:	f9b2 50a2 	ldrsh.w	r5, [r2, #162]	@ 0xa2
 801f9ea:	ee07 5a90 	vmov	s15, r5
 801f9ee:	f9b2 50a4 	ldrsh.w	r5, [r2, #164]	@ 0xa4
 801f9f2:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801f9f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f9fa:	ee07 5a10 	vmov	s14, r5
 801f9fe:	ee7a aaa7 	vadd.f32	s21, s21, s15
 801fa02:	ee07 2a90 	vmov	s15, r2
 801fa06:	9d01      	ldr	r5, [sp, #4]
 801fa08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801fa0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fa10:	b2c2      	uxtb	r2, r0
 801fa12:	4295      	cmp	r5, r2
 801fa14:	ee3a aa07 	vadd.f32	s20, s20, s14
 801fa18:	ee79 9aa7 	vadd.f32	s19, s19, s15
 801fa1c:	f101 0101 	add.w	r1, r1, #1
 801fa20:	d8d8      	bhi.n	801f9d4 <MEMS_runMagCal.constprop.0+0xd1c>
 801fa22:	ee07 5a90 	vmov	s15, r5
 801fa26:	eeb8 bae7 	vcvt.f32.s32	s22, s15
 801fa2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801fa2e:	eec7 4a8b 	vdiv.f32	s9, s15, s22
 801fa32:	2100      	movs	r1, #0
 801fa34:	eddf 6ace 	vldr	s13, [pc, #824]	@ 801fd70 <MEMS_runMagCal.constprop.0+0x10b8>
 801fa38:	ee6a aaa4 	vmul.f32	s21, s21, s9
 801fa3c:	ee2a aa24 	vmul.f32	s20, s20, s9
 801fa40:	ee69 9aa4 	vmul.f32	s19, s19, s9
 801fa44:	eeb0 6a66 	vmov.f32	s12, s13
 801fa48:	eef0 5a66 	vmov.f32	s11, s13
 801fa4c:	eeb0 5a66 	vmov.f32	s10, s13
 801fa50:	eef0 ca66 	vmov.f32	s25, s13
 801fa54:	eef0 7a66 	vmov.f32	s15, s13
 801fa58:	fb93 f2f4 	sdiv	r2, r3, r4
 801fa5c:	fb04 3212 	mls	r2, r4, r2, r3
 801fa60:	b2d2      	uxtb	r2, r2
 801fa62:	3204      	adds	r2, #4
 801fa64:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801fa68:	3101      	adds	r1, #1
 801fa6a:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801fa6e:	ee03 0a90 	vmov	s7, r0
 801fa72:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801fa76:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801fa7a:	ee04 0a10 	vmov	s8, r0
 801fa7e:	ee04 2a90 	vmov	s9, r2
 801fa82:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 801fa86:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801fa8a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801fa8e:	9801      	ldr	r0, [sp, #4]
 801fa90:	ee73 3aea 	vsub.f32	s7, s7, s21
 801fa94:	ee34 4a4a 	vsub.f32	s8, s8, s20
 801fa98:	ee74 4ae9 	vsub.f32	s9, s9, s19
 801fa9c:	b2ca      	uxtb	r2, r1
 801fa9e:	4290      	cmp	r0, r2
 801faa0:	eee3 caa3 	vfma.f32	s25, s7, s7
 801faa4:	f103 0301 	add.w	r3, r3, #1
 801faa8:	eea3 5a84 	vfma.f32	s10, s7, s8
 801faac:	eee3 5aa4 	vfma.f32	s11, s7, s9
 801fab0:	eee4 7a04 	vfma.f32	s15, s8, s8
 801fab4:	eea4 6a24 	vfma.f32	s12, s8, s9
 801fab8:	eee4 6aa4 	vfma.f32	s13, s9, s9
 801fabc:	d8cc      	bhi.n	801fa58 <MEMS_runMagCal.constprop.0+0xda0>
 801fabe:	ee25 4aa5 	vmul.f32	s8, s11, s11
 801fac2:	eddf 4aac 	vldr	s9, [pc, #688]	@ 801fd74 <MEMS_runMagCal.constprop.0+0x10bc>
 801fac6:	eea5 4a05 	vfma.f32	s8, s10, s10
 801faca:	eea6 4a06 	vfma.f32	s8, s12, s12
 801face:	eeb4 4ae4 	vcmpe.f32	s8, s9
 801fad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fad6:	d471      	bmi.n	801fbbc <MEMS_runMagCal.constprop.0+0xf04>
 801fad8:	ee7c baa7 	vadd.f32	s23, s25, s15
 801fadc:	ed9f caa6 	vldr	s24, [pc, #664]	@ 801fd78 <MEMS_runMagCal.constprop.0+0x10c0>
 801fae0:	ee7b baa6 	vadd.f32	s23, s23, s13
 801fae4:	eef0 3a00 	vmov.f32	s7, #0	@ 0x40000000  2.0
 801fae8:	ee6b ba8c 	vmul.f32	s23, s23, s24
 801faec:	ee77 7aeb 	vsub.f32	s15, s15, s23
 801faf0:	ee3c 7aeb 	vsub.f32	s14, s25, s23
 801faf4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801faf8:	ee76 6aeb 	vsub.f32	s13, s13, s23
 801fafc:	eee7 4a07 	vfma.f32	s9, s14, s14
 801fb00:	eee4 4a23 	vfma.f32	s9, s8, s7
 801fb04:	ed9f 4a9d 	vldr	s8, [pc, #628]	@ 801fd7c <MEMS_runMagCal.constprop.0+0x10c4>
 801fb08:	eee6 4aa6 	vfma.f32	s9, s13, s13
 801fb0c:	ee64 4a84 	vmul.f32	s9, s9, s8
 801fb10:	eeb1 dae4 	vsqrt.f32	s26, s9
 801fb14:	eec6 4a8d 	vdiv.f32	s9, s13, s26
 801fb18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fb1c:	ee87 4a0d 	vdiv.f32	s8, s14, s26
 801fb20:	ee86 7a8d 	vdiv.f32	s14, s13, s26
 801fb24:	ee25 5a07 	vmul.f32	s10, s10, s14
 801fb28:	ee65 5a87 	vmul.f32	s11, s11, s14
 801fb2c:	ee66 6a07 	vmul.f32	s13, s12, s14
 801fb30:	ee27 7a87 	vmul.f32	s14, s15, s14
 801fb34:	ee65 7a64 	vnmul.f32	s15, s10, s9
 801fb38:	ee26 6ae6 	vnmul.f32	s12, s13, s13
 801fb3c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 801fb40:	eea4 6a87 	vfma.f32	s12, s9, s14
 801fb44:	ee67 7a85 	vmul.f32	s15, s15, s10
 801fb48:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801fb4c:	eee6 7a04 	vfma.f32	s15, s12, s8
 801fb50:	eea6 7a85 	vfma.f32	s14, s13, s10
 801fb54:	eeb8 6a00 	vmov.f32	s12, #128	@ 0xc0000000 -2.0
 801fb58:	eee7 7a25 	vfma.f32	s15, s14, s11
 801fb5c:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fb60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb64:	f241 8299 	bls.w	802109a <MEMS_runMagCal.constprop.0+0x23e2>
 801fb68:	eef4 7ae3 	vcmpe.f32	s15, s7
 801fb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fb70:	f281 828f 	bge.w	8021092 <MEMS_runMagCal.constprop.0+0x23da>
 801fb74:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 801fb78:	ee27 0a80 	vmul.f32	s0, s15, s0
 801fb7c:	f002 f8a8 	bl	8021cd0 <acosf>
 801fb80:	ee20 ca0c 	vmul.f32	s24, s0, s24
 801fb84:	eeb0 0a4c 	vmov.f32	s0, s24
 801fb88:	f002 f972 	bl	8021e70 <cosf>
 801fb8c:	eef0 7a40 	vmov.f32	s15, s0
 801fb90:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 801fd80 <MEMS_runMagCal.constprop.0+0x10c8>
 801fb94:	ee3d da0d 	vadd.f32	s26, s26, s26
 801fb98:	ee3c 0a00 	vadd.f32	s0, s24, s0
 801fb9c:	eef0 ca6b 	vmov.f32	s25, s23
 801fba0:	eeed ca27 	vfma.f32	s25, s26, s15
 801fba4:	f002 f964 	bl	8021e70 <cosf>
 801fba8:	eef0 6a6b 	vmov.f32	s13, s23
 801fbac:	eeed 6a00 	vfma.f32	s13, s26, s0
 801fbb0:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 801fbb4:	ee7c 7aa6 	vadd.f32	s15, s25, s13
 801fbb8:	eedb 7a86 	vfnms.f32	s15, s23, s12
 801fbbc:	eef0 4aec 	vabs.f32	s9, s25
 801fbc0:	eef0 5ae7 	vabs.f32	s11, s15
 801fbc4:	eef4 5ae4 	vcmpe.f32	s11, s9
 801fbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbcc:	bf8c      	ite	hi
 801fbce:	eeb0 5a64 	vmovhi.f32	s10, s9
 801fbd2:	eeb0 5a65 	vmovls.f32	s10, s11
 801fbd6:	eeb0 6ae6 	vabs.f32	s12, s13
 801fbda:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbe2:	eef4 5ae4 	vcmpe.f32	s11, s9
 801fbe6:	bf88      	it	hi
 801fbe8:	eeb0 5a46 	vmovhi.f32	s10, s12
 801fbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fbf0:	bfb8      	it	lt
 801fbf2:	eef0 5a64 	vmovlt.f32	s11, s9
 801fbf6:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801fbfa:	eef3 4a09 	vmov.f32	s9, #57	@ 0x41c80000  25.0
 801fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc02:	ee65 4a24 	vmul.f32	s9, s10, s9
 801fc06:	bfb8      	it	lt
 801fc08:	eeb0 6a65 	vmovlt.f32	s12, s11
 801fc0c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801fc10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc14:	f301 81cd 	bgt.w	8020fb2 <MEMS_runMagCal.constprop.0+0x22fa>
 801fc18:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
 801fc1c:	ee25 5a25 	vmul.f32	s10, s10, s11
 801fc20:	eeb4 6ac5 	vcmpe.f32	s12, s10
 801fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc28:	dd03      	ble.n	801fc32 <MEMS_runMagCal.constprop.0+0xf7a>
 801fc2a:	9b01      	ldr	r3, [sp, #4]
 801fc2c:	2b22      	cmp	r3, #34	@ 0x22
 801fc2e:	f241 81c0 	bls.w	8020fb2 <MEMS_runMagCal.constprop.0+0x22fa>
 801fc32:	ee3c 7aa6 	vadd.f32	s14, s25, s13
 801fc36:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801fd84 <MEMS_runMagCal.constprop.0+0x10cc>
 801fc3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801fc3e:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 801fc42:	eef1 7ac7 	vsqrt.f32	s15, s14
 801fc46:	ee68 7aa7 	vmul.f32	s15, s17, s15
 801fc4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801fc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc52:	f301 81ae 	bgt.w	8020fb2 <MEMS_runMagCal.constprop.0+0x22fa>
 801fc56:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 801fc5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fc5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc62:	f101 81a6 	bmi.w	8020fb2 <MEMS_runMagCal.constprop.0+0x22fa>
 801fc66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801fd88 <MEMS_runMagCal.constprop.0+0x10d0>
 801fc6a:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801fc6e:	2300      	movs	r3, #0
 801fc70:	e9cd 3330 	strd	r3, r3, [sp, #192]	@ 0xc0
 801fc74:	9333      	str	r3, [sp, #204]	@ 0xcc
 801fc76:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801fc7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc82:	d408      	bmi.n	801fc96 <MEMS_runMagCal.constprop.0+0xfde>
 801fc84:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801fc88:	ee17 3a10 	vmov	r3, s14
 801fc8c:	b21b      	sxth	r3, r3
 801fc8e:	ee09 3a10 	vmov	s18, r3
 801fc92:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801fc96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801fd8c <MEMS_runMagCal.constprop.0+0x10d4>
 801fc9a:	ee86 7aa8 	vdiv.f32	s14, s13, s17
 801fc9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fca6:	dc08      	bgt.n	801fcba <MEMS_runMagCal.constprop.0+0x1002>
 801fca8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801fcac:	ee17 3a10 	vmov	r3, s14
 801fcb0:	b21b      	sxth	r3, r3
 801fcb2:	ee09 3a10 	vmov	s18, r3
 801fcb6:	eef8 7ac9 	vcvt.f32.s32	s15, s18
 801fcba:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801fcbe:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801fd90 <MEMS_runMagCal.constprop.0+0x10d8>
 801fcc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcca:	f341 8185 	ble.w	8020fd8 <MEMS_runMagCal.constprop.0+0x2320>
 801fcce:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801fd94 <MEMS_runMagCal.constprop.0+0x10dc>
 801fcd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcda:	f141 817d 	bpl.w	8020fd8 <MEMS_runMagCal.constprop.0+0x2320>
 801fcde:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 801fd98 <MEMS_runMagCal.constprop.0+0x10e0>
 801fce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fce6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801fcea:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801fcee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801fcf2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801fd8c <MEMS_runMagCal.constprop.0+0x10d4>
 801fcf6:	f8cd 9014 	str.w	r9, [sp, #20]
 801fcfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fcfe:	ee68 aaaa 	vmul.f32	s21, s17, s21
 801fd02:	ee28 aa8a 	vmul.f32	s20, s17, s20
 801fd06:	ee68 9aa9 	vmul.f32	s19, s17, s19
 801fd0a:	ed9f 9a1a 	vldr	s18, [pc, #104]	@ 801fd74 <MEMS_runMagCal.constprop.0+0x10bc>
 801fd0e:	9e04      	ldr	r6, [sp, #16]
 801fd10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801fd14:	edcd aa2c 	vstr	s21, [sp, #176]	@ 0xb0
 801fd18:	ed8d aa2d 	vstr	s20, [sp, #180]	@ 0xb4
 801fd1c:	edcd 9a2e 	vstr	s19, [sp, #184]	@ 0xb8
 801fd20:	edcd 7a2f 	vstr	s15, [sp, #188]	@ 0xbc
 801fd24:	edcd 7a32 	vstr	s15, [sp, #200]	@ 0xc8
 801fd28:	f8cd b00c 	str.w	fp, [sp, #12]
 801fd2c:	46b8      	mov	r8, r7
 801fd2e:	2500      	movs	r5, #0
 801fd30:	2240      	movs	r2, #64	@ 0x40
 801fd32:	4629      	mov	r1, r5
 801fd34:	a834      	add	r0, sp, #208	@ 0xd0
 801fd36:	e9cd 551f 	strd	r5, r5, [sp, #124]	@ 0x7c
 801fd3a:	e9cd 5521 	strd	r5, r5, [sp, #132]	@ 0x84
 801fd3e:	e9cd 551b 	strd	r5, r5, [sp, #108]	@ 0x6c
 801fd42:	e9cd 551d 	strd	r5, r5, [sp, #116]	@ 0x74
 801fd46:	f005 f848 	bl	8024dda <memset>
 801fd4a:	4629      	mov	r1, r5
 801fd4c:	2240      	movs	r2, #64	@ 0x40
 801fd4e:	a844      	add	r0, sp, #272	@ 0x110
 801fd50:	f005 f843 	bl	8024dda <memset>
 801fd54:	ed9d ba2f 	vldr	s22, [sp, #188]	@ 0xbc
 801fd58:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801fd9c <MEMS_runMagCal.constprop.0+0x10e4>
 801fd5c:	eeb4 bae7 	vcmpe.f32	s22, s15
 801fd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd64:	f100 857b 	bmi.w	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 801fd68:	45a1      	cmp	r9, r4
 801fd6a:	f000 853d 	beq.w	80207e8 <MEMS_runMagCal.constprop.0+0x1b30>
 801fd6e:	e01d      	b.n	801fdac <MEMS_runMagCal.constprop.0+0x10f4>
 801fd70:	00000000 	.word	0x00000000
 801fd74:	358637bd 	.word	0x358637bd
 801fd78:	3eaaaaab 	.word	0x3eaaaaab
 801fd7c:	3e2aaaab 	.word	0x3e2aaaab
 801fd80:	40060a92 	.word	0x40060a92
 801fd84:	42960000 	.word	0x42960000
 801fd88:	430d0000 	.word	0x430d0000
 801fd8c:	423c0000 	.word	0x423c0000
 801fd90:	41966667 	.word	0x41966667
 801fd94:	433c0000 	.word	0x433c0000
 801fd98:	3c2e4c41 	.word	0x3c2e4c41
 801fd9c:	3dcccccd 	.word	0x3dcccccd
 801fda0:	00000000 	.word	0x00000000
 801fda4:	2b8cbccb 	.word	0x2b8cbccb
 801fda8:	3a83126f 	.word	0x3a83126f
 801fdac:	eba8 0309 	sub.w	r3, r8, r9
 801fdb0:	fb93 f2f4 	sdiv	r2, r3, r4
 801fdb4:	fb04 3312 	mls	r3, r4, r2, r3
 801fdb8:	2b00      	cmp	r3, #0
 801fdba:	bfb8      	it	lt
 801fdbc:	191b      	addlt	r3, r3, r4
 801fdbe:	b21b      	sxth	r3, r3
 801fdc0:	ed5f 7a09 	vldr	s15, [pc, #-36]	@ 801fda0 <MEMS_runMagCal.constprop.0+0x10e8>
 801fdc4:	ed9d aa2c 	vldr	s20, [sp, #176]	@ 0xb0
 801fdc8:	eddd 9a2d 	vldr	s19, [sp, #180]	@ 0xb4
 801fdcc:	eddd aa2e 	vldr	s21, [sp, #184]	@ 0xb8
 801fdd0:	ed5f ca0c 	vldr	s25, [pc, #-48]	@ 801fda4 <MEMS_runMagCal.constprop.0+0x10ec>
 801fdd4:	eef0 ba67 	vmov.f32	s23, s15
 801fdd8:	eef0 5a67 	vmov.f32	s11, s15
 801fddc:	eeb0 0a67 	vmov.f32	s0, s15
 801fde0:	eef0 0a67 	vmov.f32	s1, s15
 801fde4:	eeb0 5a67 	vmov.f32	s10, s15
 801fde8:	eef0 4a67 	vmov.f32	s9, s15
 801fdec:	eeb0 1a67 	vmov.f32	s2, s15
 801fdf0:	eef0 1a67 	vmov.f32	s3, s15
 801fdf4:	eeb0 4a67 	vmov.f32	s8, s15
 801fdf8:	eef0 3a67 	vmov.f32	s7, s15
 801fdfc:	eeb0 3a67 	vmov.f32	s6, s15
 801fe00:	eeb0 2a67 	vmov.f32	s4, s15
 801fe04:	eef0 2a67 	vmov.f32	s5, s15
 801fe08:	2100      	movs	r1, #0
 801fe0a:	eeb7 ca00 	vmov.f32	s24, #112	@ 0x3f800000  1.0
 801fe0e:	fb93 f2f4 	sdiv	r2, r3, r4
 801fe12:	fb04 3212 	mls	r2, r4, r2, r3
 801fe16:	b2d2      	uxtb	r2, r2
 801fe18:	3204      	adds	r2, #4
 801fe1a:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 801fe1e:	ee3b dacb 	vsub.f32	s26, s23, s22
 801fe22:	f9b2 00a4 	ldrsh.w	r0, [r2, #164]	@ 0xa4
 801fe26:	ee06 0a10 	vmov	s12, r0
 801fe2a:	f9b2 00a2 	ldrsh.w	r0, [r2, #162]	@ 0xa2
 801fe2e:	f9b2 20a6 	ldrsh.w	r2, [r2, #166]	@ 0xa6
 801fe32:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801fe36:	ee0d 0a90 	vmov	s27, r0
 801fe3a:	ee26 6a28 	vmul.f32	s12, s12, s17
 801fe3e:	eef8 daed 	vcvt.f32.s32	s27, s27
 801fe42:	ee36 7a69 	vsub.f32	s14, s12, s19
 801fe46:	ee6d daa8 	vmul.f32	s27, s27, s17
 801fe4a:	ee06 2a90 	vmov	s13, r2
 801fe4e:	ee3d eaca 	vsub.f32	s28, s27, s20
 801fe52:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801fe56:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fe5a:	ee66 6aa8 	vmul.f32	s13, s13, s17
 801fe5e:	eeae 7a0e 	vfma.f32	s14, s28, s28
 801fe62:	ee3a ea6d 	vsub.f32	s28, s20, s27
 801fe66:	ee76 daea 	vsub.f32	s27, s13, s21
 801fe6a:	ee39 6ac6 	vsub.f32	s12, s19, s12
 801fe6e:	eead 7aad 	vfma.f32	s14, s27, s27
 801fe72:	ee7a 6ae6 	vsub.f32	s13, s21, s13
 801fe76:	eeb4 7aec 	vcmpe.f32	s14, s25
 801fe7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe7e:	f140 834b 	bpl.w	8020518 <MEMS_runMagCal.constprop.0+0x1860>
 801fe82:	3101      	adds	r1, #1
 801fe84:	b2ca      	uxtb	r2, r1
 801fe86:	4591      	cmp	r9, r2
 801fe88:	f103 0301 	add.w	r3, r3, #1
 801fe8c:	d8bf      	bhi.n	801fe0e <MEMS_runMagCal.constprop.0+0x1156>
 801fe8e:	e372      	b.n	8020576 <MEMS_runMagCal.constprop.0+0x18be>
 801fe90:	eeb7 7a02 	vmov.f32	s14, #114	@ 0x3f900000  1.125
 801fe94:	ee26 6a07 	vmul.f32	s12, s12, s14
 801fe98:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fe9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fea0:	dc0e      	bgt.n	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801fea2:	ee66 6a87 	vmul.f32	s13, s13, s14
 801fea6:	eef4 7ae6 	vcmpe.f32	s15, s13
 801feaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feae:	dc07      	bgt.n	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 801feb0:	ee25 7a87 	vmul.f32	s14, s11, s14
 801feb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801feb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801febc:	f77f acd4 	ble.w	801f868 <MEMS_runMagCal.constprop.0+0xbb0>
 801fec0:	2300      	movs	r3, #0
 801fec2:	f88a 3014 	strb.w	r3, [sl, #20]
 801fec6:	f7ff bb01 	b.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 801feca:	fa06 f103 	lsl.w	r1, r6, r3
 801fece:	ea19 0f01 	tst.w	r9, r1
 801fed2:	bf1c      	itt	ne
 801fed4:	3001      	addne	r0, #1
 801fed6:	b2c0      	uxtbne	r0, r0
 801fed8:	ea18 0f01 	tst.w	r8, r1
 801fedc:	bf18      	it	ne
 801fede:	3401      	addne	r4, #1
 801fee0:	ea0e 0101 	and.w	r1, lr, r1
 801fee4:	bf18      	it	ne
 801fee6:	b2e4      	uxtbne	r4, r4
 801fee8:	2900      	cmp	r1, #0
 801feea:	bf18      	it	ne
 801feec:	3201      	addne	r2, #1
 801feee:	b2d2      	uxtb	r2, r2
 801fef0:	3301      	adds	r3, #1
 801fef2:	f7ff bba9 	b.w	801f648 <MEMS_runMagCal.constprop.0+0x990>
 801fef6:	9908      	ldr	r1, [sp, #32]
 801fef8:	f8aa 20c4 	strh.w	r2, [sl, #196]	@ 0xc4
 801fefc:	9a03      	ldr	r2, [sp, #12]
 801fefe:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 801ff02:	fb01 2303 	mla	r3, r1, r3, r2
 801ff06:	f8ca 30a4 	str.w	r3, [sl, #164]	@ 0xa4
 801ff0a:	f04f 0301 	mov.w	r3, #1
 801ff0e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 801ff12:	9b05      	ldr	r3, [sp, #20]
 801ff14:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 801ff18:	f8aa 30c0 	strh.w	r3, [sl, #192]	@ 0xc0
 801ff1c:	fb95 f3f7 	sdiv	r3, r5, r7
 801ff20:	fb07 5313 	mls	r3, r7, r3, r5
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	bfb8      	it	lt
 801ff28:	19db      	addlt	r3, r3, r7
 801ff2a:	b21b      	sxth	r3, r3
 801ff2c:	ee07 3a90 	vmov	s15, r3
 801ff30:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ff34:	f8aa 50c2 	strh.w	r5, [sl, #194]	@ 0xc2
 801ff38:	ee20 0a09 	vmul.f32	s0, s0, s18
 801ff3c:	f8aa 60c6 	strh.w	r6, [sl, #198]	@ 0xc6
 801ff40:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 801ff44:	f002 fa38 	bl	80223b8 <roundf>
 801ff48:	fb99 f3f7 	sdiv	r3, r9, r7
 801ff4c:	fb07 9313 	mls	r3, r7, r3, r9
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ff56:	bfb8      	it	lt
 801ff58:	19db      	addlt	r3, r3, r7
 801ff5a:	b21b      	sxth	r3, r3
 801ff5c:	edcd 7a05 	vstr	s15, [sp, #20]
 801ff60:	ee07 3a90 	vmov	s15, r3
 801ff64:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ff68:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801ff6c:	ee20 0a09 	vmul.f32	s0, s0, s18
 801ff70:	f002 fa22 	bl	80223b8 <roundf>
 801ff74:	fb96 f3f7 	sdiv	r3, r6, r7
 801ff78:	fb07 6313 	mls	r3, r7, r3, r6
 801ff7c:	2b00      	cmp	r3, #0
 801ff7e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ff82:	bfb8      	it	lt
 801ff84:	19db      	addlt	r3, r3, r7
 801ff86:	b21b      	sxth	r3, r3
 801ff88:	edcd 7a05 	vstr	s15, [sp, #20]
 801ff8c:	ee07 3a90 	vmov	s15, r3
 801ff90:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ff94:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801ff98:	ee20 0a09 	vmul.f32	s0, s0, s18
 801ff9c:	f002 fa0c 	bl	80223b8 <roundf>
 801ffa0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ffa4:	2c1f      	cmp	r4, #31
 801ffa6:	edcd 7a05 	vstr	s15, [sp, #20]
 801ffaa:	f89d 2014 	ldrb.w	r2, [sp, #20]
 801ffae:	d94c      	bls.n	802004a <MEMS_runMagCal.constprop.0+0x1392>
 801ffb0:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 801ffb4:	3c20      	subs	r4, #32
 801ffb6:	2101      	movs	r1, #1
 801ffb8:	40a1      	lsls	r1, r4
 801ffba:	430b      	orrs	r3, r1
 801ffbc:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 801ffc0:	2d1f      	cmp	r5, #31
 801ffc2:	d93a      	bls.n	802003a <MEMS_runMagCal.constprop.0+0x1382>
 801ffc4:	f8da 10b0 	ldr.w	r1, [sl, #176]	@ 0xb0
 801ffc8:	3d20      	subs	r5, #32
 801ffca:	2301      	movs	r3, #1
 801ffcc:	40ab      	lsls	r3, r5
 801ffce:	430b      	orrs	r3, r1
 801ffd0:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 801ffd4:	2a1f      	cmp	r2, #31
 801ffd6:	d927      	bls.n	8020028 <MEMS_runMagCal.constprop.0+0x1370>
 801ffd8:	f8da 10bc 	ldr.w	r1, [sl, #188]	@ 0xbc
 801ffdc:	3a20      	subs	r2, #32
 801ffde:	2301      	movs	r3, #1
 801ffe0:	4093      	lsls	r3, r2
 801ffe2:	430b      	orrs	r3, r1
 801ffe4:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 801ffe8:	2301      	movs	r3, #1
 801ffea:	930e      	str	r3, [sp, #56]	@ 0x38
 801ffec:	f7ff baf2 	b.w	801f5d4 <MEMS_runMagCal.constprop.0+0x91c>
 801fff0:	460b      	mov	r3, r1
 801fff2:	2101      	movs	r1, #1
 801fff4:	fa01 f303 	lsl.w	r3, r1, r3
 801fff8:	4003      	ands	r3, r0
 801fffa:	f7ff ba51 	b.w	801f4a0 <MEMS_runMagCal.constprop.0+0x7e8>
 801fffe:	460b      	mov	r3, r1
 8020000:	2101      	movs	r1, #1
 8020002:	4099      	lsls	r1, r3
 8020004:	ea01 0c00 	and.w	ip, r1, r0
 8020008:	f7ff ba3e 	b.w	801f488 <MEMS_runMagCal.constprop.0+0x7d0>
 802000c:	4613      	mov	r3, r2
 802000e:	2201      	movs	r2, #1
 8020010:	409a      	lsls	r2, r3
 8020012:	400a      	ands	r2, r1
 8020014:	f7ff ba2c 	b.w	801f470 <MEMS_runMagCal.constprop.0+0x7b8>
 8020018:	f04f 0e01 	mov.w	lr, #1
 802001c:	f7ff b92c 	b.w	801f278 <MEMS_runMagCal.constprop.0+0x5c0>
 8020020:	2700      	movs	r7, #0
 8020022:	463b      	mov	r3, r7
 8020024:	f7ff b8b7 	b.w	801f196 <MEMS_runMagCal.constprop.0+0x4de>
 8020028:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 802002c:	2101      	movs	r1, #1
 802002e:	fa01 f202 	lsl.w	r2, r1, r2
 8020032:	4313      	orrs	r3, r2
 8020034:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 8020038:	e7d6      	b.n	801ffe8 <MEMS_runMagCal.constprop.0+0x1330>
 802003a:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 802003e:	2101      	movs	r1, #1
 8020040:	40a9      	lsls	r1, r5
 8020042:	430b      	orrs	r3, r1
 8020044:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 8020048:	e7c4      	b.n	801ffd4 <MEMS_runMagCal.constprop.0+0x131c>
 802004a:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 802004e:	2101      	movs	r1, #1
 8020050:	40a1      	lsls	r1, r4
 8020052:	430b      	orrs	r3, r1
 8020054:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 8020058:	e7b2      	b.n	801ffc0 <MEMS_runMagCal.constprop.0+0x1308>
 802005a:	2300      	movs	r3, #0
 802005c:	e9ca 332a 	strd	r3, r3, [sl, #168]	@ 0xa8
 8020060:	e9ca 332c 	strd	r3, r3, [sl, #176]	@ 0xb0
 8020064:	e9ca 332e 	strd	r3, r3, [sl, #184]	@ 0xb8
 8020068:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 802006c:	23ff      	movs	r3, #255	@ 0xff
 802006e:	f88a 30a2 	strb.w	r3, [sl, #162]	@ 0xa2
 8020072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020074:	2b00      	cmp	r3, #0
 8020076:	f47f a941 	bne.w	801f2fc <MEMS_runMagCal.constprop.0+0x644>
 802007a:	9b04      	ldr	r3, [sp, #16]
 802007c:	930e      	str	r3, [sp, #56]	@ 0x38
 802007e:	f7ff bab7 	b.w	801f5f0 <MEMS_runMagCal.constprop.0+0x938>
 8020082:	f241 225b 	movw	r2, #4699	@ 0x125b
 8020086:	4293      	cmp	r3, r2
 8020088:	f67f a874 	bls.w	801f174 <MEMS_runMagCal.constprop.0+0x4bc>
 802008c:	f5a3 5392 	sub.w	r3, r3, #4672	@ 0x1240
 8020090:	3b1c      	subs	r3, #28
 8020092:	b29b      	uxth	r3, r3
 8020094:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8020098:	4293      	cmp	r3, r2
 802009a:	f67f a86b 	bls.w	801f174 <MEMS_runMagCal.constprop.0+0x4bc>
 802009e:	f7ff b85f 	b.w	801f160 <MEMS_runMagCal.constprop.0+0x4a8>
 80200a2:	4545      	cmp	r5, r8
 80200a4:	f000 8118 	beq.w	80202d8 <MEMS_runMagCal.constprop.0+0x1620>
 80200a8:	2c03      	cmp	r4, #3
 80200aa:	f47f a899 	bne.w	801f1e0 <MEMS_runMagCal.constprop.0+0x528>
 80200ae:	ee07 1a90 	vmov	s15, r1
 80200b2:	ed5f 6ac3 	vldr	s13, [pc, #-780]	@ 801fda8 <MEMS_runMagCal.constprop.0+0x10f0>
 80200b6:	ed9a 7a06 	vldr	s14, [sl, #24]
 80200ba:	f89a 3054 	ldrb.w	r3, [sl, #84]	@ 0x54
 80200be:	f8da 501c 	ldr.w	r5, [sl, #28]
 80200c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80200c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80200c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80200cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80200d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80200d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200d8:	f77f a882 	ble.w	801f1e0 <MEMS_runMagCal.constprop.0+0x528>
 80200dc:	2d00      	cmp	r5, #0
 80200de:	f43f a881 	beq.w	801f1e4 <MEMS_runMagCal.constprop.0+0x52c>
 80200e2:	eddd 7a02 	vldr	s15, [sp, #8]
 80200e6:	f105 030a 	add.w	r3, r5, #10
 80200ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80200ee:	ee07 3a90 	vmov	s15, r3
 80200f2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80200f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80200fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80200fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020102:	f77f a86f 	ble.w	801f1e4 <MEMS_runMagCal.constprop.0+0x52c>
 8020106:	f89a 3015 	ldrb.w	r3, [sl, #21]
 802010a:	2b00      	cmp	r3, #0
 802010c:	f47f a86a 	bne.w	801f1e4 <MEMS_runMagCal.constprop.0+0x52c>
 8020110:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020112:	2b00      	cmp	r3, #0
 8020114:	f43f a9da 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020118:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 802011c:	2bff      	cmp	r3, #255	@ 0xff
 802011e:	f47f a9d5 	bne.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020122:	f7ff b862 	b.w	801f1ea <MEMS_runMagCal.constprop.0+0x532>
 8020126:	f04f 0c00 	mov.w	ip, #0
 802012a:	f7fe bf8f 	b.w	801f04c <MEMS_runMagCal.constprop.0+0x394>
 802012e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020130:	fb9e f2f0 	sdiv	r2, lr, r0
 8020134:	fb00 e212 	mls	r2, r0, r2, lr
 8020138:	b252      	sxtb	r2, r2
 802013a:	f88a 20a2 	strb.w	r2, [sl, #162]	@ 0xa2
 802013e:	3204      	adds	r2, #4
 8020140:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8020144:	9b05      	ldr	r3, [sp, #20]
 8020146:	f8a2 50a2 	strh.w	r5, [r2, #162]	@ 0xa2
 802014a:	3301      	adds	r3, #1
 802014c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 802014e:	f8da 10a4 	ldr.w	r1, [sl, #164]	@ 0xa4
 8020152:	f8c2 50a4 	str.w	r5, [r2, #164]	@ 0xa4
 8020156:	4283      	cmp	r3, r0
 8020158:	f8ca 43b8 	str.w	r4, [sl, #952]	@ 0x3b8
 802015c:	9c03      	ldr	r4, [sp, #12]
 802015e:	f8aa 63bc 	strh.w	r6, [sl, #956]	@ 0x3bc
 8020162:	bfa8      	it	ge
 8020164:	4603      	movge	r3, r0
 8020166:	b2db      	uxtb	r3, r3
 8020168:	1a61      	subs	r1, r4, r1
 802016a:	4459      	add	r1, fp
 802016c:	4283      	cmp	r3, r0
 802016e:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 8020172:	f8a2 10a0 	strh.w	r1, [r2, #160]	@ 0xa0
 8020176:	f000 811a 	beq.w	80203ae <MEMS_runMagCal.constprop.0+0x16f6>
 802017a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802017c:	2b1f      	cmp	r3, #31
 802017e:	d940      	bls.n	8020202 <MEMS_runMagCal.constprop.0+0x154a>
 8020180:	f1a3 0120 	sub.w	r1, r3, #32
 8020184:	2201      	movs	r2, #1
 8020186:	f8da 30a8 	ldr.w	r3, [sl, #168]	@ 0xa8
 802018a:	408a      	lsls	r2, r1
 802018c:	4313      	orrs	r3, r2
 802018e:	f8ca 30a8 	str.w	r3, [sl, #168]	@ 0xa8
 8020192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020194:	2b1f      	cmp	r3, #31
 8020196:	d92b      	bls.n	80201f0 <MEMS_runMagCal.constprop.0+0x1538>
 8020198:	f8da 20b0 	ldr.w	r2, [sl, #176]	@ 0xb0
 802019c:	f1a3 0120 	sub.w	r1, r3, #32
 80201a0:	2301      	movs	r3, #1
 80201a2:	408b      	lsls	r3, r1
 80201a4:	4313      	orrs	r3, r2
 80201a6:	f8ca 30b0 	str.w	r3, [sl, #176]	@ 0xb0
 80201aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80201ac:	2b1f      	cmp	r3, #31
 80201ae:	d916      	bls.n	80201de <MEMS_runMagCal.constprop.0+0x1526>
 80201b0:	f8da 20bc 	ldr.w	r2, [sl, #188]	@ 0xbc
 80201b4:	f1a3 0120 	sub.w	r1, r3, #32
 80201b8:	2301      	movs	r3, #1
 80201ba:	408b      	lsls	r3, r1
 80201bc:	4313      	orrs	r3, r2
 80201be:	f8ca 30bc 	str.w	r3, [sl, #188]	@ 0xbc
 80201c2:	e711      	b.n	801ffe8 <MEMS_runMagCal.constprop.0+0x1330>
 80201c4:	2300      	movs	r3, #0
 80201c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80201c8:	2301      	movs	r3, #1
 80201ca:	9304      	str	r3, [sp, #16]
 80201cc:	f7fe bfad 	b.w	801f12a <MEMS_runMagCal.constprop.0+0x472>
 80201d0:	fb9e f2f3 	sdiv	r2, lr, r3
 80201d4:	fb03 e212 	mls	r2, r3, r2, lr
 80201d8:	b212      	sxth	r2, r2
 80201da:	f7ff b9c5 	b.w	801f568 <MEMS_runMagCal.constprop.0+0x8b0>
 80201de:	4619      	mov	r1, r3
 80201e0:	2201      	movs	r2, #1
 80201e2:	f8da 30b8 	ldr.w	r3, [sl, #184]	@ 0xb8
 80201e6:	408a      	lsls	r2, r1
 80201e8:	4313      	orrs	r3, r2
 80201ea:	f8ca 30b8 	str.w	r3, [sl, #184]	@ 0xb8
 80201ee:	e6fb      	b.n	801ffe8 <MEMS_runMagCal.constprop.0+0x1330>
 80201f0:	4619      	mov	r1, r3
 80201f2:	2201      	movs	r2, #1
 80201f4:	f8da 30b4 	ldr.w	r3, [sl, #180]	@ 0xb4
 80201f8:	408a      	lsls	r2, r1
 80201fa:	4313      	orrs	r3, r2
 80201fc:	f8ca 30b4 	str.w	r3, [sl, #180]	@ 0xb4
 8020200:	e7d3      	b.n	80201aa <MEMS_runMagCal.constprop.0+0x14f2>
 8020202:	4619      	mov	r1, r3
 8020204:	2201      	movs	r2, #1
 8020206:	f8da 30ac 	ldr.w	r3, [sl, #172]	@ 0xac
 802020a:	408a      	lsls	r2, r1
 802020c:	4313      	orrs	r3, r2
 802020e:	f8ca 30ac 	str.w	r3, [sl, #172]	@ 0xac
 8020212:	e7be      	b.n	8020192 <MEMS_runMagCal.constprop.0+0x14da>
 8020214:	ee07 2a10 	vmov	s14, r2
 8020218:	ee36 6a06 	vadd.f32	s12, s12, s12
 802021c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020220:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8020224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020228:	f77e af7c 	ble.w	801f124 <MEMS_runMagCal.constprop.0+0x46c>
 802022c:	ee07 1a10 	vmov	s14, r1
 8020230:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020234:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8020238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802023c:	f57e af72 	bpl.w	801f124 <MEMS_runMagCal.constprop.0+0x46c>
 8020240:	ee07 0a10 	vmov	s14, r0
 8020244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020248:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802024c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020250:	bf4c      	ite	mi
 8020252:	2301      	movmi	r3, #1
 8020254:	2300      	movpl	r3, #0
 8020256:	930d      	str	r3, [sp, #52]	@ 0x34
 8020258:	2300      	movs	r3, #0
 802025a:	9304      	str	r3, [sp, #16]
 802025c:	f7fe bf65 	b.w	801f12a <MEMS_runMagCal.constprop.0+0x472>
 8020260:	ee07 3a90 	vmov	s15, r3
 8020264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020268:	eddd 7a02 	vldr	s15, [sp, #8]
 802026c:	ed9f 6a9d 	vldr	s12, [pc, #628]	@ 80204e4 <MEMS_runMagCal.constprop.0+0x182c>
 8020270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020274:	eef7 6a08 	vmov.f32	s13, #120	@ 0x3fc00000  1.5
 8020278:	ee67 7a86 	vmul.f32	s15, s15, s12
 802027c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8020280:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8020284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020288:	f63f a9c8 	bhi.w	801f61c <MEMS_runMagCal.constprop.0+0x964>
 802028c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802028e:	2b00      	cmp	r3, #0
 8020290:	f43f a91c 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020294:	ee07 5a10 	vmov	s14, r5
 8020298:	eef8 6a47 	vcvt.f32.u32	s13, s14
 802029c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80202a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80202a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80202a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80202ac:	bf4c      	ite	mi
 80202ae:	2301      	movmi	r3, #1
 80202b0:	2300      	movpl	r3, #0
 80202b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80202b4:	f7ff b9b6 	b.w	801f624 <MEMS_runMagCal.constprop.0+0x96c>
 80202b8:	fb91 f2f4 	sdiv	r2, r1, r4
 80202bc:	fb04 1112 	mls	r1, r4, r2, r1
 80202c0:	b209      	sxth	r1, r1
 80202c2:	f7fe bfce 	b.w	801f262 <MEMS_runMagCal.constprop.0+0x5aa>
 80202c6:	eddd 7a02 	vldr	s15, [sp, #8]
 80202ca:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80204e4 <MEMS_runMagCal.constprop.0+0x182c>
 80202ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80202d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80202d6:	e7dd      	b.n	8020294 <MEMS_runMagCal.constprop.0+0x15dc>
 80202d8:	eddf 6a8a 	vldr	s13, [pc, #552]	@ 8020504 <MEMS_runMagCal.constprop.0+0x184c>
 80202dc:	1c7b      	adds	r3, r7, #1
 80202de:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 80202e2:	af14      	add	r7, sp, #80	@ 0x50
 80202e4:	fb93 f2f8 	sdiv	r2, r3, r8
 80202e8:	edc7 6a00 	vstr	s13, [r7]
 80202ec:	fb08 3312 	mls	r3, r8, r2, r3
 80202f0:	f1b8 0f00 	cmp.w	r8, #0
 80202f4:	f000 80e7 	beq.w	80204c6 <MEMS_runMagCal.constprop.0+0x180e>
 80202f8:	b29b      	uxth	r3, r3
 80202fa:	eeb0 6a66 	vmov.f32	s12, s13
 80202fe:	eb08 0e03 	add.w	lr, r8, r3
 8020302:	f241 2c5c 	movw	ip, #4700	@ 0x125c
 8020306:	fbb3 f2f8 	udiv	r2, r3, r8
 802030a:	fb08 3212 	mls	r2, r8, r2, r3
 802030e:	eb0a 0242 	add.w	r2, sl, r2, lsl #1
 8020312:	3301      	adds	r3, #1
 8020314:	8d10      	ldrh	r0, [r2, #40]	@ 0x28
 8020316:	4560      	cmp	r0, ip
 8020318:	f5a0 5292 	sub.w	r2, r0, #4672	@ 0x1240
 802031c:	f1a2 021c 	sub.w	r2, r2, #28
 8020320:	bf98      	it	ls
 8020322:	ebac 0200 	subls.w	r2, ip, r0
 8020326:	ee07 0a90 	vmov	s15, r0
 802032a:	b292      	uxth	r2, r2
 802032c:	fb02 f202 	mul.w	r2, r2, r2
 8020330:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020334:	ee07 2a90 	vmov	s15, r2
 8020338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802033c:	4573      	cmp	r3, lr
 802033e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8020342:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8020346:	d1de      	bne.n	8020306 <MEMS_runMagCal.constprop.0+0x164e>
 8020348:	ee07 6a90 	vmov	s15, r6
 802034c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020350:	eddf 5a65 	vldr	s11, [pc, #404]	@ 80204e8 <MEMS_runMagCal.constprop.0+0x1830>
 8020354:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8020358:	eec6 6a27 	vdiv.f32	s13, s12, s15
 802035c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8020360:	ed9f 6a62 	vldr	s12, [pc, #392]	@ 80204ec <MEMS_runMagCal.constprop.0+0x1834>
 8020364:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8020368:	ee67 7aa5 	vmul.f32	s15, s15, s11
 802036c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8020370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020374:	edcd 6a13 	vstr	s13, [sp, #76]	@ 0x4c
 8020378:	edc7 7a00 	vstr	s15, [r7]
 802037c:	dd44      	ble.n	8020408 <MEMS_runMagCal.constprop.0+0x1750>
 802037e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80204f0 <MEMS_runMagCal.constprop.0+0x1838>
 8020382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020386:	2302      	movs	r3, #2
 8020388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802038c:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 8020390:	bfc4      	itt	gt
 8020392:	2301      	movgt	r3, #1
 8020394:	f88a 3015 	strbgt.w	r3, [sl, #21]
 8020398:	f7fe bf22 	b.w	801f1e0 <MEMS_runMagCal.constprop.0+0x528>
 802039c:	eeb0 0a4b 	vmov.f32	s0, s22
 80203a0:	4638      	mov	r0, r7
 80203a2:	f7f9 fd25 	bl	8019df0 <MEMS_updateMagBufferIndex.constprop.0>
 80203a6:	f89a 40a0 	ldrb.w	r4, [sl, #160]	@ 0xa0
 80203aa:	f7fe bf8e 	b.w	801f2ca <MEMS_runMagCal.constprop.0+0x612>
 80203ae:	eeb0 0a4b 	vmov.f32	s0, s22
 80203b2:	4638      	mov	r0, r7
 80203b4:	f7f9 fd1c 	bl	8019df0 <MEMS_updateMagBufferIndex.constprop.0>
 80203b8:	e6df      	b.n	802017a <MEMS_runMagCal.constprop.0+0x14c2>
 80203ba:	eb0a 03c5 	add.w	r3, sl, r5, lsl #3
 80203be:	f8da 20a4 	ldr.w	r2, [sl, #164]	@ 0xa4
 80203c2:	f9b3 30c0 	ldrsh.w	r3, [r3, #192]	@ 0xc0
 80203c6:	f8da 1020 	ldr.w	r1, [sl, #32]
 80203ca:	4413      	add	r3, r2
 80203cc:	4299      	cmp	r1, r3
 80203ce:	f4bf ad77 	bcs.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 80203d2:	f8da 301c 	ldr.w	r3, [sl, #28]
 80203d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80203da:	fb01 f303 	mul.w	r3, r1, r3
 80203de:	3364      	adds	r3, #100	@ 0x64
 80203e0:	4293      	cmp	r3, r2
 80203e2:	bf38      	it	cc
 80203e4:	4613      	movcc	r3, r2
 80203e6:	2200      	movs	r2, #0
 80203e8:	f8ca 3020 	str.w	r3, [sl, #32]
 80203ec:	f88a 2014 	strb.w	r2, [sl, #20]
 80203f0:	f7ff b86c 	b.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 80203f4:	f8ca 60a4 	str.w	r6, [sl, #164]	@ 0xa4
 80203f8:	e63b      	b.n	8020072 <MEMS_runMagCal.constprop.0+0x13ba>
 80203fa:	fb97 f2f3 	sdiv	r2, r7, r3
 80203fe:	fb03 7212 	mls	r2, r3, r2, r7
 8020402:	b212      	sxth	r2, r2
 8020404:	f7ff b957 	b.w	801f6b6 <MEMS_runMagCal.constprop.0+0x9fe>
 8020408:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80204f4 <MEMS_runMagCal.constprop.0+0x183c>
 802040c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020414:	eddf 7a36 	vldr	s15, [pc, #216]	@ 80204f0 <MEMS_runMagCal.constprop.0+0x1838>
 8020418:	d444      	bmi.n	80204a4 <MEMS_runMagCal.constprop.0+0x17ec>
 802041a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802041e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020422:	bfc4      	itt	gt
 8020424:	2301      	movgt	r3, #1
 8020426:	f88a 3015 	strbgt.w	r3, [sl, #21]
 802042a:	e63d      	b.n	80200a8 <MEMS_runMagCal.constprop.0+0x13f0>
 802042c:	ed9a 5a23 	vldr	s10, [sl, #140]	@ 0x8c
 8020430:	ed9a 7a1f 	vldr	s14, [sl, #124]	@ 0x7c
 8020434:	edda 4a27 	vldr	s9, [sl, #156]	@ 0x9c
 8020438:	ee37 7a05 	vadd.f32	s14, s14, s10
 802043c:	ed9f 5a2e 	vldr	s10, [pc, #184]	@ 80204f8 <MEMS_runMagCal.constprop.0+0x1840>
 8020440:	ee37 7a24 	vadd.f32	s14, s14, s9
 8020444:	eef7 4a02 	vmov.f32	s9, #114	@ 0x3f900000  1.125
 8020448:	ee27 7a05 	vmul.f32	s14, s14, s10
 802044c:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8020450:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8020454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020458:	bf88      	it	hi
 802045a:	eeb0 7a64 	vmovhi.f32	s14, s9
 802045e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8020462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020466:	bfb8      	it	lt
 8020468:	eeb0 7a45 	vmovlt.f32	s14, s10
 802046c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8020470:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020478:	f73f ad22 	bgt.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 802047c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8020480:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020488:	f73f ad1a 	bgt.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 802048c:	ee65 5a87 	vmul.f32	s11, s11, s14
 8020490:	eef4 7ae5 	vcmpe.f32	s15, s11
 8020494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020498:	f73f ad12 	bgt.w	801fec0 <MEMS_runMagCal.constprop.0+0x1208>
 802049c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80204a0:	f7ff b9e2 	b.w	801f868 <MEMS_runMagCal.constprop.0+0xbb0>
 80204a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80204a8:	2303      	movs	r3, #3
 80204aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ae:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 80204b2:	bfd4      	ite	le
 80204b4:	2300      	movle	r3, #0
 80204b6:	2301      	movgt	r3, #1
 80204b8:	f88a 3015 	strb.w	r3, [sl, #21]
 80204bc:	e5f7      	b.n	80200ae <MEMS_runMagCal.constprop.0+0x13f6>
 80204be:	f04f 0901 	mov.w	r9, #1
 80204c2:	f7ff b9a1 	b.w	801f808 <MEMS_runMagCal.constprop.0+0xb50>
 80204c6:	2303      	movs	r3, #3
 80204c8:	f88a 5015 	strb.w	r5, [sl, #21]
 80204cc:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 80204d0:	e5ed      	b.n	80200ae <MEMS_runMagCal.constprop.0+0x13f6>
 80204d2:	461a      	mov	r2, r3
 80204d4:	fb97 f3f3 	sdiv	r3, r7, r3
 80204d8:	fb02 7313 	mls	r3, r2, r3, r7
 80204dc:	b21b      	sxth	r3, r3
 80204de:	f7ff ba71 	b.w	801f9c4 <MEMS_runMagCal.constprop.0+0xd0c>
 80204e2:	bf00      	nop
 80204e4:	3a83126f 	.word	0x3a83126f
 80204e8:	3c23d70a 	.word	0x3c23d70a
 80204ec:	4b095440 	.word	0x4b095440
 80204f0:	481c4000 	.word	0x481c4000
 80204f4:	471c4000 	.word	0x471c4000
 80204f8:	3eaaaaab 	.word	0x3eaaaaab
 80204fc:	3e99999a 	.word	0x3e99999a
 8020500:	3f666666 	.word	0x3f666666
 8020504:	00000000 	.word	0x00000000
 8020508:	41f00001 	.word	0x41f00001
 802050c:	423c0000 	.word	0x423c0000
 8020510:	400ccccd 	.word	0x400ccccd
 8020514:	3dcccccd 	.word	0x3dcccccd
 8020518:	eef1 dac7 	vsqrt.f32	s27, s14
 802051c:	3101      	adds	r1, #1
 802051e:	b2ca      	uxtb	r2, r1
 8020520:	4591      	cmp	r9, r2
 8020522:	f103 0301 	add.w	r3, r3, #1
 8020526:	ee77 7a8c 	vadd.f32	s15, s15, s24
 802052a:	ee8c 7a2d 	vdiv.f32	s14, s24, s27
 802052e:	ee7d ba2d 	vadd.f32	s23, s26, s27
 8020532:	ee26 6a07 	vmul.f32	s12, s12, s14
 8020536:	ee2e da07 	vmul.f32	s26, s28, s14
 802053a:	ee7b da6d 	vsub.f32	s27, s22, s27
 802053e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8020542:	eeed 2a8d 	vfma.f32	s5, s27, s26
 8020546:	eead 2a0d 	vfma.f32	s4, s26, s26
 802054a:	eead 3a06 	vfma.f32	s6, s26, s12
 802054e:	eeed 3a07 	vfma.f32	s7, s26, s14
 8020552:	eeed 1a86 	vfma.f32	s3, s27, s12
 8020556:	eeed 0a87 	vfma.f32	s1, s27, s14
 802055a:	eea6 1a06 	vfma.f32	s2, s12, s12
 802055e:	eee6 4a07 	vfma.f32	s9, s12, s14
 8020562:	eea7 0a07 	vfma.f32	s0, s14, s14
 8020566:	ee34 4a4d 	vsub.f32	s8, s8, s26
 802056a:	ee35 5a46 	vsub.f32	s10, s10, s12
 802056e:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8020572:	f63f ac4c 	bhi.w	801fe0e <MEMS_runMagCal.constprop.0+0x1156>
 8020576:	2240      	movs	r2, #64	@ 0x40
 8020578:	2100      	movs	r1, #0
 802057a:	a844      	add	r0, sp, #272	@ 0x110
 802057c:	edcd 7a43 	vstr	s15, [sp, #268]	@ 0x10c
 8020580:	edcd ba22 	vstr	s23, [sp, #136]	@ 0x88
 8020584:	ed8d 0a3e 	vstr	s0, [sp, #248]	@ 0xf8
 8020588:	edcd 0a21 	vstr	s1, [sp, #132]	@ 0x84
 802058c:	ed8d 1a39 	vstr	s2, [sp, #228]	@ 0xe4
 8020590:	edcd 5a3f 	vstr	s11, [sp, #252]	@ 0xfc
 8020594:	ed8d 5a3b 	vstr	s10, [sp, #236]	@ 0xec
 8020598:	edcd 4a3a 	vstr	s9, [sp, #232]	@ 0xe8
 802059c:	edcd 1a20 	vstr	s3, [sp, #128]	@ 0x80
 80205a0:	ed8d 4a37 	vstr	s8, [sp, #220]	@ 0xdc
 80205a4:	edcd 3a36 	vstr	s7, [sp, #216]	@ 0xd8
 80205a8:	ed8d 3a35 	vstr	s6, [sp, #212]	@ 0xd4
 80205ac:	ed8d 2a34 	vstr	s4, [sp, #208]	@ 0xd0
 80205b0:	edcd 2a1f 	vstr	s5, [sp, #124]	@ 0x7c
 80205b4:	ed8d 3a38 	vstr	s6, [sp, #224]	@ 0xe0
 80205b8:	edcd 3a3c 	vstr	s7, [sp, #240]	@ 0xf0
 80205bc:	ed8d 4a40 	vstr	s8, [sp, #256]	@ 0x100
 80205c0:	edcd 4a3d 	vstr	s9, [sp, #244]	@ 0xf4
 80205c4:	ed8d 5a41 	vstr	s10, [sp, #260]	@ 0x104
 80205c8:	edcd 5a42 	vstr	s11, [sp, #264]	@ 0x108
 80205cc:	f004 fc05 	bl	8024dda <memset>
 80205d0:	a834      	add	r0, sp, #208	@ 0xd0
 80205d2:	ab44      	add	r3, sp, #272	@ 0x110
 80205d4:	4601      	mov	r1, r0
 80205d6:	2200      	movs	r2, #0
 80205d8:	2a00      	cmp	r2, #0
 80205da:	f000 810c 	beq.w	80207f6 <MEMS_runMagCal.constprop.0+0x1b3e>
 80205de:	eddd 7a44 	vldr	s15, [sp, #272]	@ 0x110
 80205e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80205e6:	eeb4 7ac9 	vcmpe.f32	s14, s18
 80205ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80205ee:	f100 8136 	bmi.w	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 80205f2:	ed90 7a00 	vldr	s14, [r0]
 80205f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80205fa:	b255      	sxtb	r5, r2
 80205fc:	edc3 6a00 	vstr	s13, [r3]
 8020600:	2d00      	cmp	r5, #0
 8020602:	d056      	beq.n	80206b2 <MEMS_runMagCal.constprop.0+0x19fa>
 8020604:	eddd 7a48 	vldr	s15, [sp, #288]	@ 0x120
 8020608:	2a01      	cmp	r2, #1
 802060a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 802060e:	f000 810c 	beq.w	802082a <MEMS_runMagCal.constprop.0+0x1b72>
 8020612:	ed9d 6a49 	vldr	s12, [sp, #292]	@ 0x124
 8020616:	eeb0 7ac6 	vabs.f32	s14, s12
 802061a:	eeb4 7ac9 	vcmpe.f32	s14, s18
 802061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020622:	f100 811c 	bmi.w	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 8020626:	ed90 7a01 	vldr	s14, [r0, #4]
 802062a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802062e:	2a02      	cmp	r2, #2
 8020630:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8020634:	edc3 7a01 	vstr	s15, [r3, #4]
 8020638:	ed9d 7a4d 	vldr	s14, [sp, #308]	@ 0x134
 802063c:	ed9d 6a4c 	vldr	s12, [sp, #304]	@ 0x130
 8020640:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020644:	eea6 7a26 	vfma.f32	s14, s12, s13
 8020648:	f000 80e1 	beq.w	802080e <MEMS_runMagCal.constprop.0+0x1b56>
 802064c:	eddd 5a4e 	vldr	s11, [sp, #312]	@ 0x138
 8020650:	eeb0 6ae5 	vabs.f32	s12, s11
 8020654:	eeb4 6ac9 	vcmpe.f32	s12, s18
 8020658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802065c:	f100 80ff 	bmi.w	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 8020660:	ed90 6a02 	vldr	s12, [r0, #8]
 8020664:	ee36 7a47 	vsub.f32	s14, s12, s14
 8020668:	2a03      	cmp	r2, #3
 802066a:	ee87 6a25 	vdiv.f32	s12, s14, s11
 802066e:	ed83 6a02 	vstr	s12, [r3, #8]
 8020672:	ed9d 7a51 	vldr	s14, [sp, #324]	@ 0x144
 8020676:	eddd 5a50 	vldr	s11, [sp, #320]	@ 0x140
 802067a:	ee67 7a87 	vmul.f32	s15, s15, s14
 802067e:	ed9d 7a52 	vldr	s14, [sp, #328]	@ 0x148
 8020682:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8020686:	eee7 7a06 	vfma.f32	s15, s14, s12
 802068a:	f000 80dc 	beq.w	8020846 <MEMS_runMagCal.constprop.0+0x1b8e>
 802068e:	ed9d 6a53 	vldr	s12, [sp, #332]	@ 0x14c
 8020692:	eeb0 7ac6 	vabs.f32	s14, s12
 8020696:	eeb4 7ac9 	vcmpe.f32	s14, s18
 802069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802069e:	f100 80de 	bmi.w	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 80206a2:	ed90 7a03 	vldr	s14, [r0, #12]
 80206a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80206aa:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80206ae:	edc3 6a03 	vstr	s13, [r3, #12]
 80206b2:	3201      	adds	r2, #1
 80206b4:	2a04      	cmp	r2, #4
 80206b6:	f100 0010 	add.w	r0, r0, #16
 80206ba:	f103 0310 	add.w	r3, r3, #16
 80206be:	f101 0114 	add.w	r1, r1, #20
 80206c2:	d189      	bne.n	80205d8 <MEMS_runMagCal.constprop.0+0x1920>
 80206c4:	aa1f      	add	r2, sp, #124	@ 0x7c
 80206c6:	a91b      	add	r1, sp, #108	@ 0x6c
 80206c8:	a844      	add	r0, sp, #272	@ 0x110
 80206ca:	f7f9 fa29 	bl	8019b20 <llEvaluate.constprop.0>
 80206ce:	ed5f ba6f 	vldr	s23, [pc, #-444]	@ 8020514 <MEMS_runMagCal.constprop.0+0x185c>
 80206d2:	9d04      	ldr	r5, [sp, #16]
 80206d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80206d8:	ab1f      	add	r3, sp, #124	@ 0x7c
 80206da:	46b0      	mov	r8, r6
 80206dc:	f10d 0b8c 	add.w	fp, sp, #140	@ 0x8c
 80206e0:	4626      	mov	r6, r4
 80206e2:	2700      	movs	r7, #0
 80206e4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80206e8:	461c      	mov	r4, r3
 80206ea:	e9cd 771f 	strd	r7, r7, [sp, #124]	@ 0x7c
 80206ee:	e9cd 7721 	strd	r7, r7, [sp, #132]	@ 0x84
 80206f2:	aa1f      	add	r2, sp, #124	@ 0x7c
 80206f4:	eca4 1a01 	vstmia	r4!, {s2}
 80206f8:	a923      	add	r1, sp, #140	@ 0x8c
 80206fa:	a844      	add	r0, sp, #272	@ 0x110
 80206fc:	f7f9 fa10 	bl	8019b20 <llEvaluate.constprop.0>
 8020700:	ecbb 7a01 	vldmia	fp!, {s14}
 8020704:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802070c:	f340 84b2 	ble.w	8021074 <MEMS_runMagCal.constprop.0+0x23bc>
 8020710:	eef1 7ac7 	vsqrt.f32	s15, s14
 8020714:	eef4 bae7 	vcmpe.f32	s23, s15
 8020718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802071c:	bfb8      	it	lt
 802071e:	eef0 ba67 	vmovlt.f32	s23, s15
 8020722:	3501      	adds	r5, #1
 8020724:	b2ed      	uxtb	r5, r5
 8020726:	2d03      	cmp	r5, #3
 8020728:	d1df      	bne.n	80206ea <MEMS_runMagCal.constprop.0+0x1a32>
 802072a:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 802072e:	ee6b 7a27 	vmul.f32	s15, s22, s15
 8020732:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 8020736:	eddd 5a1c 	vldr	s11, [sp, #112]	@ 0x70
 802073a:	ed9d 5a1b 	vldr	s10, [sp, #108]	@ 0x6c
 802073e:	ed9d 6a1d 	vldr	s12, [sp, #116]	@ 0x74
 8020742:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802074a:	eeb0 7ae5 	vabs.f32	s14, s11
 802074e:	bf48      	it	mi
 8020750:	edcd 7a1e 	vstrmi	s15, [sp, #120]	@ 0x78
 8020754:	eef0 7ac5 	vabs.f32	s15, s10
 8020758:	eef4 7ac7 	vcmpe.f32	s15, s14
 802075c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020760:	bfb8      	it	lt
 8020762:	eef0 7a47 	vmovlt.f32	s15, s14
 8020766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802076a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	@ 8020504 <MEMS_runMagCal.constprop.0+0x184c>
 802076e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020772:	bfb8      	it	lt
 8020774:	eef0 7a47 	vmovlt.f32	s15, s14
 8020778:	eef0 6ac6 	vabs.f32	s13, s12
 802077c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8020780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020784:	ed9d 7a1e 	vldr	s14, [sp, #120]	@ 0x78
 8020788:	ee79 9aa5 	vadd.f32	s19, s19, s11
 802078c:	ed5f 5aa5 	vldr	s11, [pc, #-660]	@ 80204fc <MEMS_runMagCal.constprop.0+0x1844>
 8020790:	edcd 9a2d 	vstr	s19, [sp, #180]	@ 0xb4
 8020794:	bfb8      	it	lt
 8020796:	eef0 6a67 	vmovlt.f32	s13, s15
 802079a:	ee3a aa05 	vadd.f32	s20, s20, s10
 802079e:	ee36 6a2a 	vadd.f32	s12, s12, s21
 80207a2:	ee3b ba07 	vadd.f32	s22, s22, s14
 80207a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80207aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207ae:	4634      	mov	r4, r6
 80207b0:	ed8d aa2c 	vstr	s20, [sp, #176]	@ 0xb0
 80207b4:	4646      	mov	r6, r8
 80207b6:	ed8d 6a2e 	vstr	s12, [sp, #184]	@ 0xb8
 80207ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80207be:	ed8d ba2f 	vstr	s22, [sp, #188]	@ 0xbc
 80207c2:	eef0 7ac7 	vabs.f32	s15, s14
 80207c6:	f140 8459 	bpl.w	802107c <MEMS_runMagCal.constprop.0+0x23c4>
 80207ca:	ed1f 7ab3 	vldr	s14, [pc, #-716]	@ 8020500 <MEMS_runMagCal.constprop.0+0x1848>
 80207ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80207d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207d6:	f140 8451 	bpl.w	802107c <MEMS_runMagCal.constprop.0+0x23c4>
 80207da:	2e01      	cmp	r6, #1
 80207dc:	f200 8453 	bhi.w	8021086 <MEMS_runMagCal.constprop.0+0x23ce>
 80207e0:	3601      	adds	r6, #1
 80207e2:	b2f6      	uxtb	r6, r6
 80207e4:	f7ff baa3 	b.w	801fd2e <MEMS_runMagCal.constprop.0+0x1076>
 80207e8:	fb98 f3f9 	sdiv	r3, r8, r9
 80207ec:	fb09 8313 	mls	r3, r9, r3, r8
 80207f0:	b21b      	sxth	r3, r3
 80207f2:	f7ff bae5 	b.w	801fdc0 <MEMS_runMagCal.constprop.0+0x1108>
 80207f6:	edd1 7a00 	vldr	s15, [r1]
 80207fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80207fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020802:	dd2c      	ble.n	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 8020804:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8020808:	ed83 7a00 	vstr	s14, [r3]
 802080c:	e751      	b.n	80206b2 <MEMS_runMagCal.constprop.0+0x19fa>
 802080e:	edd1 7a00 	vldr	s15, [r1]
 8020812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802081a:	dd20      	ble.n	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 802081c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020820:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8020824:	ed83 7a02 	vstr	s14, [r3, #8]
 8020828:	e743      	b.n	80206b2 <MEMS_runMagCal.constprop.0+0x19fa>
 802082a:	ed91 7a00 	vldr	s14, [r1]
 802082e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020836:	dd12      	ble.n	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 8020838:	ee37 7a67 	vsub.f32	s14, s14, s15
 802083c:	eef1 7ac7 	vsqrt.f32	s15, s14
 8020840:	edc3 7a01 	vstr	s15, [r3, #4]
 8020844:	e735      	b.n	80206b2 <MEMS_runMagCal.constprop.0+0x19fa>
 8020846:	ed91 7a00 	vldr	s14, [r1]
 802084a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 802084e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020852:	dd04      	ble.n	802085e <MEMS_runMagCal.constprop.0+0x1ba6>
 8020854:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020858:	eef1 6ac7 	vsqrt.f32	s13, s14
 802085c:	e727      	b.n	80206ae <MEMS_runMagCal.constprop.0+0x19f6>
 802085e:	ed5f bad7 	vldr	s23, [pc, #-860]	@ 8020504 <MEMS_runMagCal.constprop.0+0x184c>
 8020862:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 802086a:	ed5f 6ad9 	vldr	s13, [pc, #-868]	@ 8020508 <MEMS_runMagCal.constprop.0+0x1850>
 802086e:	eef0 7a6b 	vmov.f32	s15, s23
 8020872:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
 8020876:	ed9d 7a2f 	vldr	s14, [sp, #188]	@ 0xbc
 802087a:	ed5f 5adc 	vldr	s11, [pc, #-880]	@ 802050c <MEMS_runMagCal.constprop.0+0x1854>
 802087e:	eef4 6ac6 	vcmpe.f32	s13, s12
 8020882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020886:	eec5 9a87 	vdiv.f32	s19, s11, s14
 802088a:	dc0e      	bgt.n	80208aa <MEMS_runMagCal.constprop.0+0x1bf2>
 802088c:	ed5f 6ae0 	vldr	s13, [pc, #-896]	@ 8020510 <MEMS_runMagCal.constprop.0+0x1858>
 8020890:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020898:	dc07      	bgt.n	80208aa <MEMS_runMagCal.constprop.0+0x1bf2>
 802089a:	ed5f 7ae2 	vldr	s15, [pc, #-904]	@ 8020514 <MEMS_runMagCal.constprop.0+0x185c>
 802089e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80208a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208a6:	f200 81f8 	bhi.w	8020c9a <MEMS_runMagCal.constprop.0+0x1fe2>
 80208aa:	4be2      	ldr	r3, [pc, #904]	@ (8020c34 <MEMS_runMagCal.constprop.0+0x1f7c>)
 80208ac:	ed9f 9ae2 	vldr	s18, [pc, #904]	@ 8020c38 <MEMS_runMagCal.constprop.0+0x1f80>
 80208b0:	9323      	str	r3, [sp, #140]	@ 0x8c
 80208b2:	9332      	str	r3, [sp, #200]	@ 0xc8
 80208b4:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80208b8:	ed9d 7a2d 	vldr	s14, [sp, #180]	@ 0xb4
 80208bc:	eddd 7a2e 	vldr	s15, [sp, #184]	@ 0xb8
 80208c0:	ed9d 6a32 	vldr	s12, [sp, #200]	@ 0xc8
 80208c4:	eddd 5a23 	vldr	s11, [sp, #140]	@ 0x8c
 80208c8:	edcd 9a44 	vstr	s19, [sp, #272]	@ 0x110
 80208cc:	ee66 6a88 	vmul.f32	s13, s13, s16
 80208d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80208d4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80208d8:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80208dc:	2300      	movs	r3, #0
 80208de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80208e2:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 80208e6:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 80208ea:	edcd 6a34 	vstr	s13, [sp, #208]	@ 0xd0
 80208ee:	ed8d 7a35 	vstr	s14, [sp, #212]	@ 0xd4
 80208f2:	edcd 9a48 	vstr	s19, [sp, #288]	@ 0x120
 80208f6:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80208fa:	edcd 9a4c 	vstr	s19, [sp, #304]	@ 0x130
 80208fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8020900:	934b      	str	r3, [sp, #300]	@ 0x12c
 8020902:	f100 83b4 	bmi.w	802106e <MEMS_runMagCal.constprop.0+0x23b6>
 8020906:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 802090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802090e:	f100 83ae 	bmi.w	802106e <MEMS_runMagCal.constprop.0+0x23b6>
 8020912:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8020916:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 802091a:	ee3a aa67 	vsub.f32	s20, s20, s15
 802091e:	ed9f 7ac7 	vldr	s14, [pc, #796]	@ 8020c3c <MEMS_runMagCal.constprop.0+0x1f84>
 8020922:	eddf 6ac7 	vldr	s13, [pc, #796]	@ 8020c40 <MEMS_runMagCal.constprop.0+0x1f88>
 8020926:	ee39 7ac7 	vsub.f32	s14, s19, s14
 802092a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802092e:	eeb0 7ac7 	vabs.f32	s14, s14
 8020932:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8020936:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802093a:	ed9f 7ac2 	vldr	s14, [pc, #776]	@ 8020c44 <MEMS_runMagCal.constprop.0+0x1f8c>
 802093e:	eef0 7ae7 	vabs.f32	s15, s15
 8020942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020946:	eef4 7ac7 	vcmpe.f32	s15, s14
 802094a:	f100 8313 	bmi.w	8020f74 <MEMS_runMagCal.constprop.0+0x22bc>
 802094e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020952:	f280 831b 	bge.w	8020f8c <MEMS_runMagCal.constprop.0+0x22d4>
 8020956:	eddf 7abc 	vldr	s15, [pc, #752]	@ 8020c48 <MEMS_runMagCal.constprop.0+0x1f90>
 802095a:	eeb4 aae7 	vcmpe.f32	s20, s15
 802095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020962:	f100 8313 	bmi.w	8020f8c <MEMS_runMagCal.constprop.0+0x22d4>
 8020966:	ae19      	add	r6, sp, #100	@ 0x64
 8020968:	9c04      	ldr	r4, [sp, #16]
 802096a:	ad34      	add	r5, sp, #208	@ 0xd0
 802096c:	46b0      	mov	r8, r6
 802096e:	ecb5 0a01 	vldmia	r5!, {s0}
 8020972:	f001 fd21 	bl	80223b8 <roundf>
 8020976:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 802097a:	3401      	adds	r4, #1
 802097c:	ee10 3a10 	vmov	r3, s0
 8020980:	b2e4      	uxtb	r4, r4
 8020982:	2c03      	cmp	r4, #3
 8020984:	f828 3b02 	strh.w	r3, [r8], #2
 8020988:	d1f1      	bne.n	802096e <MEMS_runMagCal.constprop.0+0x1cb6>
 802098a:	eddd 7a02 	vldr	s15, [sp, #8]
 802098e:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8020992:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8020c4c <MEMS_runMagCal.constprop.0+0x1f94>
 8020996:	ee20 0a27 	vmul.f32	s0, s0, s15
 802099a:	f001 fd0d 	bl	80223b8 <roundf>
 802099e:	eef0 7a40 	vmov.f32	s15, s0
 80209a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80209a6:	ab15      	add	r3, sp, #84	@ 0x54
 80209a8:	eeb0 0a68 	vmov.f32	s0, s17
 80209ac:	aa16      	add	r2, sp, #88	@ 0x58
 80209ae:	a944      	add	r1, sp, #272	@ 0x110
 80209b0:	4630      	mov	r0, r6
 80209b2:	ee17 8a90 	vmov	r8, s15
 80209b6:	edca 7a06 	vstr	s15, [sl, #24]
 80209ba:	f7f9 f929 	bl	8019c10 <getMagStats.constprop.0>
 80209be:	f89a 30a0 	ldrb.w	r3, [sl, #160]	@ 0xa0
 80209c2:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8020c50 <MEMS_runMagCal.constprop.0+0x1f98>
 80209c6:	f89a 50a0 	ldrb.w	r5, [sl, #160]	@ 0xa0
 80209ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80209ce:	005b      	lsls	r3, r3, #1
 80209d0:	ee07 3a90 	vmov	s15, r3
 80209d4:	ee07 0a10 	vmov	s14, r0
 80209d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80209dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80209e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80209e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ec:	dc0d      	bgt.n	8020a0a <MEMS_runMagCal.constprop.0+0x1d52>
 80209ee:	ed9d 7a15 	vldr	s14, [sp, #84]	@ 0x54
 80209f2:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80209f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80209fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209fe:	bfc6      	itte	gt
 8020a00:	fabb f38b 	clzgt	r3, fp
 8020a04:	095b      	lsrgt	r3, r3, #5
 8020a06:	2301      	movle	r3, #1
 8020a08:	9304      	str	r3, [sp, #16]
 8020a0a:	ee28 0a09 	vmul.f32	s0, s16, s18
 8020a0e:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
 8020a12:	f001 fcd1 	bl	80223b8 <roundf>
 8020a16:	eddf 7a8f 	vldr	s15, [pc, #572]	@ 8020c54 <MEMS_runMagCal.constprop.0+0x1f9c>
 8020a1a:	6830      	ldr	r0, [r6, #0]
 8020a1c:	eddd aa15 	vldr	s21, [sp, #84]	@ 0x54
 8020a20:	f8cd 00a2 	str.w	r0, [sp, #162]	@ 0xa2
 8020a24:	ee69 7aa7 	vmul.f32	s15, s19, s15
 8020a28:	2300      	movs	r3, #0
 8020a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020a2e:	f1b9 0f01 	cmp.w	r9, #1
 8020a32:	ee17 2a90 	vmov	r2, s15
 8020a36:	b294      	uxth	r4, r2
 8020a38:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8020a3c:	f364 030f 	bfi	r3, r4, #0, #16
 8020a40:	f364 431f 	bfi	r3, r4, #16, #16
 8020a44:	932a      	str	r3, [sp, #168]	@ 0xa8
 8020a46:	ee17 3a90 	vmov	r3, s15
 8020a4a:	f88d 30a1 	strb.w	r3, [sp, #161]	@ 0xa1
 8020a4e:	88b3      	ldrh	r3, [r6, #4]
 8020a50:	f8ad 40ac 	strh.w	r4, [sp, #172]	@ 0xac
 8020a54:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 8020a58:	f000 828a 	beq.w	8020f70 <MEMS_runMagCal.constprop.0+0x22b8>
 8020a5c:	ee28 0a2a 	vmul.f32	s0, s16, s21
 8020a60:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 8020a64:	f001 fca8 	bl	80223b8 <roundf>
 8020a68:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8020a6c:	edcd 7a01 	vstr	s15, [sp, #4]
 8020a70:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8020a74:	9a04      	ldr	r2, [sp, #16]
 8020a76:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 8020a7a:	2300      	movs	r3, #0
 8020a7c:	f88a 3014 	strb.w	r3, [sl, #20]
 8020a80:	2a00      	cmp	r2, #0
 8020a82:	f43e ad23 	beq.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020a86:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020a88:	f88a 3015 	strb.w	r3, [sl, #21]
 8020a8c:	2a00      	cmp	r2, #0
 8020a8e:	f040 8133 	bne.w	8020cf8 <MEMS_runMagCal.constprop.0+0x2040>
 8020a92:	af14      	add	r7, sp, #80	@ 0x50
 8020a94:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	@ 0xac
 8020a98:	f8bd 10a8 	ldrh.w	r1, [sp, #168]	@ 0xa8
 8020a9c:	f8bd 20aa 	ldrh.w	r2, [sp, #170]	@ 0xaa
 8020aa0:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8020c64 <MEMS_runMagCal.constprop.0+0x1fac>
 8020aa4:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8020c68 <MEMS_runMagCal.constprop.0+0x1fb0>
 8020aa8:	f8ca 801c 	str.w	r8, [sl, #28]
 8020aac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020ab0:	fb00 f303 	mul.w	r3, r0, r3
 8020ab4:	ee06 3a10 	vmov	s12, r3
 8020ab8:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	@ 0xa2
 8020abc:	ed9a 0a01 	vldr	s0, [sl, #4]
 8020ac0:	f89a 4025 	ldrb.w	r4, [sl, #37]	@ 0x25
 8020ac4:	ee03 3a90 	vmov	s7, r3
 8020ac8:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 8020acc:	ee04 3a10 	vmov	s8, r3
 8020ad0:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	@ 0xa6
 8020ad4:	fb00 f101 	mul.w	r1, r0, r1
 8020ad8:	ee04 3a90 	vmov	s9, r3
 8020adc:	fb00 f202 	mul.w	r2, r0, r2
 8020ae0:	23ff      	movs	r3, #255	@ 0xff
 8020ae2:	f10d 0c9c 	add.w	ip, sp, #156	@ 0x9c
 8020ae6:	ee05 1a10 	vmov	s10, r1
 8020aea:	ee05 2a90 	vmov	s11, r2
 8020aee:	f88a 3026 	strb.w	r3, [sl, #38]	@ 0x26
 8020af2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8020af6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8020afa:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8020afe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8020b02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020b06:	ee25 5a27 	vmul.f32	s10, s10, s15
 8020b0a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8020b0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8020b12:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8020b16:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8020b1a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8020b1e:	f04f 0801 	mov.w	r8, #1
 8020b22:	f8dc 3000 	ldr.w	r3, [ip]
 8020b26:	f8ce 3000 	str.w	r3, [lr]
 8020b2a:	ed8a 5a1f 	vstr	s10, [sl, #124]	@ 0x7c
 8020b2e:	edca 5a23 	vstr	s11, [sl, #140]	@ 0x8c
 8020b32:	ed8a 6a27 	vstr	s12, [sl, #156]	@ 0x9c
 8020b36:	f88a 8054 	strb.w	r8, [sl, #84]	@ 0x54
 8020b3a:	f88a 806d 	strb.w	r8, [sl, #109]	@ 0x6d
 8020b3e:	edca 3a1c 	vstr	s7, [sl, #112]	@ 0x70
 8020b42:	ed8a 4a1d 	vstr	s8, [sl, #116]	@ 0x74
 8020b46:	edca 4a1e 	vstr	s9, [sl, #120]	@ 0x78
 8020b4a:	2d00      	cmp	r5, #0
 8020b4c:	d04d      	beq.n	8020bea <MEMS_runMagCal.constprop.0+0x1f32>
 8020b4e:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8020c58 <MEMS_runMagCal.constprop.0+0x1fa0>
 8020b52:	f89a 00a1 	ldrb.w	r0, [sl, #161]	@ 0xa1
 8020b56:	2100      	movs	r1, #0
 8020b58:	ee20 3a03 	vmul.f32	s6, s0, s6
 8020b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020b60:	460b      	mov	r3, r1
 8020b62:	fbb3 fcf0 	udiv	ip, r3, r0
 8020b66:	fb00 331c 	mls	r3, r0, ip, r3
 8020b6a:	3315      	adds	r3, #21
 8020b6c:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8020b70:	3201      	adds	r2, #1
 8020b72:	fb92 fcf4 	sdiv	ip, r2, r4
 8020b76:	fb04 221c 	mls	r2, r4, ip, r2
 8020b7a:	f9b3 c01c 	ldrsh.w	ip, [r3, #28]
 8020b7e:	ee07 ca90 	vmov	s15, ip
 8020b82:	f9b3 c01a 	ldrsh.w	ip, [r3, #26]
 8020b86:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8020b8a:	ee06 ca90 	vmov	s13, ip
 8020b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020b92:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020b96:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8020b9a:	ee07 3a10 	vmov	s14, r3
 8020b9e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8020ba2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8020ba6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020baa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020bae:	ee66 6a85 	vmul.f32	s13, s13, s10
 8020bb2:	ee37 7a64 	vsub.f32	s14, s14, s9
 8020bb6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8020bba:	b252      	sxtb	r2, r2
 8020bbc:	eb0a 0342 	add.w	r3, sl, r2, lsl #1
 8020bc0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8020bc4:	3101      	adds	r1, #1
 8020bc6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020bca:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8020bce:	ee67 7a03 	vmul.f32	s15, s14, s6
 8020bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020bd6:	ee17 ca90 	vmov	ip, s15
 8020bda:	f8a3 c028 	strh.w	ip, [r3, #40]	@ 0x28
 8020bde:	b28b      	uxth	r3, r1
 8020be0:	42ab      	cmp	r3, r5
 8020be2:	b209      	sxth	r1, r1
 8020be4:	dbbd      	blt.n	8020b62 <MEMS_runMagCal.constprop.0+0x1eaa>
 8020be6:	f88a 2026 	strb.w	r2, [sl, #38]	@ 0x26
 8020bea:	42ac      	cmp	r4, r5
 8020bec:	bf28      	it	cs
 8020bee:	462c      	movcs	r4, r5
 8020bf0:	aa13      	add	r2, sp, #76	@ 0x4c
 8020bf2:	491a      	ldr	r1, [pc, #104]	@ (8020c5c <MEMS_runMagCal.constprop.0+0x1fa4>)
 8020bf4:	f88a 4024 	strb.w	r4, [sl, #36]	@ 0x24
 8020bf8:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 8020bfc:	463b      	mov	r3, r7
 8020bfe:	f7f9 f807 	bl	8019c10 <getMagStats.constprop.0>
 8020c02:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8020c60 <MEMS_runMagCal.constprop.0+0x1fa8>
 8020c06:	edd2 7a00 	vldr	s15, [r2]
 8020c0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020c0e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8020c12:	eef0 7ae7 	vabs.f32	s15, s15
 8020c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c1e:	edd7 6a00 	vldr	s13, [r7]
 8020c22:	d523      	bpl.n	8020c6c <MEMS_runMagCal.constprop.0+0x1fb4>
 8020c24:	eef4 6ac7 	vcmpe.f32	s13, s14
 8020c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c2c:	f100 819b 	bmi.w	8020f66 <MEMS_runMagCal.constprop.0+0x22ae>
 8020c30:	e01c      	b.n	8020c6c <MEMS_runMagCal.constprop.0+0x1fb4>
 8020c32:	bf00      	nop
 8020c34:	423c0000 	.word	0x423c0000
 8020c38:	41f00001 	.word	0x41f00001
 8020c3c:	3f8ccccd 	.word	0x3f8ccccd
 8020c40:	3f266666 	.word	0x3f266666
 8020c44:	3eb33333 	.word	0x3eb33333
 8020c48:	3f19999a 	.word	0x3f19999a
 8020c4c:	3a83126f 	.word	0x3a83126f
 8020c50:	3c23d70a 	.word	0x3c23d70a
 8020c54:	447a0000 	.word	0x447a0000
 8020c58:	42c80000 	.word	0x42c80000
 8020c5c:	20000408 	.word	0x20000408
 8020c60:	423c0000 	.word	0x423c0000
 8020c64:	200003e4 	.word	0x200003e4
 8020c68:	358637bd 	.word	0x358637bd
 8020c6c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8020c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c78:	d507      	bpl.n	8020c8a <MEMS_runMagCal.constprop.0+0x1fd2>
 8020c7a:	eef4 6a47 	vcmp.f32	s13, s14
 8020c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c82:	9b04      	ldr	r3, [sp, #16]
 8020c84:	bf48      	it	mi
 8020c86:	2302      	movmi	r3, #2
 8020c88:	9304      	str	r3, [sp, #16]
 8020c8a:	2ec9      	cmp	r6, #201	@ 0xc9
 8020c8c:	9b04      	ldr	r3, [sp, #16]
 8020c8e:	bf28      	it	cs
 8020c90:	2302      	movcs	r3, #2
 8020c92:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 8020c96:	f7fe bc19 	b.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020c9a:	2224      	movs	r2, #36	@ 0x24
 8020c9c:	2100      	movs	r1, #0
 8020c9e:	a844      	add	r0, sp, #272	@ 0x110
 8020ca0:	f004 f89b 	bl	8024dda <memset>
 8020ca4:	ad2c      	add	r5, sp, #176	@ 0xb0
 8020ca6:	f10d 08d0 	add.w	r8, sp, #208	@ 0xd0
 8020caa:	ae44      	add	r6, sp, #272	@ 0x110
 8020cac:	2400      	movs	r4, #0
 8020cae:	ecb5 0a01 	vldmia	r5!, {s0}
 8020cb2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8020cb6:	f001 fb7f 	bl	80223b8 <roundf>
 8020cba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8020cbe:	4633      	mov	r3, r6
 8020cc0:	3401      	adds	r4, #1
 8020cc2:	edc3 9a00 	vstr	s19, [r3]
 8020cc6:	ee10 3a10 	vmov	r3, s0
 8020cca:	2c03      	cmp	r4, #3
 8020ccc:	f828 3b02 	strh.w	r3, [r8], #2
 8020cd0:	f106 0610 	add.w	r6, r6, #16
 8020cd4:	d1eb      	bne.n	8020cae <MEMS_runMagCal.constprop.0+0x1ff6>
 8020cd6:	eeb0 0a68 	vmov.f32	s0, s17
 8020cda:	ab23      	add	r3, sp, #140	@ 0x8c
 8020cdc:	aa32      	add	r2, sp, #200	@ 0xc8
 8020cde:	a944      	add	r1, sp, #272	@ 0x110
 8020ce0:	a834      	add	r0, sp, #208	@ 0xd0
 8020ce2:	f7f8 ff95 	bl	8019c10 <getMagStats.constprop.0>
 8020ce6:	ed9d 9a23 	vldr	s18, [sp, #140]	@ 0x8c
 8020cea:	ee79 7a09 	vadd.f32	s15, s18, s18
 8020cee:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8020cf2:	edcd 7a23 	vstr	s15, [sp, #140]	@ 0x8c
 8020cf6:	e5dd      	b.n	80208b4 <MEMS_runMagCal.constprop.0+0x1bfc>
 8020cf8:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
 8020cfc:	e9cd 3349 	strd	r3, r3, [sp, #292]	@ 0x124
 8020d00:	9347      	str	r3, [sp, #284]	@ 0x11c
 8020d02:	934b      	str	r3, [sp, #300]	@ 0x12c
 8020d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020d08:	fb03 f304 	mul.w	r3, r3, r4
 8020d0c:	ee07 3a90 	vmov	s15, r3
 8020d10:	ed1f 7a2b 	vldr	s14, [pc, #-172]	@ 8020c68 <MEMS_runMagCal.constprop.0+0x1fb0>
 8020d14:	49e3      	ldr	r1, [pc, #908]	@ (80210a4 <MEMS_runMagCal.constprop.0+0x23ec>)
 8020d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020d1a:	eeb0 0a68 	vmov.f32	s0, s17
 8020d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8020d22:	ab34      	add	r3, sp, #208	@ 0xd0
 8020d24:	aa13      	add	r2, sp, #76	@ 0x4c
 8020d26:	f1a1 001e 	sub.w	r0, r1, #30
 8020d2a:	af14      	add	r7, sp, #80	@ 0x50
 8020d2c:	edcd 7a44 	vstr	s15, [sp, #272]	@ 0x110
 8020d30:	edcd 7a48 	vstr	s15, [sp, #288]	@ 0x120
 8020d34:	edcd 7a4c 	vstr	s15, [sp, #304]	@ 0x130
 8020d38:	f7f8 ff6a 	bl	8019c10 <getMagStats.constprop.0>
 8020d3c:	eeb0 0a68 	vmov.f32	s0, s17
 8020d40:	a944      	add	r1, sp, #272	@ 0x110
 8020d42:	463b      	mov	r3, r7
 8020d44:	f10d 00a2 	add.w	r0, sp, #162	@ 0xa2
 8020d48:	f7f8 ff62 	bl	8019c10 <getMagStats.constprop.0>
 8020d4c:	eddd 7a13 	vldr	s15, [sp, #76]	@ 0x4c
 8020d50:	eddf 6ad5 	vldr	s13, [pc, #852]	@ 80210a8 <MEMS_runMagCal.constprop.0+0x23f0>
 8020d54:	ed97 6a00 	vldr	s12, [r7]
 8020d58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8020d5c:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8020d60:	eef0 7ae7 	vabs.f32	s15, s15
 8020d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d6c:	d505      	bpl.n	8020d7a <MEMS_runMagCal.constprop.0+0x20c2>
 8020d6e:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8020d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d76:	f100 80f9 	bmi.w	8020f6c <MEMS_runMagCal.constprop.0+0x22b4>
 8020d7a:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8020d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d86:	f140 80ec 	bpl.w	8020f62 <MEMS_runMagCal.constprop.0+0x22aa>
 8020d8a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8020d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d92:	9b04      	ldr	r3, [sp, #16]
 8020d94:	bfb8      	it	lt
 8020d96:	2302      	movlt	r3, #2
 8020d98:	eddd 5a34 	vldr	s11, [sp, #208]	@ 0xd0
 8020d9c:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8020da0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8020da4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8020da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dac:	f57e ab8e 	bpl.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020db0:	f89a 206c 	ldrb.w	r2, [sl, #108]	@ 0x6c
 8020db4:	429a      	cmp	r2, r3
 8020db6:	f63e ab89 	bhi.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020dba:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8020dbe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8020dc2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8020dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dca:	d40c      	bmi.n	8020de6 <MEMS_runMagCal.constprop.0+0x212e>
 8020dcc:	eef1 7a00 	vmov.f32	s15, #16	@ 0x40800000  4.0
 8020dd0:	eef4 5ae7 	vcmpe.f32	s11, s15
 8020dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dd8:	f57f ae5c 	bpl.w	8020a94 <MEMS_runMagCal.constprop.0+0x1ddc>
 8020ddc:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 8020de0:	42b3      	cmp	r3, r6
 8020de2:	f4bf ae57 	bcs.w	8020a94 <MEMS_runMagCal.constprop.0+0x1ddc>
 8020de6:	f9ba 2060 	ldrsh.w	r2, [sl, #96]	@ 0x60
 8020dea:	f9bd e0a4 	ldrsh.w	lr, [sp, #164]	@ 0xa4
 8020dee:	f9bd b0a2 	ldrsh.w	fp, [sp, #162]	@ 0xa2
 8020df2:	f9ba 105e 	ldrsh.w	r1, [sl, #94]	@ 0x5e
 8020df6:	f9ba 3062 	ldrsh.w	r3, [sl, #98]	@ 0x62
 8020dfa:	f9bd c0a6 	ldrsh.w	ip, [sp, #166]	@ 0xa6
 8020dfe:	eba2 000e 	sub.w	r0, r2, lr
 8020e02:	eba1 090b 	sub.w	r9, r1, fp
 8020e06:	2800      	cmp	r0, #0
 8020e08:	bfb8      	it	lt
 8020e0a:	4240      	neglt	r0, r0
 8020e0c:	f1b9 0f00 	cmp.w	r9, #0
 8020e10:	bfb8      	it	lt
 8020e12:	f1c9 0900 	rsblt	r9, r9, #0
 8020e16:	4548      	cmp	r0, r9
 8020e18:	bfb8      	it	lt
 8020e1a:	4648      	movlt	r0, r9
 8020e1c:	eba3 090c 	sub.w	r9, r3, ip
 8020e20:	f1b9 0f00 	cmp.w	r9, #0
 8020e24:	b200      	sxth	r0, r0
 8020e26:	bfb8      	it	lt
 8020e28:	f1c9 0900 	rsblt	r9, r9, #0
 8020e2c:	4548      	cmp	r0, r9
 8020e2e:	bfb8      	it	lt
 8020e30:	4648      	movlt	r0, r9
 8020e32:	b200      	sxth	r0, r0
 8020e34:	ee07 0a90 	vmov	s15, r0
 8020e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020e3c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8020e40:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8020e44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e4c:	f57f ae22 	bpl.w	8020a94 <MEMS_runMagCal.constprop.0+0x1ddc>
 8020e50:	ee36 6a25 	vadd.f32	s12, s12, s11
 8020e54:	ee05 6a10 	vmov	s10, r6
 8020e58:	ee85 4a86 	vdiv.f32	s8, s11, s12
 8020e5c:	ee07 1a90 	vmov	s15, r1
 8020e60:	eeb8 2ac5 	vcvt.f32.s32	s4, s10
 8020e64:	ee05 4a10 	vmov	s10, r4
 8020e68:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8020e6c:	eef8 3ac5 	vcvt.f32.s32	s7, s10
 8020e70:	ee07 2a90 	vmov	s15, r2
 8020e74:	ee05 ba10 	vmov	s10, fp
 8020e78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020e7c:	eef8 2ac5 	vcvt.f32.s32	s5, s10
 8020e80:	ee07 3a90 	vmov	s15, r3
 8020e84:	ee05 ea10 	vmov	s10, lr
 8020e88:	f89a 305c 	ldrb.w	r3, [sl, #92]	@ 0x5c
 8020e8c:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8020e90:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8020e94:	eeb8 3ac5 	vcvt.f32.s32	s6, s10
 8020e98:	ee06 3a10 	vmov	s12, r3
 8020e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ea0:	ee05 ca10 	vmov	s10, ip
 8020ea4:	f8ba 3064 	ldrh.w	r3, [sl, #100]	@ 0x64
 8020ea8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8020eac:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8020eb0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020eb4:	eee4 7a05 	vfma.f32	s15, s8, s10
 8020eb8:	ee26 6a24 	vmul.f32	s12, s12, s9
 8020ebc:	ee05 3a10 	vmov	s10, r3
 8020ec0:	eea4 6a02 	vfma.f32	s12, s8, s4
 8020ec4:	f8ba 3066 	ldrh.w	r3, [sl, #102]	@ 0x66
 8020ec8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8020ecc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8020ed0:	ee05 3a90 	vmov	s11, r3
 8020ed4:	eee4 6a22 	vfma.f32	s13, s8, s5
 8020ed8:	f8ba 3068 	ldrh.w	r3, [sl, #104]	@ 0x68
 8020edc:	ee25 5a24 	vmul.f32	s10, s10, s9
 8020ee0:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8020ee4:	eea4 5a23 	vfma.f32	s10, s8, s7
 8020ee8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8020eec:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8020ef0:	ed8d 6a01 	vstr	s12, [sp, #4]
 8020ef4:	eea4 7a03 	vfma.f32	s14, s8, s6
 8020ef8:	f89d 6004 	ldrb.w	r6, [sp, #4]
 8020efc:	f88d 60a0 	strb.w	r6, [sp, #160]	@ 0xa0
 8020f00:	ee06 3a10 	vmov	s12, r3
 8020f04:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8020f08:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8020f0c:	eee4 5a23 	vfma.f32	s11, s8, s7
 8020f10:	ee16 3a90 	vmov	r3, s13
 8020f14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8020f18:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8020f1c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8020f20:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8020f24:	f8ad 30a2 	strh.w	r3, [sp, #162]	@ 0xa2
 8020f28:	ee15 3a10 	vmov	r3, s10
 8020f2c:	eea4 6a23 	vfma.f32	s12, s8, s7
 8020f30:	f8ad 30a8 	strh.w	r3, [sp, #168]	@ 0xa8
 8020f34:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8020f38:	ee17 3a10 	vmov	r3, s14
 8020f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020f40:	f8ad 30a4 	strh.w	r3, [sp, #164]	@ 0xa4
 8020f44:	ee15 3a90 	vmov	r3, s11
 8020f48:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8020f4c:	f8ad 30aa 	strh.w	r3, [sp, #170]	@ 0xaa
 8020f50:	ee17 3a90 	vmov	r3, s15
 8020f54:	f8ad 30a6 	strh.w	r3, [sp, #166]	@ 0xa6
 8020f58:	ee16 3a10 	vmov	r3, s12
 8020f5c:	f8ad 30ac 	strh.w	r3, [sp, #172]	@ 0xac
 8020f60:	e598      	b.n	8020a94 <MEMS_runMagCal.constprop.0+0x1ddc>
 8020f62:	9b04      	ldr	r3, [sp, #16]
 8020f64:	e718      	b.n	8020d98 <MEMS_runMagCal.constprop.0+0x20e0>
 8020f66:	2303      	movs	r3, #3
 8020f68:	9304      	str	r3, [sp, #16]
 8020f6a:	e68e      	b.n	8020c8a <MEMS_runMagCal.constprop.0+0x1fd2>
 8020f6c:	2303      	movs	r3, #3
 8020f6e:	e713      	b.n	8020d98 <MEMS_runMagCal.constprop.0+0x20e0>
 8020f70:	26ff      	movs	r6, #255	@ 0xff
 8020f72:	e57f      	b.n	8020a74 <MEMS_runMagCal.constprop.0+0x1dbc>
 8020f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f78:	f6ff aced 	blt.w	8020956 <MEMS_runMagCal.constprop.0+0x1c9e>
 8020f7c:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80210ac <MEMS_runMagCal.constprop.0+0x23f4>
 8020f80:	eef4 9ae7 	vcmpe.f32	s19, s15
 8020f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f88:	f63f ace5 	bhi.w	8020956 <MEMS_runMagCal.constprop.0+0x1c9e>
 8020f8c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80210b0 <MEMS_runMagCal.constprop.0+0x23f8>
 8020f90:	9b01      	ldr	r3, [sp, #4]
 8020f92:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8020f96:	3b01      	subs	r3, #1
 8020f98:	f88a 30a0 	strb.w	r3, [sl, #160]	@ 0xa0
 8020f9c:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8020fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020fa4:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8020fa8:	ee17 3a90 	vmov	r3, s15
 8020fac:	b298      	uxth	r0, r3
 8020fae:	f7f8 ff1f 	bl	8019df0 <MEMS_updateMagBufferIndex.constprop.0>
 8020fb2:	eddd 7a02 	vldr	s15, [sp, #8]
 8020fb6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8020fba:	eddf 7a41 	vldr	s15, [pc, #260]	@ 80210c0 <MEMS_runMagCal.constprop.0+0x2408>
 8020fbe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020fc2:	f001 f9f9 	bl	80223b8 <roundf>
 8020fc6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8020fca:	2300      	movs	r3, #0
 8020fcc:	f88a 3014 	strb.w	r3, [sl, #20]
 8020fd0:	ed8a 0a06 	vstr	s0, [sl, #24]
 8020fd4:	f7fe ba7a 	b.w	801f4cc <MEMS_runMagCal.constprop.0+0x814>
 8020fd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020fdc:	f7fe be89 	b.w	801fcf2 <MEMS_runMagCal.constprop.0+0x103a>
 8020fe0:	ed9a 0a1c 	vldr	s0, [sl, #112]	@ 0x70
 8020fe4:	f001 f9e8 	bl	80223b8 <roundf>
 8020fe8:	eef0 7a40 	vmov.f32	s15, s0
 8020fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8020ff0:	ae19      	add	r6, sp, #100	@ 0x64
 8020ff2:	ee17 3a90 	vmov	r3, s15
 8020ff6:	ed9a 0a1d 	vldr	s0, [sl, #116]	@ 0x74
 8020ffa:	8033      	strh	r3, [r6, #0]
 8020ffc:	f001 f9dc 	bl	80223b8 <roundf>
 8021000:	eef0 7a40 	vmov.f32	s15, s0
 8021004:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021008:	ed9a 0a1e 	vldr	s0, [sl, #120]	@ 0x78
 802100c:	ee17 3a90 	vmov	r3, s15
 8021010:	8073      	strh	r3, [r6, #2]
 8021012:	f001 f9d1 	bl	80223b8 <roundf>
 8021016:	eef0 7a40 	vmov.f32	s15, s0
 802101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802101e:	4921      	ldr	r1, [pc, #132]	@ (80210a4 <MEMS_runMagCal.constprop.0+0x23ec>)
 8021020:	ee17 3a90 	vmov	r3, s15
 8021024:	eeb0 0a68 	vmov.f32	s0, s17
 8021028:	80b3      	strh	r3, [r6, #4]
 802102a:	aa16      	add	r2, sp, #88	@ 0x58
 802102c:	ab15      	add	r3, sp, #84	@ 0x54
 802102e:	4630      	mov	r0, r6
 8021030:	f7f8 fdee 	bl	8019c10 <getMagStats.constprop.0>
 8021034:	ed93 7a00 	vldr	s14, [r3]
 8021038:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80210b4 <MEMS_runMagCal.constprop.0+0x23fc>
 802103c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8021040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021044:	d50e      	bpl.n	8021064 <MEMS_runMagCal.constprop.0+0x23ac>
 8021046:	b968      	cbnz	r0, 8021064 <MEMS_runMagCal.constprop.0+0x23ac>
 8021048:	f1bb 0f00 	cmp.w	fp, #0
 802104c:	d042      	beq.n	80210d4 <MEMS_runMagCal.constprop.0+0x241c>
 802104e:	f89a 305d 	ldrb.w	r3, [sl, #93]	@ 0x5d
 8021052:	ee07 3a90 	vmov	s15, r3
 8021056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802105a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 802105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021062:	dc37      	bgt.n	80210d4 <MEMS_runMagCal.constprop.0+0x241c>
 8021064:	2300      	movs	r3, #0
 8021066:	6033      	str	r3, [r6, #0]
 8021068:	80b3      	strh	r3, [r6, #4]
 802106a:	f7fe bc9e 	b.w	801f9aa <MEMS_runMagCal.constprop.0+0xcf2>
 802106e:	ed9f aa12 	vldr	s20, [pc, #72]	@ 80210b8 <MEMS_runMagCal.constprop.0+0x2400>
 8021072:	e454      	b.n	802091e <MEMS_runMagCal.constprop.0+0x1c66>
 8021074:	eef2 ba04 	vmov.f32	s23, #36	@ 0x41200000  10.0
 8021078:	f7ff bb53 	b.w	8020722 <MEMS_runMagCal.constprop.0+0x1a6a>
 802107c:	3601      	adds	r6, #1
 802107e:	b2f6      	uxtb	r6, r6
 8021080:	2e05      	cmp	r6, #5
 8021082:	f47e ae54 	bne.w	801fd2e <MEMS_runMagCal.constprop.0+0x1076>
 8021086:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802108a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 802108e:	f7ff bbf0 	b.w	8020872 <MEMS_runMagCal.constprop.0+0x1bba>
 8021092:	ed9f ca09 	vldr	s24, [pc, #36]	@ 80210b8 <MEMS_runMagCal.constprop.0+0x2400>
 8021096:	f7fe bd75 	b.w	801fb84 <MEMS_runMagCal.constprop.0+0xecc>
 802109a:	ed9f ca08 	vldr	s24, [pc, #32]	@ 80210bc <MEMS_runMagCal.constprop.0+0x2404>
 802109e:	f7fe bd71 	b.w	801fb84 <MEMS_runMagCal.constprop.0+0xecc>
 80210a2:	bf00      	nop
 80210a4:	20000408 	.word	0x20000408
 80210a8:	423c0000 	.word	0x423c0000
 80210ac:	3ee66666 	.word	0x3ee66666
 80210b0:	433d0000 	.word	0x433d0000
 80210b4:	3ff4cccd 	.word	0x3ff4cccd
 80210b8:	00000000 	.word	0x00000000
 80210bc:	3f860a92 	.word	0x3f860a92
 80210c0:	3a83126f 	.word	0x3a83126f
 80210c4:	461a      	mov	r2, r3
 80210c6:	fb97 f3f3 	sdiv	r3, r7, r3
 80210ca:	fb02 7313 	mls	r3, r2, r3, r7
 80210ce:	b21b      	sxth	r3, r3
 80210d0:	f7fe bbd7 	b.w	801f882 <MEMS_runMagCal.constprop.0+0xbca>
 80210d4:	eddd 7a02 	vldr	s15, [sp, #8]
 80210d8:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80210dc:	ed5f 7a08 	vldr	s15, [pc, #-32]	@ 80210c0 <MEMS_runMagCal.constprop.0+0x2408>
 80210e0:	2303      	movs	r3, #3
 80210e2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80210e6:	f88a 306c 	strb.w	r3, [sl, #108]	@ 0x6c
 80210ea:	e76a      	b.n	8020fc2 <MEMS_runMagCal.constprop.0+0x230a>

080210ec <MotionFX_GetStateSize>:
 80210ec:	f44f 6018 	mov.w	r0, #2432	@ 0x980
 80210f0:	4770      	bx	lr
 80210f2:	bf00      	nop

080210f4 <MotionFX_initialize>:
 80210f4:	4a4b      	ldr	r2, [pc, #300]	@ (8021224 <MotionFX_initialize+0x130>)
 80210f6:	6813      	ldr	r3, [r2, #0]
 80210f8:	f04f 2ce0 	mov.w	ip, #3758153728	@ 0xe000e000
 80210fc:	f023 0301 	bic.w	r3, r3, #1
 8021100:	b530      	push	{r4, r5, lr}
 8021102:	6013      	str	r3, [r2, #0]
 8021104:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 8021108:	f64f 71f0 	movw	r1, #65520	@ 0xfff0
 802110c:	400b      	ands	r3, r1
 802110e:	f24c 2240 	movw	r2, #49728	@ 0xc240
 8021112:	4293      	cmp	r3, r2
 8021114:	b085      	sub	sp, #20
 8021116:	4604      	mov	r4, r0
 8021118:	d013      	beq.n	8021142 <MotionFX_initialize+0x4e>
 802111a:	f8dc 3d00 	ldr.w	r3, [ip, #3328]	@ 0xd00
 802111e:	f24c 2270 	movw	r2, #49776	@ 0xc270
 8021122:	400b      	ands	r3, r1
 8021124:	4293      	cmp	r3, r2
 8021126:	d00c      	beq.n	8021142 <MotionFX_initialize+0x4e>
 8021128:	4a3f      	ldr	r2, [pc, #252]	@ (8021228 <MotionFX_initialize+0x134>)
 802112a:	2301      	movs	r3, #1
 802112c:	6093      	str	r3, [r2, #8]
 802112e:	6893      	ldr	r3, [r2, #8]
 8021130:	2b00      	cmp	r3, #0
 8021132:	d1fc      	bne.n	802112e <MotionFX_initialize+0x3a>
 8021134:	4b3d      	ldr	r3, [pc, #244]	@ (802122c <MotionFX_initialize+0x138>)
 8021136:	6013      	str	r3, [r2, #0]
 8021138:	6812      	ldr	r2, [r2, #0]
 802113a:	4b3d      	ldr	r3, [pc, #244]	@ (8021230 <MotionFX_initialize+0x13c>)
 802113c:	429a      	cmp	r2, r3
 802113e:	d02c      	beq.n	802119a <MotionFX_initialize+0xa6>
 8021140:	e7fe      	b.n	8021140 <MotionFX_initialize+0x4c>
 8021142:	4b3c      	ldr	r3, [pc, #240]	@ (8021234 <MotionFX_initialize+0x140>)
 8021144:	681b      	ldr	r3, [r3, #0]
 8021146:	2b00      	cmp	r3, #0
 8021148:	d1ee      	bne.n	8021128 <MotionFX_initialize+0x34>
 802114a:	4a3b      	ldr	r2, [pc, #236]	@ (8021238 <MotionFX_initialize+0x144>)
 802114c:	6813      	ldr	r3, [r2, #0]
 802114e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021152:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 8021156:	d054      	beq.n	8021202 <MotionFX_initialize+0x10e>
 8021158:	6813      	ldr	r3, [r2, #0]
 802115a:	f240 4183 	movw	r1, #1155	@ 0x483
 802115e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021162:	428b      	cmp	r3, r1
 8021164:	d04d      	beq.n	8021202 <MotionFX_initialize+0x10e>
 8021166:	6813      	ldr	r3, [r2, #0]
 8021168:	f240 4285 	movw	r2, #1157	@ 0x485
 802116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021170:	4293      	cmp	r3, r2
 8021172:	d046      	beq.n	8021202 <MotionFX_initialize+0x10e>
 8021174:	4b31      	ldr	r3, [pc, #196]	@ (802123c <MotionFX_initialize+0x148>)
 8021176:	681b      	ldr	r3, [r3, #0]
 8021178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802117c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8021180:	d1d2      	bne.n	8021128 <MotionFX_initialize+0x34>
 8021182:	4a2f      	ldr	r2, [pc, #188]	@ (8021240 <MotionFX_initialize+0x14c>)
 8021184:	2301      	movs	r3, #1
 8021186:	6093      	str	r3, [r2, #8]
 8021188:	6893      	ldr	r3, [r2, #8]
 802118a:	2b00      	cmp	r3, #0
 802118c:	d1fc      	bne.n	8021188 <MotionFX_initialize+0x94>
 802118e:	4b27      	ldr	r3, [pc, #156]	@ (802122c <MotionFX_initialize+0x138>)
 8021190:	6013      	str	r3, [r2, #0]
 8021192:	6812      	ldr	r2, [r2, #0]
 8021194:	4b26      	ldr	r3, [pc, #152]	@ (8021230 <MotionFX_initialize+0x13c>)
 8021196:	429a      	cmp	r2, r3
 8021198:	d1d2      	bne.n	8021140 <MotionFX_initialize+0x4c>
 802119a:	4b2a      	ldr	r3, [pc, #168]	@ (8021244 <MotionFX_initialize+0x150>)
 802119c:	4a2a      	ldr	r2, [pc, #168]	@ (8021248 <MotionFX_initialize+0x154>)
 802119e:	9303      	str	r3, [sp, #12]
 80211a0:	2501      	movs	r5, #1
 80211a2:	4620      	mov	r0, r4
 80211a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80211a8:	f882 53c4 	strb.w	r5, [r2, #964]	@ 0x3c4
 80211ac:	f7f8 ffce 	bl	801a14c <MFX_emptyAttitude>
 80211b0:	a901      	add	r1, sp, #4
 80211b2:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 80211b6:	f7f7 fae3 	bl	8018780 <updateOrientation>
 80211ba:	a903      	add	r1, sp, #12
 80211bc:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 80211c0:	f7f7 fade 	bl	8018780 <updateOrientation>
 80211c4:	a902      	add	r1, sp, #8
 80211c6:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80211ca:	f7f7 fad9 	bl	8018780 <updateOrientation>
 80211ce:	4b1f      	ldr	r3, [pc, #124]	@ (802124c <MotionFX_initialize+0x158>)
 80211d0:	491f      	ldr	r1, [pc, #124]	@ (8021250 <MotionFX_initialize+0x15c>)
 80211d2:	61a3      	str	r3, [r4, #24]
 80211d4:	4b1f      	ldr	r3, [pc, #124]	@ (8021254 <MotionFX_initialize+0x160>)
 80211d6:	4a20      	ldr	r2, [pc, #128]	@ (8021258 <MotionFX_initialize+0x164>)
 80211d8:	62a1      	str	r1, [r4, #40]	@ 0x28
 80211da:	6223      	str	r3, [r4, #32]
 80211dc:	491f      	ldr	r1, [pc, #124]	@ (802125c <MotionFX_initialize+0x168>)
 80211de:	61e2      	str	r2, [r4, #28]
 80211e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80211e4:	f04f 507f 	mov.w	r0, #1069547520	@ 0x3fc00000
 80211e8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80211ec:	8723      	strh	r3, [r4, #56]	@ 0x38
 80211ee:	f240 1301 	movw	r3, #257	@ 0x101
 80211f2:	62e0      	str	r0, [r4, #44]	@ 0x2c
 80211f4:	6361      	str	r1, [r4, #52]	@ 0x34
 80211f6:	80a2      	strh	r2, [r4, #4]
 80211f8:	f8a4 300d 	strh.w	r3, [r4, #13]
 80211fc:	73e5      	strb	r5, [r4, #15]
 80211fe:	b005      	add	sp, #20
 8021200:	bd30      	pop	{r4, r5, pc}
 8021202:	4a17      	ldr	r2, [pc, #92]	@ (8021260 <MotionFX_initialize+0x16c>)
 8021204:	2301      	movs	r3, #1
 8021206:	f8c2 3c08 	str.w	r3, [r2, #3080]	@ 0xc08
 802120a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	@ 0xc08
 802120e:	2b00      	cmp	r3, #0
 8021210:	d1fb      	bne.n	802120a <MotionFX_initialize+0x116>
 8021212:	4b06      	ldr	r3, [pc, #24]	@ (802122c <MotionFX_initialize+0x138>)
 8021214:	f8c2 3c00 	str.w	r3, [r2, #3072]	@ 0xc00
 8021218:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	@ 0xc00
 802121c:	4b04      	ldr	r3, [pc, #16]	@ (8021230 <MotionFX_initialize+0x13c>)
 802121e:	429a      	cmp	r2, r3
 8021220:	d0bb      	beq.n	802119a <MotionFX_initialize+0xa6>
 8021222:	e78d      	b.n	8021140 <MotionFX_initialize+0x4c>
 8021224:	e0002000 	.word	0xe0002000
 8021228:	40023000 	.word	0x40023000
 802122c:	f407a5c2 	.word	0xf407a5c2
 8021230:	b5e8b5cd 	.word	0xb5e8b5cd
 8021234:	e0042000 	.word	0xe0042000
 8021238:	5c001000 	.word	0x5c001000
 802123c:	50081000 	.word	0x50081000
 8021240:	4c004000 	.word	0x4c004000
 8021244:	00756e65 	.word	0x00756e65
 8021248:	2000038c 	.word	0x2000038c
 802124c:	3a51b717 	.word	0x3a51b717
 8021250:	3f666666 	.word	0x3f666666
 8021254:	3b378034 	.word	0x3b378034
 8021258:	3a378034 	.word	0x3a378034
 802125c:	3f2ac083 	.word	0x3f2ac083
 8021260:	58024000 	.word	0x58024000

08021264 <MotionFX_setKnobs>:
 8021264:	4b24      	ldr	r3, [pc, #144]	@ (80212f8 <MotionFX_setKnobs+0x94>)
 8021266:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 802126a:	b902      	cbnz	r2, 802126e <MotionFX_setKnobs+0xa>
 802126c:	4770      	bx	lr
 802126e:	460b      	mov	r3, r1
 8021270:	2900      	cmp	r1, #0
 8021272:	d0fb      	beq.n	802126c <MotionFX_setKnobs+0x8>
 8021274:	b510      	push	{r4, lr}
 8021276:	4604      	mov	r4, r0
 8021278:	689a      	ldr	r2, [r3, #8]
 802127a:	6808      	ldr	r0, [r1, #0]
 802127c:	6849      	ldr	r1, [r1, #4]
 802127e:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8021280:	62a0      	str	r0, [r4, #40]	@ 0x28
 8021282:	6362      	str	r2, [r4, #52]	@ 0x34
 8021284:	7b1a      	ldrb	r2, [r3, #12]
 8021286:	7162      	strb	r2, [r4, #5]
 8021288:	6918      	ldr	r0, [r3, #16]
 802128a:	6959      	ldr	r1, [r3, #20]
 802128c:	699a      	ldr	r2, [r3, #24]
 802128e:	6222      	str	r2, [r4, #32]
 8021290:	61a0      	str	r0, [r4, #24]
 8021292:	61e1      	str	r1, [r4, #28]
 8021294:	7f1a      	ldrb	r2, [r3, #28]
 8021296:	7122      	strb	r2, [r4, #4]
 8021298:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 802129c:	f884 2038 	strb.w	r2, [r4, #56]	@ 0x38
 80212a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80212a2:	f884 2978 	strb.w	r2, [r4, #2424]	@ 0x978
 80212a6:	b084      	sub	sp, #16
 80212a8:	f8b3 101d 	ldrh.w	r1, [r3, #29]
 80212ac:	7fda      	ldrb	r2, [r3, #31]
 80212ae:	f88d 2006 	strb.w	r2, [sp, #6]
 80212b2:	f8ad 1004 	strh.w	r1, [sp, #4]
 80212b6:	f8b3 2021 	ldrh.w	r2, [r3, #33]	@ 0x21
 80212ba:	f8ad 2008 	strh.w	r2, [sp, #8]
 80212be:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80212c2:	f88d 200a 	strb.w	r2, [sp, #10]
 80212c6:	f8b3 2025 	ldrh.w	r2, [r3, #37]	@ 0x25
 80212ca:	f8ad 200c 	strh.w	r2, [sp, #12]
 80212ce:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80212d2:	f88d 300e 	strb.w	r3, [sp, #14]
 80212d6:	a901      	add	r1, sp, #4
 80212d8:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 80212dc:	f7f7 fa50 	bl	8018780 <updateOrientation>
 80212e0:	a903      	add	r1, sp, #12
 80212e2:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 80212e6:	f7f7 fa4b 	bl	8018780 <updateOrientation>
 80212ea:	a902      	add	r1, sp, #8
 80212ec:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 80212f0:	f7f7 fa46 	bl	8018780 <updateOrientation>
 80212f4:	b004      	add	sp, #16
 80212f6:	bd10      	pop	{r4, pc}
 80212f8:	2000038c 	.word	0x2000038c

080212fc <MotionFX_getKnobs>:
 80212fc:	4b1d      	ldr	r3, [pc, #116]	@ (8021374 <MotionFX_getKnobs+0x78>)
 80212fe:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 8021302:	b903      	cbnz	r3, 8021306 <MotionFX_getKnobs+0xa>
 8021304:	4770      	bx	lr
 8021306:	460a      	mov	r2, r1
 8021308:	2900      	cmp	r1, #0
 802130a:	d0fb      	beq.n	8021304 <MotionFX_getKnobs+0x8>
 802130c:	b510      	push	{r4, lr}
 802130e:	4604      	mov	r4, r0
 8021310:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8021312:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021316:	6093      	str	r3, [r2, #8]
 8021318:	6010      	str	r0, [r2, #0]
 802131a:	6051      	str	r1, [r2, #4]
 802131c:	7963      	ldrb	r3, [r4, #5]
 802131e:	7313      	strb	r3, [r2, #12]
 8021320:	69a0      	ldr	r0, [r4, #24]
 8021322:	69e1      	ldr	r1, [r4, #28]
 8021324:	6a23      	ldr	r3, [r4, #32]
 8021326:	6193      	str	r3, [r2, #24]
 8021328:	6110      	str	r0, [r2, #16]
 802132a:	6151      	str	r1, [r2, #20]
 802132c:	7923      	ldrb	r3, [r4, #4]
 802132e:	7713      	strb	r3, [r2, #28]
 8021330:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8021334:	f882 3029 	strb.w	r3, [r2, #41]	@ 0x29
 8021338:	f894 3978 	ldrb.w	r3, [r4, #2424]	@ 0x978
 802133c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 802133e:	f102 011d 	add.w	r1, r2, #29
 8021342:	f104 003a 	add.w	r0, r4, #58	@ 0x3a
 8021346:	f7f7 f8af 	bl	80184a8 <findAxis>
 802134a:	f102 0121 	add.w	r1, r2, #33	@ 0x21
 802134e:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8021352:	f7f7 f8a9 	bl	80184a8 <findAxis>
 8021356:	f102 0125 	add.w	r1, r2, #37	@ 0x25
 802135a:	f104 0043 	add.w	r0, r4, #67	@ 0x43
 802135e:	f7f7 f8a3 	bl	80184a8 <findAxis>
 8021362:	2300      	movs	r3, #0
 8021364:	f882 3020 	strb.w	r3, [r2, #32]
 8021368:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
 802136c:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
 8021370:	bd10      	pop	{r4, pc}
 8021372:	bf00      	nop
 8021374:	2000038c 	.word	0x2000038c

08021378 <MotionFX_enable_6X>:
 8021378:	4b0e      	ldr	r3, [pc, #56]	@ (80213b4 <MotionFX_enable_6X+0x3c>)
 802137a:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 802137e:	b903      	cbnz	r3, 8021382 <MotionFX_enable_6X+0xa>
 8021380:	4770      	bx	lr
 8021382:	2900      	cmp	r1, #0
 8021384:	d0fc      	beq.n	8021380 <MotionFX_enable_6X+0x8>
 8021386:	b530      	push	{r4, r5, lr}
 8021388:	1d05      	adds	r5, r0, #4
 802138a:	b099      	sub	sp, #100	@ 0x64
 802138c:	4604      	mov	r4, r0
 802138e:	4629      	mov	r1, r5
 8021390:	225c      	movs	r2, #92	@ 0x5c
 8021392:	a801      	add	r0, sp, #4
 8021394:	f003 fe4b 	bl	802502e <memcpy>
 8021398:	4620      	mov	r0, r4
 802139a:	f7f8 fed7 	bl	801a14c <MFX_emptyAttitude>
 802139e:	225c      	movs	r2, #92	@ 0x5c
 80213a0:	a901      	add	r1, sp, #4
 80213a2:	4628      	mov	r0, r5
 80213a4:	f003 fe43 	bl	802502e <memcpy>
 80213a8:	2300      	movs	r3, #0
 80213aa:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80213ae:	7363      	strb	r3, [r4, #13]
 80213b0:	b019      	add	sp, #100	@ 0x64
 80213b2:	bd30      	pop	{r4, r5, pc}
 80213b4:	2000038c 	.word	0x2000038c

080213b8 <MotionFX_enable_9X>:
 80213b8:	4b0e      	ldr	r3, [pc, #56]	@ (80213f4 <MotionFX_enable_9X+0x3c>)
 80213ba:	f893 33c4 	ldrb.w	r3, [r3, #964]	@ 0x3c4
 80213be:	b903      	cbnz	r3, 80213c2 <MotionFX_enable_9X+0xa>
 80213c0:	4770      	bx	lr
 80213c2:	2900      	cmp	r1, #0
 80213c4:	d0fc      	beq.n	80213c0 <MotionFX_enable_9X+0x8>
 80213c6:	b530      	push	{r4, r5, lr}
 80213c8:	1d05      	adds	r5, r0, #4
 80213ca:	b099      	sub	sp, #100	@ 0x64
 80213cc:	4604      	mov	r4, r0
 80213ce:	4629      	mov	r1, r5
 80213d0:	225c      	movs	r2, #92	@ 0x5c
 80213d2:	a801      	add	r0, sp, #4
 80213d4:	f003 fe2b 	bl	802502e <memcpy>
 80213d8:	4620      	mov	r0, r4
 80213da:	f7f8 feb7 	bl	801a14c <MFX_emptyAttitude>
 80213de:	225c      	movs	r2, #92	@ 0x5c
 80213e0:	a901      	add	r1, sp, #4
 80213e2:	4628      	mov	r0, r5
 80213e4:	f003 fe23 	bl	802502e <memcpy>
 80213e8:	2301      	movs	r3, #1
 80213ea:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80213ee:	7363      	strb	r3, [r4, #13]
 80213f0:	b019      	add	sp, #100	@ 0x64
 80213f2:	bd30      	pop	{r4, r5, pc}
 80213f4:	2000038c 	.word	0x2000038c

080213f8 <MotionFX_update>:
 80213f8:	b430      	push	{r4, r5}
 80213fa:	4c06      	ldr	r4, [pc, #24]	@ (8021414 <MotionFX_update+0x1c>)
 80213fc:	9d02      	ldr	r5, [sp, #8]
 80213fe:	f894 43c4 	ldrb.w	r4, [r4, #964]	@ 0x3c4
 8021402:	b90c      	cbnz	r4, 8021408 <MotionFX_update+0x10>
 8021404:	bc30      	pop	{r4, r5}
 8021406:	4770      	bx	lr
 8021408:	ed93 0a00 	vldr	s0, [r3]
 802140c:	462b      	mov	r3, r5
 802140e:	bc30      	pop	{r4, r5}
 8021410:	f7f9 b986 	b.w	801a720 <iNemoEngine_API_Update>
 8021414:	2000038c 	.word	0x2000038c

08021418 <MotionFX_propagate>:
 8021418:	b5f0      	push	{r4, r5, r6, r7, lr}
 802141a:	ed2d 8b06 	vpush	{d8-d10}
 802141e:	4c79      	ldr	r4, [pc, #484]	@ (8021604 <MotionFX_propagate+0x1ec>)
 8021420:	f894 63c4 	ldrb.w	r6, [r4, #964]	@ 0x3c4
 8021424:	b09d      	sub	sp, #116	@ 0x74
 8021426:	b91e      	cbnz	r6, 8021430 <MotionFX_propagate+0x18>
 8021428:	b01d      	add	sp, #116	@ 0x74
 802142a:	ecbd 8b06 	vpop	{d8-d10}
 802142e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021430:	4694      	mov	ip, r2
 8021432:	4604      	mov	r4, r0
 8021434:	460d      	mov	r5, r1
 8021436:	68d0      	ldr	r0, [r2, #12]
 8021438:	6911      	ldr	r1, [r2, #16]
 802143a:	6952      	ldr	r2, [r2, #20]
 802143c:	ed93 0a00 	vldr	s0, [r3]
 8021440:	ab0f      	add	r3, sp, #60	@ 0x3c
 8021442:	c307      	stmia	r3!, {r0, r1, r2}
 8021444:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8021448:	f8dc 101c 	ldr.w	r1, [ip, #28]
 802144c:	f8dc 2020 	ldr.w	r2, [ip, #32]
 8021450:	c307      	stmia	r3!, {r0, r1, r2}
 8021452:	aa12      	add	r2, sp, #72	@ 0x48
 8021454:	f104 014c 	add.w	r1, r4, #76	@ 0x4c
 8021458:	a802      	add	r0, sp, #8
 802145a:	f7f6 ffc3 	bl	80183e4 <rotVect>
 802145e:	7923      	ldrb	r3, [r4, #4]
 8021460:	f104 073a 	add.w	r7, r4, #58	@ 0x3a
 8021464:	2b00      	cmp	r3, #0
 8021466:	f000 80bf 	beq.w	80215e8 <MotionFX_propagate+0x1d0>
 802146a:	ee07 3a90 	vmov	s15, r3
 802146e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021472:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021476:	eec7 6a27 	vdiv.f32	s13, s14, s15
 802147a:	f604 135c 	addw	r3, r4, #2396	@ 0x95c
 802147e:	f504 6613 	add.w	r6, r4, #2352	@ 0x930
 8021482:	edd3 7a00 	vldr	s15, [r3]
 8021486:	eddd 5a02 	vldr	s11, [sp, #8]
 802148a:	ed9d 5a03 	vldr	s10, [sp, #12]
 802148e:	ed9d 6a04 	vldr	s12, [sp, #16]
 8021492:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8021608 <MotionFX_propagate+0x1f0>
 8021496:	eddf 4a5d 	vldr	s9, [pc, #372]	@ 802160c <MotionFX_propagate+0x1f4>
 802149a:	eee5 7aa6 	vfma.f32	s15, s11, s13
 802149e:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80214a2:	edc3 7a00 	vstr	s15, [r3]
 80214a6:	f504 6316 	add.w	r3, r4, #2400	@ 0x960
 80214aa:	edd3 7a00 	vldr	s15, [r3]
 80214ae:	eee5 7a26 	vfma.f32	s15, s10, s13
 80214b2:	ee20 0a04 	vmul.f32	s0, s0, s8
 80214b6:	edc3 7a00 	vstr	s15, [r3]
 80214ba:	f604 1364 	addw	r3, r4, #2404	@ 0x964
 80214be:	edd3 7a00 	vldr	s15, [r3]
 80214c2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80214c6:	edc3 7a00 	vstr	s15, [r3]
 80214ca:	f604 1344 	addw	r3, r4, #2372	@ 0x944
 80214ce:	edd3 8a00 	vldr	s17, [r3]
 80214d2:	f504 6314 	add.w	r3, r4, #2368	@ 0x940
 80214d6:	ed93 9a00 	vldr	s18, [r3]
 80214da:	eed5 8a07 	vfnms.f32	s17, s10, s14
 80214de:	f604 1348 	addw	r3, r4, #2376	@ 0x948
 80214e2:	ee95 9a87 	vfnms.f32	s18, s11, s14
 80214e6:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80214ea:	ed93 8a00 	vldr	s16, [r3]
 80214ee:	eee9 7a09 	vfma.f32	s15, s18, s18
 80214f2:	ee96 8a07 	vfnms.f32	s16, s12, s14
 80214f6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80214fa:	eef4 7ae4 	vcmpe.f32	s15, s9
 80214fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021502:	dd76      	ble.n	80215f2 <MotionFX_propagate+0x1da>
 8021504:	eeb1 aae7 	vsqrt.f32	s20, s15
 8021508:	ee6a 9a00 	vmul.f32	s19, s20, s0
 802150c:	eeb0 0a69 	vmov.f32	s0, s19
 8021510:	f000 fcfa 	bl	8021f08 <sinf>
 8021514:	eeb0 7a40 	vmov.f32	s14, s0
 8021518:	eec7 7a0a 	vdiv.f32	s15, s14, s20
 802151c:	eeb0 0a69 	vmov.f32	s0, s19
 8021520:	ee29 9a27 	vmul.f32	s18, s18, s15
 8021524:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8021528:	ee28 8a27 	vmul.f32	s16, s16, s15
 802152c:	f000 fca0 	bl	8021e70 <cosf>
 8021530:	a805      	add	r0, sp, #20
 8021532:	4632      	mov	r2, r6
 8021534:	4631      	mov	r1, r6
 8021536:	ed8d 0a08 	vstr	s0, [sp, #32]
 802153a:	ed8d 9a05 	vstr	s18, [sp, #20]
 802153e:	edcd 8a06 	vstr	s17, [sp, #24]
 8021542:	ed8d 8a07 	vstr	s16, [sp, #28]
 8021546:	f7f7 f99f 	bl	8018888 <qmult>
 802154a:	f604 1c38 	addw	ip, r4, #2360	@ 0x938
 802154e:	ed9c 7a00 	vldr	s14, [ip]
 8021552:	ed96 6a00 	vldr	s12, [r6]
 8021556:	f604 1e34 	addw	lr, r4, #2356	@ 0x934
 802155a:	edde 6a00 	vldr	s13, [lr]
 802155e:	ee67 7a07 	vmul.f32	s15, s14, s14
 8021562:	f604 133c 	addw	r3, r4, #2364	@ 0x93c
 8021566:	eee6 7aa6 	vfma.f32	s15, s13, s13
 802156a:	aa0f      	add	r2, sp, #60	@ 0x3c
 802156c:	4639      	mov	r1, r7
 802156e:	edd3 5a00 	vldr	s11, [r3]
 8021572:	eee6 7a06 	vfma.f32	s15, s12, s12
 8021576:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 802157a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802157e:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8021582:	eec4 7a85 	vdiv.f32	s15, s9, s10
 8021586:	ee27 4a86 	vmul.f32	s8, s15, s12
 802158a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 802158e:	ee27 5a27 	vmul.f32	s10, s14, s15
 8021592:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8021596:	ed86 4a00 	vstr	s8, [r6]
 802159a:	edce 4a00 	vstr	s9, [lr]
 802159e:	ed8c 5a00 	vstr	s10, [ip]
 80215a2:	edc3 5a00 	vstr	s11, [r3]
 80215a6:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	@ 0x950
 80215aa:	3301      	adds	r3, #1
 80215ac:	f8a4 3950 	strh.w	r3, [r4, #2384]	@ 0x950
 80215b0:	f7f6 ff18 	bl	80183e4 <rotVect>
 80215b4:	ed85 4a03 	vstr	s8, [r5, #12]
 80215b8:	edc5 4a04 	vstr	s9, [r5, #16]
 80215bc:	ed85 5a05 	vstr	s10, [r5, #20]
 80215c0:	edc5 5a06 	vstr	s11, [r5, #24]
 80215c4:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 80215c8:	f105 0328 	add.w	r3, r5, #40	@ 0x28
 80215cc:	e9cd 3200 	strd	r3, r2, [sp]
 80215d0:	4601      	mov	r1, r0
 80215d2:	f105 031c 	add.w	r3, r5, #28
 80215d6:	462a      	mov	r2, r5
 80215d8:	f105 000c 	add.w	r0, r5, #12
 80215dc:	f7f8 fce8 	bl	8019fb0 <output_update>
 80215e0:	b01d      	add	sp, #116	@ 0x74
 80215e2:	ecbd 8b06 	vpop	{d8-d10}
 80215e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80215e8:	2301      	movs	r3, #1
 80215ea:	7123      	strb	r3, [r4, #4]
 80215ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80215f0:	e743      	b.n	802147a <MotionFX_propagate+0x62>
 80215f2:	ee29 9a00 	vmul.f32	s18, s18, s0
 80215f6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80215fa:	ee28 8a00 	vmul.f32	s16, s16, s0
 80215fe:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8021602:	e795      	b.n	8021530 <MotionFX_propagate+0x118>
 8021604:	2000038c 	.word	0x2000038c
 8021608:	3c8efa35 	.word	0x3c8efa35
 802160c:	38d1b718 	.word	0x38d1b718

08021610 <MotionFX_MagCal_init>:
 8021610:	b570      	push	{r4, r5, r6, lr}
 8021612:	4c42      	ldr	r4, [pc, #264]	@ (802171c <MotionFX_MagCal_init+0x10c>)
 8021614:	f894 33c4 	ldrb.w	r3, [r4, #964]	@ 0x3c4
 8021618:	b903      	cbnz	r3, 802161c <MotionFX_MagCal_init+0xc>
 802161a:	bd70      	pop	{r4, r5, r6, pc}
 802161c:	1e43      	subs	r3, r0, #1
 802161e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8021622:	4605      	mov	r5, r0
 8021624:	d2f9      	bcs.n	802161a <MotionFX_MagCal_init+0xa>
 8021626:	2900      	cmp	r1, #0
 8021628:	d139      	bne.n	802169e <MotionFX_MagCal_init+0x8e>
 802162a:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
 802162e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8021632:	4a3b      	ldr	r2, [pc, #236]	@ (8021720 <MotionFX_MagCal_init+0x110>)
 8021634:	1b5b      	subs	r3, r3, r5
 8021636:	ee07 3a90 	vmov	s15, r3
 802163a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802163e:	23c8      	movs	r3, #200	@ 0xc8
 8021640:	eef0 7ae7 	vabs.f32	s15, s15
 8021644:	fb93 f3f5 	sdiv	r3, r3, r5
 8021648:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802164c:	b2db      	uxtb	r3, r3
 802164e:	2b0f      	cmp	r3, #15
 8021650:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021654:	bf28      	it	cs
 8021656:	230f      	movcs	r3, #15
 8021658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802165c:	6015      	str	r5, [r2, #0]
 802165e:	f884 37de 	strb.w	r3, [r4, #2014]	@ 0x7de
 8021662:	b22d      	sxth	r5, r5
 8021664:	dc0e      	bgt.n	8021684 <MotionFX_MagCal_init+0x74>
 8021666:	edd4 7a01 	vldr	s15, [r4, #4]
 802166a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8021724 <MotionFX_MagCal_init+0x114>
 802166e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8021728 <MotionFX_MagCal_init+0x118>
 8021672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8021676:	eef0 7ae7 	vabs.f32	s15, s15
 802167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 802167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021682:	dd08      	ble.n	8021696 <MotionFX_MagCal_init+0x86>
 8021684:	2300      	movs	r3, #0
 8021686:	4a29      	ldr	r2, [pc, #164]	@ (802172c <MotionFX_MagCal_init+0x11c>)
 8021688:	8123      	strh	r3, [r4, #8]
 802168a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 802168e:	60e3      	str	r3, [r4, #12]
 8021690:	8021      	strh	r1, [r4, #0]
 8021692:	8065      	strh	r5, [r4, #2]
 8021694:	6062      	str	r2, [r4, #4]
 8021696:	2300      	movs	r3, #0
 8021698:	f884 3858 	strb.w	r3, [r4, #2136]	@ 0x858
 802169c:	bd70      	pop	{r4, r5, r6, pc}
 802169e:	2600      	movs	r6, #0
 80216a0:	f44f 0302 	mov.w	r3, #8519680	@ 0x820000
 80216a4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80216a8:	f504 7372 	add.w	r3, r4, #968	@ 0x3c8
 80216ac:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80216b0:	4631      	mov	r1, r6
 80216b2:	6123      	str	r3, [r4, #16]
 80216b4:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 80216b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80216bc:	f8a4 3050 	strh.w	r3, [r4, #80]	@ 0x50
 80216c0:	f884 6048 	strb.w	r6, [r4, #72]	@ 0x48
 80216c4:	64e6      	str	r6, [r4, #76]	@ 0x4c
 80216c6:	82a6      	strh	r6, [r4, #20]
 80216c8:	f003 fb87 	bl	8024dda <memset>
 80216cc:	225f      	movs	r2, #95	@ 0x5f
 80216ce:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
 80216d2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80216d6:	84a2      	strh	r2, [r4, #36]	@ 0x24
 80216d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80216dc:	23ff      	movs	r3, #255	@ 0xff
 80216de:	f8a4 2054 	strh.w	r2, [r4, #84]	@ 0x54
 80216e2:	4631      	mov	r1, r6
 80216e4:	2230      	movs	r2, #48	@ 0x30
 80216e6:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 80216ea:	f884 30a2 	strb.w	r3, [r4, #162]	@ 0xa2
 80216ee:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
 80216f2:	e9c4 6606 	strd	r6, r6, [r4, #24]
 80216f6:	6226      	str	r6, [r4, #32]
 80216f8:	f003 fb6f 	bl	8024dda <memset>
 80216fc:	f1a5 030a 	sub.w	r3, r5, #10
 8021700:	b29b      	uxth	r3, r3
 8021702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8021706:	2101      	movs	r1, #1
 8021708:	2b32      	cmp	r3, #50	@ 0x32
 802170a:	f884 106d 	strb.w	r1, [r4, #109]	@ 0x6d
 802170e:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8021710:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
 8021714:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8021718:	d889      	bhi.n	802162e <MotionFX_MagCal_init+0x1e>
 802171a:	e786      	b.n	802162a <MotionFX_MagCal_init+0x1a>
 802171c:	2000038c 	.word	0x2000038c
 8021720:	20000000 	.word	0x20000000
 8021724:	3dcccccd 	.word	0x3dcccccd
 8021728:	3c23d70a 	.word	0x3c23d70a
 802172c:	3dcccccd 	.word	0x3dcccccd

08021730 <MotionFX_MagCal_run>:
 8021730:	4940      	ldr	r1, [pc, #256]	@ (8021834 <MotionFX_MagCal_run+0x104>)
 8021732:	f891 33c4 	ldrb.w	r3, [r1, #964]	@ 0x3c4
 8021736:	2b00      	cmp	r3, #0
 8021738:	d07b      	beq.n	8021832 <MotionFX_MagCal_run+0x102>
 802173a:	ed90 7a00 	vldr	s14, [r0]
 802173e:	eddf 7a3e 	vldr	s15, [pc, #248]	@ 8021838 <MotionFX_MagCal_run+0x108>
 8021742:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021746:	ee67 7a27 	vmul.f32	s15, s14, s15
 802174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802174e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8021752:	bfb4      	ite	lt
 8021754:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8021758:	ee77 7a87 	vaddge.f32	s15, s15, s14
 802175c:	ed90 7a01 	vldr	s14, [r0, #4]
 8021760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021764:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021768:	ee17 ca90 	vmov	ip, s15
 802176c:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8021838 <MotionFX_MagCal_run+0x108>
 8021770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8021774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021778:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 802177c:	bfb4      	ite	lt
 802177e:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 8021782:	ee77 7a87 	vaddge.f32	s15, s15, s14
 8021786:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802178a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 802178e:	ed90 7a02 	vldr	s14, [r0, #8]
 8021792:	f891 3858 	ldrb.w	r3, [r1, #2136]	@ 0x858
 8021796:	68c0      	ldr	r0, [r0, #12]
 8021798:	ee17 2a90 	vmov	r2, s15
 802179c:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8021838 <MotionFX_MagCal_run+0x108>
 80217a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80217a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80217a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80217ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80217b0:	bfac      	ite	ge
 80217b2:	ee77 7a87 	vaddge.f32	s15, s15, s14
 80217b6:	ee77 7ac7 	vsublt.f32	s15, s15, s14
 80217ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80217be:	b38b      	cbz	r3, 8021824 <MotionFX_MagCal_run+0xf4>
 80217c0:	481e      	ldr	r0, [pc, #120]	@ (802183c <MotionFX_MagCal_run+0x10c>)
 80217c2:	6800      	ldr	r0, [r0, #0]
 80217c4:	eb01 04c3 	add.w	r4, r1, r3, lsl #3
 80217c8:	fb10 f003 	smulbb	r0, r0, r3
 80217cc:	f8a4 07e0 	strh.w	r0, [r4, #2016]	@ 0x7e0
 80217d0:	00d8      	lsls	r0, r3, #3
 80217d2:	f647 74fe 	movw	r4, #32766	@ 0x7ffe
 80217d6:	ee17 5a90 	vmov	r5, s15
 80217da:	4f19      	ldr	r7, [pc, #100]	@ (8021840 <MotionFX_MagCal_run+0x110>)
 80217dc:	45a4      	cmp	ip, r4
 80217de:	4666      	mov	r6, ip
 80217e0:	bfa8      	it	ge
 80217e2:	4626      	movge	r6, r4
 80217e4:	42a5      	cmp	r5, r4
 80217e6:	bfa8      	it	ge
 80217e8:	4625      	movge	r5, r4
 80217ea:	42be      	cmp	r6, r7
 80217ec:	bfb8      	it	lt
 80217ee:	463e      	movlt	r6, r7
 80217f0:	42ba      	cmp	r2, r7
 80217f2:	db02      	blt.n	80217fa <MotionFX_MagCal_run+0xca>
 80217f4:	4294      	cmp	r4, r2
 80217f6:	bfa8      	it	ge
 80217f8:	4614      	movge	r4, r2
 80217fa:	180a      	adds	r2, r1, r0
 80217fc:	4810      	ldr	r0, [pc, #64]	@ (8021840 <MotionFX_MagCal_run+0x110>)
 80217fe:	f8a2 67e2 	strh.w	r6, [r2, #2018]	@ 0x7e2
 8021802:	42a8      	cmp	r0, r5
 8021804:	bfb8      	it	lt
 8021806:	4628      	movlt	r0, r5
 8021808:	3301      	adds	r3, #1
 802180a:	f891 57de 	ldrb.w	r5, [r1, #2014]	@ 0x7de
 802180e:	f8a2 47e4 	strh.w	r4, [r2, #2020]	@ 0x7e4
 8021812:	b2db      	uxtb	r3, r3
 8021814:	42ab      	cmp	r3, r5
 8021816:	f881 3858 	strb.w	r3, [r1, #2136]	@ 0x858
 802181a:	f8a2 07e6 	strh.w	r0, [r2, #2022]	@ 0x7e6
 802181e:	d011      	beq.n	8021844 <MotionFX_MagCal_run+0x114>
 8021820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021824:	f8c1 07d8 	str.w	r0, [r1, #2008]	@ 0x7d8
 8021828:	2001      	movs	r0, #1
 802182a:	f881 07dc 	strb.w	r0, [r1, #2012]	@ 0x7dc
 802182e:	4618      	mov	r0, r3
 8021830:	e7cf      	b.n	80217d2 <MotionFX_MagCal_run+0xa2>
 8021832:	4770      	bx	lr
 8021834:	2000038c 	.word	0x2000038c
 8021838:	43fa0000 	.word	0x43fa0000
 802183c:	20000000 	.word	0x20000000
 8021840:	ffff8002 	.word	0xffff8002
 8021844:	f891 37dc 	ldrb.w	r3, [r1, #2012]	@ 0x7dc
 8021848:	f8d1 77d8 	ldr.w	r7, [r1, #2008]	@ 0x7d8
 802184c:	2200      	movs	r2, #0
 802184e:	f881 2858 	strb.w	r2, [r1, #2136]	@ 0x858
 8021852:	2b00      	cmp	r3, #0
 8021854:	f000 8169 	beq.w	8021b2a <MotionFX_MagCal_run+0x3fa>
 8021858:	2d00      	cmp	r5, #0
 802185a:	f000 8166 	beq.w	8021b2a <MotionFX_MagCal_run+0x3fa>
 802185e:	894e      	ldrh	r6, [r1, #10]
 8021860:	2e00      	cmp	r6, #0
 8021862:	f000 8162 	beq.w	8021b2a <MotionFX_MagCal_run+0x3fa>
 8021866:	890b      	ldrh	r3, [r1, #8]
 8021868:	690c      	ldr	r4, [r1, #16]
 802186a:	42b3      	cmp	r3, r6
 802186c:	bf28      	it	cs
 802186e:	4633      	movcs	r3, r6
 8021870:	3301      	adds	r3, #1
 8021872:	b29b      	uxth	r3, r3
 8021874:	42b3      	cmp	r3, r6
 8021876:	bf28      	it	cs
 8021878:	4633      	movcs	r3, r6
 802187a:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 802187e:	eb03 0208 	add.w	r2, r3, r8
 8021882:	f04f 0901 	mov.w	r9, #1
 8021886:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 802188a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 802188e:	f8d1 c7e2 	ldr.w	ip, [r1, #2018]	@ 0x7e2
 8021892:	f8c2 c002 	str.w	ip, [r2, #2]
 8021896:	f9b1 07e6 	ldrsh.w	r0, [r1, #2022]	@ 0x7e6
 802189a:	f8b1 e7e0 	ldrh.w	lr, [r1, #2016]	@ 0x7e0
 802189e:	80d0      	strh	r0, [r2, #6]
 80218a0:	454d      	cmp	r5, r9
 80218a2:	f000 813a 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 80218a6:	444b      	add	r3, r9
 80218a8:	b29b      	uxth	r3, r3
 80218aa:	42b3      	cmp	r3, r6
 80218ac:	bf28      	it	cs
 80218ae:	4633      	movcs	r3, r6
 80218b0:	eb03 0208 	add.w	r2, r3, r8
 80218b4:	2d02      	cmp	r5, #2
 80218b6:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80218ba:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80218be:	f8d1 c7ea 	ldr.w	ip, [r1, #2026]	@ 0x7ea
 80218c2:	f8c2 c002 	str.w	ip, [r2, #2]
 80218c6:	f9b1 07ee 	ldrsh.w	r0, [r1, #2030]	@ 0x7ee
 80218ca:	f8b1 e7e8 	ldrh.w	lr, [r1, #2024]	@ 0x7e8
 80218ce:	80d0      	strh	r0, [r2, #6]
 80218d0:	f000 8123 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 80218d4:	444b      	add	r3, r9
 80218d6:	b29b      	uxth	r3, r3
 80218d8:	42b3      	cmp	r3, r6
 80218da:	bf28      	it	cs
 80218dc:	4633      	movcs	r3, r6
 80218de:	eb03 0208 	add.w	r2, r3, r8
 80218e2:	2d03      	cmp	r5, #3
 80218e4:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80218e8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80218ec:	f8d1 c7f2 	ldr.w	ip, [r1, #2034]	@ 0x7f2
 80218f0:	f8c2 c002 	str.w	ip, [r2, #2]
 80218f4:	f9b1 07f6 	ldrsh.w	r0, [r1, #2038]	@ 0x7f6
 80218f8:	f8b1 e7f0 	ldrh.w	lr, [r1, #2032]	@ 0x7f0
 80218fc:	80d0      	strh	r0, [r2, #6]
 80218fe:	f000 810c 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021902:	444b      	add	r3, r9
 8021904:	b29b      	uxth	r3, r3
 8021906:	42b3      	cmp	r3, r6
 8021908:	bf28      	it	cs
 802190a:	4633      	movcs	r3, r6
 802190c:	eb03 0208 	add.w	r2, r3, r8
 8021910:	2d04      	cmp	r5, #4
 8021912:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021916:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 802191a:	f8d1 c7fa 	ldr.w	ip, [r1, #2042]	@ 0x7fa
 802191e:	f8c2 c002 	str.w	ip, [r2, #2]
 8021922:	f9b1 07fe 	ldrsh.w	r0, [r1, #2046]	@ 0x7fe
 8021926:	f8b1 e7f8 	ldrh.w	lr, [r1, #2040]	@ 0x7f8
 802192a:	80d0      	strh	r0, [r2, #6]
 802192c:	f000 80f5 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021930:	444b      	add	r3, r9
 8021932:	b29b      	uxth	r3, r3
 8021934:	42b3      	cmp	r3, r6
 8021936:	bf28      	it	cs
 8021938:	4633      	movcs	r3, r6
 802193a:	eb03 0208 	add.w	r2, r3, r8
 802193e:	2d05      	cmp	r5, #5
 8021940:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021944:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021948:	f8d1 c802 	ldr.w	ip, [r1, #2050]	@ 0x802
 802194c:	f8c2 c002 	str.w	ip, [r2, #2]
 8021950:	f9b1 0806 	ldrsh.w	r0, [r1, #2054]	@ 0x806
 8021954:	f8b1 e800 	ldrh.w	lr, [r1, #2048]	@ 0x800
 8021958:	80d0      	strh	r0, [r2, #6]
 802195a:	f000 80de 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 802195e:	444b      	add	r3, r9
 8021960:	b29b      	uxth	r3, r3
 8021962:	42b3      	cmp	r3, r6
 8021964:	bf28      	it	cs
 8021966:	4633      	movcs	r3, r6
 8021968:	4498      	add	r8, r3
 802196a:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 802196e:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 8021972:	f8d1 c80a 	ldr.w	ip, [r1, #2058]	@ 0x80a
 8021976:	f8c2 c002 	str.w	ip, [r2, #2]
 802197a:	f9b1 080e 	ldrsh.w	r0, [r1, #2062]	@ 0x80e
 802197e:	f8b1 e808 	ldrh.w	lr, [r1, #2056]	@ 0x808
 8021982:	80d0      	strh	r0, [r2, #6]
 8021984:	2d06      	cmp	r5, #6
 8021986:	f000 80c8 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 802198a:	444b      	add	r3, r9
 802198c:	b29b      	uxth	r3, r3
 802198e:	42b3      	cmp	r3, r6
 8021990:	bf28      	it	cs
 8021992:	4633      	movcs	r3, r6
 8021994:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
 8021998:	eb03 0208 	add.w	r2, r3, r8
 802199c:	2d07      	cmp	r5, #7
 802199e:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80219a2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80219a6:	f8d1 c812 	ldr.w	ip, [r1, #2066]	@ 0x812
 80219aa:	f8c2 c002 	str.w	ip, [r2, #2]
 80219ae:	f9b1 0816 	ldrsh.w	r0, [r1, #2070]	@ 0x816
 80219b2:	f8b1 e810 	ldrh.w	lr, [r1, #2064]	@ 0x810
 80219b6:	80d0      	strh	r0, [r2, #6]
 80219b8:	f000 80af 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 80219bc:	444b      	add	r3, r9
 80219be:	b29b      	uxth	r3, r3
 80219c0:	42b3      	cmp	r3, r6
 80219c2:	bf28      	it	cs
 80219c4:	4633      	movcs	r3, r6
 80219c6:	eb03 0208 	add.w	r2, r3, r8
 80219ca:	2d08      	cmp	r5, #8
 80219cc:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80219d0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80219d4:	f8d1 c81a 	ldr.w	ip, [r1, #2074]	@ 0x81a
 80219d8:	f8c2 c002 	str.w	ip, [r2, #2]
 80219dc:	f9b1 081e 	ldrsh.w	r0, [r1, #2078]	@ 0x81e
 80219e0:	f8b1 e818 	ldrh.w	lr, [r1, #2072]	@ 0x818
 80219e4:	80d0      	strh	r0, [r2, #6]
 80219e6:	f000 8098 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 80219ea:	444b      	add	r3, r9
 80219ec:	b29b      	uxth	r3, r3
 80219ee:	42b3      	cmp	r3, r6
 80219f0:	bf28      	it	cs
 80219f2:	4633      	movcs	r3, r6
 80219f4:	eb03 0208 	add.w	r2, r3, r8
 80219f8:	2d09      	cmp	r5, #9
 80219fa:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 80219fe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021a02:	f8d1 c822 	ldr.w	ip, [r1, #2082]	@ 0x822
 8021a06:	f8c2 c002 	str.w	ip, [r2, #2]
 8021a0a:	f9b1 0826 	ldrsh.w	r0, [r1, #2086]	@ 0x826
 8021a0e:	f8b1 e820 	ldrh.w	lr, [r1, #2080]	@ 0x820
 8021a12:	80d0      	strh	r0, [r2, #6]
 8021a14:	f000 8081 	beq.w	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021a18:	444b      	add	r3, r9
 8021a1a:	b29b      	uxth	r3, r3
 8021a1c:	42b3      	cmp	r3, r6
 8021a1e:	bf28      	it	cs
 8021a20:	4633      	movcs	r3, r6
 8021a22:	eb03 0208 	add.w	r2, r3, r8
 8021a26:	2d0a      	cmp	r5, #10
 8021a28:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021a2c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021a30:	f8d1 c82a 	ldr.w	ip, [r1, #2090]	@ 0x82a
 8021a34:	f8c2 c002 	str.w	ip, [r2, #2]
 8021a38:	f9b1 082e 	ldrsh.w	r0, [r1, #2094]	@ 0x82e
 8021a3c:	f8b1 e828 	ldrh.w	lr, [r1, #2088]	@ 0x828
 8021a40:	80d0      	strh	r0, [r2, #6]
 8021a42:	d06a      	beq.n	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021a44:	444b      	add	r3, r9
 8021a46:	b29b      	uxth	r3, r3
 8021a48:	42b3      	cmp	r3, r6
 8021a4a:	bf28      	it	cs
 8021a4c:	4633      	movcs	r3, r6
 8021a4e:	eb03 0208 	add.w	r2, r3, r8
 8021a52:	2d0b      	cmp	r5, #11
 8021a54:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021a58:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021a5c:	f8d1 c832 	ldr.w	ip, [r1, #2098]	@ 0x832
 8021a60:	f8c2 c002 	str.w	ip, [r2, #2]
 8021a64:	f9b1 0836 	ldrsh.w	r0, [r1, #2102]	@ 0x836
 8021a68:	f8b1 e830 	ldrh.w	lr, [r1, #2096]	@ 0x830
 8021a6c:	80d0      	strh	r0, [r2, #6]
 8021a6e:	d054      	beq.n	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021a70:	444b      	add	r3, r9
 8021a72:	b29b      	uxth	r3, r3
 8021a74:	42b3      	cmp	r3, r6
 8021a76:	bf28      	it	cs
 8021a78:	4633      	movcs	r3, r6
 8021a7a:	eb03 0208 	add.w	r2, r3, r8
 8021a7e:	2d0c      	cmp	r5, #12
 8021a80:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021a84:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021a88:	f8d1 c83a 	ldr.w	ip, [r1, #2106]	@ 0x83a
 8021a8c:	f8c2 c002 	str.w	ip, [r2, #2]
 8021a90:	f9b1 083e 	ldrsh.w	r0, [r1, #2110]	@ 0x83e
 8021a94:	f8b1 e838 	ldrh.w	lr, [r1, #2104]	@ 0x838
 8021a98:	80d0      	strh	r0, [r2, #6]
 8021a9a:	d03e      	beq.n	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021a9c:	444b      	add	r3, r9
 8021a9e:	b29b      	uxth	r3, r3
 8021aa0:	42b3      	cmp	r3, r6
 8021aa2:	bf28      	it	cs
 8021aa4:	4633      	movcs	r3, r6
 8021aa6:	eb03 0208 	add.w	r2, r3, r8
 8021aaa:	2d0d      	cmp	r5, #13
 8021aac:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021ab0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021ab4:	f8d1 c842 	ldr.w	ip, [r1, #2114]	@ 0x842
 8021ab8:	f8c2 c002 	str.w	ip, [r2, #2]
 8021abc:	f9b1 0846 	ldrsh.w	r0, [r1, #2118]	@ 0x846
 8021ac0:	f8b1 e840 	ldrh.w	lr, [r1, #2112]	@ 0x840
 8021ac4:	80d0      	strh	r0, [r2, #6]
 8021ac6:	d028      	beq.n	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021ac8:	444b      	add	r3, r9
 8021aca:	b29b      	uxth	r3, r3
 8021acc:	42b3      	cmp	r3, r6
 8021ace:	bf28      	it	cs
 8021ad0:	4633      	movcs	r3, r6
 8021ad2:	eb03 0208 	add.w	r2, r3, r8
 8021ad6:	2d0e      	cmp	r5, #14
 8021ad8:	f804 9032 	strb.w	r9, [r4, r2, lsl #3]
 8021adc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8021ae0:	f8d1 c84a 	ldr.w	ip, [r1, #2122]	@ 0x84a
 8021ae4:	f8c2 c002 	str.w	ip, [r2, #2]
 8021ae8:	f9b1 084e 	ldrsh.w	r0, [r1, #2126]	@ 0x84e
 8021aec:	f8b1 e848 	ldrh.w	lr, [r1, #2120]	@ 0x848
 8021af0:	80d0      	strh	r0, [r2, #6]
 8021af2:	d012      	beq.n	8021b1a <MotionFX_MagCal_run+0x3ea>
 8021af4:	444b      	add	r3, r9
 8021af6:	b29b      	uxth	r3, r3
 8021af8:	42b3      	cmp	r3, r6
 8021afa:	bf28      	it	cs
 8021afc:	4633      	movcs	r3, r6
 8021afe:	4498      	add	r8, r3
 8021b00:	eb04 02c8 	add.w	r2, r4, r8, lsl #3
 8021b04:	f804 9038 	strb.w	r9, [r4, r8, lsl #3]
 8021b08:	f8d1 c852 	ldr.w	ip, [r1, #2130]	@ 0x852
 8021b0c:	f8c2 c002 	str.w	ip, [r2, #2]
 8021b10:	f9b1 0856 	ldrsh.w	r0, [r1, #2134]	@ 0x856
 8021b14:	f8b1 e850 	ldrh.w	lr, [r1, #2128]	@ 0x850
 8021b18:	80d0      	strh	r0, [r2, #6]
 8021b1a:	810b      	strh	r3, [r1, #8]
 8021b1c:	4477      	add	r7, lr
 8021b1e:	2301      	movs	r3, #1
 8021b20:	f8c2 c002 	str.w	ip, [r2, #2]
 8021b24:	80d0      	strh	r0, [r2, #6]
 8021b26:	7013      	strb	r3, [r2, #0]
 8021b28:	60cf      	str	r7, [r1, #12]
 8021b2a:	f891 3048 	ldrb.w	r3, [r1, #72]	@ 0x48
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	f43f ae76 	beq.w	8021820 <MotionFX_MagCal_run+0xf0>
 8021b34:	890a      	ldrh	r2, [r1, #8]
 8021b36:	894b      	ldrh	r3, [r1, #10]
 8021b38:	4293      	cmp	r3, r2
 8021b3a:	d022      	beq.n	8021b82 <MotionFX_MagCal_run+0x452>
 8021b3c:	b32a      	cbz	r2, 8021b8a <MotionFX_MagCal_run+0x45a>
 8021b3e:	68cb      	ldr	r3, [r1, #12]
 8021b40:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8021b44:	3301      	adds	r3, #1
 8021b46:	4403      	add	r3, r0
 8021b48:	1c58      	adds	r0, r3, #1
 8021b4a:	d01e      	beq.n	8021b8a <MotionFX_MagCal_run+0x45a>
 8021b4c:	f503 541c 	add.w	r4, r3, #9984	@ 0x2700
 8021b50:	3410      	adds	r4, #16
 8021b52:	6cc8      	ldr	r0, [r1, #76]	@ 0x4c
 8021b54:	42a0      	cmp	r0, r4
 8021b56:	f8b1 4050 	ldrh.w	r4, [r1, #80]	@ 0x50
 8021b5a:	bf84      	itt	hi
 8021b5c:	64cb      	strhi	r3, [r1, #76]	@ 0x4c
 8021b5e:	4618      	movhi	r0, r3
 8021b60:	4420      	add	r0, r4
 8021b62:	4283      	cmp	r3, r0
 8021b64:	f4ff ae5c 	bcc.w	8021820 <MotionFX_MagCal_run+0xf0>
 8021b68:	b132      	cbz	r2, 8021b78 <MotionFX_MagCal_run+0x448>
 8021b6a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
 8021b6e:	68c9      	ldr	r1, [r1, #12]
 8021b70:	3a01      	subs	r2, #1
 8021b72:	fb00 1212 	mls	r2, r0, r2, r1
 8021b76:	b292      	uxth	r2, r2
 8021b78:	1a9b      	subs	r3, r3, r2
 8021b7a:	b21b      	sxth	r3, r3
 8021b7c:	42a3      	cmp	r3, r4
 8021b7e:	f6ff ae4f 	blt.w	8021820 <MotionFX_MagCal_run+0xf0>
 8021b82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021b86:	f7fd b897 	b.w	801ecb8 <MEMS_runMagCal.constprop.0>
 8021b8a:	f242 7410 	movw	r4, #10000	@ 0x2710
 8021b8e:	2300      	movs	r3, #0
 8021b90:	e7df      	b.n	8021b52 <MotionFX_MagCal_run+0x422>
 8021b92:	bf00      	nop

08021b94 <MotionFX_MagCal_getParams>:
 8021b94:	4b20      	ldr	r3, [pc, #128]	@ (8021c18 <MotionFX_MagCal_getParams+0x84>)
 8021b96:	f893 23c4 	ldrb.w	r2, [r3, #964]	@ 0x3c4
 8021b9a:	b902      	cbnz	r2, 8021b9e <MotionFX_MagCal_getParams+0xa>
 8021b9c:	4770      	bx	lr
 8021b9e:	b530      	push	{r4, r5, lr}
 8021ba0:	f103 0e6c 	add.w	lr, r3, #108	@ 0x6c
 8021ba4:	4604      	mov	r4, r0
 8021ba6:	f893 506c 	ldrb.w	r5, [r3, #108]	@ 0x6c
 8021baa:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 8021c1c <MotionFX_MagCal_getParams+0x88>
 8021bae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021bb2:	b08f      	sub	sp, #60	@ 0x3c
 8021bb4:	f10d 0c04 	add.w	ip, sp, #4
 8021bb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021bbc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021bc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021bc4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8021bc8:	eddd 6a02 	vldr	s13, [sp, #8]
 8021bcc:	ed9d 7a03 	vldr	s14, [sp, #12]
 8021bd0:	eddd 7a04 	vldr	s15, [sp, #16]
 8021bd4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8021bd8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8021bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021be0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8021be4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8021be8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8021bf0:	f8de 3000 	ldr.w	r3, [lr]
 8021bf4:	7325      	strb	r5, [r4, #12]
 8021bf6:	ee66 6a86 	vmul.f32	s13, s13, s12
 8021bfa:	ee27 7a06 	vmul.f32	s14, s14, s12
 8021bfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8021c02:	edc4 6a00 	vstr	s13, [r4]
 8021c06:	f8cc 3000 	str.w	r3, [ip]
 8021c0a:	ed84 7a01 	vstr	s14, [r4, #4]
 8021c0e:	edc4 7a02 	vstr	s15, [r4, #8]
 8021c12:	b00f      	add	sp, #60	@ 0x3c
 8021c14:	bd30      	pop	{r4, r5, pc}
 8021c16:	bf00      	nop
 8021c18:	2000038c 	.word	0x2000038c
 8021c1c:	3b03126f 	.word	0x3b03126f

08021c20 <_ZdlPv>:
 8021c20:	f002 ba7a 	b.w	8024118 <free>

08021c24 <_ZdlPvj>:
 8021c24:	f7ff bffc 	b.w	8021c20 <_ZdlPv>

08021c28 <_Znwj>:
 8021c28:	2801      	cmp	r0, #1
 8021c2a:	bf38      	it	cc
 8021c2c:	2001      	movcc	r0, #1
 8021c2e:	b510      	push	{r4, lr}
 8021c30:	4604      	mov	r4, r0
 8021c32:	4620      	mov	r0, r4
 8021c34:	f002 fa68 	bl	8024108 <malloc>
 8021c38:	b100      	cbz	r0, 8021c3c <_Znwj+0x14>
 8021c3a:	bd10      	pop	{r4, pc}
 8021c3c:	f000 f812 	bl	8021c64 <_ZSt15get_new_handlerv>
 8021c40:	b908      	cbnz	r0, 8021c46 <_Znwj+0x1e>
 8021c42:	f002 fa59 	bl	80240f8 <abort>
 8021c46:	4780      	blx	r0
 8021c48:	e7f3      	b.n	8021c32 <_Znwj+0xa>

08021c4a <_ZSt17__throw_bad_allocv>:
 8021c4a:	b508      	push	{r3, lr}
 8021c4c:	f002 fa54 	bl	80240f8 <abort>

08021c50 <_ZSt28__throw_bad_array_new_lengthv>:
 8021c50:	b508      	push	{r3, lr}
 8021c52:	f002 fa51 	bl	80240f8 <abort>

08021c56 <_ZSt20__throw_length_errorPKc>:
 8021c56:	b508      	push	{r3, lr}
 8021c58:	f002 fa4e 	bl	80240f8 <abort>

08021c5c <_ZSt24__throw_out_of_range_fmtPKcz>:
 8021c5c:	b40f      	push	{r0, r1, r2, r3}
 8021c5e:	b508      	push	{r3, lr}
 8021c60:	f002 fa4a 	bl	80240f8 <abort>

08021c64 <_ZSt15get_new_handlerv>:
 8021c64:	4b02      	ldr	r3, [pc, #8]	@ (8021c70 <_ZSt15get_new_handlerv+0xc>)
 8021c66:	6818      	ldr	r0, [r3, #0]
 8021c68:	f3bf 8f5b 	dmb	ish
 8021c6c:	4770      	bx	lr
 8021c6e:	bf00      	nop
 8021c70:	20019778 	.word	0x20019778

08021c74 <atan2>:
 8021c74:	f000 bbc4 	b.w	8022400 <__ieee754_atan2>

08021c78 <sqrt>:
 8021c78:	b538      	push	{r3, r4, r5, lr}
 8021c7a:	ed2d 8b02 	vpush	{d8}
 8021c7e:	ec55 4b10 	vmov	r4, r5, d0
 8021c82:	f000 f9c3 	bl	802200c <__ieee754_sqrt>
 8021c86:	4622      	mov	r2, r4
 8021c88:	462b      	mov	r3, r5
 8021c8a:	4620      	mov	r0, r4
 8021c8c:	4629      	mov	r1, r5
 8021c8e:	eeb0 8a40 	vmov.f32	s16, s0
 8021c92:	eef0 8a60 	vmov.f32	s17, s1
 8021c96:	f7de ff71 	bl	8000b7c <__aeabi_dcmpun>
 8021c9a:	b990      	cbnz	r0, 8021cc2 <sqrt+0x4a>
 8021c9c:	2200      	movs	r2, #0
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	4620      	mov	r0, r4
 8021ca2:	4629      	mov	r1, r5
 8021ca4:	f7de ff42 	bl	8000b2c <__aeabi_dcmplt>
 8021ca8:	b158      	cbz	r0, 8021cc2 <sqrt+0x4a>
 8021caa:	f003 f993 	bl	8024fd4 <__errno>
 8021cae:	2321      	movs	r3, #33	@ 0x21
 8021cb0:	6003      	str	r3, [r0, #0]
 8021cb2:	2200      	movs	r2, #0
 8021cb4:	2300      	movs	r3, #0
 8021cb6:	4610      	mov	r0, r2
 8021cb8:	4619      	mov	r1, r3
 8021cba:	f7de fdef 	bl	800089c <__aeabi_ddiv>
 8021cbe:	ec41 0b18 	vmov	d8, r0, r1
 8021cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8021cc6:	eef0 0a68 	vmov.f32	s1, s17
 8021cca:	ecbd 8b02 	vpop	{d8}
 8021cce:	bd38      	pop	{r3, r4, r5, pc}

08021cd0 <acosf>:
 8021cd0:	b508      	push	{r3, lr}
 8021cd2:	ed2d 8b02 	vpush	{d8}
 8021cd6:	eeb0 8a40 	vmov.f32	s16, s0
 8021cda:	f000 ff79 	bl	8022bd0 <__ieee754_acosf>
 8021cde:	eeb4 8a48 	vcmp.f32	s16, s16
 8021ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ce6:	eef0 8a40 	vmov.f32	s17, s0
 8021cea:	d615      	bvs.n	8021d18 <acosf+0x48>
 8021cec:	eeb0 0a48 	vmov.f32	s0, s16
 8021cf0:	f000 f902 	bl	8021ef8 <fabsf>
 8021cf4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8021cf8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d00:	dd0a      	ble.n	8021d18 <acosf+0x48>
 8021d02:	f003 f967 	bl	8024fd4 <__errno>
 8021d06:	ecbd 8b02 	vpop	{d8}
 8021d0a:	2321      	movs	r3, #33	@ 0x21
 8021d0c:	6003      	str	r3, [r0, #0]
 8021d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021d12:	4804      	ldr	r0, [pc, #16]	@ (8021d24 <acosf+0x54>)
 8021d14:	f000 b974 	b.w	8022000 <nanf>
 8021d18:	eeb0 0a68 	vmov.f32	s0, s17
 8021d1c:	ecbd 8b02 	vpop	{d8}
 8021d20:	bd08      	pop	{r3, pc}
 8021d22:	bf00      	nop
 8021d24:	08028216 	.word	0x08028216

08021d28 <asinf>:
 8021d28:	b508      	push	{r3, lr}
 8021d2a:	ed2d 8b02 	vpush	{d8}
 8021d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8021d32:	f001 f845 	bl	8022dc0 <__ieee754_asinf>
 8021d36:	eeb4 8a48 	vcmp.f32	s16, s16
 8021d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d3e:	eef0 8a40 	vmov.f32	s17, s0
 8021d42:	d615      	bvs.n	8021d70 <asinf+0x48>
 8021d44:	eeb0 0a48 	vmov.f32	s0, s16
 8021d48:	f000 f8d6 	bl	8021ef8 <fabsf>
 8021d4c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8021d50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d58:	dd0a      	ble.n	8021d70 <asinf+0x48>
 8021d5a:	f003 f93b 	bl	8024fd4 <__errno>
 8021d5e:	ecbd 8b02 	vpop	{d8}
 8021d62:	2321      	movs	r3, #33	@ 0x21
 8021d64:	6003      	str	r3, [r0, #0]
 8021d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021d6a:	4804      	ldr	r0, [pc, #16]	@ (8021d7c <asinf+0x54>)
 8021d6c:	f000 b948 	b.w	8022000 <nanf>
 8021d70:	eeb0 0a68 	vmov.f32	s0, s17
 8021d74:	ecbd 8b02 	vpop	{d8}
 8021d78:	bd08      	pop	{r3, pc}
 8021d7a:	bf00      	nop
 8021d7c:	08028216 	.word	0x08028216

08021d80 <atan2f>:
 8021d80:	f001 b904 	b.w	8022f8c <__ieee754_atan2f>

08021d84 <powf>:
 8021d84:	b508      	push	{r3, lr}
 8021d86:	ed2d 8b04 	vpush	{d8-d9}
 8021d8a:	eeb0 8a60 	vmov.f32	s16, s1
 8021d8e:	eeb0 9a40 	vmov.f32	s18, s0
 8021d92:	f001 f99b 	bl	80230cc <__ieee754_powf>
 8021d96:	eeb4 8a48 	vcmp.f32	s16, s16
 8021d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021d9e:	eef0 8a40 	vmov.f32	s17, s0
 8021da2:	d63e      	bvs.n	8021e22 <powf+0x9e>
 8021da4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8021da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dac:	d112      	bne.n	8021dd4 <powf+0x50>
 8021dae:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8021db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021db6:	d039      	beq.n	8021e2c <powf+0xa8>
 8021db8:	eeb0 0a48 	vmov.f32	s0, s16
 8021dbc:	f000 f916 	bl	8021fec <finitef>
 8021dc0:	b378      	cbz	r0, 8021e22 <powf+0x9e>
 8021dc2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8021dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dca:	d52a      	bpl.n	8021e22 <powf+0x9e>
 8021dcc:	f003 f902 	bl	8024fd4 <__errno>
 8021dd0:	2322      	movs	r3, #34	@ 0x22
 8021dd2:	e014      	b.n	8021dfe <powf+0x7a>
 8021dd4:	f000 f90a 	bl	8021fec <finitef>
 8021dd8:	b998      	cbnz	r0, 8021e02 <powf+0x7e>
 8021dda:	eeb0 0a49 	vmov.f32	s0, s18
 8021dde:	f000 f905 	bl	8021fec <finitef>
 8021de2:	b170      	cbz	r0, 8021e02 <powf+0x7e>
 8021de4:	eeb0 0a48 	vmov.f32	s0, s16
 8021de8:	f000 f900 	bl	8021fec <finitef>
 8021dec:	b148      	cbz	r0, 8021e02 <powf+0x7e>
 8021dee:	eef4 8a68 	vcmp.f32	s17, s17
 8021df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021df6:	d7e9      	bvc.n	8021dcc <powf+0x48>
 8021df8:	f003 f8ec 	bl	8024fd4 <__errno>
 8021dfc:	2321      	movs	r3, #33	@ 0x21
 8021dfe:	6003      	str	r3, [r0, #0]
 8021e00:	e00f      	b.n	8021e22 <powf+0x9e>
 8021e02:	eef5 8a40 	vcmp.f32	s17, #0.0
 8021e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e0a:	d10a      	bne.n	8021e22 <powf+0x9e>
 8021e0c:	eeb0 0a49 	vmov.f32	s0, s18
 8021e10:	f000 f8ec 	bl	8021fec <finitef>
 8021e14:	b128      	cbz	r0, 8021e22 <powf+0x9e>
 8021e16:	eeb0 0a48 	vmov.f32	s0, s16
 8021e1a:	f000 f8e7 	bl	8021fec <finitef>
 8021e1e:	2800      	cmp	r0, #0
 8021e20:	d1d4      	bne.n	8021dcc <powf+0x48>
 8021e22:	eeb0 0a68 	vmov.f32	s0, s17
 8021e26:	ecbd 8b04 	vpop	{d8-d9}
 8021e2a:	bd08      	pop	{r3, pc}
 8021e2c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8021e30:	e7f7      	b.n	8021e22 <powf+0x9e>
	...

08021e34 <sqrtf>:
 8021e34:	b508      	push	{r3, lr}
 8021e36:	ed2d 8b02 	vpush	{d8}
 8021e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8021e3e:	f000 f9bf 	bl	80221c0 <__ieee754_sqrtf>
 8021e42:	eeb4 8a48 	vcmp.f32	s16, s16
 8021e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e4a:	d60c      	bvs.n	8021e66 <sqrtf+0x32>
 8021e4c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8021e6c <sqrtf+0x38>
 8021e50:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e58:	d505      	bpl.n	8021e66 <sqrtf+0x32>
 8021e5a:	f003 f8bb 	bl	8024fd4 <__errno>
 8021e5e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8021e62:	2321      	movs	r3, #33	@ 0x21
 8021e64:	6003      	str	r3, [r0, #0]
 8021e66:	ecbd 8b02 	vpop	{d8}
 8021e6a:	bd08      	pop	{r3, pc}
 8021e6c:	00000000 	.word	0x00000000

08021e70 <cosf>:
 8021e70:	ee10 3a10 	vmov	r3, s0
 8021e74:	b507      	push	{r0, r1, r2, lr}
 8021e76:	4a1e      	ldr	r2, [pc, #120]	@ (8021ef0 <cosf+0x80>)
 8021e78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021e7c:	4293      	cmp	r3, r2
 8021e7e:	d806      	bhi.n	8021e8e <cosf+0x1e>
 8021e80:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8021ef4 <cosf+0x84>
 8021e84:	b003      	add	sp, #12
 8021e86:	f85d eb04 	ldr.w	lr, [sp], #4
 8021e8a:	f000 bd21 	b.w	80228d0 <__kernel_cosf>
 8021e8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021e92:	d304      	bcc.n	8021e9e <cosf+0x2e>
 8021e94:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021e98:	b003      	add	sp, #12
 8021e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8021e9e:	4668      	mov	r0, sp
 8021ea0:	f001 fbe4 	bl	802366c <__ieee754_rem_pio2f>
 8021ea4:	f000 0003 	and.w	r0, r0, #3
 8021ea8:	2801      	cmp	r0, #1
 8021eaa:	d009      	beq.n	8021ec0 <cosf+0x50>
 8021eac:	2802      	cmp	r0, #2
 8021eae:	d010      	beq.n	8021ed2 <cosf+0x62>
 8021eb0:	b9b0      	cbnz	r0, 8021ee0 <cosf+0x70>
 8021eb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8021eb6:	ed9d 0a00 	vldr	s0, [sp]
 8021eba:	f000 fd09 	bl	80228d0 <__kernel_cosf>
 8021ebe:	e7eb      	b.n	8021e98 <cosf+0x28>
 8021ec0:	eddd 0a01 	vldr	s1, [sp, #4]
 8021ec4:	ed9d 0a00 	vldr	s0, [sp]
 8021ec8:	f000 fd5a 	bl	8022980 <__kernel_sinf>
 8021ecc:	eeb1 0a40 	vneg.f32	s0, s0
 8021ed0:	e7e2      	b.n	8021e98 <cosf+0x28>
 8021ed2:	eddd 0a01 	vldr	s1, [sp, #4]
 8021ed6:	ed9d 0a00 	vldr	s0, [sp]
 8021eda:	f000 fcf9 	bl	80228d0 <__kernel_cosf>
 8021ede:	e7f5      	b.n	8021ecc <cosf+0x5c>
 8021ee0:	eddd 0a01 	vldr	s1, [sp, #4]
 8021ee4:	ed9d 0a00 	vldr	s0, [sp]
 8021ee8:	2001      	movs	r0, #1
 8021eea:	f000 fd49 	bl	8022980 <__kernel_sinf>
 8021eee:	e7d3      	b.n	8021e98 <cosf+0x28>
 8021ef0:	3f490fd8 	.word	0x3f490fd8
 8021ef4:	00000000 	.word	0x00000000

08021ef8 <fabsf>:
 8021ef8:	ee10 3a10 	vmov	r3, s0
 8021efc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021f00:	ee00 3a10 	vmov	s0, r3
 8021f04:	4770      	bx	lr
	...

08021f08 <sinf>:
 8021f08:	ee10 3a10 	vmov	r3, s0
 8021f0c:	b507      	push	{r0, r1, r2, lr}
 8021f0e:	4a1f      	ldr	r2, [pc, #124]	@ (8021f8c <sinf+0x84>)
 8021f10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021f14:	4293      	cmp	r3, r2
 8021f16:	d807      	bhi.n	8021f28 <sinf+0x20>
 8021f18:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8021f90 <sinf+0x88>
 8021f1c:	2000      	movs	r0, #0
 8021f1e:	b003      	add	sp, #12
 8021f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8021f24:	f000 bd2c 	b.w	8022980 <__kernel_sinf>
 8021f28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021f2c:	d304      	bcc.n	8021f38 <sinf+0x30>
 8021f2e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021f32:	b003      	add	sp, #12
 8021f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8021f38:	4668      	mov	r0, sp
 8021f3a:	f001 fb97 	bl	802366c <__ieee754_rem_pio2f>
 8021f3e:	f000 0003 	and.w	r0, r0, #3
 8021f42:	2801      	cmp	r0, #1
 8021f44:	d00a      	beq.n	8021f5c <sinf+0x54>
 8021f46:	2802      	cmp	r0, #2
 8021f48:	d00f      	beq.n	8021f6a <sinf+0x62>
 8021f4a:	b9c0      	cbnz	r0, 8021f7e <sinf+0x76>
 8021f4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8021f50:	ed9d 0a00 	vldr	s0, [sp]
 8021f54:	2001      	movs	r0, #1
 8021f56:	f000 fd13 	bl	8022980 <__kernel_sinf>
 8021f5a:	e7ea      	b.n	8021f32 <sinf+0x2a>
 8021f5c:	eddd 0a01 	vldr	s1, [sp, #4]
 8021f60:	ed9d 0a00 	vldr	s0, [sp]
 8021f64:	f000 fcb4 	bl	80228d0 <__kernel_cosf>
 8021f68:	e7e3      	b.n	8021f32 <sinf+0x2a>
 8021f6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8021f6e:	ed9d 0a00 	vldr	s0, [sp]
 8021f72:	2001      	movs	r0, #1
 8021f74:	f000 fd04 	bl	8022980 <__kernel_sinf>
 8021f78:	eeb1 0a40 	vneg.f32	s0, s0
 8021f7c:	e7d9      	b.n	8021f32 <sinf+0x2a>
 8021f7e:	eddd 0a01 	vldr	s1, [sp, #4]
 8021f82:	ed9d 0a00 	vldr	s0, [sp]
 8021f86:	f000 fca3 	bl	80228d0 <__kernel_cosf>
 8021f8a:	e7f5      	b.n	8021f78 <sinf+0x70>
 8021f8c:	3f490fd8 	.word	0x3f490fd8
 8021f90:	00000000 	.word	0x00000000

08021f94 <tanf>:
 8021f94:	ee10 3a10 	vmov	r3, s0
 8021f98:	b507      	push	{r0, r1, r2, lr}
 8021f9a:	4a12      	ldr	r2, [pc, #72]	@ (8021fe4 <tanf+0x50>)
 8021f9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021fa0:	4293      	cmp	r3, r2
 8021fa2:	d807      	bhi.n	8021fb4 <tanf+0x20>
 8021fa4:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8021fe8 <tanf+0x54>
 8021fa8:	2001      	movs	r0, #1
 8021faa:	b003      	add	sp, #12
 8021fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8021fb0:	f000 bd2e 	b.w	8022a10 <__kernel_tanf>
 8021fb4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021fb8:	d304      	bcc.n	8021fc4 <tanf+0x30>
 8021fba:	ee30 0a40 	vsub.f32	s0, s0, s0
 8021fbe:	b003      	add	sp, #12
 8021fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8021fc4:	4668      	mov	r0, sp
 8021fc6:	f001 fb51 	bl	802366c <__ieee754_rem_pio2f>
 8021fca:	0040      	lsls	r0, r0, #1
 8021fcc:	f000 0002 	and.w	r0, r0, #2
 8021fd0:	eddd 0a01 	vldr	s1, [sp, #4]
 8021fd4:	ed9d 0a00 	vldr	s0, [sp]
 8021fd8:	f1c0 0001 	rsb	r0, r0, #1
 8021fdc:	f000 fd18 	bl	8022a10 <__kernel_tanf>
 8021fe0:	e7ed      	b.n	8021fbe <tanf+0x2a>
 8021fe2:	bf00      	nop
 8021fe4:	3f490fda 	.word	0x3f490fda
 8021fe8:	00000000 	.word	0x00000000

08021fec <finitef>:
 8021fec:	ee10 3a10 	vmov	r3, s0
 8021ff0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8021ff4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8021ff8:	bfac      	ite	ge
 8021ffa:	2000      	movge	r0, #0
 8021ffc:	2001      	movlt	r0, #1
 8021ffe:	4770      	bx	lr

08022000 <nanf>:
 8022000:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8022008 <nanf+0x8>
 8022004:	4770      	bx	lr
 8022006:	bf00      	nop
 8022008:	7fc00000 	.word	0x7fc00000

0802200c <__ieee754_sqrt>:
 802200c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022010:	4a68      	ldr	r2, [pc, #416]	@ (80221b4 <__ieee754_sqrt+0x1a8>)
 8022012:	ec55 4b10 	vmov	r4, r5, d0
 8022016:	43aa      	bics	r2, r5
 8022018:	462b      	mov	r3, r5
 802201a:	4621      	mov	r1, r4
 802201c:	d110      	bne.n	8022040 <__ieee754_sqrt+0x34>
 802201e:	4622      	mov	r2, r4
 8022020:	4620      	mov	r0, r4
 8022022:	4629      	mov	r1, r5
 8022024:	f7de fb10 	bl	8000648 <__aeabi_dmul>
 8022028:	4602      	mov	r2, r0
 802202a:	460b      	mov	r3, r1
 802202c:	4620      	mov	r0, r4
 802202e:	4629      	mov	r1, r5
 8022030:	f7de f954 	bl	80002dc <__adddf3>
 8022034:	4604      	mov	r4, r0
 8022036:	460d      	mov	r5, r1
 8022038:	ec45 4b10 	vmov	d0, r4, r5
 802203c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022040:	2d00      	cmp	r5, #0
 8022042:	dc0e      	bgt.n	8022062 <__ieee754_sqrt+0x56>
 8022044:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8022048:	4322      	orrs	r2, r4
 802204a:	d0f5      	beq.n	8022038 <__ieee754_sqrt+0x2c>
 802204c:	b19d      	cbz	r5, 8022076 <__ieee754_sqrt+0x6a>
 802204e:	4622      	mov	r2, r4
 8022050:	4620      	mov	r0, r4
 8022052:	4629      	mov	r1, r5
 8022054:	f7de f940 	bl	80002d8 <__aeabi_dsub>
 8022058:	4602      	mov	r2, r0
 802205a:	460b      	mov	r3, r1
 802205c:	f7de fc1e 	bl	800089c <__aeabi_ddiv>
 8022060:	e7e8      	b.n	8022034 <__ieee754_sqrt+0x28>
 8022062:	152a      	asrs	r2, r5, #20
 8022064:	d115      	bne.n	8022092 <__ieee754_sqrt+0x86>
 8022066:	2000      	movs	r0, #0
 8022068:	e009      	b.n	802207e <__ieee754_sqrt+0x72>
 802206a:	0acb      	lsrs	r3, r1, #11
 802206c:	3a15      	subs	r2, #21
 802206e:	0549      	lsls	r1, r1, #21
 8022070:	2b00      	cmp	r3, #0
 8022072:	d0fa      	beq.n	802206a <__ieee754_sqrt+0x5e>
 8022074:	e7f7      	b.n	8022066 <__ieee754_sqrt+0x5a>
 8022076:	462a      	mov	r2, r5
 8022078:	e7fa      	b.n	8022070 <__ieee754_sqrt+0x64>
 802207a:	005b      	lsls	r3, r3, #1
 802207c:	3001      	adds	r0, #1
 802207e:	02dc      	lsls	r4, r3, #11
 8022080:	d5fb      	bpl.n	802207a <__ieee754_sqrt+0x6e>
 8022082:	1e44      	subs	r4, r0, #1
 8022084:	1b12      	subs	r2, r2, r4
 8022086:	f1c0 0420 	rsb	r4, r0, #32
 802208a:	fa21 f404 	lsr.w	r4, r1, r4
 802208e:	4323      	orrs	r3, r4
 8022090:	4081      	lsls	r1, r0
 8022092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8022096:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 802209a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 802209e:	07d2      	lsls	r2, r2, #31
 80220a0:	bf5c      	itt	pl
 80220a2:	005b      	lslpl	r3, r3, #1
 80220a4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80220a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80220ac:	bf58      	it	pl
 80220ae:	0049      	lslpl	r1, r1, #1
 80220b0:	2600      	movs	r6, #0
 80220b2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80220b6:	106d      	asrs	r5, r5, #1
 80220b8:	0049      	lsls	r1, r1, #1
 80220ba:	2016      	movs	r0, #22
 80220bc:	4632      	mov	r2, r6
 80220be:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80220c2:	1917      	adds	r7, r2, r4
 80220c4:	429f      	cmp	r7, r3
 80220c6:	bfde      	ittt	le
 80220c8:	193a      	addle	r2, r7, r4
 80220ca:	1bdb      	suble	r3, r3, r7
 80220cc:	1936      	addle	r6, r6, r4
 80220ce:	0fcf      	lsrs	r7, r1, #31
 80220d0:	3801      	subs	r0, #1
 80220d2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80220d6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80220da:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80220de:	d1f0      	bne.n	80220c2 <__ieee754_sqrt+0xb6>
 80220e0:	4604      	mov	r4, r0
 80220e2:	2720      	movs	r7, #32
 80220e4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80220e8:	429a      	cmp	r2, r3
 80220ea:	eb00 0e0c 	add.w	lr, r0, ip
 80220ee:	db02      	blt.n	80220f6 <__ieee754_sqrt+0xea>
 80220f0:	d113      	bne.n	802211a <__ieee754_sqrt+0x10e>
 80220f2:	458e      	cmp	lr, r1
 80220f4:	d811      	bhi.n	802211a <__ieee754_sqrt+0x10e>
 80220f6:	f1be 0f00 	cmp.w	lr, #0
 80220fa:	eb0e 000c 	add.w	r0, lr, ip
 80220fe:	da42      	bge.n	8022186 <__ieee754_sqrt+0x17a>
 8022100:	2800      	cmp	r0, #0
 8022102:	db40      	blt.n	8022186 <__ieee754_sqrt+0x17a>
 8022104:	f102 0801 	add.w	r8, r2, #1
 8022108:	1a9b      	subs	r3, r3, r2
 802210a:	458e      	cmp	lr, r1
 802210c:	bf88      	it	hi
 802210e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8022112:	eba1 010e 	sub.w	r1, r1, lr
 8022116:	4464      	add	r4, ip
 8022118:	4642      	mov	r2, r8
 802211a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 802211e:	3f01      	subs	r7, #1
 8022120:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8022124:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8022128:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 802212c:	d1dc      	bne.n	80220e8 <__ieee754_sqrt+0xdc>
 802212e:	4319      	orrs	r1, r3
 8022130:	d01b      	beq.n	802216a <__ieee754_sqrt+0x15e>
 8022132:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80221b8 <__ieee754_sqrt+0x1ac>
 8022136:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80221bc <__ieee754_sqrt+0x1b0>
 802213a:	e9da 0100 	ldrd	r0, r1, [sl]
 802213e:	e9db 2300 	ldrd	r2, r3, [fp]
 8022142:	f7de f8c9 	bl	80002d8 <__aeabi_dsub>
 8022146:	e9da 8900 	ldrd	r8, r9, [sl]
 802214a:	4602      	mov	r2, r0
 802214c:	460b      	mov	r3, r1
 802214e:	4640      	mov	r0, r8
 8022150:	4649      	mov	r1, r9
 8022152:	f7de fcf5 	bl	8000b40 <__aeabi_dcmple>
 8022156:	b140      	cbz	r0, 802216a <__ieee754_sqrt+0x15e>
 8022158:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 802215c:	e9da 0100 	ldrd	r0, r1, [sl]
 8022160:	e9db 2300 	ldrd	r2, r3, [fp]
 8022164:	d111      	bne.n	802218a <__ieee754_sqrt+0x17e>
 8022166:	3601      	adds	r6, #1
 8022168:	463c      	mov	r4, r7
 802216a:	1072      	asrs	r2, r6, #1
 802216c:	0863      	lsrs	r3, r4, #1
 802216e:	07f1      	lsls	r1, r6, #31
 8022170:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8022174:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8022178:	bf48      	it	mi
 802217a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 802217e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8022182:	4618      	mov	r0, r3
 8022184:	e756      	b.n	8022034 <__ieee754_sqrt+0x28>
 8022186:	4690      	mov	r8, r2
 8022188:	e7be      	b.n	8022108 <__ieee754_sqrt+0xfc>
 802218a:	f7de f8a7 	bl	80002dc <__adddf3>
 802218e:	e9da 8900 	ldrd	r8, r9, [sl]
 8022192:	4602      	mov	r2, r0
 8022194:	460b      	mov	r3, r1
 8022196:	4640      	mov	r0, r8
 8022198:	4649      	mov	r1, r9
 802219a:	f7de fcc7 	bl	8000b2c <__aeabi_dcmplt>
 802219e:	b120      	cbz	r0, 80221aa <__ieee754_sqrt+0x19e>
 80221a0:	1ca0      	adds	r0, r4, #2
 80221a2:	bf08      	it	eq
 80221a4:	3601      	addeq	r6, #1
 80221a6:	3402      	adds	r4, #2
 80221a8:	e7df      	b.n	802216a <__ieee754_sqrt+0x15e>
 80221aa:	1c63      	adds	r3, r4, #1
 80221ac:	f023 0401 	bic.w	r4, r3, #1
 80221b0:	e7db      	b.n	802216a <__ieee754_sqrt+0x15e>
 80221b2:	bf00      	nop
 80221b4:	7ff00000 	.word	0x7ff00000
 80221b8:	200001a0 	.word	0x200001a0
 80221bc:	20000198 	.word	0x20000198

080221c0 <__ieee754_sqrtf>:
 80221c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80221c4:	4770      	bx	lr
	...

080221c8 <ceil>:
 80221c8:	ec51 0b10 	vmov	r0, r1, d0
 80221cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80221d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221d4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80221d8:	2e13      	cmp	r6, #19
 80221da:	460c      	mov	r4, r1
 80221dc:	4605      	mov	r5, r0
 80221de:	4680      	mov	r8, r0
 80221e0:	dc2e      	bgt.n	8022240 <ceil+0x78>
 80221e2:	2e00      	cmp	r6, #0
 80221e4:	da11      	bge.n	802220a <ceil+0x42>
 80221e6:	a332      	add	r3, pc, #200	@ (adr r3, 80222b0 <ceil+0xe8>)
 80221e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80221ec:	f7de f876 	bl	80002dc <__adddf3>
 80221f0:	2200      	movs	r2, #0
 80221f2:	2300      	movs	r3, #0
 80221f4:	f7de fcb8 	bl	8000b68 <__aeabi_dcmpgt>
 80221f8:	b120      	cbz	r0, 8022204 <ceil+0x3c>
 80221fa:	2c00      	cmp	r4, #0
 80221fc:	db4f      	blt.n	802229e <ceil+0xd6>
 80221fe:	4325      	orrs	r5, r4
 8022200:	d151      	bne.n	80222a6 <ceil+0xde>
 8022202:	462c      	mov	r4, r5
 8022204:	4621      	mov	r1, r4
 8022206:	4628      	mov	r0, r5
 8022208:	e023      	b.n	8022252 <ceil+0x8a>
 802220a:	4f2b      	ldr	r7, [pc, #172]	@ (80222b8 <ceil+0xf0>)
 802220c:	4137      	asrs	r7, r6
 802220e:	ea01 0307 	and.w	r3, r1, r7
 8022212:	4303      	orrs	r3, r0
 8022214:	d01d      	beq.n	8022252 <ceil+0x8a>
 8022216:	a326      	add	r3, pc, #152	@ (adr r3, 80222b0 <ceil+0xe8>)
 8022218:	e9d3 2300 	ldrd	r2, r3, [r3]
 802221c:	f7de f85e 	bl	80002dc <__adddf3>
 8022220:	2200      	movs	r2, #0
 8022222:	2300      	movs	r3, #0
 8022224:	f7de fca0 	bl	8000b68 <__aeabi_dcmpgt>
 8022228:	2800      	cmp	r0, #0
 802222a:	d0eb      	beq.n	8022204 <ceil+0x3c>
 802222c:	2c00      	cmp	r4, #0
 802222e:	bfc2      	ittt	gt
 8022230:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8022234:	4133      	asrgt	r3, r6
 8022236:	18e4      	addgt	r4, r4, r3
 8022238:	ea24 0407 	bic.w	r4, r4, r7
 802223c:	2500      	movs	r5, #0
 802223e:	e7e1      	b.n	8022204 <ceil+0x3c>
 8022240:	2e33      	cmp	r6, #51	@ 0x33
 8022242:	dd0a      	ble.n	802225a <ceil+0x92>
 8022244:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8022248:	d103      	bne.n	8022252 <ceil+0x8a>
 802224a:	4602      	mov	r2, r0
 802224c:	460b      	mov	r3, r1
 802224e:	f7de f845 	bl	80002dc <__adddf3>
 8022252:	ec41 0b10 	vmov	d0, r0, r1
 8022256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802225a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 802225e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022262:	40df      	lsrs	r7, r3
 8022264:	4238      	tst	r0, r7
 8022266:	d0f4      	beq.n	8022252 <ceil+0x8a>
 8022268:	a311      	add	r3, pc, #68	@ (adr r3, 80222b0 <ceil+0xe8>)
 802226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802226e:	f7de f835 	bl	80002dc <__adddf3>
 8022272:	2200      	movs	r2, #0
 8022274:	2300      	movs	r3, #0
 8022276:	f7de fc77 	bl	8000b68 <__aeabi_dcmpgt>
 802227a:	2800      	cmp	r0, #0
 802227c:	d0c2      	beq.n	8022204 <ceil+0x3c>
 802227e:	2c00      	cmp	r4, #0
 8022280:	dd0a      	ble.n	8022298 <ceil+0xd0>
 8022282:	2e14      	cmp	r6, #20
 8022284:	d101      	bne.n	802228a <ceil+0xc2>
 8022286:	3401      	adds	r4, #1
 8022288:	e006      	b.n	8022298 <ceil+0xd0>
 802228a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802228e:	2301      	movs	r3, #1
 8022290:	40b3      	lsls	r3, r6
 8022292:	441d      	add	r5, r3
 8022294:	45a8      	cmp	r8, r5
 8022296:	d8f6      	bhi.n	8022286 <ceil+0xbe>
 8022298:	ea25 0507 	bic.w	r5, r5, r7
 802229c:	e7b2      	b.n	8022204 <ceil+0x3c>
 802229e:	2500      	movs	r5, #0
 80222a0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80222a4:	e7ae      	b.n	8022204 <ceil+0x3c>
 80222a6:	4c05      	ldr	r4, [pc, #20]	@ (80222bc <ceil+0xf4>)
 80222a8:	2500      	movs	r5, #0
 80222aa:	e7ab      	b.n	8022204 <ceil+0x3c>
 80222ac:	f3af 8000 	nop.w
 80222b0:	8800759c 	.word	0x8800759c
 80222b4:	7e37e43c 	.word	0x7e37e43c
 80222b8:	000fffff 	.word	0x000fffff
 80222bc:	3ff00000 	.word	0x3ff00000

080222c0 <floor>:
 80222c0:	ec51 0b10 	vmov	r0, r1, d0
 80222c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80222c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80222d0:	2e13      	cmp	r6, #19
 80222d2:	460c      	mov	r4, r1
 80222d4:	4605      	mov	r5, r0
 80222d6:	4680      	mov	r8, r0
 80222d8:	dc34      	bgt.n	8022344 <floor+0x84>
 80222da:	2e00      	cmp	r6, #0
 80222dc:	da17      	bge.n	802230e <floor+0x4e>
 80222de:	a332      	add	r3, pc, #200	@ (adr r3, 80223a8 <floor+0xe8>)
 80222e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80222e4:	f7dd fffa 	bl	80002dc <__adddf3>
 80222e8:	2200      	movs	r2, #0
 80222ea:	2300      	movs	r3, #0
 80222ec:	f7de fc3c 	bl	8000b68 <__aeabi_dcmpgt>
 80222f0:	b150      	cbz	r0, 8022308 <floor+0x48>
 80222f2:	2c00      	cmp	r4, #0
 80222f4:	da55      	bge.n	80223a2 <floor+0xe2>
 80222f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80222fa:	432c      	orrs	r4, r5
 80222fc:	2500      	movs	r5, #0
 80222fe:	42ac      	cmp	r4, r5
 8022300:	4c2b      	ldr	r4, [pc, #172]	@ (80223b0 <floor+0xf0>)
 8022302:	bf08      	it	eq
 8022304:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8022308:	4621      	mov	r1, r4
 802230a:	4628      	mov	r0, r5
 802230c:	e023      	b.n	8022356 <floor+0x96>
 802230e:	4f29      	ldr	r7, [pc, #164]	@ (80223b4 <floor+0xf4>)
 8022310:	4137      	asrs	r7, r6
 8022312:	ea01 0307 	and.w	r3, r1, r7
 8022316:	4303      	orrs	r3, r0
 8022318:	d01d      	beq.n	8022356 <floor+0x96>
 802231a:	a323      	add	r3, pc, #140	@ (adr r3, 80223a8 <floor+0xe8>)
 802231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022320:	f7dd ffdc 	bl	80002dc <__adddf3>
 8022324:	2200      	movs	r2, #0
 8022326:	2300      	movs	r3, #0
 8022328:	f7de fc1e 	bl	8000b68 <__aeabi_dcmpgt>
 802232c:	2800      	cmp	r0, #0
 802232e:	d0eb      	beq.n	8022308 <floor+0x48>
 8022330:	2c00      	cmp	r4, #0
 8022332:	bfbe      	ittt	lt
 8022334:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8022338:	4133      	asrlt	r3, r6
 802233a:	18e4      	addlt	r4, r4, r3
 802233c:	ea24 0407 	bic.w	r4, r4, r7
 8022340:	2500      	movs	r5, #0
 8022342:	e7e1      	b.n	8022308 <floor+0x48>
 8022344:	2e33      	cmp	r6, #51	@ 0x33
 8022346:	dd0a      	ble.n	802235e <floor+0x9e>
 8022348:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 802234c:	d103      	bne.n	8022356 <floor+0x96>
 802234e:	4602      	mov	r2, r0
 8022350:	460b      	mov	r3, r1
 8022352:	f7dd ffc3 	bl	80002dc <__adddf3>
 8022356:	ec41 0b10 	vmov	d0, r0, r1
 802235a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802235e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8022362:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022366:	40df      	lsrs	r7, r3
 8022368:	4207      	tst	r7, r0
 802236a:	d0f4      	beq.n	8022356 <floor+0x96>
 802236c:	a30e      	add	r3, pc, #56	@ (adr r3, 80223a8 <floor+0xe8>)
 802236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022372:	f7dd ffb3 	bl	80002dc <__adddf3>
 8022376:	2200      	movs	r2, #0
 8022378:	2300      	movs	r3, #0
 802237a:	f7de fbf5 	bl	8000b68 <__aeabi_dcmpgt>
 802237e:	2800      	cmp	r0, #0
 8022380:	d0c2      	beq.n	8022308 <floor+0x48>
 8022382:	2c00      	cmp	r4, #0
 8022384:	da0a      	bge.n	802239c <floor+0xdc>
 8022386:	2e14      	cmp	r6, #20
 8022388:	d101      	bne.n	802238e <floor+0xce>
 802238a:	3401      	adds	r4, #1
 802238c:	e006      	b.n	802239c <floor+0xdc>
 802238e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8022392:	2301      	movs	r3, #1
 8022394:	40b3      	lsls	r3, r6
 8022396:	441d      	add	r5, r3
 8022398:	4545      	cmp	r5, r8
 802239a:	d3f6      	bcc.n	802238a <floor+0xca>
 802239c:	ea25 0507 	bic.w	r5, r5, r7
 80223a0:	e7b2      	b.n	8022308 <floor+0x48>
 80223a2:	2500      	movs	r5, #0
 80223a4:	462c      	mov	r4, r5
 80223a6:	e7af      	b.n	8022308 <floor+0x48>
 80223a8:	8800759c 	.word	0x8800759c
 80223ac:	7e37e43c 	.word	0x7e37e43c
 80223b0:	bff00000 	.word	0xbff00000
 80223b4:	000fffff 	.word	0x000fffff

080223b8 <roundf>:
 80223b8:	ee10 0a10 	vmov	r0, s0
 80223bc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80223c0:	3a7f      	subs	r2, #127	@ 0x7f
 80223c2:	2a16      	cmp	r2, #22
 80223c4:	dc15      	bgt.n	80223f2 <roundf+0x3a>
 80223c6:	2a00      	cmp	r2, #0
 80223c8:	da08      	bge.n	80223dc <roundf+0x24>
 80223ca:	3201      	adds	r2, #1
 80223cc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80223d0:	d101      	bne.n	80223d6 <roundf+0x1e>
 80223d2:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 80223d6:	ee00 3a10 	vmov	s0, r3
 80223da:	4770      	bx	lr
 80223dc:	4907      	ldr	r1, [pc, #28]	@ (80223fc <roundf+0x44>)
 80223de:	4111      	asrs	r1, r2
 80223e0:	4201      	tst	r1, r0
 80223e2:	d0fa      	beq.n	80223da <roundf+0x22>
 80223e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80223e8:	4113      	asrs	r3, r2
 80223ea:	4403      	add	r3, r0
 80223ec:	ea23 0301 	bic.w	r3, r3, r1
 80223f0:	e7f1      	b.n	80223d6 <roundf+0x1e>
 80223f2:	2a80      	cmp	r2, #128	@ 0x80
 80223f4:	d1f1      	bne.n	80223da <roundf+0x22>
 80223f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80223fa:	4770      	bx	lr
 80223fc:	007fffff 	.word	0x007fffff

08022400 <__ieee754_atan2>:
 8022400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022404:	ec57 6b11 	vmov	r6, r7, d1
 8022408:	4273      	negs	r3, r6
 802240a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8022588 <__ieee754_atan2+0x188>
 802240e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8022412:	4333      	orrs	r3, r6
 8022414:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8022418:	4543      	cmp	r3, r8
 802241a:	ec51 0b10 	vmov	r0, r1, d0
 802241e:	4635      	mov	r5, r6
 8022420:	d809      	bhi.n	8022436 <__ieee754_atan2+0x36>
 8022422:	4244      	negs	r4, r0
 8022424:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8022428:	4304      	orrs	r4, r0
 802242a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 802242e:	4544      	cmp	r4, r8
 8022430:	468e      	mov	lr, r1
 8022432:	4681      	mov	r9, r0
 8022434:	d907      	bls.n	8022446 <__ieee754_atan2+0x46>
 8022436:	4632      	mov	r2, r6
 8022438:	463b      	mov	r3, r7
 802243a:	f7dd ff4f 	bl	80002dc <__adddf3>
 802243e:	ec41 0b10 	vmov	d0, r0, r1
 8022442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022446:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 802244a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 802244e:	4334      	orrs	r4, r6
 8022450:	d103      	bne.n	802245a <__ieee754_atan2+0x5a>
 8022452:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022456:	f000 b89b 	b.w	8022590 <atan>
 802245a:	17bc      	asrs	r4, r7, #30
 802245c:	f004 0402 	and.w	r4, r4, #2
 8022460:	ea53 0909 	orrs.w	r9, r3, r9
 8022464:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8022468:	d107      	bne.n	802247a <__ieee754_atan2+0x7a>
 802246a:	2c02      	cmp	r4, #2
 802246c:	d05f      	beq.n	802252e <__ieee754_atan2+0x12e>
 802246e:	2c03      	cmp	r4, #3
 8022470:	d1e5      	bne.n	802243e <__ieee754_atan2+0x3e>
 8022472:	a141      	add	r1, pc, #260	@ (adr r1, 8022578 <__ieee754_atan2+0x178>)
 8022474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022478:	e7e1      	b.n	802243e <__ieee754_atan2+0x3e>
 802247a:	4315      	orrs	r5, r2
 802247c:	d106      	bne.n	802248c <__ieee754_atan2+0x8c>
 802247e:	f1be 0f00 	cmp.w	lr, #0
 8022482:	da5f      	bge.n	8022544 <__ieee754_atan2+0x144>
 8022484:	a13e      	add	r1, pc, #248	@ (adr r1, 8022580 <__ieee754_atan2+0x180>)
 8022486:	e9d1 0100 	ldrd	r0, r1, [r1]
 802248a:	e7d8      	b.n	802243e <__ieee754_atan2+0x3e>
 802248c:	4542      	cmp	r2, r8
 802248e:	d10f      	bne.n	80224b0 <__ieee754_atan2+0xb0>
 8022490:	4293      	cmp	r3, r2
 8022492:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8022496:	d107      	bne.n	80224a8 <__ieee754_atan2+0xa8>
 8022498:	2c02      	cmp	r4, #2
 802249a:	d84c      	bhi.n	8022536 <__ieee754_atan2+0x136>
 802249c:	4b34      	ldr	r3, [pc, #208]	@ (8022570 <__ieee754_atan2+0x170>)
 802249e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80224a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80224a6:	e7ca      	b.n	802243e <__ieee754_atan2+0x3e>
 80224a8:	2c02      	cmp	r4, #2
 80224aa:	d848      	bhi.n	802253e <__ieee754_atan2+0x13e>
 80224ac:	4b31      	ldr	r3, [pc, #196]	@ (8022574 <__ieee754_atan2+0x174>)
 80224ae:	e7f6      	b.n	802249e <__ieee754_atan2+0x9e>
 80224b0:	4543      	cmp	r3, r8
 80224b2:	d0e4      	beq.n	802247e <__ieee754_atan2+0x7e>
 80224b4:	1a9b      	subs	r3, r3, r2
 80224b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80224ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80224be:	da1e      	bge.n	80224fe <__ieee754_atan2+0xfe>
 80224c0:	2f00      	cmp	r7, #0
 80224c2:	da01      	bge.n	80224c8 <__ieee754_atan2+0xc8>
 80224c4:	323c      	adds	r2, #60	@ 0x3c
 80224c6:	db1e      	blt.n	8022506 <__ieee754_atan2+0x106>
 80224c8:	4632      	mov	r2, r6
 80224ca:	463b      	mov	r3, r7
 80224cc:	f7de f9e6 	bl	800089c <__aeabi_ddiv>
 80224d0:	ec41 0b10 	vmov	d0, r0, r1
 80224d4:	f000 f9f4 	bl	80228c0 <fabs>
 80224d8:	f000 f85a 	bl	8022590 <atan>
 80224dc:	ec51 0b10 	vmov	r0, r1, d0
 80224e0:	2c01      	cmp	r4, #1
 80224e2:	d013      	beq.n	802250c <__ieee754_atan2+0x10c>
 80224e4:	2c02      	cmp	r4, #2
 80224e6:	d015      	beq.n	8022514 <__ieee754_atan2+0x114>
 80224e8:	2c00      	cmp	r4, #0
 80224ea:	d0a8      	beq.n	802243e <__ieee754_atan2+0x3e>
 80224ec:	a318      	add	r3, pc, #96	@ (adr r3, 8022550 <__ieee754_atan2+0x150>)
 80224ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224f2:	f7dd fef1 	bl	80002d8 <__aeabi_dsub>
 80224f6:	a318      	add	r3, pc, #96	@ (adr r3, 8022558 <__ieee754_atan2+0x158>)
 80224f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80224fc:	e014      	b.n	8022528 <__ieee754_atan2+0x128>
 80224fe:	a118      	add	r1, pc, #96	@ (adr r1, 8022560 <__ieee754_atan2+0x160>)
 8022500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022504:	e7ec      	b.n	80224e0 <__ieee754_atan2+0xe0>
 8022506:	2000      	movs	r0, #0
 8022508:	2100      	movs	r1, #0
 802250a:	e7e9      	b.n	80224e0 <__ieee754_atan2+0xe0>
 802250c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8022510:	4619      	mov	r1, r3
 8022512:	e794      	b.n	802243e <__ieee754_atan2+0x3e>
 8022514:	a30e      	add	r3, pc, #56	@ (adr r3, 8022550 <__ieee754_atan2+0x150>)
 8022516:	e9d3 2300 	ldrd	r2, r3, [r3]
 802251a:	f7dd fedd 	bl	80002d8 <__aeabi_dsub>
 802251e:	4602      	mov	r2, r0
 8022520:	460b      	mov	r3, r1
 8022522:	a10d      	add	r1, pc, #52	@ (adr r1, 8022558 <__ieee754_atan2+0x158>)
 8022524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022528:	f7dd fed6 	bl	80002d8 <__aeabi_dsub>
 802252c:	e787      	b.n	802243e <__ieee754_atan2+0x3e>
 802252e:	a10a      	add	r1, pc, #40	@ (adr r1, 8022558 <__ieee754_atan2+0x158>)
 8022530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022534:	e783      	b.n	802243e <__ieee754_atan2+0x3e>
 8022536:	a10c      	add	r1, pc, #48	@ (adr r1, 8022568 <__ieee754_atan2+0x168>)
 8022538:	e9d1 0100 	ldrd	r0, r1, [r1]
 802253c:	e77f      	b.n	802243e <__ieee754_atan2+0x3e>
 802253e:	2000      	movs	r0, #0
 8022540:	2100      	movs	r1, #0
 8022542:	e77c      	b.n	802243e <__ieee754_atan2+0x3e>
 8022544:	a106      	add	r1, pc, #24	@ (adr r1, 8022560 <__ieee754_atan2+0x160>)
 8022546:	e9d1 0100 	ldrd	r0, r1, [r1]
 802254a:	e778      	b.n	802243e <__ieee754_atan2+0x3e>
 802254c:	f3af 8000 	nop.w
 8022550:	33145c07 	.word	0x33145c07
 8022554:	3ca1a626 	.word	0x3ca1a626
 8022558:	54442d18 	.word	0x54442d18
 802255c:	400921fb 	.word	0x400921fb
 8022560:	54442d18 	.word	0x54442d18
 8022564:	3ff921fb 	.word	0x3ff921fb
 8022568:	54442d18 	.word	0x54442d18
 802256c:	3fe921fb 	.word	0x3fe921fb
 8022570:	08027b30 	.word	0x08027b30
 8022574:	08027b18 	.word	0x08027b18
 8022578:	54442d18 	.word	0x54442d18
 802257c:	c00921fb 	.word	0xc00921fb
 8022580:	54442d18 	.word	0x54442d18
 8022584:	bff921fb 	.word	0xbff921fb
 8022588:	7ff00000 	.word	0x7ff00000
 802258c:	00000000 	.word	0x00000000

08022590 <atan>:
 8022590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022594:	ec55 4b10 	vmov	r4, r5, d0
 8022598:	4bbf      	ldr	r3, [pc, #764]	@ (8022898 <atan+0x308>)
 802259a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 802259e:	429e      	cmp	r6, r3
 80225a0:	46ab      	mov	fp, r5
 80225a2:	d918      	bls.n	80225d6 <atan+0x46>
 80225a4:	4bbd      	ldr	r3, [pc, #756]	@ (802289c <atan+0x30c>)
 80225a6:	429e      	cmp	r6, r3
 80225a8:	d801      	bhi.n	80225ae <atan+0x1e>
 80225aa:	d109      	bne.n	80225c0 <atan+0x30>
 80225ac:	b144      	cbz	r4, 80225c0 <atan+0x30>
 80225ae:	4622      	mov	r2, r4
 80225b0:	462b      	mov	r3, r5
 80225b2:	4620      	mov	r0, r4
 80225b4:	4629      	mov	r1, r5
 80225b6:	f7dd fe91 	bl	80002dc <__adddf3>
 80225ba:	4604      	mov	r4, r0
 80225bc:	460d      	mov	r5, r1
 80225be:	e006      	b.n	80225ce <atan+0x3e>
 80225c0:	f1bb 0f00 	cmp.w	fp, #0
 80225c4:	f340 812b 	ble.w	802281e <atan+0x28e>
 80225c8:	a597      	add	r5, pc, #604	@ (adr r5, 8022828 <atan+0x298>)
 80225ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80225ce:	ec45 4b10 	vmov	d0, r4, r5
 80225d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225d6:	4bb2      	ldr	r3, [pc, #712]	@ (80228a0 <atan+0x310>)
 80225d8:	429e      	cmp	r6, r3
 80225da:	d813      	bhi.n	8022604 <atan+0x74>
 80225dc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80225e0:	429e      	cmp	r6, r3
 80225e2:	d80c      	bhi.n	80225fe <atan+0x6e>
 80225e4:	a392      	add	r3, pc, #584	@ (adr r3, 8022830 <atan+0x2a0>)
 80225e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80225ea:	4620      	mov	r0, r4
 80225ec:	4629      	mov	r1, r5
 80225ee:	f7dd fe75 	bl	80002dc <__adddf3>
 80225f2:	4bac      	ldr	r3, [pc, #688]	@ (80228a4 <atan+0x314>)
 80225f4:	2200      	movs	r2, #0
 80225f6:	f7de fab7 	bl	8000b68 <__aeabi_dcmpgt>
 80225fa:	2800      	cmp	r0, #0
 80225fc:	d1e7      	bne.n	80225ce <atan+0x3e>
 80225fe:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8022602:	e029      	b.n	8022658 <atan+0xc8>
 8022604:	f000 f95c 	bl	80228c0 <fabs>
 8022608:	4ba7      	ldr	r3, [pc, #668]	@ (80228a8 <atan+0x318>)
 802260a:	429e      	cmp	r6, r3
 802260c:	ec55 4b10 	vmov	r4, r5, d0
 8022610:	f200 80bc 	bhi.w	802278c <atan+0x1fc>
 8022614:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8022618:	429e      	cmp	r6, r3
 802261a:	f200 809e 	bhi.w	802275a <atan+0x1ca>
 802261e:	4622      	mov	r2, r4
 8022620:	462b      	mov	r3, r5
 8022622:	4620      	mov	r0, r4
 8022624:	4629      	mov	r1, r5
 8022626:	f7dd fe59 	bl	80002dc <__adddf3>
 802262a:	4b9e      	ldr	r3, [pc, #632]	@ (80228a4 <atan+0x314>)
 802262c:	2200      	movs	r2, #0
 802262e:	f7dd fe53 	bl	80002d8 <__aeabi_dsub>
 8022632:	2200      	movs	r2, #0
 8022634:	4606      	mov	r6, r0
 8022636:	460f      	mov	r7, r1
 8022638:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 802263c:	4620      	mov	r0, r4
 802263e:	4629      	mov	r1, r5
 8022640:	f7dd fe4c 	bl	80002dc <__adddf3>
 8022644:	4602      	mov	r2, r0
 8022646:	460b      	mov	r3, r1
 8022648:	4630      	mov	r0, r6
 802264a:	4639      	mov	r1, r7
 802264c:	f7de f926 	bl	800089c <__aeabi_ddiv>
 8022650:	f04f 0a00 	mov.w	sl, #0
 8022654:	4604      	mov	r4, r0
 8022656:	460d      	mov	r5, r1
 8022658:	4622      	mov	r2, r4
 802265a:	462b      	mov	r3, r5
 802265c:	4620      	mov	r0, r4
 802265e:	4629      	mov	r1, r5
 8022660:	f7dd fff2 	bl	8000648 <__aeabi_dmul>
 8022664:	4602      	mov	r2, r0
 8022666:	460b      	mov	r3, r1
 8022668:	4680      	mov	r8, r0
 802266a:	4689      	mov	r9, r1
 802266c:	f7dd ffec 	bl	8000648 <__aeabi_dmul>
 8022670:	a371      	add	r3, pc, #452	@ (adr r3, 8022838 <atan+0x2a8>)
 8022672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022676:	4606      	mov	r6, r0
 8022678:	460f      	mov	r7, r1
 802267a:	f7dd ffe5 	bl	8000648 <__aeabi_dmul>
 802267e:	a370      	add	r3, pc, #448	@ (adr r3, 8022840 <atan+0x2b0>)
 8022680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022684:	f7dd fe2a 	bl	80002dc <__adddf3>
 8022688:	4632      	mov	r2, r6
 802268a:	463b      	mov	r3, r7
 802268c:	f7dd ffdc 	bl	8000648 <__aeabi_dmul>
 8022690:	a36d      	add	r3, pc, #436	@ (adr r3, 8022848 <atan+0x2b8>)
 8022692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022696:	f7dd fe21 	bl	80002dc <__adddf3>
 802269a:	4632      	mov	r2, r6
 802269c:	463b      	mov	r3, r7
 802269e:	f7dd ffd3 	bl	8000648 <__aeabi_dmul>
 80226a2:	a36b      	add	r3, pc, #428	@ (adr r3, 8022850 <atan+0x2c0>)
 80226a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226a8:	f7dd fe18 	bl	80002dc <__adddf3>
 80226ac:	4632      	mov	r2, r6
 80226ae:	463b      	mov	r3, r7
 80226b0:	f7dd ffca 	bl	8000648 <__aeabi_dmul>
 80226b4:	a368      	add	r3, pc, #416	@ (adr r3, 8022858 <atan+0x2c8>)
 80226b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226ba:	f7dd fe0f 	bl	80002dc <__adddf3>
 80226be:	4632      	mov	r2, r6
 80226c0:	463b      	mov	r3, r7
 80226c2:	f7dd ffc1 	bl	8000648 <__aeabi_dmul>
 80226c6:	a366      	add	r3, pc, #408	@ (adr r3, 8022860 <atan+0x2d0>)
 80226c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226cc:	f7dd fe06 	bl	80002dc <__adddf3>
 80226d0:	4642      	mov	r2, r8
 80226d2:	464b      	mov	r3, r9
 80226d4:	f7dd ffb8 	bl	8000648 <__aeabi_dmul>
 80226d8:	a363      	add	r3, pc, #396	@ (adr r3, 8022868 <atan+0x2d8>)
 80226da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226de:	4680      	mov	r8, r0
 80226e0:	4689      	mov	r9, r1
 80226e2:	4630      	mov	r0, r6
 80226e4:	4639      	mov	r1, r7
 80226e6:	f7dd ffaf 	bl	8000648 <__aeabi_dmul>
 80226ea:	a361      	add	r3, pc, #388	@ (adr r3, 8022870 <atan+0x2e0>)
 80226ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80226f0:	f7dd fdf2 	bl	80002d8 <__aeabi_dsub>
 80226f4:	4632      	mov	r2, r6
 80226f6:	463b      	mov	r3, r7
 80226f8:	f7dd ffa6 	bl	8000648 <__aeabi_dmul>
 80226fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8022878 <atan+0x2e8>)
 80226fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022702:	f7dd fde9 	bl	80002d8 <__aeabi_dsub>
 8022706:	4632      	mov	r2, r6
 8022708:	463b      	mov	r3, r7
 802270a:	f7dd ff9d 	bl	8000648 <__aeabi_dmul>
 802270e:	a35c      	add	r3, pc, #368	@ (adr r3, 8022880 <atan+0x2f0>)
 8022710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022714:	f7dd fde0 	bl	80002d8 <__aeabi_dsub>
 8022718:	4632      	mov	r2, r6
 802271a:	463b      	mov	r3, r7
 802271c:	f7dd ff94 	bl	8000648 <__aeabi_dmul>
 8022720:	a359      	add	r3, pc, #356	@ (adr r3, 8022888 <atan+0x2f8>)
 8022722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022726:	f7dd fdd7 	bl	80002d8 <__aeabi_dsub>
 802272a:	4632      	mov	r2, r6
 802272c:	463b      	mov	r3, r7
 802272e:	f7dd ff8b 	bl	8000648 <__aeabi_dmul>
 8022732:	4602      	mov	r2, r0
 8022734:	460b      	mov	r3, r1
 8022736:	4640      	mov	r0, r8
 8022738:	4649      	mov	r1, r9
 802273a:	f7dd fdcf 	bl	80002dc <__adddf3>
 802273e:	4622      	mov	r2, r4
 8022740:	462b      	mov	r3, r5
 8022742:	f7dd ff81 	bl	8000648 <__aeabi_dmul>
 8022746:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 802274a:	4602      	mov	r2, r0
 802274c:	460b      	mov	r3, r1
 802274e:	d148      	bne.n	80227e2 <atan+0x252>
 8022750:	4620      	mov	r0, r4
 8022752:	4629      	mov	r1, r5
 8022754:	f7dd fdc0 	bl	80002d8 <__aeabi_dsub>
 8022758:	e72f      	b.n	80225ba <atan+0x2a>
 802275a:	4b52      	ldr	r3, [pc, #328]	@ (80228a4 <atan+0x314>)
 802275c:	2200      	movs	r2, #0
 802275e:	4620      	mov	r0, r4
 8022760:	4629      	mov	r1, r5
 8022762:	f7dd fdb9 	bl	80002d8 <__aeabi_dsub>
 8022766:	4b4f      	ldr	r3, [pc, #316]	@ (80228a4 <atan+0x314>)
 8022768:	4606      	mov	r6, r0
 802276a:	460f      	mov	r7, r1
 802276c:	2200      	movs	r2, #0
 802276e:	4620      	mov	r0, r4
 8022770:	4629      	mov	r1, r5
 8022772:	f7dd fdb3 	bl	80002dc <__adddf3>
 8022776:	4602      	mov	r2, r0
 8022778:	460b      	mov	r3, r1
 802277a:	4630      	mov	r0, r6
 802277c:	4639      	mov	r1, r7
 802277e:	f7de f88d 	bl	800089c <__aeabi_ddiv>
 8022782:	f04f 0a01 	mov.w	sl, #1
 8022786:	4604      	mov	r4, r0
 8022788:	460d      	mov	r5, r1
 802278a:	e765      	b.n	8022658 <atan+0xc8>
 802278c:	4b47      	ldr	r3, [pc, #284]	@ (80228ac <atan+0x31c>)
 802278e:	429e      	cmp	r6, r3
 8022790:	d21c      	bcs.n	80227cc <atan+0x23c>
 8022792:	4b47      	ldr	r3, [pc, #284]	@ (80228b0 <atan+0x320>)
 8022794:	2200      	movs	r2, #0
 8022796:	4620      	mov	r0, r4
 8022798:	4629      	mov	r1, r5
 802279a:	f7dd fd9d 	bl	80002d8 <__aeabi_dsub>
 802279e:	4b44      	ldr	r3, [pc, #272]	@ (80228b0 <atan+0x320>)
 80227a0:	4606      	mov	r6, r0
 80227a2:	460f      	mov	r7, r1
 80227a4:	2200      	movs	r2, #0
 80227a6:	4620      	mov	r0, r4
 80227a8:	4629      	mov	r1, r5
 80227aa:	f7dd ff4d 	bl	8000648 <__aeabi_dmul>
 80227ae:	4b3d      	ldr	r3, [pc, #244]	@ (80228a4 <atan+0x314>)
 80227b0:	2200      	movs	r2, #0
 80227b2:	f7dd fd93 	bl	80002dc <__adddf3>
 80227b6:	4602      	mov	r2, r0
 80227b8:	460b      	mov	r3, r1
 80227ba:	4630      	mov	r0, r6
 80227bc:	4639      	mov	r1, r7
 80227be:	f7de f86d 	bl	800089c <__aeabi_ddiv>
 80227c2:	f04f 0a02 	mov.w	sl, #2
 80227c6:	4604      	mov	r4, r0
 80227c8:	460d      	mov	r5, r1
 80227ca:	e745      	b.n	8022658 <atan+0xc8>
 80227cc:	4622      	mov	r2, r4
 80227ce:	462b      	mov	r3, r5
 80227d0:	4938      	ldr	r1, [pc, #224]	@ (80228b4 <atan+0x324>)
 80227d2:	2000      	movs	r0, #0
 80227d4:	f7de f862 	bl	800089c <__aeabi_ddiv>
 80227d8:	f04f 0a03 	mov.w	sl, #3
 80227dc:	4604      	mov	r4, r0
 80227de:	460d      	mov	r5, r1
 80227e0:	e73a      	b.n	8022658 <atan+0xc8>
 80227e2:	4b35      	ldr	r3, [pc, #212]	@ (80228b8 <atan+0x328>)
 80227e4:	4e35      	ldr	r6, [pc, #212]	@ (80228bc <atan+0x32c>)
 80227e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80227ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227ee:	f7dd fd73 	bl	80002d8 <__aeabi_dsub>
 80227f2:	4622      	mov	r2, r4
 80227f4:	462b      	mov	r3, r5
 80227f6:	f7dd fd6f 	bl	80002d8 <__aeabi_dsub>
 80227fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80227fe:	4602      	mov	r2, r0
 8022800:	460b      	mov	r3, r1
 8022802:	e9d6 0100 	ldrd	r0, r1, [r6]
 8022806:	f7dd fd67 	bl	80002d8 <__aeabi_dsub>
 802280a:	f1bb 0f00 	cmp.w	fp, #0
 802280e:	4604      	mov	r4, r0
 8022810:	460d      	mov	r5, r1
 8022812:	f6bf aedc 	bge.w	80225ce <atan+0x3e>
 8022816:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802281a:	461d      	mov	r5, r3
 802281c:	e6d7      	b.n	80225ce <atan+0x3e>
 802281e:	a51c      	add	r5, pc, #112	@ (adr r5, 8022890 <atan+0x300>)
 8022820:	e9d5 4500 	ldrd	r4, r5, [r5]
 8022824:	e6d3      	b.n	80225ce <atan+0x3e>
 8022826:	bf00      	nop
 8022828:	54442d18 	.word	0x54442d18
 802282c:	3ff921fb 	.word	0x3ff921fb
 8022830:	8800759c 	.word	0x8800759c
 8022834:	7e37e43c 	.word	0x7e37e43c
 8022838:	e322da11 	.word	0xe322da11
 802283c:	3f90ad3a 	.word	0x3f90ad3a
 8022840:	24760deb 	.word	0x24760deb
 8022844:	3fa97b4b 	.word	0x3fa97b4b
 8022848:	a0d03d51 	.word	0xa0d03d51
 802284c:	3fb10d66 	.word	0x3fb10d66
 8022850:	c54c206e 	.word	0xc54c206e
 8022854:	3fb745cd 	.word	0x3fb745cd
 8022858:	920083ff 	.word	0x920083ff
 802285c:	3fc24924 	.word	0x3fc24924
 8022860:	5555550d 	.word	0x5555550d
 8022864:	3fd55555 	.word	0x3fd55555
 8022868:	2c6a6c2f 	.word	0x2c6a6c2f
 802286c:	bfa2b444 	.word	0xbfa2b444
 8022870:	52defd9a 	.word	0x52defd9a
 8022874:	3fadde2d 	.word	0x3fadde2d
 8022878:	af749a6d 	.word	0xaf749a6d
 802287c:	3fb3b0f2 	.word	0x3fb3b0f2
 8022880:	fe231671 	.word	0xfe231671
 8022884:	3fbc71c6 	.word	0x3fbc71c6
 8022888:	9998ebc4 	.word	0x9998ebc4
 802288c:	3fc99999 	.word	0x3fc99999
 8022890:	54442d18 	.word	0x54442d18
 8022894:	bff921fb 	.word	0xbff921fb
 8022898:	440fffff 	.word	0x440fffff
 802289c:	7ff00000 	.word	0x7ff00000
 80228a0:	3fdbffff 	.word	0x3fdbffff
 80228a4:	3ff00000 	.word	0x3ff00000
 80228a8:	3ff2ffff 	.word	0x3ff2ffff
 80228ac:	40038000 	.word	0x40038000
 80228b0:	3ff80000 	.word	0x3ff80000
 80228b4:	bff00000 	.word	0xbff00000
 80228b8:	08027b48 	.word	0x08027b48
 80228bc:	08027b68 	.word	0x08027b68

080228c0 <fabs>:
 80228c0:	ec51 0b10 	vmov	r0, r1, d0
 80228c4:	4602      	mov	r2, r0
 80228c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80228ca:	ec43 2b10 	vmov	d0, r2, r3
 80228ce:	4770      	bx	lr

080228d0 <__kernel_cosf>:
 80228d0:	ee10 3a10 	vmov	r3, s0
 80228d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80228d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80228dc:	eef0 6a40 	vmov.f32	s13, s0
 80228e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80228e4:	d204      	bcs.n	80228f0 <__kernel_cosf+0x20>
 80228e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80228ea:	ee17 2a90 	vmov	r2, s15
 80228ee:	b342      	cbz	r2, 8022942 <__kernel_cosf+0x72>
 80228f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80228f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8022960 <__kernel_cosf+0x90>
 80228f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8022964 <__kernel_cosf+0x94>
 80228fc:	4a1a      	ldr	r2, [pc, #104]	@ (8022968 <__kernel_cosf+0x98>)
 80228fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 8022902:	4293      	cmp	r3, r2
 8022904:	eddf 7a19 	vldr	s15, [pc, #100]	@ 802296c <__kernel_cosf+0x9c>
 8022908:	eee6 7a07 	vfma.f32	s15, s12, s14
 802290c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8022970 <__kernel_cosf+0xa0>
 8022910:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022914:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8022974 <__kernel_cosf+0xa4>
 8022918:	eee6 7a07 	vfma.f32	s15, s12, s14
 802291c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8022978 <__kernel_cosf+0xa8>
 8022920:	eea7 6a87 	vfma.f32	s12, s15, s14
 8022924:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8022928:	ee26 6a07 	vmul.f32	s12, s12, s14
 802292c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022930:	eee7 0a06 	vfma.f32	s1, s14, s12
 8022934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8022938:	d804      	bhi.n	8022944 <__kernel_cosf+0x74>
 802293a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 802293e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022942:	4770      	bx	lr
 8022944:	4a0d      	ldr	r2, [pc, #52]	@ (802297c <__kernel_cosf+0xac>)
 8022946:	4293      	cmp	r3, r2
 8022948:	bf9a      	itte	ls
 802294a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 802294e:	ee07 3a10 	vmovls	s14, r3
 8022952:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8022956:	ee30 0a47 	vsub.f32	s0, s0, s14
 802295a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802295e:	e7ec      	b.n	802293a <__kernel_cosf+0x6a>
 8022960:	ad47d74e 	.word	0xad47d74e
 8022964:	310f74f6 	.word	0x310f74f6
 8022968:	3e999999 	.word	0x3e999999
 802296c:	b493f27c 	.word	0xb493f27c
 8022970:	37d00d01 	.word	0x37d00d01
 8022974:	bab60b61 	.word	0xbab60b61
 8022978:	3d2aaaab 	.word	0x3d2aaaab
 802297c:	3f480000 	.word	0x3f480000

08022980 <__kernel_sinf>:
 8022980:	ee10 3a10 	vmov	r3, s0
 8022984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8022988:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 802298c:	d204      	bcs.n	8022998 <__kernel_sinf+0x18>
 802298e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8022992:	ee17 3a90 	vmov	r3, s15
 8022996:	b35b      	cbz	r3, 80229f0 <__kernel_sinf+0x70>
 8022998:	ee20 7a00 	vmul.f32	s14, s0, s0
 802299c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80229f4 <__kernel_sinf+0x74>
 80229a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80229f8 <__kernel_sinf+0x78>
 80229a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80229a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80229fc <__kernel_sinf+0x7c>
 80229ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80229b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8022a00 <__kernel_sinf+0x80>
 80229b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80229b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8022a04 <__kernel_sinf+0x84>
 80229bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80229c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80229c4:	b930      	cbnz	r0, 80229d4 <__kernel_sinf+0x54>
 80229c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8022a08 <__kernel_sinf+0x88>
 80229ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80229ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 80229d2:	4770      	bx	lr
 80229d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80229d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80229dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80229e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80229e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8022a0c <__kernel_sinf+0x8c>
 80229e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80229ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 80229f0:	4770      	bx	lr
 80229f2:	bf00      	nop
 80229f4:	2f2ec9d3 	.word	0x2f2ec9d3
 80229f8:	b2d72f34 	.word	0xb2d72f34
 80229fc:	3638ef1b 	.word	0x3638ef1b
 8022a00:	b9500d01 	.word	0xb9500d01
 8022a04:	3c088889 	.word	0x3c088889
 8022a08:	be2aaaab 	.word	0xbe2aaaab
 8022a0c:	3e2aaaab 	.word	0x3e2aaaab

08022a10 <__kernel_tanf>:
 8022a10:	b508      	push	{r3, lr}
 8022a12:	ee10 3a10 	vmov	r3, s0
 8022a16:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8022a1a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 8022a1e:	eef0 7a40 	vmov.f32	s15, s0
 8022a22:	d217      	bcs.n	8022a54 <__kernel_tanf+0x44>
 8022a24:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8022a28:	ee17 1a10 	vmov	r1, s14
 8022a2c:	bb41      	cbnz	r1, 8022a80 <__kernel_tanf+0x70>
 8022a2e:	1c43      	adds	r3, r0, #1
 8022a30:	4313      	orrs	r3, r2
 8022a32:	d108      	bne.n	8022a46 <__kernel_tanf+0x36>
 8022a34:	f7ff fa60 	bl	8021ef8 <fabsf>
 8022a38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022a3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a40:	eeb0 0a67 	vmov.f32	s0, s15
 8022a44:	bd08      	pop	{r3, pc}
 8022a46:	2801      	cmp	r0, #1
 8022a48:	d0fa      	beq.n	8022a40 <__kernel_tanf+0x30>
 8022a4a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8022a4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022a52:	e7f5      	b.n	8022a40 <__kernel_tanf+0x30>
 8022a54:	494c      	ldr	r1, [pc, #304]	@ (8022b88 <__kernel_tanf+0x178>)
 8022a56:	428a      	cmp	r2, r1
 8022a58:	d312      	bcc.n	8022a80 <__kernel_tanf+0x70>
 8022a5a:	2b00      	cmp	r3, #0
 8022a5c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8022b8c <__kernel_tanf+0x17c>
 8022a60:	bfb8      	it	lt
 8022a62:	eef1 7a40 	vneglt.f32	s15, s0
 8022a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8022a6a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8022b90 <__kernel_tanf+0x180>
 8022a6e:	bfb8      	it	lt
 8022a70:	eef1 0a60 	vneglt.f32	s1, s1
 8022a74:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8022a78:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8022b94 <__kernel_tanf+0x184>
 8022a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8022a80:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8022a84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8022b98 <__kernel_tanf+0x188>
 8022a88:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8022b9c <__kernel_tanf+0x18c>
 8022a8c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8022ba0 <__kernel_tanf+0x190>
 8022a90:	493d      	ldr	r1, [pc, #244]	@ (8022b88 <__kernel_tanf+0x178>)
 8022a92:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8022a96:	428a      	cmp	r2, r1
 8022a98:	eea7 6a25 	vfma.f32	s12, s14, s11
 8022a9c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8022ba4 <__kernel_tanf+0x194>
 8022aa0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8022aa4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8022ba8 <__kernel_tanf+0x198>
 8022aa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8022aac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8022bac <__kernel_tanf+0x19c>
 8022ab0:	eee6 5a07 	vfma.f32	s11, s12, s14
 8022ab4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8022bb0 <__kernel_tanf+0x1a0>
 8022ab8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8022abc:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8022bb4 <__kernel_tanf+0x1a4>
 8022ac0:	eee7 5a05 	vfma.f32	s11, s14, s10
 8022ac4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8022bb8 <__kernel_tanf+0x1a8>
 8022ac8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8022acc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8022bbc <__kernel_tanf+0x1ac>
 8022ad0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8022ad4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8022bc0 <__kernel_tanf+0x1b0>
 8022ad8:	eea5 5a87 	vfma.f32	s10, s11, s14
 8022adc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022bc4 <__kernel_tanf+0x1b4>
 8022ae0:	eee5 5a07 	vfma.f32	s11, s10, s14
 8022ae4:	eeb0 7a46 	vmov.f32	s14, s12
 8022ae8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8022aec:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8022af0:	eeb0 6a60 	vmov.f32	s12, s1
 8022af4:	eea7 6a05 	vfma.f32	s12, s14, s10
 8022af8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8022bc8 <__kernel_tanf+0x1b8>
 8022afc:	eee6 0a26 	vfma.f32	s1, s12, s13
 8022b00:	eee5 0a07 	vfma.f32	s1, s10, s14
 8022b04:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8022b08:	d31d      	bcc.n	8022b46 <__kernel_tanf+0x136>
 8022b0a:	ee07 0a10 	vmov	s14, r0
 8022b0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8022b12:	ee26 5a06 	vmul.f32	s10, s12, s12
 8022b16:	ee36 6a07 	vadd.f32	s12, s12, s14
 8022b1a:	179b      	asrs	r3, r3, #30
 8022b1c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8022b20:	f003 0302 	and.w	r3, r3, #2
 8022b24:	f1c3 0301 	rsb	r3, r3, #1
 8022b28:	ee06 3a90 	vmov	s13, r3
 8022b2c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8022b30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8022b34:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8022b38:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8022b3c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8022b40:	ee66 7a87 	vmul.f32	s15, s13, s14
 8022b44:	e77c      	b.n	8022a40 <__kernel_tanf+0x30>
 8022b46:	2801      	cmp	r0, #1
 8022b48:	d01b      	beq.n	8022b82 <__kernel_tanf+0x172>
 8022b4a:	4b20      	ldr	r3, [pc, #128]	@ (8022bcc <__kernel_tanf+0x1bc>)
 8022b4c:	ee16 2a10 	vmov	r2, s12
 8022b50:	401a      	ands	r2, r3
 8022b52:	ee05 2a90 	vmov	s11, r2
 8022b56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8022b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022b5e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8022b62:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8022b66:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8022b6a:	ee16 2a90 	vmov	r2, s13
 8022b6e:	4013      	ands	r3, r2
 8022b70:	ee07 3a90 	vmov	s15, r3
 8022b74:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8022b78:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8022b7c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8022b80:	e75e      	b.n	8022a40 <__kernel_tanf+0x30>
 8022b82:	eef0 7a46 	vmov.f32	s15, s12
 8022b86:	e75b      	b.n	8022a40 <__kernel_tanf+0x30>
 8022b88:	3f2ca140 	.word	0x3f2ca140
 8022b8c:	3f490fda 	.word	0x3f490fda
 8022b90:	33222168 	.word	0x33222168
 8022b94:	00000000 	.word	0x00000000
 8022b98:	b79bae5f 	.word	0xb79bae5f
 8022b9c:	38a3f445 	.word	0x38a3f445
 8022ba0:	37d95384 	.word	0x37d95384
 8022ba4:	3a1a26c8 	.word	0x3a1a26c8
 8022ba8:	3b6b6916 	.word	0x3b6b6916
 8022bac:	3cb327a4 	.word	0x3cb327a4
 8022bb0:	3e088889 	.word	0x3e088889
 8022bb4:	3895c07a 	.word	0x3895c07a
 8022bb8:	398137b9 	.word	0x398137b9
 8022bbc:	3abede48 	.word	0x3abede48
 8022bc0:	3c11371f 	.word	0x3c11371f
 8022bc4:	3d5d0dd1 	.word	0x3d5d0dd1
 8022bc8:	3eaaaaab 	.word	0x3eaaaaab
 8022bcc:	fffff000 	.word	0xfffff000

08022bd0 <__ieee754_acosf>:
 8022bd0:	b508      	push	{r3, lr}
 8022bd2:	ee10 3a10 	vmov	r3, s0
 8022bd6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8022bda:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022bde:	ed2d 8b0c 	vpush	{d8-d13}
 8022be2:	d10a      	bne.n	8022bfa <__ieee754_acosf+0x2a>
 8022be4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8022d7c <__ieee754_acosf+0x1ac>
 8022be8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8022d80 <__ieee754_acosf+0x1b0>
 8022bec:	2b00      	cmp	r3, #0
 8022bee:	bfc8      	it	gt
 8022bf0:	eeb0 0a67 	vmovgt.f32	s0, s15
 8022bf4:	ecbd 8b0c 	vpop	{d8-d13}
 8022bf8:	bd08      	pop	{r3, pc}
 8022bfa:	d904      	bls.n	8022c06 <__ieee754_acosf+0x36>
 8022bfc:	ee30 8a40 	vsub.f32	s16, s0, s0
 8022c00:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8022c04:	e7f6      	b.n	8022bf4 <__ieee754_acosf+0x24>
 8022c06:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8022c0a:	d23c      	bcs.n	8022c86 <__ieee754_acosf+0xb6>
 8022c0c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8022c10:	f240 80b1 	bls.w	8022d76 <__ieee754_acosf+0x1a6>
 8022c14:	ee60 7a00 	vmul.f32	s15, s0, s0
 8022c18:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8022d84 <__ieee754_acosf+0x1b4>
 8022c1c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8022d88 <__ieee754_acosf+0x1b8>
 8022c20:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8022d8c <__ieee754_acosf+0x1bc>
 8022c24:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022c28:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8022d90 <__ieee754_acosf+0x1c0>
 8022c2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022c30:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8022d94 <__ieee754_acosf+0x1c4>
 8022c34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022c38:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8022d98 <__ieee754_acosf+0x1c8>
 8022c3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022c40:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8022d9c <__ieee754_acosf+0x1cc>
 8022c44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022c48:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8022da0 <__ieee754_acosf+0x1d0>
 8022c4c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8022c50:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8022da4 <__ieee754_acosf+0x1d4>
 8022c54:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022c58:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8022da8 <__ieee754_acosf+0x1d8>
 8022c5c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022c60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8022c64:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022c6c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8022dac <__ieee754_acosf+0x1dc>
 8022c70:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8022c74:	eee0 7a46 	vfms.f32	s15, s0, s12
 8022c78:	ee70 7a67 	vsub.f32	s15, s0, s15
 8022c7c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8022db0 <__ieee754_acosf+0x1e0>
 8022c80:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022c84:	e7b6      	b.n	8022bf4 <__ieee754_acosf+0x24>
 8022c86:	2b00      	cmp	r3, #0
 8022c88:	eddf da3e 	vldr	s27, [pc, #248]	@ 8022d84 <__ieee754_acosf+0x1b4>
 8022c8c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8022d88 <__ieee754_acosf+0x1b8>
 8022c90:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8022d90 <__ieee754_acosf+0x1c0>
 8022c94:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8022d94 <__ieee754_acosf+0x1c4>
 8022c98:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8022d98 <__ieee754_acosf+0x1c8>
 8022c9c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8022d9c <__ieee754_acosf+0x1cc>
 8022ca0:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8022da0 <__ieee754_acosf+0x1d0>
 8022ca4:	eddf aa39 	vldr	s21, [pc, #228]	@ 8022d8c <__ieee754_acosf+0x1bc>
 8022ca8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8022da4 <__ieee754_acosf+0x1d4>
 8022cac:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8022da8 <__ieee754_acosf+0x1d8>
 8022cb0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8022cb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022cb8:	da28      	bge.n	8022d0c <__ieee754_acosf+0x13c>
 8022cba:	ee30 8a09 	vadd.f32	s16, s0, s18
 8022cbe:	ee28 0a27 	vmul.f32	s0, s16, s15
 8022cc2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8022cc6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8022cca:	eeac ca80 	vfma.f32	s24, s25, s0
 8022cce:	eeaa aa80 	vfma.f32	s20, s21, s0
 8022cd2:	eeec ba00 	vfma.f32	s23, s24, s0
 8022cd6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8022cda:	eeab ba80 	vfma.f32	s22, s23, s0
 8022cde:	eea9 9a80 	vfma.f32	s18, s19, s0
 8022ce2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8022ce6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8022cea:	f7ff fa69 	bl	80221c0 <__ieee754_sqrtf>
 8022cee:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8022cf2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8022db4 <__ieee754_acosf+0x1e4>
 8022cf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022cfa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8022cfe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8022d02:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8022db8 <__ieee754_acosf+0x1e8>
 8022d06:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8022d0a:	e773      	b.n	8022bf4 <__ieee754_acosf+0x24>
 8022d0c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8022d10:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022d14:	eeb0 0a48 	vmov.f32	s0, s16
 8022d18:	f7ff fa52 	bl	80221c0 <__ieee754_sqrtf>
 8022d1c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8022d20:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8022d24:	eeac ca88 	vfma.f32	s24, s25, s16
 8022d28:	eeaa aa88 	vfma.f32	s20, s21, s16
 8022d2c:	eeec ba08 	vfma.f32	s23, s24, s16
 8022d30:	ee10 3a10 	vmov	r3, s0
 8022d34:	eeab ba88 	vfma.f32	s22, s23, s16
 8022d38:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8022d3c:	f023 030f 	bic.w	r3, r3, #15
 8022d40:	eeea 9a08 	vfma.f32	s19, s20, s16
 8022d44:	ee07 3a90 	vmov	s15, r3
 8022d48:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8022d4c:	eeb0 6a48 	vmov.f32	s12, s16
 8022d50:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8022d54:	eea9 9a88 	vfma.f32	s18, s19, s16
 8022d58:	ee70 6a27 	vadd.f32	s13, s0, s15
 8022d5c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8022d60:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8022d64:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8022d68:	eea0 7a26 	vfma.f32	s14, s0, s13
 8022d6c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8022d70:	ee30 0a00 	vadd.f32	s0, s0, s0
 8022d74:	e73e      	b.n	8022bf4 <__ieee754_acosf+0x24>
 8022d76:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8022dbc <__ieee754_acosf+0x1ec>
 8022d7a:	e73b      	b.n	8022bf4 <__ieee754_acosf+0x24>
 8022d7c:	40490fdb 	.word	0x40490fdb
 8022d80:	00000000 	.word	0x00000000
 8022d84:	3811ef08 	.word	0x3811ef08
 8022d88:	3a4f7f04 	.word	0x3a4f7f04
 8022d8c:	bf303361 	.word	0xbf303361
 8022d90:	bd241146 	.word	0xbd241146
 8022d94:	3e4e0aa8 	.word	0x3e4e0aa8
 8022d98:	bea6b090 	.word	0xbea6b090
 8022d9c:	3e2aaaab 	.word	0x3e2aaaab
 8022da0:	3d9dc62e 	.word	0x3d9dc62e
 8022da4:	4001572d 	.word	0x4001572d
 8022da8:	c019d139 	.word	0xc019d139
 8022dac:	33a22168 	.word	0x33a22168
 8022db0:	3fc90fda 	.word	0x3fc90fda
 8022db4:	b3a22168 	.word	0xb3a22168
 8022db8:	40490fda 	.word	0x40490fda
 8022dbc:	3fc90fdb 	.word	0x3fc90fdb

08022dc0 <__ieee754_asinf>:
 8022dc0:	b538      	push	{r3, r4, r5, lr}
 8022dc2:	ee10 5a10 	vmov	r5, s0
 8022dc6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8022dca:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8022dce:	ed2d 8b04 	vpush	{d8-d9}
 8022dd2:	d10c      	bne.n	8022dee <__ieee754_asinf+0x2e>
 8022dd4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8022f4c <__ieee754_asinf+0x18c>
 8022dd8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8022f50 <__ieee754_asinf+0x190>
 8022ddc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8022de0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8022de4:	eeb0 0a67 	vmov.f32	s0, s15
 8022de8:	ecbd 8b04 	vpop	{d8-d9}
 8022dec:	bd38      	pop	{r3, r4, r5, pc}
 8022dee:	d904      	bls.n	8022dfa <__ieee754_asinf+0x3a>
 8022df0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8022df4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8022df8:	e7f6      	b.n	8022de8 <__ieee754_asinf+0x28>
 8022dfa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8022dfe:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8022e02:	d20b      	bcs.n	8022e1c <__ieee754_asinf+0x5c>
 8022e04:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8022e08:	d252      	bcs.n	8022eb0 <__ieee754_asinf+0xf0>
 8022e0a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8022f54 <__ieee754_asinf+0x194>
 8022e0e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8022e12:	eef4 7ae8 	vcmpe.f32	s15, s17
 8022e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e1a:	dce5      	bgt.n	8022de8 <__ieee754_asinf+0x28>
 8022e1c:	f7ff f86c 	bl	8021ef8 <fabsf>
 8022e20:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8022e24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8022e28:	ee28 8a27 	vmul.f32	s16, s16, s15
 8022e2c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8022f58 <__ieee754_asinf+0x198>
 8022e30:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8022f5c <__ieee754_asinf+0x19c>
 8022e34:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8022f60 <__ieee754_asinf+0x1a0>
 8022e38:	eea8 7a27 	vfma.f32	s14, s16, s15
 8022e3c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8022f64 <__ieee754_asinf+0x1a4>
 8022e40:	eee7 7a08 	vfma.f32	s15, s14, s16
 8022e44:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8022f68 <__ieee754_asinf+0x1a8>
 8022e48:	eea7 7a88 	vfma.f32	s14, s15, s16
 8022e4c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8022f6c <__ieee754_asinf+0x1ac>
 8022e50:	eee7 7a08 	vfma.f32	s15, s14, s16
 8022e54:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8022f70 <__ieee754_asinf+0x1b0>
 8022e58:	eea7 9a88 	vfma.f32	s18, s15, s16
 8022e5c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8022f74 <__ieee754_asinf+0x1b4>
 8022e60:	eee8 7a07 	vfma.f32	s15, s16, s14
 8022e64:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8022f78 <__ieee754_asinf+0x1b8>
 8022e68:	eea7 7a88 	vfma.f32	s14, s15, s16
 8022e6c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8022f7c <__ieee754_asinf+0x1bc>
 8022e70:	eee7 7a08 	vfma.f32	s15, s14, s16
 8022e74:	eeb0 0a48 	vmov.f32	s0, s16
 8022e78:	eee7 8a88 	vfma.f32	s17, s15, s16
 8022e7c:	f7ff f9a0 	bl	80221c0 <__ieee754_sqrtf>
 8022e80:	4b3f      	ldr	r3, [pc, #252]	@ (8022f80 <__ieee754_asinf+0x1c0>)
 8022e82:	ee29 9a08 	vmul.f32	s18, s18, s16
 8022e86:	429c      	cmp	r4, r3
 8022e88:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8022e8c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8022e90:	d93d      	bls.n	8022f0e <__ieee754_asinf+0x14e>
 8022e92:	eea0 0a06 	vfma.f32	s0, s0, s12
 8022e96:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8022f84 <__ieee754_asinf+0x1c4>
 8022e9a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8022e9e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8022f50 <__ieee754_asinf+0x190>
 8022ea2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8022ea6:	2d00      	cmp	r5, #0
 8022ea8:	bfd8      	it	le
 8022eaa:	eeb1 0a40 	vnegle.f32	s0, s0
 8022eae:	e79b      	b.n	8022de8 <__ieee754_asinf+0x28>
 8022eb0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8022eb4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8022f5c <__ieee754_asinf+0x19c>
 8022eb8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8022f58 <__ieee754_asinf+0x198>
 8022ebc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8022f70 <__ieee754_asinf+0x1b0>
 8022ec0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8022ec4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8022f64 <__ieee754_asinf+0x1a4>
 8022ec8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022ecc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8022f68 <__ieee754_asinf+0x1a8>
 8022ed0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022ed4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8022f6c <__ieee754_asinf+0x1ac>
 8022ed8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8022edc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8022f60 <__ieee754_asinf+0x1a0>
 8022ee0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8022ee4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8022f74 <__ieee754_asinf+0x1b4>
 8022ee8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8022eec:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8022f78 <__ieee754_asinf+0x1b8>
 8022ef0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8022ef4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8022f7c <__ieee754_asinf+0x1bc>
 8022ef8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8022efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8022f00:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8022f04:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8022f08:	eea0 0a27 	vfma.f32	s0, s0, s15
 8022f0c:	e76c      	b.n	8022de8 <__ieee754_asinf+0x28>
 8022f0e:	ee10 3a10 	vmov	r3, s0
 8022f12:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8022f16:	f023 030f 	bic.w	r3, r3, #15
 8022f1a:	ee07 3a10 	vmov	s14, r3
 8022f1e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8022f22:	ee70 5a00 	vadd.f32	s11, s0, s0
 8022f26:	ee30 0a07 	vadd.f32	s0, s0, s14
 8022f2a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8022f4c <__ieee754_asinf+0x18c>
 8022f2e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8022f32:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8022f88 <__ieee754_asinf+0x1c8>
 8022f36:	eee5 7a66 	vfms.f32	s15, s10, s13
 8022f3a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8022f3e:	eeb0 6a40 	vmov.f32	s12, s0
 8022f42:	eea7 6a66 	vfms.f32	s12, s14, s13
 8022f46:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8022f4a:	e7aa      	b.n	8022ea2 <__ieee754_asinf+0xe2>
 8022f4c:	b33bbd2e 	.word	0xb33bbd2e
 8022f50:	3fc90fdb 	.word	0x3fc90fdb
 8022f54:	7149f2ca 	.word	0x7149f2ca
 8022f58:	3a4f7f04 	.word	0x3a4f7f04
 8022f5c:	3811ef08 	.word	0x3811ef08
 8022f60:	3e2aaaab 	.word	0x3e2aaaab
 8022f64:	bd241146 	.word	0xbd241146
 8022f68:	3e4e0aa8 	.word	0x3e4e0aa8
 8022f6c:	bea6b090 	.word	0xbea6b090
 8022f70:	3d9dc62e 	.word	0x3d9dc62e
 8022f74:	bf303361 	.word	0xbf303361
 8022f78:	4001572d 	.word	0x4001572d
 8022f7c:	c019d139 	.word	0xc019d139
 8022f80:	3f799999 	.word	0x3f799999
 8022f84:	333bbd2e 	.word	0x333bbd2e
 8022f88:	3f490fdb 	.word	0x3f490fdb

08022f8c <__ieee754_atan2f>:
 8022f8c:	ee10 2a90 	vmov	r2, s1
 8022f90:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8022f94:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022f98:	b510      	push	{r4, lr}
 8022f9a:	eef0 7a40 	vmov.f32	s15, s0
 8022f9e:	d806      	bhi.n	8022fae <__ieee754_atan2f+0x22>
 8022fa0:	ee10 0a10 	vmov	r0, s0
 8022fa4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8022fa8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8022fac:	d904      	bls.n	8022fb8 <__ieee754_atan2f+0x2c>
 8022fae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8022fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8022fb6:	bd10      	pop	{r4, pc}
 8022fb8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8022fbc:	d103      	bne.n	8022fc6 <__ieee754_atan2f+0x3a>
 8022fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fc2:	f000 bc83 	b.w	80238cc <atanf>
 8022fc6:	1794      	asrs	r4, r2, #30
 8022fc8:	f004 0402 	and.w	r4, r4, #2
 8022fcc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8022fd0:	b943      	cbnz	r3, 8022fe4 <__ieee754_atan2f+0x58>
 8022fd2:	2c02      	cmp	r4, #2
 8022fd4:	d05e      	beq.n	8023094 <__ieee754_atan2f+0x108>
 8022fd6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80230a8 <__ieee754_atan2f+0x11c>
 8022fda:	2c03      	cmp	r4, #3
 8022fdc:	bf08      	it	eq
 8022fde:	eef0 7a47 	vmoveq.f32	s15, s14
 8022fe2:	e7e6      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8022fe4:	b941      	cbnz	r1, 8022ff8 <__ieee754_atan2f+0x6c>
 8022fe6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80230ac <__ieee754_atan2f+0x120>
 8022fea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80230b0 <__ieee754_atan2f+0x124>
 8022fee:	2800      	cmp	r0, #0
 8022ff0:	bfb8      	it	lt
 8022ff2:	eef0 7a47 	vmovlt.f32	s15, s14
 8022ff6:	e7dc      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8022ff8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8022ffc:	d110      	bne.n	8023020 <__ieee754_atan2f+0x94>
 8022ffe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8023002:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8023006:	d107      	bne.n	8023018 <__ieee754_atan2f+0x8c>
 8023008:	2c02      	cmp	r4, #2
 802300a:	d846      	bhi.n	802309a <__ieee754_atan2f+0x10e>
 802300c:	4b29      	ldr	r3, [pc, #164]	@ (80230b4 <__ieee754_atan2f+0x128>)
 802300e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023012:	edd3 7a00 	vldr	s15, [r3]
 8023016:	e7cc      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8023018:	2c02      	cmp	r4, #2
 802301a:	d841      	bhi.n	80230a0 <__ieee754_atan2f+0x114>
 802301c:	4b26      	ldr	r3, [pc, #152]	@ (80230b8 <__ieee754_atan2f+0x12c>)
 802301e:	e7f6      	b.n	802300e <__ieee754_atan2f+0x82>
 8023020:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8023024:	d0df      	beq.n	8022fe6 <__ieee754_atan2f+0x5a>
 8023026:	1a5b      	subs	r3, r3, r1
 8023028:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802302c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8023030:	da1a      	bge.n	8023068 <__ieee754_atan2f+0xdc>
 8023032:	2a00      	cmp	r2, #0
 8023034:	da01      	bge.n	802303a <__ieee754_atan2f+0xae>
 8023036:	313c      	adds	r1, #60	@ 0x3c
 8023038:	db19      	blt.n	802306e <__ieee754_atan2f+0xe2>
 802303a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802303e:	f7fe ff5b 	bl	8021ef8 <fabsf>
 8023042:	f000 fc43 	bl	80238cc <atanf>
 8023046:	eef0 7a40 	vmov.f32	s15, s0
 802304a:	2c01      	cmp	r4, #1
 802304c:	d012      	beq.n	8023074 <__ieee754_atan2f+0xe8>
 802304e:	2c02      	cmp	r4, #2
 8023050:	d017      	beq.n	8023082 <__ieee754_atan2f+0xf6>
 8023052:	2c00      	cmp	r4, #0
 8023054:	d0ad      	beq.n	8022fb2 <__ieee754_atan2f+0x26>
 8023056:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80230bc <__ieee754_atan2f+0x130>
 802305a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802305e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80230c0 <__ieee754_atan2f+0x134>
 8023062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023066:	e7a4      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8023068:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80230ac <__ieee754_atan2f+0x120>
 802306c:	e7ed      	b.n	802304a <__ieee754_atan2f+0xbe>
 802306e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80230c4 <__ieee754_atan2f+0x138>
 8023072:	e7ea      	b.n	802304a <__ieee754_atan2f+0xbe>
 8023074:	ee17 3a90 	vmov	r3, s15
 8023078:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802307c:	ee07 3a90 	vmov	s15, r3
 8023080:	e797      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8023082:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80230bc <__ieee754_atan2f+0x130>
 8023086:	ee77 7a87 	vadd.f32	s15, s15, s14
 802308a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80230c0 <__ieee754_atan2f+0x134>
 802308e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023092:	e78e      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 8023094:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80230c0 <__ieee754_atan2f+0x134>
 8023098:	e78b      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 802309a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80230c8 <__ieee754_atan2f+0x13c>
 802309e:	e788      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 80230a0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80230c4 <__ieee754_atan2f+0x138>
 80230a4:	e785      	b.n	8022fb2 <__ieee754_atan2f+0x26>
 80230a6:	bf00      	nop
 80230a8:	c0490fdb 	.word	0xc0490fdb
 80230ac:	3fc90fdb 	.word	0x3fc90fdb
 80230b0:	bfc90fdb 	.word	0xbfc90fdb
 80230b4:	08027b94 	.word	0x08027b94
 80230b8:	08027b88 	.word	0x08027b88
 80230bc:	33bbbd2e 	.word	0x33bbbd2e
 80230c0:	40490fdb 	.word	0x40490fdb
 80230c4:	00000000 	.word	0x00000000
 80230c8:	3f490fdb 	.word	0x3f490fdb

080230cc <__ieee754_powf>:
 80230cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230d0:	ee10 4a90 	vmov	r4, s1
 80230d4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80230d8:	ed2d 8b02 	vpush	{d8}
 80230dc:	ee10 6a10 	vmov	r6, s0
 80230e0:	eeb0 8a40 	vmov.f32	s16, s0
 80230e4:	eef0 8a60 	vmov.f32	s17, s1
 80230e8:	d10c      	bne.n	8023104 <__ieee754_powf+0x38>
 80230ea:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80230ee:	0076      	lsls	r6, r6, #1
 80230f0:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80230f4:	f240 829c 	bls.w	8023630 <__ieee754_powf+0x564>
 80230f8:	ee38 0a28 	vadd.f32	s0, s16, s17
 80230fc:	ecbd 8b02 	vpop	{d8}
 8023100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023104:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8023108:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 802310c:	d802      	bhi.n	8023114 <__ieee754_powf+0x48>
 802310e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8023112:	d908      	bls.n	8023126 <__ieee754_powf+0x5a>
 8023114:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8023118:	d1ee      	bne.n	80230f8 <__ieee754_powf+0x2c>
 802311a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 802311e:	0064      	lsls	r4, r4, #1
 8023120:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8023124:	e7e6      	b.n	80230f4 <__ieee754_powf+0x28>
 8023126:	2e00      	cmp	r6, #0
 8023128:	da1e      	bge.n	8023168 <__ieee754_powf+0x9c>
 802312a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 802312e:	d22b      	bcs.n	8023188 <__ieee754_powf+0xbc>
 8023130:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8023134:	d332      	bcc.n	802319c <__ieee754_powf+0xd0>
 8023136:	ea4f 53e9 	mov.w	r3, r9, asr #23
 802313a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 802313e:	fa49 f503 	asr.w	r5, r9, r3
 8023142:	fa05 f303 	lsl.w	r3, r5, r3
 8023146:	454b      	cmp	r3, r9
 8023148:	d126      	bne.n	8023198 <__ieee754_powf+0xcc>
 802314a:	f005 0501 	and.w	r5, r5, #1
 802314e:	f1c5 0502 	rsb	r5, r5, #2
 8023152:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8023156:	d122      	bne.n	802319e <__ieee754_powf+0xd2>
 8023158:	2c00      	cmp	r4, #0
 802315a:	f280 826f 	bge.w	802363c <__ieee754_powf+0x570>
 802315e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8023162:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8023166:	e7c9      	b.n	80230fc <__ieee754_powf+0x30>
 8023168:	2500      	movs	r5, #0
 802316a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 802316e:	d1f0      	bne.n	8023152 <__ieee754_powf+0x86>
 8023170:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8023174:	f000 825c 	beq.w	8023630 <__ieee754_powf+0x564>
 8023178:	d908      	bls.n	802318c <__ieee754_powf+0xc0>
 802317a:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 80234dc <__ieee754_powf+0x410>
 802317e:	2c00      	cmp	r4, #0
 8023180:	bfa8      	it	ge
 8023182:	eeb0 0a68 	vmovge.f32	s0, s17
 8023186:	e7b9      	b.n	80230fc <__ieee754_powf+0x30>
 8023188:	2502      	movs	r5, #2
 802318a:	e7ee      	b.n	802316a <__ieee754_powf+0x9e>
 802318c:	2c00      	cmp	r4, #0
 802318e:	f280 8252 	bge.w	8023636 <__ieee754_powf+0x56a>
 8023192:	eeb1 0a68 	vneg.f32	s0, s17
 8023196:	e7b1      	b.n	80230fc <__ieee754_powf+0x30>
 8023198:	2500      	movs	r5, #0
 802319a:	e7da      	b.n	8023152 <__ieee754_powf+0x86>
 802319c:	2500      	movs	r5, #0
 802319e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80231a2:	d102      	bne.n	80231aa <__ieee754_powf+0xde>
 80231a4:	ee28 0a08 	vmul.f32	s0, s16, s16
 80231a8:	e7a8      	b.n	80230fc <__ieee754_powf+0x30>
 80231aa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80231ae:	d109      	bne.n	80231c4 <__ieee754_powf+0xf8>
 80231b0:	2e00      	cmp	r6, #0
 80231b2:	db07      	blt.n	80231c4 <__ieee754_powf+0xf8>
 80231b4:	eeb0 0a48 	vmov.f32	s0, s16
 80231b8:	ecbd 8b02 	vpop	{d8}
 80231bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231c0:	f7fe bffe 	b.w	80221c0 <__ieee754_sqrtf>
 80231c4:	eeb0 0a48 	vmov.f32	s0, s16
 80231c8:	f7fe fe96 	bl	8021ef8 <fabsf>
 80231cc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80231d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80231d4:	4647      	mov	r7, r8
 80231d6:	d002      	beq.n	80231de <__ieee754_powf+0x112>
 80231d8:	f1b8 0f00 	cmp.w	r8, #0
 80231dc:	d117      	bne.n	802320e <__ieee754_powf+0x142>
 80231de:	2c00      	cmp	r4, #0
 80231e0:	bfbc      	itt	lt
 80231e2:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80231e6:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80231ea:	2e00      	cmp	r6, #0
 80231ec:	da86      	bge.n	80230fc <__ieee754_powf+0x30>
 80231ee:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80231f2:	ea58 0805 	orrs.w	r8, r8, r5
 80231f6:	d104      	bne.n	8023202 <__ieee754_powf+0x136>
 80231f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80231fc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8023200:	e77c      	b.n	80230fc <__ieee754_powf+0x30>
 8023202:	2d01      	cmp	r5, #1
 8023204:	f47f af7a 	bne.w	80230fc <__ieee754_powf+0x30>
 8023208:	eeb1 0a40 	vneg.f32	s0, s0
 802320c:	e776      	b.n	80230fc <__ieee754_powf+0x30>
 802320e:	0ff0      	lsrs	r0, r6, #31
 8023210:	3801      	subs	r0, #1
 8023212:	ea55 0300 	orrs.w	r3, r5, r0
 8023216:	d104      	bne.n	8023222 <__ieee754_powf+0x156>
 8023218:	ee38 8a48 	vsub.f32	s16, s16, s16
 802321c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8023220:	e76c      	b.n	80230fc <__ieee754_powf+0x30>
 8023222:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8023226:	d973      	bls.n	8023310 <__ieee754_powf+0x244>
 8023228:	4bad      	ldr	r3, [pc, #692]	@ (80234e0 <__ieee754_powf+0x414>)
 802322a:	4598      	cmp	r8, r3
 802322c:	d808      	bhi.n	8023240 <__ieee754_powf+0x174>
 802322e:	2c00      	cmp	r4, #0
 8023230:	da0b      	bge.n	802324a <__ieee754_powf+0x17e>
 8023232:	2000      	movs	r0, #0
 8023234:	ecbd 8b02 	vpop	{d8}
 8023238:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802323c:	f000 bca0 	b.w	8023b80 <__math_oflowf>
 8023240:	4ba8      	ldr	r3, [pc, #672]	@ (80234e4 <__ieee754_powf+0x418>)
 8023242:	4598      	cmp	r8, r3
 8023244:	d908      	bls.n	8023258 <__ieee754_powf+0x18c>
 8023246:	2c00      	cmp	r4, #0
 8023248:	dcf3      	bgt.n	8023232 <__ieee754_powf+0x166>
 802324a:	2000      	movs	r0, #0
 802324c:	ecbd 8b02 	vpop	{d8}
 8023250:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023254:	f000 bc8e 	b.w	8023b74 <__math_uflowf>
 8023258:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802325c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8023260:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 80234e8 <__ieee754_powf+0x41c>
 8023264:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8023268:	eee0 6a67 	vfms.f32	s13, s0, s15
 802326c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8023270:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8023274:	ee20 7a00 	vmul.f32	s14, s0, s0
 8023278:	ee27 7a27 	vmul.f32	s14, s14, s15
 802327c:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 80234ec <__ieee754_powf+0x420>
 8023280:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8023284:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80234f0 <__ieee754_powf+0x424>
 8023288:	eee0 7a07 	vfma.f32	s15, s0, s14
 802328c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80234f4 <__ieee754_powf+0x428>
 8023290:	eef0 6a67 	vmov.f32	s13, s15
 8023294:	eee0 6a07 	vfma.f32	s13, s0, s14
 8023298:	ee16 3a90 	vmov	r3, s13
 802329c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80232a0:	f023 030f 	bic.w	r3, r3, #15
 80232a4:	ee06 3a90 	vmov	s13, r3
 80232a8:	eee0 6a47 	vfms.f32	s13, s0, s14
 80232ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80232b0:	3d01      	subs	r5, #1
 80232b2:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 80232b6:	4305      	orrs	r5, r0
 80232b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80232bc:	f024 040f 	bic.w	r4, r4, #15
 80232c0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80232c4:	bf18      	it	ne
 80232c6:	eeb0 8a47 	vmovne.f32	s16, s14
 80232ca:	ee07 4a10 	vmov	s14, r4
 80232ce:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80232d2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80232d6:	ee07 3a90 	vmov	s15, r3
 80232da:	eee7 0a27 	vfma.f32	s1, s14, s15
 80232de:	ee07 4a10 	vmov	s14, r4
 80232e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80232e6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80232ea:	ee17 1a10 	vmov	r1, s14
 80232ee:	2900      	cmp	r1, #0
 80232f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80232f4:	f340 80dd 	ble.w	80234b2 <__ieee754_powf+0x3e6>
 80232f8:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 80232fc:	f240 80ca 	bls.w	8023494 <__ieee754_powf+0x3c8>
 8023300:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8023304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023308:	bf4c      	ite	mi
 802330a:	2001      	movmi	r0, #1
 802330c:	2000      	movpl	r0, #0
 802330e:	e791      	b.n	8023234 <__ieee754_powf+0x168>
 8023310:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8023314:	bf01      	itttt	eq
 8023316:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 80234f8 <__ieee754_powf+0x42c>
 802331a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 802331e:	f06f 0317 	mvneq.w	r3, #23
 8023322:	ee17 7a90 	vmoveq	r7, s15
 8023326:	ea4f 52e7 	mov.w	r2, r7, asr #23
 802332a:	bf18      	it	ne
 802332c:	2300      	movne	r3, #0
 802332e:	3a7f      	subs	r2, #127	@ 0x7f
 8023330:	441a      	add	r2, r3
 8023332:	4b72      	ldr	r3, [pc, #456]	@ (80234fc <__ieee754_powf+0x430>)
 8023334:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8023338:	429f      	cmp	r7, r3
 802333a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 802333e:	dd06      	ble.n	802334e <__ieee754_powf+0x282>
 8023340:	4b6f      	ldr	r3, [pc, #444]	@ (8023500 <__ieee754_powf+0x434>)
 8023342:	429f      	cmp	r7, r3
 8023344:	f340 80a4 	ble.w	8023490 <__ieee754_powf+0x3c4>
 8023348:	3201      	adds	r2, #1
 802334a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 802334e:	2600      	movs	r6, #0
 8023350:	4b6c      	ldr	r3, [pc, #432]	@ (8023504 <__ieee754_powf+0x438>)
 8023352:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8023356:	ee07 1a10 	vmov	s14, r1
 802335a:	edd3 5a00 	vldr	s11, [r3]
 802335e:	4b6a      	ldr	r3, [pc, #424]	@ (8023508 <__ieee754_powf+0x43c>)
 8023360:	ee75 7a87 	vadd.f32	s15, s11, s14
 8023364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8023368:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 802336c:	1049      	asrs	r1, r1, #1
 802336e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8023372:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8023376:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 802337a:	ee37 6a65 	vsub.f32	s12, s14, s11
 802337e:	ee07 1a90 	vmov	s15, r1
 8023382:	ee26 5a24 	vmul.f32	s10, s12, s9
 8023386:	ee77 5ae5 	vsub.f32	s11, s15, s11
 802338a:	ee15 7a10 	vmov	r7, s10
 802338e:	401f      	ands	r7, r3
 8023390:	ee06 7a90 	vmov	s13, r7
 8023394:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8023398:	ee37 7a65 	vsub.f32	s14, s14, s11
 802339c:	ee65 7a05 	vmul.f32	s15, s10, s10
 80233a0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80233a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 802350c <__ieee754_powf+0x440>
 80233a8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8023510 <__ieee754_powf+0x444>
 80233ac:	eee7 5a87 	vfma.f32	s11, s15, s14
 80233b0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8023514 <__ieee754_powf+0x448>
 80233b4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80233b8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 80234e8 <__ieee754_powf+0x41c>
 80233bc:	eee7 5a27 	vfma.f32	s11, s14, s15
 80233c0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8023518 <__ieee754_powf+0x44c>
 80233c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80233c8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 802351c <__ieee754_powf+0x450>
 80233cc:	ee26 6a24 	vmul.f32	s12, s12, s9
 80233d0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80233d4:	ee35 7a26 	vadd.f32	s14, s10, s13
 80233d8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80233dc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80233e0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 80233e4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80233e8:	eef0 5a67 	vmov.f32	s11, s15
 80233ec:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80233f0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80233f4:	ee15 1a90 	vmov	r1, s11
 80233f8:	4019      	ands	r1, r3
 80233fa:	ee05 1a90 	vmov	s11, r1
 80233fe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8023402:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8023406:	ee77 7a67 	vsub.f32	s15, s14, s15
 802340a:	ee67 7a85 	vmul.f32	s15, s15, s10
 802340e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8023412:	eeb0 6a67 	vmov.f32	s12, s15
 8023416:	eea6 6aa5 	vfma.f32	s12, s13, s11
 802341a:	ee16 1a10 	vmov	r1, s12
 802341e:	4019      	ands	r1, r3
 8023420:	ee06 1a10 	vmov	s12, r1
 8023424:	eeb0 7a46 	vmov.f32	s14, s12
 8023428:	eea6 7ae5 	vfms.f32	s14, s13, s11
 802342c:	493c      	ldr	r1, [pc, #240]	@ (8023520 <__ieee754_powf+0x454>)
 802342e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8023432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023436:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8023524 <__ieee754_powf+0x458>
 802343a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8023528 <__ieee754_powf+0x45c>
 802343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8023442:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 802352c <__ieee754_powf+0x460>
 8023446:	eee6 7a07 	vfma.f32	s15, s12, s14
 802344a:	ed91 7a00 	vldr	s14, [r1]
 802344e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023452:	ee07 2a10 	vmov	s14, r2
 8023456:	eef0 6a67 	vmov.f32	s13, s15
 802345a:	4a35      	ldr	r2, [pc, #212]	@ (8023530 <__ieee754_powf+0x464>)
 802345c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8023460:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8023464:	ed92 5a00 	vldr	s10, [r2]
 8023468:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 802346c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8023470:	ee76 6a87 	vadd.f32	s13, s13, s14
 8023474:	ee16 2a90 	vmov	r2, s13
 8023478:	4013      	ands	r3, r2
 802347a:	ee06 3a90 	vmov	s13, r3
 802347e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8023482:	ee37 7a45 	vsub.f32	s14, s14, s10
 8023486:	eea6 7a65 	vfms.f32	s14, s12, s11
 802348a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802348e:	e70f      	b.n	80232b0 <__ieee754_powf+0x1e4>
 8023490:	2601      	movs	r6, #1
 8023492:	e75d      	b.n	8023350 <__ieee754_powf+0x284>
 8023494:	d152      	bne.n	802353c <__ieee754_powf+0x470>
 8023496:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8023534 <__ieee754_powf+0x468>
 802349a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802349e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80234a2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80234a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234aa:	f73f af29 	bgt.w	8023300 <__ieee754_powf+0x234>
 80234ae:	2386      	movs	r3, #134	@ 0x86
 80234b0:	e048      	b.n	8023544 <__ieee754_powf+0x478>
 80234b2:	4a21      	ldr	r2, [pc, #132]	@ (8023538 <__ieee754_powf+0x46c>)
 80234b4:	4293      	cmp	r3, r2
 80234b6:	d907      	bls.n	80234c8 <__ieee754_powf+0x3fc>
 80234b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80234bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234c0:	bf4c      	ite	mi
 80234c2:	2001      	movmi	r0, #1
 80234c4:	2000      	movpl	r0, #0
 80234c6:	e6c1      	b.n	802324c <__ieee754_powf+0x180>
 80234c8:	d138      	bne.n	802353c <__ieee754_powf+0x470>
 80234ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80234ce:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80234d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80234d6:	dbea      	blt.n	80234ae <__ieee754_powf+0x3e2>
 80234d8:	e7ee      	b.n	80234b8 <__ieee754_powf+0x3ec>
 80234da:	bf00      	nop
 80234dc:	00000000 	.word	0x00000000
 80234e0:	3f7ffff3 	.word	0x3f7ffff3
 80234e4:	3f800007 	.word	0x3f800007
 80234e8:	3eaaaaab 	.word	0x3eaaaaab
 80234ec:	3fb8aa3b 	.word	0x3fb8aa3b
 80234f0:	36eca570 	.word	0x36eca570
 80234f4:	3fb8aa00 	.word	0x3fb8aa00
 80234f8:	4b800000 	.word	0x4b800000
 80234fc:	001cc471 	.word	0x001cc471
 8023500:	005db3d6 	.word	0x005db3d6
 8023504:	08027bb0 	.word	0x08027bb0
 8023508:	fffff000 	.word	0xfffff000
 802350c:	3e6c3255 	.word	0x3e6c3255
 8023510:	3e53f142 	.word	0x3e53f142
 8023514:	3e8ba305 	.word	0x3e8ba305
 8023518:	3edb6db7 	.word	0x3edb6db7
 802351c:	3f19999a 	.word	0x3f19999a
 8023520:	08027ba0 	.word	0x08027ba0
 8023524:	3f76384f 	.word	0x3f76384f
 8023528:	3f763800 	.word	0x3f763800
 802352c:	369dc3a0 	.word	0x369dc3a0
 8023530:	08027ba8 	.word	0x08027ba8
 8023534:	3338aa3c 	.word	0x3338aa3c
 8023538:	43160000 	.word	0x43160000
 802353c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8023540:	d971      	bls.n	8023626 <__ieee754_powf+0x55a>
 8023542:	15db      	asrs	r3, r3, #23
 8023544:	3b7e      	subs	r3, #126	@ 0x7e
 8023546:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 802354a:	4118      	asrs	r0, r3
 802354c:	4408      	add	r0, r1
 802354e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8023552:	4a3c      	ldr	r2, [pc, #240]	@ (8023644 <__ieee754_powf+0x578>)
 8023554:	3b7f      	subs	r3, #127	@ 0x7f
 8023556:	411a      	asrs	r2, r3
 8023558:	4002      	ands	r2, r0
 802355a:	ee07 2a10 	vmov	s14, r2
 802355e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8023562:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8023566:	f1c3 0317 	rsb	r3, r3, #23
 802356a:	4118      	asrs	r0, r3
 802356c:	2900      	cmp	r1, #0
 802356e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023572:	bfb8      	it	lt
 8023574:	4240      	neglt	r0, r0
 8023576:	ee37 7aa0 	vadd.f32	s14, s15, s1
 802357a:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8023648 <__ieee754_powf+0x57c>
 802357e:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 802364c <__ieee754_powf+0x580>
 8023582:	ee17 3a10 	vmov	r3, s14
 8023586:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 802358a:	f023 030f 	bic.w	r3, r3, #15
 802358e:	ee07 3a10 	vmov	s14, r3
 8023592:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023596:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 802359a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 802359e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8023650 <__ieee754_powf+0x584>
 80235a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80235a6:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80235aa:	eef0 6a67 	vmov.f32	s13, s15
 80235ae:	eee7 6a06 	vfma.f32	s13, s14, s12
 80235b2:	eef0 5a66 	vmov.f32	s11, s13
 80235b6:	eee7 5a46 	vfms.f32	s11, s14, s12
 80235ba:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80235be:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80235c2:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 8023654 <__ieee754_powf+0x588>
 80235c6:	eddf 5a24 	vldr	s11, [pc, #144]	@ 8023658 <__ieee754_powf+0x58c>
 80235ca:	eea7 6a25 	vfma.f32	s12, s14, s11
 80235ce:	eddf 5a23 	vldr	s11, [pc, #140]	@ 802365c <__ieee754_powf+0x590>
 80235d2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80235d6:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8023660 <__ieee754_powf+0x594>
 80235da:	eea5 6a87 	vfma.f32	s12, s11, s14
 80235de:	eddf 5a21 	vldr	s11, [pc, #132]	@ 8023664 <__ieee754_powf+0x598>
 80235e2:	eee6 5a07 	vfma.f32	s11, s12, s14
 80235e6:	eeb0 6a66 	vmov.f32	s12, s13
 80235ea:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80235ee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80235f2:	ee66 5a86 	vmul.f32	s11, s13, s12
 80235f6:	ee36 6a47 	vsub.f32	s12, s12, s14
 80235fa:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80235fe:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8023602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8023606:	ee77 7ae6 	vsub.f32	s15, s15, s13
 802360a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802360e:	ee10 3a10 	vmov	r3, s0
 8023612:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8023616:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 802361a:	da06      	bge.n	802362a <__ieee754_powf+0x55e>
 802361c:	f000 fa2a 	bl	8023a74 <scalbnf>
 8023620:	ee20 0a08 	vmul.f32	s0, s0, s16
 8023624:	e56a      	b.n	80230fc <__ieee754_powf+0x30>
 8023626:	2000      	movs	r0, #0
 8023628:	e7a5      	b.n	8023576 <__ieee754_powf+0x4aa>
 802362a:	ee00 3a10 	vmov	s0, r3
 802362e:	e7f7      	b.n	8023620 <__ieee754_powf+0x554>
 8023630:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023634:	e562      	b.n	80230fc <__ieee754_powf+0x30>
 8023636:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8023668 <__ieee754_powf+0x59c>
 802363a:	e55f      	b.n	80230fc <__ieee754_powf+0x30>
 802363c:	eeb0 0a48 	vmov.f32	s0, s16
 8023640:	e55c      	b.n	80230fc <__ieee754_powf+0x30>
 8023642:	bf00      	nop
 8023644:	ff800000 	.word	0xff800000
 8023648:	3f317218 	.word	0x3f317218
 802364c:	3f317200 	.word	0x3f317200
 8023650:	35bfbe8c 	.word	0x35bfbe8c
 8023654:	b5ddea0e 	.word	0xb5ddea0e
 8023658:	3331bb4c 	.word	0x3331bb4c
 802365c:	388ab355 	.word	0x388ab355
 8023660:	bb360b61 	.word	0xbb360b61
 8023664:	3e2aaaab 	.word	0x3e2aaaab
 8023668:	00000000 	.word	0x00000000

0802366c <__ieee754_rem_pio2f>:
 802366c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802366e:	ee10 6a10 	vmov	r6, s0
 8023672:	4b88      	ldr	r3, [pc, #544]	@ (8023894 <__ieee754_rem_pio2f+0x228>)
 8023674:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8023678:	429d      	cmp	r5, r3
 802367a:	b087      	sub	sp, #28
 802367c:	4604      	mov	r4, r0
 802367e:	d805      	bhi.n	802368c <__ieee754_rem_pio2f+0x20>
 8023680:	2300      	movs	r3, #0
 8023682:	ed80 0a00 	vstr	s0, [r0]
 8023686:	6043      	str	r3, [r0, #4]
 8023688:	2000      	movs	r0, #0
 802368a:	e022      	b.n	80236d2 <__ieee754_rem_pio2f+0x66>
 802368c:	4b82      	ldr	r3, [pc, #520]	@ (8023898 <__ieee754_rem_pio2f+0x22c>)
 802368e:	429d      	cmp	r5, r3
 8023690:	d83a      	bhi.n	8023708 <__ieee754_rem_pio2f+0x9c>
 8023692:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8023696:	2e00      	cmp	r6, #0
 8023698:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 802389c <__ieee754_rem_pio2f+0x230>
 802369c:	4a80      	ldr	r2, [pc, #512]	@ (80238a0 <__ieee754_rem_pio2f+0x234>)
 802369e:	f023 030f 	bic.w	r3, r3, #15
 80236a2:	dd18      	ble.n	80236d6 <__ieee754_rem_pio2f+0x6a>
 80236a4:	4293      	cmp	r3, r2
 80236a6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80236aa:	bf09      	itett	eq
 80236ac:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80238a4 <__ieee754_rem_pio2f+0x238>
 80236b0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80238a8 <__ieee754_rem_pio2f+0x23c>
 80236b4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80238ac <__ieee754_rem_pio2f+0x240>
 80236b8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80236bc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80236c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80236c4:	ed80 7a00 	vstr	s14, [r0]
 80236c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80236cc:	edc0 7a01 	vstr	s15, [r0, #4]
 80236d0:	2001      	movs	r0, #1
 80236d2:	b007      	add	sp, #28
 80236d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80236d6:	4293      	cmp	r3, r2
 80236d8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80236dc:	bf09      	itett	eq
 80236de:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80238a4 <__ieee754_rem_pio2f+0x238>
 80236e2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80238a8 <__ieee754_rem_pio2f+0x23c>
 80236e6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80238ac <__ieee754_rem_pio2f+0x240>
 80236ea:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80236ee:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80236f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80236f6:	ed80 7a00 	vstr	s14, [r0]
 80236fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80236fe:	edc0 7a01 	vstr	s15, [r0, #4]
 8023702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8023706:	e7e4      	b.n	80236d2 <__ieee754_rem_pio2f+0x66>
 8023708:	4b69      	ldr	r3, [pc, #420]	@ (80238b0 <__ieee754_rem_pio2f+0x244>)
 802370a:	429d      	cmp	r5, r3
 802370c:	d873      	bhi.n	80237f6 <__ieee754_rem_pio2f+0x18a>
 802370e:	f7fe fbf3 	bl	8021ef8 <fabsf>
 8023712:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80238b4 <__ieee754_rem_pio2f+0x248>
 8023716:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 802371a:	eee0 7a07 	vfma.f32	s15, s0, s14
 802371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8023726:	ee17 0a90 	vmov	r0, s15
 802372a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 802389c <__ieee754_rem_pio2f+0x230>
 802372e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8023732:	281f      	cmp	r0, #31
 8023734:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80238a8 <__ieee754_rem_pio2f+0x23c>
 8023738:	ee67 7a27 	vmul.f32	s15, s14, s15
 802373c:	eeb1 6a47 	vneg.f32	s12, s14
 8023740:	ee70 6a67 	vsub.f32	s13, s0, s15
 8023744:	ee16 1a90 	vmov	r1, s13
 8023748:	dc09      	bgt.n	802375e <__ieee754_rem_pio2f+0xf2>
 802374a:	4a5b      	ldr	r2, [pc, #364]	@ (80238b8 <__ieee754_rem_pio2f+0x24c>)
 802374c:	1e47      	subs	r7, r0, #1
 802374e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8023752:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8023756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802375a:	4293      	cmp	r3, r2
 802375c:	d107      	bne.n	802376e <__ieee754_rem_pio2f+0x102>
 802375e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8023762:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8023766:	2a08      	cmp	r2, #8
 8023768:	ea4f 53e5 	mov.w	r3, r5, asr #23
 802376c:	dc14      	bgt.n	8023798 <__ieee754_rem_pio2f+0x12c>
 802376e:	6021      	str	r1, [r4, #0]
 8023770:	ed94 7a00 	vldr	s14, [r4]
 8023774:	ee30 0a47 	vsub.f32	s0, s0, s14
 8023778:	2e00      	cmp	r6, #0
 802377a:	ee30 0a67 	vsub.f32	s0, s0, s15
 802377e:	ed84 0a01 	vstr	s0, [r4, #4]
 8023782:	daa6      	bge.n	80236d2 <__ieee754_rem_pio2f+0x66>
 8023784:	eeb1 7a47 	vneg.f32	s14, s14
 8023788:	eeb1 0a40 	vneg.f32	s0, s0
 802378c:	ed84 7a00 	vstr	s14, [r4]
 8023790:	ed84 0a01 	vstr	s0, [r4, #4]
 8023794:	4240      	negs	r0, r0
 8023796:	e79c      	b.n	80236d2 <__ieee754_rem_pio2f+0x66>
 8023798:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80238a4 <__ieee754_rem_pio2f+0x238>
 802379c:	eef0 6a40 	vmov.f32	s13, s0
 80237a0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80237a4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80237a8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80237ac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80238ac <__ieee754_rem_pio2f+0x240>
 80237b0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80237b4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80237b8:	ee15 2a90 	vmov	r2, s11
 80237bc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80237c0:	1a5b      	subs	r3, r3, r1
 80237c2:	2b19      	cmp	r3, #25
 80237c4:	dc04      	bgt.n	80237d0 <__ieee754_rem_pio2f+0x164>
 80237c6:	edc4 5a00 	vstr	s11, [r4]
 80237ca:	eeb0 0a66 	vmov.f32	s0, s13
 80237ce:	e7cf      	b.n	8023770 <__ieee754_rem_pio2f+0x104>
 80237d0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80238bc <__ieee754_rem_pio2f+0x250>
 80237d4:	eeb0 0a66 	vmov.f32	s0, s13
 80237d8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80237dc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80237e0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80238c0 <__ieee754_rem_pio2f+0x254>
 80237e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80237e8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80237ec:	ee30 7a67 	vsub.f32	s14, s0, s15
 80237f0:	ed84 7a00 	vstr	s14, [r4]
 80237f4:	e7bc      	b.n	8023770 <__ieee754_rem_pio2f+0x104>
 80237f6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80237fa:	d306      	bcc.n	802380a <__ieee754_rem_pio2f+0x19e>
 80237fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8023800:	edc0 7a01 	vstr	s15, [r0, #4]
 8023804:	edc0 7a00 	vstr	s15, [r0]
 8023808:	e73e      	b.n	8023688 <__ieee754_rem_pio2f+0x1c>
 802380a:	15ea      	asrs	r2, r5, #23
 802380c:	3a86      	subs	r2, #134	@ 0x86
 802380e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8023812:	ee07 3a90 	vmov	s15, r3
 8023816:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 802381a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80238c4 <__ieee754_rem_pio2f+0x258>
 802381e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023826:	ed8d 7a03 	vstr	s14, [sp, #12]
 802382a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802382e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8023832:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8023836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802383a:	ed8d 7a04 	vstr	s14, [sp, #16]
 802383e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8023842:	eef5 7a40 	vcmp.f32	s15, #0.0
 8023846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802384a:	edcd 7a05 	vstr	s15, [sp, #20]
 802384e:	d11e      	bne.n	802388e <__ieee754_rem_pio2f+0x222>
 8023850:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8023854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023858:	bf0c      	ite	eq
 802385a:	2301      	moveq	r3, #1
 802385c:	2302      	movne	r3, #2
 802385e:	491a      	ldr	r1, [pc, #104]	@ (80238c8 <__ieee754_rem_pio2f+0x25c>)
 8023860:	9101      	str	r1, [sp, #4]
 8023862:	2102      	movs	r1, #2
 8023864:	9100      	str	r1, [sp, #0]
 8023866:	a803      	add	r0, sp, #12
 8023868:	4621      	mov	r1, r4
 802386a:	f000 f98f 	bl	8023b8c <__kernel_rem_pio2f>
 802386e:	2e00      	cmp	r6, #0
 8023870:	f6bf af2f 	bge.w	80236d2 <__ieee754_rem_pio2f+0x66>
 8023874:	edd4 7a00 	vldr	s15, [r4]
 8023878:	eef1 7a67 	vneg.f32	s15, s15
 802387c:	edc4 7a00 	vstr	s15, [r4]
 8023880:	edd4 7a01 	vldr	s15, [r4, #4]
 8023884:	eef1 7a67 	vneg.f32	s15, s15
 8023888:	edc4 7a01 	vstr	s15, [r4, #4]
 802388c:	e782      	b.n	8023794 <__ieee754_rem_pio2f+0x128>
 802388e:	2303      	movs	r3, #3
 8023890:	e7e5      	b.n	802385e <__ieee754_rem_pio2f+0x1f2>
 8023892:	bf00      	nop
 8023894:	3f490fd8 	.word	0x3f490fd8
 8023898:	4016cbe3 	.word	0x4016cbe3
 802389c:	3fc90f80 	.word	0x3fc90f80
 80238a0:	3fc90fd0 	.word	0x3fc90fd0
 80238a4:	37354400 	.word	0x37354400
 80238a8:	37354443 	.word	0x37354443
 80238ac:	2e85a308 	.word	0x2e85a308
 80238b0:	43490f80 	.word	0x43490f80
 80238b4:	3f22f984 	.word	0x3f22f984
 80238b8:	08027bb8 	.word	0x08027bb8
 80238bc:	2e85a300 	.word	0x2e85a300
 80238c0:	248d3132 	.word	0x248d3132
 80238c4:	43800000 	.word	0x43800000
 80238c8:	08027c38 	.word	0x08027c38

080238cc <atanf>:
 80238cc:	b538      	push	{r3, r4, r5, lr}
 80238ce:	ee10 5a10 	vmov	r5, s0
 80238d2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80238d6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80238da:	eef0 7a40 	vmov.f32	s15, s0
 80238de:	d310      	bcc.n	8023902 <atanf+0x36>
 80238e0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80238e4:	d904      	bls.n	80238f0 <atanf+0x24>
 80238e6:	ee70 7a00 	vadd.f32	s15, s0, s0
 80238ea:	eeb0 0a67 	vmov.f32	s0, s15
 80238ee:	bd38      	pop	{r3, r4, r5, pc}
 80238f0:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8023a28 <atanf+0x15c>
 80238f4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8023a2c <atanf+0x160>
 80238f8:	2d00      	cmp	r5, #0
 80238fa:	bfc8      	it	gt
 80238fc:	eef0 7a47 	vmovgt.f32	s15, s14
 8023900:	e7f3      	b.n	80238ea <atanf+0x1e>
 8023902:	4b4b      	ldr	r3, [pc, #300]	@ (8023a30 <atanf+0x164>)
 8023904:	429c      	cmp	r4, r3
 8023906:	d810      	bhi.n	802392a <atanf+0x5e>
 8023908:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802390c:	d20a      	bcs.n	8023924 <atanf+0x58>
 802390e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8023a34 <atanf+0x168>
 8023912:	ee30 7a07 	vadd.f32	s14, s0, s14
 8023916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 802391a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023922:	dce2      	bgt.n	80238ea <atanf+0x1e>
 8023924:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8023928:	e013      	b.n	8023952 <atanf+0x86>
 802392a:	f7fe fae5 	bl	8021ef8 <fabsf>
 802392e:	4b42      	ldr	r3, [pc, #264]	@ (8023a38 <atanf+0x16c>)
 8023930:	429c      	cmp	r4, r3
 8023932:	d84f      	bhi.n	80239d4 <atanf+0x108>
 8023934:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8023938:	429c      	cmp	r4, r3
 802393a:	d841      	bhi.n	80239c0 <atanf+0xf4>
 802393c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8023940:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8023944:	eea0 7a27 	vfma.f32	s14, s0, s15
 8023948:	2300      	movs	r3, #0
 802394a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802394e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023952:	1c5a      	adds	r2, r3, #1
 8023954:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8023958:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8023a3c <atanf+0x170>
 802395c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8023a40 <atanf+0x174>
 8023960:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8023a44 <atanf+0x178>
 8023964:	ee66 6a06 	vmul.f32	s13, s12, s12
 8023968:	eee6 5a87 	vfma.f32	s11, s13, s14
 802396c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8023a48 <atanf+0x17c>
 8023970:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8023974:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8023a4c <atanf+0x180>
 8023978:	eee7 5a26 	vfma.f32	s11, s14, s13
 802397c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8023a50 <atanf+0x184>
 8023980:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8023984:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8023a54 <atanf+0x188>
 8023988:	eee7 5a26 	vfma.f32	s11, s14, s13
 802398c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8023a58 <atanf+0x18c>
 8023990:	eea6 5a87 	vfma.f32	s10, s13, s14
 8023994:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8023a5c <atanf+0x190>
 8023998:	eea5 7a26 	vfma.f32	s14, s10, s13
 802399c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8023a60 <atanf+0x194>
 80239a0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80239a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8023a64 <atanf+0x198>
 80239a8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80239ac:	ee27 7a26 	vmul.f32	s14, s14, s13
 80239b0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80239b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80239b8:	d121      	bne.n	80239fe <atanf+0x132>
 80239ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80239be:	e794      	b.n	80238ea <atanf+0x1e>
 80239c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80239c4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80239c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80239cc:	2301      	movs	r3, #1
 80239ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80239d2:	e7be      	b.n	8023952 <atanf+0x86>
 80239d4:	4b24      	ldr	r3, [pc, #144]	@ (8023a68 <atanf+0x19c>)
 80239d6:	429c      	cmp	r4, r3
 80239d8:	d80b      	bhi.n	80239f2 <atanf+0x126>
 80239da:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80239de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80239e2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80239e6:	2302      	movs	r3, #2
 80239e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80239ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80239f0:	e7af      	b.n	8023952 <atanf+0x86>
 80239f2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80239f6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80239fa:	2303      	movs	r3, #3
 80239fc:	e7a9      	b.n	8023952 <atanf+0x86>
 80239fe:	4a1b      	ldr	r2, [pc, #108]	@ (8023a6c <atanf+0x1a0>)
 8023a00:	491b      	ldr	r1, [pc, #108]	@ (8023a70 <atanf+0x1a4>)
 8023a02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023a06:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8023a0a:	edd3 6a00 	vldr	s13, [r3]
 8023a0e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8023a12:	2d00      	cmp	r5, #0
 8023a14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8023a18:	edd2 7a00 	vldr	s15, [r2]
 8023a1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023a20:	bfb8      	it	lt
 8023a22:	eef1 7a67 	vneglt.f32	s15, s15
 8023a26:	e760      	b.n	80238ea <atanf+0x1e>
 8023a28:	bfc90fdb 	.word	0xbfc90fdb
 8023a2c:	3fc90fdb 	.word	0x3fc90fdb
 8023a30:	3edfffff 	.word	0x3edfffff
 8023a34:	7149f2ca 	.word	0x7149f2ca
 8023a38:	3f97ffff 	.word	0x3f97ffff
 8023a3c:	3c8569d7 	.word	0x3c8569d7
 8023a40:	3d4bda59 	.word	0x3d4bda59
 8023a44:	bd6ef16b 	.word	0xbd6ef16b
 8023a48:	3d886b35 	.word	0x3d886b35
 8023a4c:	3dba2e6e 	.word	0x3dba2e6e
 8023a50:	3e124925 	.word	0x3e124925
 8023a54:	3eaaaaab 	.word	0x3eaaaaab
 8023a58:	bd15a221 	.word	0xbd15a221
 8023a5c:	bd9d8795 	.word	0xbd9d8795
 8023a60:	bde38e38 	.word	0xbde38e38
 8023a64:	be4ccccd 	.word	0xbe4ccccd
 8023a68:	401bffff 	.word	0x401bffff
 8023a6c:	08027f60 	.word	0x08027f60
 8023a70:	08027f50 	.word	0x08027f50

08023a74 <scalbnf>:
 8023a74:	ee10 3a10 	vmov	r3, s0
 8023a78:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8023a7c:	d02b      	beq.n	8023ad6 <scalbnf+0x62>
 8023a7e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8023a82:	d302      	bcc.n	8023a8a <scalbnf+0x16>
 8023a84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8023a88:	4770      	bx	lr
 8023a8a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8023a8e:	d123      	bne.n	8023ad8 <scalbnf+0x64>
 8023a90:	4b24      	ldr	r3, [pc, #144]	@ (8023b24 <scalbnf+0xb0>)
 8023a92:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8023b28 <scalbnf+0xb4>
 8023a96:	4298      	cmp	r0, r3
 8023a98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8023a9c:	db17      	blt.n	8023ace <scalbnf+0x5a>
 8023a9e:	ee10 3a10 	vmov	r3, s0
 8023aa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8023aa6:	3a19      	subs	r2, #25
 8023aa8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8023aac:	4288      	cmp	r0, r1
 8023aae:	dd15      	ble.n	8023adc <scalbnf+0x68>
 8023ab0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8023b2c <scalbnf+0xb8>
 8023ab4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8023b30 <scalbnf+0xbc>
 8023ab8:	ee10 3a10 	vmov	r3, s0
 8023abc:	eeb0 7a67 	vmov.f32	s14, s15
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	bfb8      	it	lt
 8023ac4:	eef0 7a66 	vmovlt.f32	s15, s13
 8023ac8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8023acc:	4770      	bx	lr
 8023ace:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8023b34 <scalbnf+0xc0>
 8023ad2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023ad6:	4770      	bx	lr
 8023ad8:	0dd2      	lsrs	r2, r2, #23
 8023ada:	e7e5      	b.n	8023aa8 <scalbnf+0x34>
 8023adc:	4410      	add	r0, r2
 8023ade:	28fe      	cmp	r0, #254	@ 0xfe
 8023ae0:	dce6      	bgt.n	8023ab0 <scalbnf+0x3c>
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	dd06      	ble.n	8023af4 <scalbnf+0x80>
 8023ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8023aea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023aee:	ee00 3a10 	vmov	s0, r3
 8023af2:	4770      	bx	lr
 8023af4:	f110 0f16 	cmn.w	r0, #22
 8023af8:	da09      	bge.n	8023b0e <scalbnf+0x9a>
 8023afa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8023b34 <scalbnf+0xc0>
 8023afe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8023b38 <scalbnf+0xc4>
 8023b02:	ee10 3a10 	vmov	r3, s0
 8023b06:	eeb0 7a67 	vmov.f32	s14, s15
 8023b0a:	2b00      	cmp	r3, #0
 8023b0c:	e7d9      	b.n	8023ac2 <scalbnf+0x4e>
 8023b0e:	3019      	adds	r0, #25
 8023b10:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8023b14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8023b18:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8023b3c <scalbnf+0xc8>
 8023b1c:	ee07 3a90 	vmov	s15, r3
 8023b20:	e7d7      	b.n	8023ad2 <scalbnf+0x5e>
 8023b22:	bf00      	nop
 8023b24:	ffff3cb0 	.word	0xffff3cb0
 8023b28:	4c000000 	.word	0x4c000000
 8023b2c:	7149f2ca 	.word	0x7149f2ca
 8023b30:	f149f2ca 	.word	0xf149f2ca
 8023b34:	0da24260 	.word	0x0da24260
 8023b38:	8da24260 	.word	0x8da24260
 8023b3c:	33000000 	.word	0x33000000

08023b40 <with_errnof>:
 8023b40:	b510      	push	{r4, lr}
 8023b42:	ed2d 8b02 	vpush	{d8}
 8023b46:	eeb0 8a40 	vmov.f32	s16, s0
 8023b4a:	4604      	mov	r4, r0
 8023b4c:	f001 fa42 	bl	8024fd4 <__errno>
 8023b50:	eeb0 0a48 	vmov.f32	s0, s16
 8023b54:	ecbd 8b02 	vpop	{d8}
 8023b58:	6004      	str	r4, [r0, #0]
 8023b5a:	bd10      	pop	{r4, pc}

08023b5c <xflowf>:
 8023b5c:	b130      	cbz	r0, 8023b6c <xflowf+0x10>
 8023b5e:	eef1 7a40 	vneg.f32	s15, s0
 8023b62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8023b66:	2022      	movs	r0, #34	@ 0x22
 8023b68:	f7ff bfea 	b.w	8023b40 <with_errnof>
 8023b6c:	eef0 7a40 	vmov.f32	s15, s0
 8023b70:	e7f7      	b.n	8023b62 <xflowf+0x6>
	...

08023b74 <__math_uflowf>:
 8023b74:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8023b7c <__math_uflowf+0x8>
 8023b78:	f7ff bff0 	b.w	8023b5c <xflowf>
 8023b7c:	10000000 	.word	0x10000000

08023b80 <__math_oflowf>:
 8023b80:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8023b88 <__math_oflowf+0x8>
 8023b84:	f7ff bfea 	b.w	8023b5c <xflowf>
 8023b88:	70000000 	.word	0x70000000

08023b8c <__kernel_rem_pio2f>:
 8023b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b90:	ed2d 8b04 	vpush	{d8-d9}
 8023b94:	b0d9      	sub	sp, #356	@ 0x164
 8023b96:	4690      	mov	r8, r2
 8023b98:	9001      	str	r0, [sp, #4]
 8023b9a:	4ab9      	ldr	r2, [pc, #740]	@ (8023e80 <__kernel_rem_pio2f+0x2f4>)
 8023b9c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8023b9e:	f118 0f04 	cmn.w	r8, #4
 8023ba2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8023ba6:	460f      	mov	r7, r1
 8023ba8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8023bac:	db27      	blt.n	8023bfe <__kernel_rem_pio2f+0x72>
 8023bae:	f1b8 0203 	subs.w	r2, r8, #3
 8023bb2:	bf48      	it	mi
 8023bb4:	f108 0204 	addmi.w	r2, r8, #4
 8023bb8:	10d2      	asrs	r2, r2, #3
 8023bba:	1c55      	adds	r5, r2, #1
 8023bbc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8023bbe:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023bc2:	00e8      	lsls	r0, r5, #3
 8023bc4:	eba2 060b 	sub.w	r6, r2, fp
 8023bc8:	9002      	str	r0, [sp, #8]
 8023bca:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8023bce:	eb0a 0c0b 	add.w	ip, sl, fp
 8023bd2:	ac1c      	add	r4, sp, #112	@ 0x70
 8023bd4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8023bd8:	2000      	movs	r0, #0
 8023bda:	4560      	cmp	r0, ip
 8023bdc:	dd11      	ble.n	8023c02 <__kernel_rem_pio2f+0x76>
 8023bde:	a91c      	add	r1, sp, #112	@ 0x70
 8023be0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8023be4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8023be8:	f04f 0c00 	mov.w	ip, #0
 8023bec:	45d4      	cmp	ip, sl
 8023bee:	dc27      	bgt.n	8023c40 <__kernel_rem_pio2f+0xb4>
 8023bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023bf4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023bf8:	4606      	mov	r6, r0
 8023bfa:	2400      	movs	r4, #0
 8023bfc:	e016      	b.n	8023c2c <__kernel_rem_pio2f+0xa0>
 8023bfe:	2200      	movs	r2, #0
 8023c00:	e7db      	b.n	8023bba <__kernel_rem_pio2f+0x2e>
 8023c02:	42c6      	cmn	r6, r0
 8023c04:	bf5d      	ittte	pl
 8023c06:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8023c0a:	ee07 1a90 	vmovpl	s15, r1
 8023c0e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8023c12:	eef0 7a47 	vmovmi.f32	s15, s14
 8023c16:	ece4 7a01 	vstmia	r4!, {s15}
 8023c1a:	3001      	adds	r0, #1
 8023c1c:	e7dd      	b.n	8023bda <__kernel_rem_pio2f+0x4e>
 8023c1e:	ecfe 6a01 	vldmia	lr!, {s13}
 8023c22:	ed96 7a00 	vldr	s14, [r6]
 8023c26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023c2a:	3401      	adds	r4, #1
 8023c2c:	455c      	cmp	r4, fp
 8023c2e:	f1a6 0604 	sub.w	r6, r6, #4
 8023c32:	ddf4      	ble.n	8023c1e <__kernel_rem_pio2f+0x92>
 8023c34:	ece9 7a01 	vstmia	r9!, {s15}
 8023c38:	f10c 0c01 	add.w	ip, ip, #1
 8023c3c:	3004      	adds	r0, #4
 8023c3e:	e7d5      	b.n	8023bec <__kernel_rem_pio2f+0x60>
 8023c40:	a908      	add	r1, sp, #32
 8023c42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8023c46:	9104      	str	r1, [sp, #16]
 8023c48:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8023c4a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8023e8c <__kernel_rem_pio2f+0x300>
 8023c4e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8023e88 <__kernel_rem_pio2f+0x2fc>
 8023c52:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8023c56:	9203      	str	r2, [sp, #12]
 8023c58:	4654      	mov	r4, sl
 8023c5a:	00a2      	lsls	r2, r4, #2
 8023c5c:	9205      	str	r2, [sp, #20]
 8023c5e:	aa58      	add	r2, sp, #352	@ 0x160
 8023c60:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8023c64:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8023c68:	a944      	add	r1, sp, #272	@ 0x110
 8023c6a:	aa08      	add	r2, sp, #32
 8023c6c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8023c70:	4694      	mov	ip, r2
 8023c72:	4626      	mov	r6, r4
 8023c74:	2e00      	cmp	r6, #0
 8023c76:	f1a0 0004 	sub.w	r0, r0, #4
 8023c7a:	dc4c      	bgt.n	8023d16 <__kernel_rem_pio2f+0x18a>
 8023c7c:	4628      	mov	r0, r5
 8023c7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023c82:	f7ff fef7 	bl	8023a74 <scalbnf>
 8023c86:	eeb0 8a40 	vmov.f32	s16, s0
 8023c8a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8023c8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8023c92:	f000 f9ed 	bl	8024070 <floorf>
 8023c96:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8023c9a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8023c9e:	2d00      	cmp	r5, #0
 8023ca0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8023ca4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8023ca8:	ee17 9a90 	vmov	r9, s15
 8023cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023cb0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8023cb4:	dd41      	ble.n	8023d3a <__kernel_rem_pio2f+0x1ae>
 8023cb6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8023cba:	a908      	add	r1, sp, #32
 8023cbc:	f1c5 0e08 	rsb	lr, r5, #8
 8023cc0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8023cc4:	fa46 f00e 	asr.w	r0, r6, lr
 8023cc8:	4481      	add	r9, r0
 8023cca:	fa00 f00e 	lsl.w	r0, r0, lr
 8023cce:	1a36      	subs	r6, r6, r0
 8023cd0:	f1c5 0007 	rsb	r0, r5, #7
 8023cd4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8023cd8:	4106      	asrs	r6, r0
 8023cda:	2e00      	cmp	r6, #0
 8023cdc:	dd3c      	ble.n	8023d58 <__kernel_rem_pio2f+0x1cc>
 8023cde:	f04f 0e00 	mov.w	lr, #0
 8023ce2:	f109 0901 	add.w	r9, r9, #1
 8023ce6:	4670      	mov	r0, lr
 8023ce8:	4574      	cmp	r4, lr
 8023cea:	dc68      	bgt.n	8023dbe <__kernel_rem_pio2f+0x232>
 8023cec:	2d00      	cmp	r5, #0
 8023cee:	dd03      	ble.n	8023cf8 <__kernel_rem_pio2f+0x16c>
 8023cf0:	2d01      	cmp	r5, #1
 8023cf2:	d074      	beq.n	8023dde <__kernel_rem_pio2f+0x252>
 8023cf4:	2d02      	cmp	r5, #2
 8023cf6:	d07d      	beq.n	8023df4 <__kernel_rem_pio2f+0x268>
 8023cf8:	2e02      	cmp	r6, #2
 8023cfa:	d12d      	bne.n	8023d58 <__kernel_rem_pio2f+0x1cc>
 8023cfc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023d00:	ee30 8a48 	vsub.f32	s16, s0, s16
 8023d04:	b340      	cbz	r0, 8023d58 <__kernel_rem_pio2f+0x1cc>
 8023d06:	4628      	mov	r0, r5
 8023d08:	9306      	str	r3, [sp, #24]
 8023d0a:	f7ff feb3 	bl	8023a74 <scalbnf>
 8023d0e:	9b06      	ldr	r3, [sp, #24]
 8023d10:	ee38 8a40 	vsub.f32	s16, s16, s0
 8023d14:	e020      	b.n	8023d58 <__kernel_rem_pio2f+0x1cc>
 8023d16:	ee60 7a28 	vmul.f32	s15, s0, s17
 8023d1a:	3e01      	subs	r6, #1
 8023d1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023d24:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8023d28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023d2c:	ecac 0a01 	vstmia	ip!, {s0}
 8023d30:	ed90 0a00 	vldr	s0, [r0]
 8023d34:	ee37 0a80 	vadd.f32	s0, s15, s0
 8023d38:	e79c      	b.n	8023c74 <__kernel_rem_pio2f+0xe8>
 8023d3a:	d105      	bne.n	8023d48 <__kernel_rem_pio2f+0x1bc>
 8023d3c:	1e60      	subs	r0, r4, #1
 8023d3e:	a908      	add	r1, sp, #32
 8023d40:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8023d44:	11f6      	asrs	r6, r6, #7
 8023d46:	e7c8      	b.n	8023cda <__kernel_rem_pio2f+0x14e>
 8023d48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8023d4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8023d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d54:	da31      	bge.n	8023dba <__kernel_rem_pio2f+0x22e>
 8023d56:	2600      	movs	r6, #0
 8023d58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8023d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023d60:	f040 8098 	bne.w	8023e94 <__kernel_rem_pio2f+0x308>
 8023d64:	1e60      	subs	r0, r4, #1
 8023d66:	2200      	movs	r2, #0
 8023d68:	4550      	cmp	r0, sl
 8023d6a:	da4b      	bge.n	8023e04 <__kernel_rem_pio2f+0x278>
 8023d6c:	2a00      	cmp	r2, #0
 8023d6e:	d065      	beq.n	8023e3c <__kernel_rem_pio2f+0x2b0>
 8023d70:	3c01      	subs	r4, #1
 8023d72:	ab08      	add	r3, sp, #32
 8023d74:	3d08      	subs	r5, #8
 8023d76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8023d7a:	2b00      	cmp	r3, #0
 8023d7c:	d0f8      	beq.n	8023d70 <__kernel_rem_pio2f+0x1e4>
 8023d7e:	4628      	mov	r0, r5
 8023d80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8023d84:	f7ff fe76 	bl	8023a74 <scalbnf>
 8023d88:	1c63      	adds	r3, r4, #1
 8023d8a:	aa44      	add	r2, sp, #272	@ 0x110
 8023d8c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8023e8c <__kernel_rem_pio2f+0x300>
 8023d90:	0099      	lsls	r1, r3, #2
 8023d92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8023d96:	4623      	mov	r3, r4
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	f280 80a9 	bge.w	8023ef0 <__kernel_rem_pio2f+0x364>
 8023d9e:	4623      	mov	r3, r4
 8023da0:	2b00      	cmp	r3, #0
 8023da2:	f2c0 80c7 	blt.w	8023f34 <__kernel_rem_pio2f+0x3a8>
 8023da6:	aa44      	add	r2, sp, #272	@ 0x110
 8023da8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8023dac:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8023e84 <__kernel_rem_pio2f+0x2f8>
 8023db0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023db4:	2000      	movs	r0, #0
 8023db6:	1ae2      	subs	r2, r4, r3
 8023db8:	e0b1      	b.n	8023f1e <__kernel_rem_pio2f+0x392>
 8023dba:	2602      	movs	r6, #2
 8023dbc:	e78f      	b.n	8023cde <__kernel_rem_pio2f+0x152>
 8023dbe:	f852 1b04 	ldr.w	r1, [r2], #4
 8023dc2:	b948      	cbnz	r0, 8023dd8 <__kernel_rem_pio2f+0x24c>
 8023dc4:	b121      	cbz	r1, 8023dd0 <__kernel_rem_pio2f+0x244>
 8023dc6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8023dca:	f842 1c04 	str.w	r1, [r2, #-4]
 8023dce:	2101      	movs	r1, #1
 8023dd0:	f10e 0e01 	add.w	lr, lr, #1
 8023dd4:	4608      	mov	r0, r1
 8023dd6:	e787      	b.n	8023ce8 <__kernel_rem_pio2f+0x15c>
 8023dd8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8023ddc:	e7f5      	b.n	8023dca <__kernel_rem_pio2f+0x23e>
 8023dde:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8023de2:	aa08      	add	r2, sp, #32
 8023de4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023de8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8023dec:	a908      	add	r1, sp, #32
 8023dee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8023df2:	e781      	b.n	8023cf8 <__kernel_rem_pio2f+0x16c>
 8023df4:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8023df8:	aa08      	add	r2, sp, #32
 8023dfa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8023dfe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8023e02:	e7f3      	b.n	8023dec <__kernel_rem_pio2f+0x260>
 8023e04:	a908      	add	r1, sp, #32
 8023e06:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8023e0a:	3801      	subs	r0, #1
 8023e0c:	430a      	orrs	r2, r1
 8023e0e:	e7ab      	b.n	8023d68 <__kernel_rem_pio2f+0x1dc>
 8023e10:	3201      	adds	r2, #1
 8023e12:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8023e16:	2e00      	cmp	r6, #0
 8023e18:	d0fa      	beq.n	8023e10 <__kernel_rem_pio2f+0x284>
 8023e1a:	9905      	ldr	r1, [sp, #20]
 8023e1c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8023e20:	eb0d 0001 	add.w	r0, sp, r1
 8023e24:	18e6      	adds	r6, r4, r3
 8023e26:	a91c      	add	r1, sp, #112	@ 0x70
 8023e28:	f104 0c01 	add.w	ip, r4, #1
 8023e2c:	384c      	subs	r0, #76	@ 0x4c
 8023e2e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8023e32:	4422      	add	r2, r4
 8023e34:	4562      	cmp	r2, ip
 8023e36:	da04      	bge.n	8023e42 <__kernel_rem_pio2f+0x2b6>
 8023e38:	4614      	mov	r4, r2
 8023e3a:	e70e      	b.n	8023c5a <__kernel_rem_pio2f+0xce>
 8023e3c:	9804      	ldr	r0, [sp, #16]
 8023e3e:	2201      	movs	r2, #1
 8023e40:	e7e7      	b.n	8023e12 <__kernel_rem_pio2f+0x286>
 8023e42:	9903      	ldr	r1, [sp, #12]
 8023e44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8023e48:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8023e4c:	9105      	str	r1, [sp, #20]
 8023e4e:	ee07 1a90 	vmov	s15, r1
 8023e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023e56:	2400      	movs	r4, #0
 8023e58:	ece6 7a01 	vstmia	r6!, {s15}
 8023e5c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023e60:	46b1      	mov	r9, r6
 8023e62:	455c      	cmp	r4, fp
 8023e64:	dd04      	ble.n	8023e70 <__kernel_rem_pio2f+0x2e4>
 8023e66:	ece0 7a01 	vstmia	r0!, {s15}
 8023e6a:	f10c 0c01 	add.w	ip, ip, #1
 8023e6e:	e7e1      	b.n	8023e34 <__kernel_rem_pio2f+0x2a8>
 8023e70:	ecfe 6a01 	vldmia	lr!, {s13}
 8023e74:	ed39 7a01 	vldmdb	r9!, {s14}
 8023e78:	3401      	adds	r4, #1
 8023e7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023e7e:	e7f0      	b.n	8023e62 <__kernel_rem_pio2f+0x2d6>
 8023e80:	08027f9c 	.word	0x08027f9c
 8023e84:	08027f70 	.word	0x08027f70
 8023e88:	43800000 	.word	0x43800000
 8023e8c:	3b800000 	.word	0x3b800000
 8023e90:	00000000 	.word	0x00000000
 8023e94:	9b02      	ldr	r3, [sp, #8]
 8023e96:	eeb0 0a48 	vmov.f32	s0, s16
 8023e9a:	eba3 0008 	sub.w	r0, r3, r8
 8023e9e:	f7ff fde9 	bl	8023a74 <scalbnf>
 8023ea2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8023e88 <__kernel_rem_pio2f+0x2fc>
 8023ea6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8023eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023eae:	db19      	blt.n	8023ee4 <__kernel_rem_pio2f+0x358>
 8023eb0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8023e8c <__kernel_rem_pio2f+0x300>
 8023eb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8023eb8:	aa08      	add	r2, sp, #32
 8023eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023ebe:	3508      	adds	r5, #8
 8023ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023ec4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8023ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8023ecc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023ed0:	ee10 3a10 	vmov	r3, s0
 8023ed4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8023ed8:	ee17 3a90 	vmov	r3, s15
 8023edc:	3401      	adds	r4, #1
 8023ede:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8023ee2:	e74c      	b.n	8023d7e <__kernel_rem_pio2f+0x1f2>
 8023ee4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8023ee8:	aa08      	add	r2, sp, #32
 8023eea:	ee10 3a10 	vmov	r3, s0
 8023eee:	e7f6      	b.n	8023ede <__kernel_rem_pio2f+0x352>
 8023ef0:	a808      	add	r0, sp, #32
 8023ef2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8023ef6:	9001      	str	r0, [sp, #4]
 8023ef8:	ee07 0a90 	vmov	s15, r0
 8023efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023f00:	3b01      	subs	r3, #1
 8023f02:	ee67 7a80 	vmul.f32	s15, s15, s0
 8023f06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8023f0a:	ed62 7a01 	vstmdb	r2!, {s15}
 8023f0e:	e743      	b.n	8023d98 <__kernel_rem_pio2f+0x20c>
 8023f10:	ecfc 6a01 	vldmia	ip!, {s13}
 8023f14:	ecb5 7a01 	vldmia	r5!, {s14}
 8023f18:	eee6 7a87 	vfma.f32	s15, s13, s14
 8023f1c:	3001      	adds	r0, #1
 8023f1e:	4550      	cmp	r0, sl
 8023f20:	dc01      	bgt.n	8023f26 <__kernel_rem_pio2f+0x39a>
 8023f22:	4282      	cmp	r2, r0
 8023f24:	daf4      	bge.n	8023f10 <__kernel_rem_pio2f+0x384>
 8023f26:	a858      	add	r0, sp, #352	@ 0x160
 8023f28:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8023f2c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8023f30:	3b01      	subs	r3, #1
 8023f32:	e735      	b.n	8023da0 <__kernel_rem_pio2f+0x214>
 8023f34:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8023f36:	2b02      	cmp	r3, #2
 8023f38:	dc09      	bgt.n	8023f4e <__kernel_rem_pio2f+0x3c2>
 8023f3a:	2b00      	cmp	r3, #0
 8023f3c:	dc2b      	bgt.n	8023f96 <__kernel_rem_pio2f+0x40a>
 8023f3e:	d044      	beq.n	8023fca <__kernel_rem_pio2f+0x43e>
 8023f40:	f009 0007 	and.w	r0, r9, #7
 8023f44:	b059      	add	sp, #356	@ 0x164
 8023f46:	ecbd 8b04 	vpop	{d8-d9}
 8023f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f4e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8023f50:	2b03      	cmp	r3, #3
 8023f52:	d1f5      	bne.n	8023f40 <__kernel_rem_pio2f+0x3b4>
 8023f54:	aa30      	add	r2, sp, #192	@ 0xc0
 8023f56:	1f0b      	subs	r3, r1, #4
 8023f58:	4413      	add	r3, r2
 8023f5a:	461a      	mov	r2, r3
 8023f5c:	4620      	mov	r0, r4
 8023f5e:	2800      	cmp	r0, #0
 8023f60:	f1a2 0204 	sub.w	r2, r2, #4
 8023f64:	dc52      	bgt.n	802400c <__kernel_rem_pio2f+0x480>
 8023f66:	4622      	mov	r2, r4
 8023f68:	2a01      	cmp	r2, #1
 8023f6a:	f1a3 0304 	sub.w	r3, r3, #4
 8023f6e:	dc5d      	bgt.n	802402c <__kernel_rem_pio2f+0x4a0>
 8023f70:	ab30      	add	r3, sp, #192	@ 0xc0
 8023f72:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023f76:	440b      	add	r3, r1
 8023f78:	2c01      	cmp	r4, #1
 8023f7a:	dc67      	bgt.n	802404c <__kernel_rem_pio2f+0x4c0>
 8023f7c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8023f80:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8023f84:	2e00      	cmp	r6, #0
 8023f86:	d167      	bne.n	8024058 <__kernel_rem_pio2f+0x4cc>
 8023f88:	edc7 6a00 	vstr	s13, [r7]
 8023f8c:	ed87 7a01 	vstr	s14, [r7, #4]
 8023f90:	edc7 7a02 	vstr	s15, [r7, #8]
 8023f94:	e7d4      	b.n	8023f40 <__kernel_rem_pio2f+0x3b4>
 8023f96:	ab30      	add	r3, sp, #192	@ 0xc0
 8023f98:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023f9c:	440b      	add	r3, r1
 8023f9e:	4622      	mov	r2, r4
 8023fa0:	2a00      	cmp	r2, #0
 8023fa2:	da24      	bge.n	8023fee <__kernel_rem_pio2f+0x462>
 8023fa4:	b34e      	cbz	r6, 8023ffa <__kernel_rem_pio2f+0x46e>
 8023fa6:	eef1 7a47 	vneg.f32	s15, s14
 8023faa:	edc7 7a00 	vstr	s15, [r7]
 8023fae:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8023fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8023fb6:	aa31      	add	r2, sp, #196	@ 0xc4
 8023fb8:	2301      	movs	r3, #1
 8023fba:	429c      	cmp	r4, r3
 8023fbc:	da20      	bge.n	8024000 <__kernel_rem_pio2f+0x474>
 8023fbe:	b10e      	cbz	r6, 8023fc4 <__kernel_rem_pio2f+0x438>
 8023fc0:	eef1 7a67 	vneg.f32	s15, s15
 8023fc4:	edc7 7a01 	vstr	s15, [r7, #4]
 8023fc8:	e7ba      	b.n	8023f40 <__kernel_rem_pio2f+0x3b4>
 8023fca:	ab30      	add	r3, sp, #192	@ 0xc0
 8023fcc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8023e90 <__kernel_rem_pio2f+0x304>
 8023fd0:	440b      	add	r3, r1
 8023fd2:	2c00      	cmp	r4, #0
 8023fd4:	da05      	bge.n	8023fe2 <__kernel_rem_pio2f+0x456>
 8023fd6:	b10e      	cbz	r6, 8023fdc <__kernel_rem_pio2f+0x450>
 8023fd8:	eef1 7a67 	vneg.f32	s15, s15
 8023fdc:	edc7 7a00 	vstr	s15, [r7]
 8023fe0:	e7ae      	b.n	8023f40 <__kernel_rem_pio2f+0x3b4>
 8023fe2:	ed33 7a01 	vldmdb	r3!, {s14}
 8023fe6:	3c01      	subs	r4, #1
 8023fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8023fec:	e7f1      	b.n	8023fd2 <__kernel_rem_pio2f+0x446>
 8023fee:	ed73 7a01 	vldmdb	r3!, {s15}
 8023ff2:	3a01      	subs	r2, #1
 8023ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8023ff8:	e7d2      	b.n	8023fa0 <__kernel_rem_pio2f+0x414>
 8023ffa:	eef0 7a47 	vmov.f32	s15, s14
 8023ffe:	e7d4      	b.n	8023faa <__kernel_rem_pio2f+0x41e>
 8024000:	ecb2 7a01 	vldmia	r2!, {s14}
 8024004:	3301      	adds	r3, #1
 8024006:	ee77 7a87 	vadd.f32	s15, s15, s14
 802400a:	e7d6      	b.n	8023fba <__kernel_rem_pio2f+0x42e>
 802400c:	edd2 7a00 	vldr	s15, [r2]
 8024010:	edd2 6a01 	vldr	s13, [r2, #4]
 8024014:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024018:	3801      	subs	r0, #1
 802401a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802401e:	ed82 7a00 	vstr	s14, [r2]
 8024022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024026:	edc2 7a01 	vstr	s15, [r2, #4]
 802402a:	e798      	b.n	8023f5e <__kernel_rem_pio2f+0x3d2>
 802402c:	edd3 7a00 	vldr	s15, [r3]
 8024030:	edd3 6a01 	vldr	s13, [r3, #4]
 8024034:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8024038:	3a01      	subs	r2, #1
 802403a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802403e:	ed83 7a00 	vstr	s14, [r3]
 8024042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8024046:	edc3 7a01 	vstr	s15, [r3, #4]
 802404a:	e78d      	b.n	8023f68 <__kernel_rem_pio2f+0x3dc>
 802404c:	ed33 7a01 	vldmdb	r3!, {s14}
 8024050:	3c01      	subs	r4, #1
 8024052:	ee77 7a87 	vadd.f32	s15, s15, s14
 8024056:	e78f      	b.n	8023f78 <__kernel_rem_pio2f+0x3ec>
 8024058:	eef1 6a66 	vneg.f32	s13, s13
 802405c:	eeb1 7a47 	vneg.f32	s14, s14
 8024060:	edc7 6a00 	vstr	s13, [r7]
 8024064:	ed87 7a01 	vstr	s14, [r7, #4]
 8024068:	eef1 7a67 	vneg.f32	s15, s15
 802406c:	e790      	b.n	8023f90 <__kernel_rem_pio2f+0x404>
 802406e:	bf00      	nop

08024070 <floorf>:
 8024070:	ee10 3a10 	vmov	r3, s0
 8024074:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8024078:	3a7f      	subs	r2, #127	@ 0x7f
 802407a:	2a16      	cmp	r2, #22
 802407c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8024080:	dc2b      	bgt.n	80240da <floorf+0x6a>
 8024082:	2a00      	cmp	r2, #0
 8024084:	da12      	bge.n	80240ac <floorf+0x3c>
 8024086:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80240ec <floorf+0x7c>
 802408a:	ee30 0a27 	vadd.f32	s0, s0, s15
 802408e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8024092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024096:	dd06      	ble.n	80240a6 <floorf+0x36>
 8024098:	2b00      	cmp	r3, #0
 802409a:	da24      	bge.n	80240e6 <floorf+0x76>
 802409c:	2900      	cmp	r1, #0
 802409e:	4b14      	ldr	r3, [pc, #80]	@ (80240f0 <floorf+0x80>)
 80240a0:	bf08      	it	eq
 80240a2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80240a6:	ee00 3a10 	vmov	s0, r3
 80240aa:	4770      	bx	lr
 80240ac:	4911      	ldr	r1, [pc, #68]	@ (80240f4 <floorf+0x84>)
 80240ae:	4111      	asrs	r1, r2
 80240b0:	420b      	tst	r3, r1
 80240b2:	d0fa      	beq.n	80240aa <floorf+0x3a>
 80240b4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80240ec <floorf+0x7c>
 80240b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80240bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80240c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80240c4:	ddef      	ble.n	80240a6 <floorf+0x36>
 80240c6:	2b00      	cmp	r3, #0
 80240c8:	bfbe      	ittt	lt
 80240ca:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80240ce:	fa40 f202 	asrlt.w	r2, r0, r2
 80240d2:	189b      	addlt	r3, r3, r2
 80240d4:	ea23 0301 	bic.w	r3, r3, r1
 80240d8:	e7e5      	b.n	80240a6 <floorf+0x36>
 80240da:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80240de:	d3e4      	bcc.n	80240aa <floorf+0x3a>
 80240e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80240e4:	4770      	bx	lr
 80240e6:	2300      	movs	r3, #0
 80240e8:	e7dd      	b.n	80240a6 <floorf+0x36>
 80240ea:	bf00      	nop
 80240ec:	7149f2ca 	.word	0x7149f2ca
 80240f0:	bf800000 	.word	0xbf800000
 80240f4:	007fffff 	.word	0x007fffff

080240f8 <abort>:
 80240f8:	b508      	push	{r3, lr}
 80240fa:	2006      	movs	r0, #6
 80240fc:	f000 fe9e 	bl	8024e3c <raise>
 8024100:	2001      	movs	r0, #1
 8024102:	f7e4 fdd1 	bl	8008ca8 <_exit>
	...

08024108 <malloc>:
 8024108:	4b02      	ldr	r3, [pc, #8]	@ (8024114 <malloc+0xc>)
 802410a:	4601      	mov	r1, r0
 802410c:	6818      	ldr	r0, [r3, #0]
 802410e:	f000 b82d 	b.w	802416c <_malloc_r>
 8024112:	bf00      	nop
 8024114:	200001b4 	.word	0x200001b4

08024118 <free>:
 8024118:	4b02      	ldr	r3, [pc, #8]	@ (8024124 <free+0xc>)
 802411a:	4601      	mov	r1, r0
 802411c:	6818      	ldr	r0, [r3, #0]
 802411e:	f001 bde3 	b.w	8025ce8 <_free_r>
 8024122:	bf00      	nop
 8024124:	200001b4 	.word	0x200001b4

08024128 <sbrk_aligned>:
 8024128:	b570      	push	{r4, r5, r6, lr}
 802412a:	4e0f      	ldr	r6, [pc, #60]	@ (8024168 <sbrk_aligned+0x40>)
 802412c:	460c      	mov	r4, r1
 802412e:	6831      	ldr	r1, [r6, #0]
 8024130:	4605      	mov	r5, r0
 8024132:	b911      	cbnz	r1, 802413a <sbrk_aligned+0x12>
 8024134:	f000 ff2c 	bl	8024f90 <_sbrk_r>
 8024138:	6030      	str	r0, [r6, #0]
 802413a:	4621      	mov	r1, r4
 802413c:	4628      	mov	r0, r5
 802413e:	f000 ff27 	bl	8024f90 <_sbrk_r>
 8024142:	1c43      	adds	r3, r0, #1
 8024144:	d103      	bne.n	802414e <sbrk_aligned+0x26>
 8024146:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802414a:	4620      	mov	r0, r4
 802414c:	bd70      	pop	{r4, r5, r6, pc}
 802414e:	1cc4      	adds	r4, r0, #3
 8024150:	f024 0403 	bic.w	r4, r4, #3
 8024154:	42a0      	cmp	r0, r4
 8024156:	d0f8      	beq.n	802414a <sbrk_aligned+0x22>
 8024158:	1a21      	subs	r1, r4, r0
 802415a:	4628      	mov	r0, r5
 802415c:	f000 ff18 	bl	8024f90 <_sbrk_r>
 8024160:	3001      	adds	r0, #1
 8024162:	d1f2      	bne.n	802414a <sbrk_aligned+0x22>
 8024164:	e7ef      	b.n	8024146 <sbrk_aligned+0x1e>
 8024166:	bf00      	nop
 8024168:	2001977c 	.word	0x2001977c

0802416c <_malloc_r>:
 802416c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024170:	1ccd      	adds	r5, r1, #3
 8024172:	f025 0503 	bic.w	r5, r5, #3
 8024176:	3508      	adds	r5, #8
 8024178:	2d0c      	cmp	r5, #12
 802417a:	bf38      	it	cc
 802417c:	250c      	movcc	r5, #12
 802417e:	2d00      	cmp	r5, #0
 8024180:	4606      	mov	r6, r0
 8024182:	db01      	blt.n	8024188 <_malloc_r+0x1c>
 8024184:	42a9      	cmp	r1, r5
 8024186:	d904      	bls.n	8024192 <_malloc_r+0x26>
 8024188:	230c      	movs	r3, #12
 802418a:	6033      	str	r3, [r6, #0]
 802418c:	2000      	movs	r0, #0
 802418e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024192:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8024268 <_malloc_r+0xfc>
 8024196:	f000 f869 	bl	802426c <__malloc_lock>
 802419a:	f8d8 3000 	ldr.w	r3, [r8]
 802419e:	461c      	mov	r4, r3
 80241a0:	bb44      	cbnz	r4, 80241f4 <_malloc_r+0x88>
 80241a2:	4629      	mov	r1, r5
 80241a4:	4630      	mov	r0, r6
 80241a6:	f7ff ffbf 	bl	8024128 <sbrk_aligned>
 80241aa:	1c43      	adds	r3, r0, #1
 80241ac:	4604      	mov	r4, r0
 80241ae:	d158      	bne.n	8024262 <_malloc_r+0xf6>
 80241b0:	f8d8 4000 	ldr.w	r4, [r8]
 80241b4:	4627      	mov	r7, r4
 80241b6:	2f00      	cmp	r7, #0
 80241b8:	d143      	bne.n	8024242 <_malloc_r+0xd6>
 80241ba:	2c00      	cmp	r4, #0
 80241bc:	d04b      	beq.n	8024256 <_malloc_r+0xea>
 80241be:	6823      	ldr	r3, [r4, #0]
 80241c0:	4639      	mov	r1, r7
 80241c2:	4630      	mov	r0, r6
 80241c4:	eb04 0903 	add.w	r9, r4, r3
 80241c8:	f000 fee2 	bl	8024f90 <_sbrk_r>
 80241cc:	4581      	cmp	r9, r0
 80241ce:	d142      	bne.n	8024256 <_malloc_r+0xea>
 80241d0:	6821      	ldr	r1, [r4, #0]
 80241d2:	1a6d      	subs	r5, r5, r1
 80241d4:	4629      	mov	r1, r5
 80241d6:	4630      	mov	r0, r6
 80241d8:	f7ff ffa6 	bl	8024128 <sbrk_aligned>
 80241dc:	3001      	adds	r0, #1
 80241de:	d03a      	beq.n	8024256 <_malloc_r+0xea>
 80241e0:	6823      	ldr	r3, [r4, #0]
 80241e2:	442b      	add	r3, r5
 80241e4:	6023      	str	r3, [r4, #0]
 80241e6:	f8d8 3000 	ldr.w	r3, [r8]
 80241ea:	685a      	ldr	r2, [r3, #4]
 80241ec:	bb62      	cbnz	r2, 8024248 <_malloc_r+0xdc>
 80241ee:	f8c8 7000 	str.w	r7, [r8]
 80241f2:	e00f      	b.n	8024214 <_malloc_r+0xa8>
 80241f4:	6822      	ldr	r2, [r4, #0]
 80241f6:	1b52      	subs	r2, r2, r5
 80241f8:	d420      	bmi.n	802423c <_malloc_r+0xd0>
 80241fa:	2a0b      	cmp	r2, #11
 80241fc:	d917      	bls.n	802422e <_malloc_r+0xc2>
 80241fe:	1961      	adds	r1, r4, r5
 8024200:	42a3      	cmp	r3, r4
 8024202:	6025      	str	r5, [r4, #0]
 8024204:	bf18      	it	ne
 8024206:	6059      	strne	r1, [r3, #4]
 8024208:	6863      	ldr	r3, [r4, #4]
 802420a:	bf08      	it	eq
 802420c:	f8c8 1000 	streq.w	r1, [r8]
 8024210:	5162      	str	r2, [r4, r5]
 8024212:	604b      	str	r3, [r1, #4]
 8024214:	4630      	mov	r0, r6
 8024216:	f000 f82f 	bl	8024278 <__malloc_unlock>
 802421a:	f104 000b 	add.w	r0, r4, #11
 802421e:	1d23      	adds	r3, r4, #4
 8024220:	f020 0007 	bic.w	r0, r0, #7
 8024224:	1ac2      	subs	r2, r0, r3
 8024226:	bf1c      	itt	ne
 8024228:	1a1b      	subne	r3, r3, r0
 802422a:	50a3      	strne	r3, [r4, r2]
 802422c:	e7af      	b.n	802418e <_malloc_r+0x22>
 802422e:	6862      	ldr	r2, [r4, #4]
 8024230:	42a3      	cmp	r3, r4
 8024232:	bf0c      	ite	eq
 8024234:	f8c8 2000 	streq.w	r2, [r8]
 8024238:	605a      	strne	r2, [r3, #4]
 802423a:	e7eb      	b.n	8024214 <_malloc_r+0xa8>
 802423c:	4623      	mov	r3, r4
 802423e:	6864      	ldr	r4, [r4, #4]
 8024240:	e7ae      	b.n	80241a0 <_malloc_r+0x34>
 8024242:	463c      	mov	r4, r7
 8024244:	687f      	ldr	r7, [r7, #4]
 8024246:	e7b6      	b.n	80241b6 <_malloc_r+0x4a>
 8024248:	461a      	mov	r2, r3
 802424a:	685b      	ldr	r3, [r3, #4]
 802424c:	42a3      	cmp	r3, r4
 802424e:	d1fb      	bne.n	8024248 <_malloc_r+0xdc>
 8024250:	2300      	movs	r3, #0
 8024252:	6053      	str	r3, [r2, #4]
 8024254:	e7de      	b.n	8024214 <_malloc_r+0xa8>
 8024256:	230c      	movs	r3, #12
 8024258:	6033      	str	r3, [r6, #0]
 802425a:	4630      	mov	r0, r6
 802425c:	f000 f80c 	bl	8024278 <__malloc_unlock>
 8024260:	e794      	b.n	802418c <_malloc_r+0x20>
 8024262:	6005      	str	r5, [r0, #0]
 8024264:	e7d6      	b.n	8024214 <_malloc_r+0xa8>
 8024266:	bf00      	nop
 8024268:	20019780 	.word	0x20019780

0802426c <__malloc_lock>:
 802426c:	4801      	ldr	r0, [pc, #4]	@ (8024274 <__malloc_lock+0x8>)
 802426e:	f000 bedc 	b.w	802502a <__retarget_lock_acquire_recursive>
 8024272:	bf00      	nop
 8024274:	200198c4 	.word	0x200198c4

08024278 <__malloc_unlock>:
 8024278:	4801      	ldr	r0, [pc, #4]	@ (8024280 <__malloc_unlock+0x8>)
 802427a:	f000 bed7 	b.w	802502c <__retarget_lock_release_recursive>
 802427e:	bf00      	nop
 8024280:	200198c4 	.word	0x200198c4

08024284 <__cvt>:
 8024284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024288:	ec57 6b10 	vmov	r6, r7, d0
 802428c:	2f00      	cmp	r7, #0
 802428e:	460c      	mov	r4, r1
 8024290:	4619      	mov	r1, r3
 8024292:	463b      	mov	r3, r7
 8024294:	bfbb      	ittet	lt
 8024296:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 802429a:	461f      	movlt	r7, r3
 802429c:	2300      	movge	r3, #0
 802429e:	232d      	movlt	r3, #45	@ 0x2d
 80242a0:	700b      	strb	r3, [r1, #0]
 80242a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80242a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80242a8:	4691      	mov	r9, r2
 80242aa:	f023 0820 	bic.w	r8, r3, #32
 80242ae:	bfbc      	itt	lt
 80242b0:	4632      	movlt	r2, r6
 80242b2:	4616      	movlt	r6, r2
 80242b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80242b8:	d005      	beq.n	80242c6 <__cvt+0x42>
 80242ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80242be:	d100      	bne.n	80242c2 <__cvt+0x3e>
 80242c0:	3401      	adds	r4, #1
 80242c2:	2102      	movs	r1, #2
 80242c4:	e000      	b.n	80242c8 <__cvt+0x44>
 80242c6:	2103      	movs	r1, #3
 80242c8:	ab03      	add	r3, sp, #12
 80242ca:	9301      	str	r3, [sp, #4]
 80242cc:	ab02      	add	r3, sp, #8
 80242ce:	9300      	str	r3, [sp, #0]
 80242d0:	ec47 6b10 	vmov	d0, r6, r7
 80242d4:	4653      	mov	r3, sl
 80242d6:	4622      	mov	r2, r4
 80242d8:	f000 ff42 	bl	8025160 <_dtoa_r>
 80242dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80242e0:	4605      	mov	r5, r0
 80242e2:	d119      	bne.n	8024318 <__cvt+0x94>
 80242e4:	f019 0f01 	tst.w	r9, #1
 80242e8:	d00e      	beq.n	8024308 <__cvt+0x84>
 80242ea:	eb00 0904 	add.w	r9, r0, r4
 80242ee:	2200      	movs	r2, #0
 80242f0:	2300      	movs	r3, #0
 80242f2:	4630      	mov	r0, r6
 80242f4:	4639      	mov	r1, r7
 80242f6:	f7dc fc0f 	bl	8000b18 <__aeabi_dcmpeq>
 80242fa:	b108      	cbz	r0, 8024300 <__cvt+0x7c>
 80242fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8024300:	2230      	movs	r2, #48	@ 0x30
 8024302:	9b03      	ldr	r3, [sp, #12]
 8024304:	454b      	cmp	r3, r9
 8024306:	d31e      	bcc.n	8024346 <__cvt+0xc2>
 8024308:	9b03      	ldr	r3, [sp, #12]
 802430a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802430c:	1b5b      	subs	r3, r3, r5
 802430e:	4628      	mov	r0, r5
 8024310:	6013      	str	r3, [r2, #0]
 8024312:	b004      	add	sp, #16
 8024314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024318:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 802431c:	eb00 0904 	add.w	r9, r0, r4
 8024320:	d1e5      	bne.n	80242ee <__cvt+0x6a>
 8024322:	7803      	ldrb	r3, [r0, #0]
 8024324:	2b30      	cmp	r3, #48	@ 0x30
 8024326:	d10a      	bne.n	802433e <__cvt+0xba>
 8024328:	2200      	movs	r2, #0
 802432a:	2300      	movs	r3, #0
 802432c:	4630      	mov	r0, r6
 802432e:	4639      	mov	r1, r7
 8024330:	f7dc fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 8024334:	b918      	cbnz	r0, 802433e <__cvt+0xba>
 8024336:	f1c4 0401 	rsb	r4, r4, #1
 802433a:	f8ca 4000 	str.w	r4, [sl]
 802433e:	f8da 3000 	ldr.w	r3, [sl]
 8024342:	4499      	add	r9, r3
 8024344:	e7d3      	b.n	80242ee <__cvt+0x6a>
 8024346:	1c59      	adds	r1, r3, #1
 8024348:	9103      	str	r1, [sp, #12]
 802434a:	701a      	strb	r2, [r3, #0]
 802434c:	e7d9      	b.n	8024302 <__cvt+0x7e>

0802434e <__exponent>:
 802434e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024350:	2900      	cmp	r1, #0
 8024352:	bfba      	itte	lt
 8024354:	4249      	neglt	r1, r1
 8024356:	232d      	movlt	r3, #45	@ 0x2d
 8024358:	232b      	movge	r3, #43	@ 0x2b
 802435a:	2909      	cmp	r1, #9
 802435c:	7002      	strb	r2, [r0, #0]
 802435e:	7043      	strb	r3, [r0, #1]
 8024360:	dd29      	ble.n	80243b6 <__exponent+0x68>
 8024362:	f10d 0307 	add.w	r3, sp, #7
 8024366:	461d      	mov	r5, r3
 8024368:	270a      	movs	r7, #10
 802436a:	461a      	mov	r2, r3
 802436c:	fbb1 f6f7 	udiv	r6, r1, r7
 8024370:	fb07 1416 	mls	r4, r7, r6, r1
 8024374:	3430      	adds	r4, #48	@ 0x30
 8024376:	f802 4c01 	strb.w	r4, [r2, #-1]
 802437a:	460c      	mov	r4, r1
 802437c:	2c63      	cmp	r4, #99	@ 0x63
 802437e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8024382:	4631      	mov	r1, r6
 8024384:	dcf1      	bgt.n	802436a <__exponent+0x1c>
 8024386:	3130      	adds	r1, #48	@ 0x30
 8024388:	1e94      	subs	r4, r2, #2
 802438a:	f803 1c01 	strb.w	r1, [r3, #-1]
 802438e:	1c41      	adds	r1, r0, #1
 8024390:	4623      	mov	r3, r4
 8024392:	42ab      	cmp	r3, r5
 8024394:	d30a      	bcc.n	80243ac <__exponent+0x5e>
 8024396:	f10d 0309 	add.w	r3, sp, #9
 802439a:	1a9b      	subs	r3, r3, r2
 802439c:	42ac      	cmp	r4, r5
 802439e:	bf88      	it	hi
 80243a0:	2300      	movhi	r3, #0
 80243a2:	3302      	adds	r3, #2
 80243a4:	4403      	add	r3, r0
 80243a6:	1a18      	subs	r0, r3, r0
 80243a8:	b003      	add	sp, #12
 80243aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80243ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 80243b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80243b4:	e7ed      	b.n	8024392 <__exponent+0x44>
 80243b6:	2330      	movs	r3, #48	@ 0x30
 80243b8:	3130      	adds	r1, #48	@ 0x30
 80243ba:	7083      	strb	r3, [r0, #2]
 80243bc:	70c1      	strb	r1, [r0, #3]
 80243be:	1d03      	adds	r3, r0, #4
 80243c0:	e7f1      	b.n	80243a6 <__exponent+0x58>
	...

080243c4 <_printf_float>:
 80243c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243c8:	b08d      	sub	sp, #52	@ 0x34
 80243ca:	460c      	mov	r4, r1
 80243cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80243d0:	4616      	mov	r6, r2
 80243d2:	461f      	mov	r7, r3
 80243d4:	4605      	mov	r5, r0
 80243d6:	f000 fd39 	bl	8024e4c <_localeconv_r>
 80243da:	6803      	ldr	r3, [r0, #0]
 80243dc:	9304      	str	r3, [sp, #16]
 80243de:	4618      	mov	r0, r3
 80243e0:	f7db ff6e 	bl	80002c0 <strlen>
 80243e4:	2300      	movs	r3, #0
 80243e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80243e8:	f8d8 3000 	ldr.w	r3, [r8]
 80243ec:	9005      	str	r0, [sp, #20]
 80243ee:	3307      	adds	r3, #7
 80243f0:	f023 0307 	bic.w	r3, r3, #7
 80243f4:	f103 0208 	add.w	r2, r3, #8
 80243f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80243fc:	f8d4 b000 	ldr.w	fp, [r4]
 8024400:	f8c8 2000 	str.w	r2, [r8]
 8024404:	e9d3 8900 	ldrd	r8, r9, [r3]
 8024408:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 802440c:	9307      	str	r3, [sp, #28]
 802440e:	f8cd 8018 	str.w	r8, [sp, #24]
 8024412:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8024416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802441a:	4b9c      	ldr	r3, [pc, #624]	@ (802468c <_printf_float+0x2c8>)
 802441c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024420:	f7dc fbac 	bl	8000b7c <__aeabi_dcmpun>
 8024424:	bb70      	cbnz	r0, 8024484 <_printf_float+0xc0>
 8024426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802442a:	4b98      	ldr	r3, [pc, #608]	@ (802468c <_printf_float+0x2c8>)
 802442c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8024430:	f7dc fb86 	bl	8000b40 <__aeabi_dcmple>
 8024434:	bb30      	cbnz	r0, 8024484 <_printf_float+0xc0>
 8024436:	2200      	movs	r2, #0
 8024438:	2300      	movs	r3, #0
 802443a:	4640      	mov	r0, r8
 802443c:	4649      	mov	r1, r9
 802443e:	f7dc fb75 	bl	8000b2c <__aeabi_dcmplt>
 8024442:	b110      	cbz	r0, 802444a <_printf_float+0x86>
 8024444:	232d      	movs	r3, #45	@ 0x2d
 8024446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802444a:	4a91      	ldr	r2, [pc, #580]	@ (8024690 <_printf_float+0x2cc>)
 802444c:	4b91      	ldr	r3, [pc, #580]	@ (8024694 <_printf_float+0x2d0>)
 802444e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8024452:	bf94      	ite	ls
 8024454:	4690      	movls	r8, r2
 8024456:	4698      	movhi	r8, r3
 8024458:	2303      	movs	r3, #3
 802445a:	6123      	str	r3, [r4, #16]
 802445c:	f02b 0304 	bic.w	r3, fp, #4
 8024460:	6023      	str	r3, [r4, #0]
 8024462:	f04f 0900 	mov.w	r9, #0
 8024466:	9700      	str	r7, [sp, #0]
 8024468:	4633      	mov	r3, r6
 802446a:	aa0b      	add	r2, sp, #44	@ 0x2c
 802446c:	4621      	mov	r1, r4
 802446e:	4628      	mov	r0, r5
 8024470:	f000 f9d2 	bl	8024818 <_printf_common>
 8024474:	3001      	adds	r0, #1
 8024476:	f040 808d 	bne.w	8024594 <_printf_float+0x1d0>
 802447a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802447e:	b00d      	add	sp, #52	@ 0x34
 8024480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024484:	4642      	mov	r2, r8
 8024486:	464b      	mov	r3, r9
 8024488:	4640      	mov	r0, r8
 802448a:	4649      	mov	r1, r9
 802448c:	f7dc fb76 	bl	8000b7c <__aeabi_dcmpun>
 8024490:	b140      	cbz	r0, 80244a4 <_printf_float+0xe0>
 8024492:	464b      	mov	r3, r9
 8024494:	2b00      	cmp	r3, #0
 8024496:	bfbc      	itt	lt
 8024498:	232d      	movlt	r3, #45	@ 0x2d
 802449a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 802449e:	4a7e      	ldr	r2, [pc, #504]	@ (8024698 <_printf_float+0x2d4>)
 80244a0:	4b7e      	ldr	r3, [pc, #504]	@ (802469c <_printf_float+0x2d8>)
 80244a2:	e7d4      	b.n	802444e <_printf_float+0x8a>
 80244a4:	6863      	ldr	r3, [r4, #4]
 80244a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80244aa:	9206      	str	r2, [sp, #24]
 80244ac:	1c5a      	adds	r2, r3, #1
 80244ae:	d13b      	bne.n	8024528 <_printf_float+0x164>
 80244b0:	2306      	movs	r3, #6
 80244b2:	6063      	str	r3, [r4, #4]
 80244b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80244b8:	2300      	movs	r3, #0
 80244ba:	6022      	str	r2, [r4, #0]
 80244bc:	9303      	str	r3, [sp, #12]
 80244be:	ab0a      	add	r3, sp, #40	@ 0x28
 80244c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80244c4:	ab09      	add	r3, sp, #36	@ 0x24
 80244c6:	9300      	str	r3, [sp, #0]
 80244c8:	6861      	ldr	r1, [r4, #4]
 80244ca:	ec49 8b10 	vmov	d0, r8, r9
 80244ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80244d2:	4628      	mov	r0, r5
 80244d4:	f7ff fed6 	bl	8024284 <__cvt>
 80244d8:	9b06      	ldr	r3, [sp, #24]
 80244da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80244dc:	2b47      	cmp	r3, #71	@ 0x47
 80244de:	4680      	mov	r8, r0
 80244e0:	d129      	bne.n	8024536 <_printf_float+0x172>
 80244e2:	1cc8      	adds	r0, r1, #3
 80244e4:	db02      	blt.n	80244ec <_printf_float+0x128>
 80244e6:	6863      	ldr	r3, [r4, #4]
 80244e8:	4299      	cmp	r1, r3
 80244ea:	dd41      	ble.n	8024570 <_printf_float+0x1ac>
 80244ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80244f0:	fa5f fa8a 	uxtb.w	sl, sl
 80244f4:	3901      	subs	r1, #1
 80244f6:	4652      	mov	r2, sl
 80244f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80244fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80244fe:	f7ff ff26 	bl	802434e <__exponent>
 8024502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024504:	1813      	adds	r3, r2, r0
 8024506:	2a01      	cmp	r2, #1
 8024508:	4681      	mov	r9, r0
 802450a:	6123      	str	r3, [r4, #16]
 802450c:	dc02      	bgt.n	8024514 <_printf_float+0x150>
 802450e:	6822      	ldr	r2, [r4, #0]
 8024510:	07d2      	lsls	r2, r2, #31
 8024512:	d501      	bpl.n	8024518 <_printf_float+0x154>
 8024514:	3301      	adds	r3, #1
 8024516:	6123      	str	r3, [r4, #16]
 8024518:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 802451c:	2b00      	cmp	r3, #0
 802451e:	d0a2      	beq.n	8024466 <_printf_float+0xa2>
 8024520:	232d      	movs	r3, #45	@ 0x2d
 8024522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024526:	e79e      	b.n	8024466 <_printf_float+0xa2>
 8024528:	9a06      	ldr	r2, [sp, #24]
 802452a:	2a47      	cmp	r2, #71	@ 0x47
 802452c:	d1c2      	bne.n	80244b4 <_printf_float+0xf0>
 802452e:	2b00      	cmp	r3, #0
 8024530:	d1c0      	bne.n	80244b4 <_printf_float+0xf0>
 8024532:	2301      	movs	r3, #1
 8024534:	e7bd      	b.n	80244b2 <_printf_float+0xee>
 8024536:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 802453a:	d9db      	bls.n	80244f4 <_printf_float+0x130>
 802453c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8024540:	d118      	bne.n	8024574 <_printf_float+0x1b0>
 8024542:	2900      	cmp	r1, #0
 8024544:	6863      	ldr	r3, [r4, #4]
 8024546:	dd0b      	ble.n	8024560 <_printf_float+0x19c>
 8024548:	6121      	str	r1, [r4, #16]
 802454a:	b913      	cbnz	r3, 8024552 <_printf_float+0x18e>
 802454c:	6822      	ldr	r2, [r4, #0]
 802454e:	07d0      	lsls	r0, r2, #31
 8024550:	d502      	bpl.n	8024558 <_printf_float+0x194>
 8024552:	3301      	adds	r3, #1
 8024554:	440b      	add	r3, r1
 8024556:	6123      	str	r3, [r4, #16]
 8024558:	65a1      	str	r1, [r4, #88]	@ 0x58
 802455a:	f04f 0900 	mov.w	r9, #0
 802455e:	e7db      	b.n	8024518 <_printf_float+0x154>
 8024560:	b913      	cbnz	r3, 8024568 <_printf_float+0x1a4>
 8024562:	6822      	ldr	r2, [r4, #0]
 8024564:	07d2      	lsls	r2, r2, #31
 8024566:	d501      	bpl.n	802456c <_printf_float+0x1a8>
 8024568:	3302      	adds	r3, #2
 802456a:	e7f4      	b.n	8024556 <_printf_float+0x192>
 802456c:	2301      	movs	r3, #1
 802456e:	e7f2      	b.n	8024556 <_printf_float+0x192>
 8024570:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8024574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8024576:	4299      	cmp	r1, r3
 8024578:	db05      	blt.n	8024586 <_printf_float+0x1c2>
 802457a:	6823      	ldr	r3, [r4, #0]
 802457c:	6121      	str	r1, [r4, #16]
 802457e:	07d8      	lsls	r0, r3, #31
 8024580:	d5ea      	bpl.n	8024558 <_printf_float+0x194>
 8024582:	1c4b      	adds	r3, r1, #1
 8024584:	e7e7      	b.n	8024556 <_printf_float+0x192>
 8024586:	2900      	cmp	r1, #0
 8024588:	bfd4      	ite	le
 802458a:	f1c1 0202 	rsble	r2, r1, #2
 802458e:	2201      	movgt	r2, #1
 8024590:	4413      	add	r3, r2
 8024592:	e7e0      	b.n	8024556 <_printf_float+0x192>
 8024594:	6823      	ldr	r3, [r4, #0]
 8024596:	055a      	lsls	r2, r3, #21
 8024598:	d407      	bmi.n	80245aa <_printf_float+0x1e6>
 802459a:	6923      	ldr	r3, [r4, #16]
 802459c:	4642      	mov	r2, r8
 802459e:	4631      	mov	r1, r6
 80245a0:	4628      	mov	r0, r5
 80245a2:	47b8      	blx	r7
 80245a4:	3001      	adds	r0, #1
 80245a6:	d12b      	bne.n	8024600 <_printf_float+0x23c>
 80245a8:	e767      	b.n	802447a <_printf_float+0xb6>
 80245aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80245ae:	f240 80dd 	bls.w	802476c <_printf_float+0x3a8>
 80245b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80245b6:	2200      	movs	r2, #0
 80245b8:	2300      	movs	r3, #0
 80245ba:	f7dc faad 	bl	8000b18 <__aeabi_dcmpeq>
 80245be:	2800      	cmp	r0, #0
 80245c0:	d033      	beq.n	802462a <_printf_float+0x266>
 80245c2:	4a37      	ldr	r2, [pc, #220]	@ (80246a0 <_printf_float+0x2dc>)
 80245c4:	2301      	movs	r3, #1
 80245c6:	4631      	mov	r1, r6
 80245c8:	4628      	mov	r0, r5
 80245ca:	47b8      	blx	r7
 80245cc:	3001      	adds	r0, #1
 80245ce:	f43f af54 	beq.w	802447a <_printf_float+0xb6>
 80245d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80245d6:	4543      	cmp	r3, r8
 80245d8:	db02      	blt.n	80245e0 <_printf_float+0x21c>
 80245da:	6823      	ldr	r3, [r4, #0]
 80245dc:	07d8      	lsls	r0, r3, #31
 80245de:	d50f      	bpl.n	8024600 <_printf_float+0x23c>
 80245e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80245e4:	4631      	mov	r1, r6
 80245e6:	4628      	mov	r0, r5
 80245e8:	47b8      	blx	r7
 80245ea:	3001      	adds	r0, #1
 80245ec:	f43f af45 	beq.w	802447a <_printf_float+0xb6>
 80245f0:	f04f 0900 	mov.w	r9, #0
 80245f4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80245f8:	f104 0a1a 	add.w	sl, r4, #26
 80245fc:	45c8      	cmp	r8, r9
 80245fe:	dc09      	bgt.n	8024614 <_printf_float+0x250>
 8024600:	6823      	ldr	r3, [r4, #0]
 8024602:	079b      	lsls	r3, r3, #30
 8024604:	f100 8103 	bmi.w	802480e <_printf_float+0x44a>
 8024608:	68e0      	ldr	r0, [r4, #12]
 802460a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802460c:	4298      	cmp	r0, r3
 802460e:	bfb8      	it	lt
 8024610:	4618      	movlt	r0, r3
 8024612:	e734      	b.n	802447e <_printf_float+0xba>
 8024614:	2301      	movs	r3, #1
 8024616:	4652      	mov	r2, sl
 8024618:	4631      	mov	r1, r6
 802461a:	4628      	mov	r0, r5
 802461c:	47b8      	blx	r7
 802461e:	3001      	adds	r0, #1
 8024620:	f43f af2b 	beq.w	802447a <_printf_float+0xb6>
 8024624:	f109 0901 	add.w	r9, r9, #1
 8024628:	e7e8      	b.n	80245fc <_printf_float+0x238>
 802462a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802462c:	2b00      	cmp	r3, #0
 802462e:	dc39      	bgt.n	80246a4 <_printf_float+0x2e0>
 8024630:	4a1b      	ldr	r2, [pc, #108]	@ (80246a0 <_printf_float+0x2dc>)
 8024632:	2301      	movs	r3, #1
 8024634:	4631      	mov	r1, r6
 8024636:	4628      	mov	r0, r5
 8024638:	47b8      	blx	r7
 802463a:	3001      	adds	r0, #1
 802463c:	f43f af1d 	beq.w	802447a <_printf_float+0xb6>
 8024640:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8024644:	ea59 0303 	orrs.w	r3, r9, r3
 8024648:	d102      	bne.n	8024650 <_printf_float+0x28c>
 802464a:	6823      	ldr	r3, [r4, #0]
 802464c:	07d9      	lsls	r1, r3, #31
 802464e:	d5d7      	bpl.n	8024600 <_printf_float+0x23c>
 8024650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8024654:	4631      	mov	r1, r6
 8024656:	4628      	mov	r0, r5
 8024658:	47b8      	blx	r7
 802465a:	3001      	adds	r0, #1
 802465c:	f43f af0d 	beq.w	802447a <_printf_float+0xb6>
 8024660:	f04f 0a00 	mov.w	sl, #0
 8024664:	f104 0b1a 	add.w	fp, r4, #26
 8024668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802466a:	425b      	negs	r3, r3
 802466c:	4553      	cmp	r3, sl
 802466e:	dc01      	bgt.n	8024674 <_printf_float+0x2b0>
 8024670:	464b      	mov	r3, r9
 8024672:	e793      	b.n	802459c <_printf_float+0x1d8>
 8024674:	2301      	movs	r3, #1
 8024676:	465a      	mov	r2, fp
 8024678:	4631      	mov	r1, r6
 802467a:	4628      	mov	r0, r5
 802467c:	47b8      	blx	r7
 802467e:	3001      	adds	r0, #1
 8024680:	f43f aefb 	beq.w	802447a <_printf_float+0xb6>
 8024684:	f10a 0a01 	add.w	sl, sl, #1
 8024688:	e7ee      	b.n	8024668 <_printf_float+0x2a4>
 802468a:	bf00      	nop
 802468c:	7fefffff 	.word	0x7fefffff
 8024690:	08027fa8 	.word	0x08027fa8
 8024694:	08027fac 	.word	0x08027fac
 8024698:	08027fb0 	.word	0x08027fb0
 802469c:	08027fb4 	.word	0x08027fb4
 80246a0:	08027fb8 	.word	0x08027fb8
 80246a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80246a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80246aa:	4553      	cmp	r3, sl
 80246ac:	bfa8      	it	ge
 80246ae:	4653      	movge	r3, sl
 80246b0:	2b00      	cmp	r3, #0
 80246b2:	4699      	mov	r9, r3
 80246b4:	dc36      	bgt.n	8024724 <_printf_float+0x360>
 80246b6:	f04f 0b00 	mov.w	fp, #0
 80246ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80246be:	f104 021a 	add.w	r2, r4, #26
 80246c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80246c4:	9306      	str	r3, [sp, #24]
 80246c6:	eba3 0309 	sub.w	r3, r3, r9
 80246ca:	455b      	cmp	r3, fp
 80246cc:	dc31      	bgt.n	8024732 <_printf_float+0x36e>
 80246ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246d0:	459a      	cmp	sl, r3
 80246d2:	dc3a      	bgt.n	802474a <_printf_float+0x386>
 80246d4:	6823      	ldr	r3, [r4, #0]
 80246d6:	07da      	lsls	r2, r3, #31
 80246d8:	d437      	bmi.n	802474a <_printf_float+0x386>
 80246da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80246dc:	ebaa 0903 	sub.w	r9, sl, r3
 80246e0:	9b06      	ldr	r3, [sp, #24]
 80246e2:	ebaa 0303 	sub.w	r3, sl, r3
 80246e6:	4599      	cmp	r9, r3
 80246e8:	bfa8      	it	ge
 80246ea:	4699      	movge	r9, r3
 80246ec:	f1b9 0f00 	cmp.w	r9, #0
 80246f0:	dc33      	bgt.n	802475a <_printf_float+0x396>
 80246f2:	f04f 0800 	mov.w	r8, #0
 80246f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80246fa:	f104 0b1a 	add.w	fp, r4, #26
 80246fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024700:	ebaa 0303 	sub.w	r3, sl, r3
 8024704:	eba3 0309 	sub.w	r3, r3, r9
 8024708:	4543      	cmp	r3, r8
 802470a:	f77f af79 	ble.w	8024600 <_printf_float+0x23c>
 802470e:	2301      	movs	r3, #1
 8024710:	465a      	mov	r2, fp
 8024712:	4631      	mov	r1, r6
 8024714:	4628      	mov	r0, r5
 8024716:	47b8      	blx	r7
 8024718:	3001      	adds	r0, #1
 802471a:	f43f aeae 	beq.w	802447a <_printf_float+0xb6>
 802471e:	f108 0801 	add.w	r8, r8, #1
 8024722:	e7ec      	b.n	80246fe <_printf_float+0x33a>
 8024724:	4642      	mov	r2, r8
 8024726:	4631      	mov	r1, r6
 8024728:	4628      	mov	r0, r5
 802472a:	47b8      	blx	r7
 802472c:	3001      	adds	r0, #1
 802472e:	d1c2      	bne.n	80246b6 <_printf_float+0x2f2>
 8024730:	e6a3      	b.n	802447a <_printf_float+0xb6>
 8024732:	2301      	movs	r3, #1
 8024734:	4631      	mov	r1, r6
 8024736:	4628      	mov	r0, r5
 8024738:	9206      	str	r2, [sp, #24]
 802473a:	47b8      	blx	r7
 802473c:	3001      	adds	r0, #1
 802473e:	f43f ae9c 	beq.w	802447a <_printf_float+0xb6>
 8024742:	9a06      	ldr	r2, [sp, #24]
 8024744:	f10b 0b01 	add.w	fp, fp, #1
 8024748:	e7bb      	b.n	80246c2 <_printf_float+0x2fe>
 802474a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802474e:	4631      	mov	r1, r6
 8024750:	4628      	mov	r0, r5
 8024752:	47b8      	blx	r7
 8024754:	3001      	adds	r0, #1
 8024756:	d1c0      	bne.n	80246da <_printf_float+0x316>
 8024758:	e68f      	b.n	802447a <_printf_float+0xb6>
 802475a:	9a06      	ldr	r2, [sp, #24]
 802475c:	464b      	mov	r3, r9
 802475e:	4442      	add	r2, r8
 8024760:	4631      	mov	r1, r6
 8024762:	4628      	mov	r0, r5
 8024764:	47b8      	blx	r7
 8024766:	3001      	adds	r0, #1
 8024768:	d1c3      	bne.n	80246f2 <_printf_float+0x32e>
 802476a:	e686      	b.n	802447a <_printf_float+0xb6>
 802476c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8024770:	f1ba 0f01 	cmp.w	sl, #1
 8024774:	dc01      	bgt.n	802477a <_printf_float+0x3b6>
 8024776:	07db      	lsls	r3, r3, #31
 8024778:	d536      	bpl.n	80247e8 <_printf_float+0x424>
 802477a:	2301      	movs	r3, #1
 802477c:	4642      	mov	r2, r8
 802477e:	4631      	mov	r1, r6
 8024780:	4628      	mov	r0, r5
 8024782:	47b8      	blx	r7
 8024784:	3001      	adds	r0, #1
 8024786:	f43f ae78 	beq.w	802447a <_printf_float+0xb6>
 802478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802478e:	4631      	mov	r1, r6
 8024790:	4628      	mov	r0, r5
 8024792:	47b8      	blx	r7
 8024794:	3001      	adds	r0, #1
 8024796:	f43f ae70 	beq.w	802447a <_printf_float+0xb6>
 802479a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 802479e:	2200      	movs	r2, #0
 80247a0:	2300      	movs	r3, #0
 80247a2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80247a6:	f7dc f9b7 	bl	8000b18 <__aeabi_dcmpeq>
 80247aa:	b9c0      	cbnz	r0, 80247de <_printf_float+0x41a>
 80247ac:	4653      	mov	r3, sl
 80247ae:	f108 0201 	add.w	r2, r8, #1
 80247b2:	4631      	mov	r1, r6
 80247b4:	4628      	mov	r0, r5
 80247b6:	47b8      	blx	r7
 80247b8:	3001      	adds	r0, #1
 80247ba:	d10c      	bne.n	80247d6 <_printf_float+0x412>
 80247bc:	e65d      	b.n	802447a <_printf_float+0xb6>
 80247be:	2301      	movs	r3, #1
 80247c0:	465a      	mov	r2, fp
 80247c2:	4631      	mov	r1, r6
 80247c4:	4628      	mov	r0, r5
 80247c6:	47b8      	blx	r7
 80247c8:	3001      	adds	r0, #1
 80247ca:	f43f ae56 	beq.w	802447a <_printf_float+0xb6>
 80247ce:	f108 0801 	add.w	r8, r8, #1
 80247d2:	45d0      	cmp	r8, sl
 80247d4:	dbf3      	blt.n	80247be <_printf_float+0x3fa>
 80247d6:	464b      	mov	r3, r9
 80247d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80247dc:	e6df      	b.n	802459e <_printf_float+0x1da>
 80247de:	f04f 0800 	mov.w	r8, #0
 80247e2:	f104 0b1a 	add.w	fp, r4, #26
 80247e6:	e7f4      	b.n	80247d2 <_printf_float+0x40e>
 80247e8:	2301      	movs	r3, #1
 80247ea:	4642      	mov	r2, r8
 80247ec:	e7e1      	b.n	80247b2 <_printf_float+0x3ee>
 80247ee:	2301      	movs	r3, #1
 80247f0:	464a      	mov	r2, r9
 80247f2:	4631      	mov	r1, r6
 80247f4:	4628      	mov	r0, r5
 80247f6:	47b8      	blx	r7
 80247f8:	3001      	adds	r0, #1
 80247fa:	f43f ae3e 	beq.w	802447a <_printf_float+0xb6>
 80247fe:	f108 0801 	add.w	r8, r8, #1
 8024802:	68e3      	ldr	r3, [r4, #12]
 8024804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8024806:	1a5b      	subs	r3, r3, r1
 8024808:	4543      	cmp	r3, r8
 802480a:	dcf0      	bgt.n	80247ee <_printf_float+0x42a>
 802480c:	e6fc      	b.n	8024608 <_printf_float+0x244>
 802480e:	f04f 0800 	mov.w	r8, #0
 8024812:	f104 0919 	add.w	r9, r4, #25
 8024816:	e7f4      	b.n	8024802 <_printf_float+0x43e>

08024818 <_printf_common>:
 8024818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802481c:	4616      	mov	r6, r2
 802481e:	4698      	mov	r8, r3
 8024820:	688a      	ldr	r2, [r1, #8]
 8024822:	690b      	ldr	r3, [r1, #16]
 8024824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8024828:	4293      	cmp	r3, r2
 802482a:	bfb8      	it	lt
 802482c:	4613      	movlt	r3, r2
 802482e:	6033      	str	r3, [r6, #0]
 8024830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8024834:	4607      	mov	r7, r0
 8024836:	460c      	mov	r4, r1
 8024838:	b10a      	cbz	r2, 802483e <_printf_common+0x26>
 802483a:	3301      	adds	r3, #1
 802483c:	6033      	str	r3, [r6, #0]
 802483e:	6823      	ldr	r3, [r4, #0]
 8024840:	0699      	lsls	r1, r3, #26
 8024842:	bf42      	ittt	mi
 8024844:	6833      	ldrmi	r3, [r6, #0]
 8024846:	3302      	addmi	r3, #2
 8024848:	6033      	strmi	r3, [r6, #0]
 802484a:	6825      	ldr	r5, [r4, #0]
 802484c:	f015 0506 	ands.w	r5, r5, #6
 8024850:	d106      	bne.n	8024860 <_printf_common+0x48>
 8024852:	f104 0a19 	add.w	sl, r4, #25
 8024856:	68e3      	ldr	r3, [r4, #12]
 8024858:	6832      	ldr	r2, [r6, #0]
 802485a:	1a9b      	subs	r3, r3, r2
 802485c:	42ab      	cmp	r3, r5
 802485e:	dc26      	bgt.n	80248ae <_printf_common+0x96>
 8024860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024864:	6822      	ldr	r2, [r4, #0]
 8024866:	3b00      	subs	r3, #0
 8024868:	bf18      	it	ne
 802486a:	2301      	movne	r3, #1
 802486c:	0692      	lsls	r2, r2, #26
 802486e:	d42b      	bmi.n	80248c8 <_printf_common+0xb0>
 8024870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024874:	4641      	mov	r1, r8
 8024876:	4638      	mov	r0, r7
 8024878:	47c8      	blx	r9
 802487a:	3001      	adds	r0, #1
 802487c:	d01e      	beq.n	80248bc <_printf_common+0xa4>
 802487e:	6823      	ldr	r3, [r4, #0]
 8024880:	6922      	ldr	r2, [r4, #16]
 8024882:	f003 0306 	and.w	r3, r3, #6
 8024886:	2b04      	cmp	r3, #4
 8024888:	bf02      	ittt	eq
 802488a:	68e5      	ldreq	r5, [r4, #12]
 802488c:	6833      	ldreq	r3, [r6, #0]
 802488e:	1aed      	subeq	r5, r5, r3
 8024890:	68a3      	ldr	r3, [r4, #8]
 8024892:	bf0c      	ite	eq
 8024894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024898:	2500      	movne	r5, #0
 802489a:	4293      	cmp	r3, r2
 802489c:	bfc4      	itt	gt
 802489e:	1a9b      	subgt	r3, r3, r2
 80248a0:	18ed      	addgt	r5, r5, r3
 80248a2:	2600      	movs	r6, #0
 80248a4:	341a      	adds	r4, #26
 80248a6:	42b5      	cmp	r5, r6
 80248a8:	d11a      	bne.n	80248e0 <_printf_common+0xc8>
 80248aa:	2000      	movs	r0, #0
 80248ac:	e008      	b.n	80248c0 <_printf_common+0xa8>
 80248ae:	2301      	movs	r3, #1
 80248b0:	4652      	mov	r2, sl
 80248b2:	4641      	mov	r1, r8
 80248b4:	4638      	mov	r0, r7
 80248b6:	47c8      	blx	r9
 80248b8:	3001      	adds	r0, #1
 80248ba:	d103      	bne.n	80248c4 <_printf_common+0xac>
 80248bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80248c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80248c4:	3501      	adds	r5, #1
 80248c6:	e7c6      	b.n	8024856 <_printf_common+0x3e>
 80248c8:	18e1      	adds	r1, r4, r3
 80248ca:	1c5a      	adds	r2, r3, #1
 80248cc:	2030      	movs	r0, #48	@ 0x30
 80248ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80248d2:	4422      	add	r2, r4
 80248d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80248d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80248dc:	3302      	adds	r3, #2
 80248de:	e7c7      	b.n	8024870 <_printf_common+0x58>
 80248e0:	2301      	movs	r3, #1
 80248e2:	4622      	mov	r2, r4
 80248e4:	4641      	mov	r1, r8
 80248e6:	4638      	mov	r0, r7
 80248e8:	47c8      	blx	r9
 80248ea:	3001      	adds	r0, #1
 80248ec:	d0e6      	beq.n	80248bc <_printf_common+0xa4>
 80248ee:	3601      	adds	r6, #1
 80248f0:	e7d9      	b.n	80248a6 <_printf_common+0x8e>
	...

080248f4 <_printf_i>:
 80248f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80248f8:	7e0f      	ldrb	r7, [r1, #24]
 80248fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80248fc:	2f78      	cmp	r7, #120	@ 0x78
 80248fe:	4691      	mov	r9, r2
 8024900:	4680      	mov	r8, r0
 8024902:	460c      	mov	r4, r1
 8024904:	469a      	mov	sl, r3
 8024906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802490a:	d807      	bhi.n	802491c <_printf_i+0x28>
 802490c:	2f62      	cmp	r7, #98	@ 0x62
 802490e:	d80a      	bhi.n	8024926 <_printf_i+0x32>
 8024910:	2f00      	cmp	r7, #0
 8024912:	f000 80d2 	beq.w	8024aba <_printf_i+0x1c6>
 8024916:	2f58      	cmp	r7, #88	@ 0x58
 8024918:	f000 80b9 	beq.w	8024a8e <_printf_i+0x19a>
 802491c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8024924:	e03a      	b.n	802499c <_printf_i+0xa8>
 8024926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802492a:	2b15      	cmp	r3, #21
 802492c:	d8f6      	bhi.n	802491c <_printf_i+0x28>
 802492e:	a101      	add	r1, pc, #4	@ (adr r1, 8024934 <_printf_i+0x40>)
 8024930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024934:	0802498d 	.word	0x0802498d
 8024938:	080249a1 	.word	0x080249a1
 802493c:	0802491d 	.word	0x0802491d
 8024940:	0802491d 	.word	0x0802491d
 8024944:	0802491d 	.word	0x0802491d
 8024948:	0802491d 	.word	0x0802491d
 802494c:	080249a1 	.word	0x080249a1
 8024950:	0802491d 	.word	0x0802491d
 8024954:	0802491d 	.word	0x0802491d
 8024958:	0802491d 	.word	0x0802491d
 802495c:	0802491d 	.word	0x0802491d
 8024960:	08024aa1 	.word	0x08024aa1
 8024964:	080249cb 	.word	0x080249cb
 8024968:	08024a5b 	.word	0x08024a5b
 802496c:	0802491d 	.word	0x0802491d
 8024970:	0802491d 	.word	0x0802491d
 8024974:	08024ac3 	.word	0x08024ac3
 8024978:	0802491d 	.word	0x0802491d
 802497c:	080249cb 	.word	0x080249cb
 8024980:	0802491d 	.word	0x0802491d
 8024984:	0802491d 	.word	0x0802491d
 8024988:	08024a63 	.word	0x08024a63
 802498c:	6833      	ldr	r3, [r6, #0]
 802498e:	1d1a      	adds	r2, r3, #4
 8024990:	681b      	ldr	r3, [r3, #0]
 8024992:	6032      	str	r2, [r6, #0]
 8024994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8024998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802499c:	2301      	movs	r3, #1
 802499e:	e09d      	b.n	8024adc <_printf_i+0x1e8>
 80249a0:	6833      	ldr	r3, [r6, #0]
 80249a2:	6820      	ldr	r0, [r4, #0]
 80249a4:	1d19      	adds	r1, r3, #4
 80249a6:	6031      	str	r1, [r6, #0]
 80249a8:	0606      	lsls	r6, r0, #24
 80249aa:	d501      	bpl.n	80249b0 <_printf_i+0xbc>
 80249ac:	681d      	ldr	r5, [r3, #0]
 80249ae:	e003      	b.n	80249b8 <_printf_i+0xc4>
 80249b0:	0645      	lsls	r5, r0, #25
 80249b2:	d5fb      	bpl.n	80249ac <_printf_i+0xb8>
 80249b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80249b8:	2d00      	cmp	r5, #0
 80249ba:	da03      	bge.n	80249c4 <_printf_i+0xd0>
 80249bc:	232d      	movs	r3, #45	@ 0x2d
 80249be:	426d      	negs	r5, r5
 80249c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80249c4:	4859      	ldr	r0, [pc, #356]	@ (8024b2c <_printf_i+0x238>)
 80249c6:	230a      	movs	r3, #10
 80249c8:	e011      	b.n	80249ee <_printf_i+0xfa>
 80249ca:	6821      	ldr	r1, [r4, #0]
 80249cc:	6833      	ldr	r3, [r6, #0]
 80249ce:	0608      	lsls	r0, r1, #24
 80249d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80249d4:	d402      	bmi.n	80249dc <_printf_i+0xe8>
 80249d6:	0649      	lsls	r1, r1, #25
 80249d8:	bf48      	it	mi
 80249da:	b2ad      	uxthmi	r5, r5
 80249dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80249de:	4853      	ldr	r0, [pc, #332]	@ (8024b2c <_printf_i+0x238>)
 80249e0:	6033      	str	r3, [r6, #0]
 80249e2:	bf14      	ite	ne
 80249e4:	230a      	movne	r3, #10
 80249e6:	2308      	moveq	r3, #8
 80249e8:	2100      	movs	r1, #0
 80249ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80249ee:	6866      	ldr	r6, [r4, #4]
 80249f0:	60a6      	str	r6, [r4, #8]
 80249f2:	2e00      	cmp	r6, #0
 80249f4:	bfa2      	ittt	ge
 80249f6:	6821      	ldrge	r1, [r4, #0]
 80249f8:	f021 0104 	bicge.w	r1, r1, #4
 80249fc:	6021      	strge	r1, [r4, #0]
 80249fe:	b90d      	cbnz	r5, 8024a04 <_printf_i+0x110>
 8024a00:	2e00      	cmp	r6, #0
 8024a02:	d04b      	beq.n	8024a9c <_printf_i+0x1a8>
 8024a04:	4616      	mov	r6, r2
 8024a06:	fbb5 f1f3 	udiv	r1, r5, r3
 8024a0a:	fb03 5711 	mls	r7, r3, r1, r5
 8024a0e:	5dc7      	ldrb	r7, [r0, r7]
 8024a10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8024a14:	462f      	mov	r7, r5
 8024a16:	42bb      	cmp	r3, r7
 8024a18:	460d      	mov	r5, r1
 8024a1a:	d9f4      	bls.n	8024a06 <_printf_i+0x112>
 8024a1c:	2b08      	cmp	r3, #8
 8024a1e:	d10b      	bne.n	8024a38 <_printf_i+0x144>
 8024a20:	6823      	ldr	r3, [r4, #0]
 8024a22:	07df      	lsls	r7, r3, #31
 8024a24:	d508      	bpl.n	8024a38 <_printf_i+0x144>
 8024a26:	6923      	ldr	r3, [r4, #16]
 8024a28:	6861      	ldr	r1, [r4, #4]
 8024a2a:	4299      	cmp	r1, r3
 8024a2c:	bfde      	ittt	le
 8024a2e:	2330      	movle	r3, #48	@ 0x30
 8024a30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8024a34:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8024a38:	1b92      	subs	r2, r2, r6
 8024a3a:	6122      	str	r2, [r4, #16]
 8024a3c:	f8cd a000 	str.w	sl, [sp]
 8024a40:	464b      	mov	r3, r9
 8024a42:	aa03      	add	r2, sp, #12
 8024a44:	4621      	mov	r1, r4
 8024a46:	4640      	mov	r0, r8
 8024a48:	f7ff fee6 	bl	8024818 <_printf_common>
 8024a4c:	3001      	adds	r0, #1
 8024a4e:	d14a      	bne.n	8024ae6 <_printf_i+0x1f2>
 8024a50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024a54:	b004      	add	sp, #16
 8024a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024a5a:	6823      	ldr	r3, [r4, #0]
 8024a5c:	f043 0320 	orr.w	r3, r3, #32
 8024a60:	6023      	str	r3, [r4, #0]
 8024a62:	4833      	ldr	r0, [pc, #204]	@ (8024b30 <_printf_i+0x23c>)
 8024a64:	2778      	movs	r7, #120	@ 0x78
 8024a66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8024a6a:	6823      	ldr	r3, [r4, #0]
 8024a6c:	6831      	ldr	r1, [r6, #0]
 8024a6e:	061f      	lsls	r7, r3, #24
 8024a70:	f851 5b04 	ldr.w	r5, [r1], #4
 8024a74:	d402      	bmi.n	8024a7c <_printf_i+0x188>
 8024a76:	065f      	lsls	r7, r3, #25
 8024a78:	bf48      	it	mi
 8024a7a:	b2ad      	uxthmi	r5, r5
 8024a7c:	6031      	str	r1, [r6, #0]
 8024a7e:	07d9      	lsls	r1, r3, #31
 8024a80:	bf44      	itt	mi
 8024a82:	f043 0320 	orrmi.w	r3, r3, #32
 8024a86:	6023      	strmi	r3, [r4, #0]
 8024a88:	b11d      	cbz	r5, 8024a92 <_printf_i+0x19e>
 8024a8a:	2310      	movs	r3, #16
 8024a8c:	e7ac      	b.n	80249e8 <_printf_i+0xf4>
 8024a8e:	4827      	ldr	r0, [pc, #156]	@ (8024b2c <_printf_i+0x238>)
 8024a90:	e7e9      	b.n	8024a66 <_printf_i+0x172>
 8024a92:	6823      	ldr	r3, [r4, #0]
 8024a94:	f023 0320 	bic.w	r3, r3, #32
 8024a98:	6023      	str	r3, [r4, #0]
 8024a9a:	e7f6      	b.n	8024a8a <_printf_i+0x196>
 8024a9c:	4616      	mov	r6, r2
 8024a9e:	e7bd      	b.n	8024a1c <_printf_i+0x128>
 8024aa0:	6833      	ldr	r3, [r6, #0]
 8024aa2:	6825      	ldr	r5, [r4, #0]
 8024aa4:	6961      	ldr	r1, [r4, #20]
 8024aa6:	1d18      	adds	r0, r3, #4
 8024aa8:	6030      	str	r0, [r6, #0]
 8024aaa:	062e      	lsls	r6, r5, #24
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	d501      	bpl.n	8024ab4 <_printf_i+0x1c0>
 8024ab0:	6019      	str	r1, [r3, #0]
 8024ab2:	e002      	b.n	8024aba <_printf_i+0x1c6>
 8024ab4:	0668      	lsls	r0, r5, #25
 8024ab6:	d5fb      	bpl.n	8024ab0 <_printf_i+0x1bc>
 8024ab8:	8019      	strh	r1, [r3, #0]
 8024aba:	2300      	movs	r3, #0
 8024abc:	6123      	str	r3, [r4, #16]
 8024abe:	4616      	mov	r6, r2
 8024ac0:	e7bc      	b.n	8024a3c <_printf_i+0x148>
 8024ac2:	6833      	ldr	r3, [r6, #0]
 8024ac4:	1d1a      	adds	r2, r3, #4
 8024ac6:	6032      	str	r2, [r6, #0]
 8024ac8:	681e      	ldr	r6, [r3, #0]
 8024aca:	6862      	ldr	r2, [r4, #4]
 8024acc:	2100      	movs	r1, #0
 8024ace:	4630      	mov	r0, r6
 8024ad0:	f7db fba6 	bl	8000220 <memchr>
 8024ad4:	b108      	cbz	r0, 8024ada <_printf_i+0x1e6>
 8024ad6:	1b80      	subs	r0, r0, r6
 8024ad8:	6060      	str	r0, [r4, #4]
 8024ada:	6863      	ldr	r3, [r4, #4]
 8024adc:	6123      	str	r3, [r4, #16]
 8024ade:	2300      	movs	r3, #0
 8024ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024ae4:	e7aa      	b.n	8024a3c <_printf_i+0x148>
 8024ae6:	6923      	ldr	r3, [r4, #16]
 8024ae8:	4632      	mov	r2, r6
 8024aea:	4649      	mov	r1, r9
 8024aec:	4640      	mov	r0, r8
 8024aee:	47d0      	blx	sl
 8024af0:	3001      	adds	r0, #1
 8024af2:	d0ad      	beq.n	8024a50 <_printf_i+0x15c>
 8024af4:	6823      	ldr	r3, [r4, #0]
 8024af6:	079b      	lsls	r3, r3, #30
 8024af8:	d413      	bmi.n	8024b22 <_printf_i+0x22e>
 8024afa:	68e0      	ldr	r0, [r4, #12]
 8024afc:	9b03      	ldr	r3, [sp, #12]
 8024afe:	4298      	cmp	r0, r3
 8024b00:	bfb8      	it	lt
 8024b02:	4618      	movlt	r0, r3
 8024b04:	e7a6      	b.n	8024a54 <_printf_i+0x160>
 8024b06:	2301      	movs	r3, #1
 8024b08:	4632      	mov	r2, r6
 8024b0a:	4649      	mov	r1, r9
 8024b0c:	4640      	mov	r0, r8
 8024b0e:	47d0      	blx	sl
 8024b10:	3001      	adds	r0, #1
 8024b12:	d09d      	beq.n	8024a50 <_printf_i+0x15c>
 8024b14:	3501      	adds	r5, #1
 8024b16:	68e3      	ldr	r3, [r4, #12]
 8024b18:	9903      	ldr	r1, [sp, #12]
 8024b1a:	1a5b      	subs	r3, r3, r1
 8024b1c:	42ab      	cmp	r3, r5
 8024b1e:	dcf2      	bgt.n	8024b06 <_printf_i+0x212>
 8024b20:	e7eb      	b.n	8024afa <_printf_i+0x206>
 8024b22:	2500      	movs	r5, #0
 8024b24:	f104 0619 	add.w	r6, r4, #25
 8024b28:	e7f5      	b.n	8024b16 <_printf_i+0x222>
 8024b2a:	bf00      	nop
 8024b2c:	08027fba 	.word	0x08027fba
 8024b30:	08027fcb 	.word	0x08027fcb

08024b34 <std>:
 8024b34:	2300      	movs	r3, #0
 8024b36:	b510      	push	{r4, lr}
 8024b38:	4604      	mov	r4, r0
 8024b3a:	e9c0 3300 	strd	r3, r3, [r0]
 8024b3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024b42:	6083      	str	r3, [r0, #8]
 8024b44:	8181      	strh	r1, [r0, #12]
 8024b46:	6643      	str	r3, [r0, #100]	@ 0x64
 8024b48:	81c2      	strh	r2, [r0, #14]
 8024b4a:	6183      	str	r3, [r0, #24]
 8024b4c:	4619      	mov	r1, r3
 8024b4e:	2208      	movs	r2, #8
 8024b50:	305c      	adds	r0, #92	@ 0x5c
 8024b52:	f000 f942 	bl	8024dda <memset>
 8024b56:	4b0d      	ldr	r3, [pc, #52]	@ (8024b8c <std+0x58>)
 8024b58:	6263      	str	r3, [r4, #36]	@ 0x24
 8024b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8024b90 <std+0x5c>)
 8024b5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8024b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8024b94 <std+0x60>)
 8024b60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8024b62:	4b0d      	ldr	r3, [pc, #52]	@ (8024b98 <std+0x64>)
 8024b64:	6323      	str	r3, [r4, #48]	@ 0x30
 8024b66:	4b0d      	ldr	r3, [pc, #52]	@ (8024b9c <std+0x68>)
 8024b68:	6224      	str	r4, [r4, #32]
 8024b6a:	429c      	cmp	r4, r3
 8024b6c:	d006      	beq.n	8024b7c <std+0x48>
 8024b6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8024b72:	4294      	cmp	r4, r2
 8024b74:	d002      	beq.n	8024b7c <std+0x48>
 8024b76:	33d0      	adds	r3, #208	@ 0xd0
 8024b78:	429c      	cmp	r4, r3
 8024b7a:	d105      	bne.n	8024b88 <std+0x54>
 8024b7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8024b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024b84:	f000 ba50 	b.w	8025028 <__retarget_lock_init_recursive>
 8024b88:	bd10      	pop	{r4, pc}
 8024b8a:	bf00      	nop
 8024b8c:	08024d21 	.word	0x08024d21
 8024b90:	08024d43 	.word	0x08024d43
 8024b94:	08024d7b 	.word	0x08024d7b
 8024b98:	08024d9f 	.word	0x08024d9f
 8024b9c:	20019784 	.word	0x20019784

08024ba0 <stdio_exit_handler>:
 8024ba0:	4a02      	ldr	r2, [pc, #8]	@ (8024bac <stdio_exit_handler+0xc>)
 8024ba2:	4903      	ldr	r1, [pc, #12]	@ (8024bb0 <stdio_exit_handler+0x10>)
 8024ba4:	4803      	ldr	r0, [pc, #12]	@ (8024bb4 <stdio_exit_handler+0x14>)
 8024ba6:	f000 b869 	b.w	8024c7c <_fwalk_sglue>
 8024baa:	bf00      	nop
 8024bac:	200001a8 	.word	0x200001a8
 8024bb0:	08026839 	.word	0x08026839
 8024bb4:	200001b8 	.word	0x200001b8

08024bb8 <cleanup_stdio>:
 8024bb8:	6841      	ldr	r1, [r0, #4]
 8024bba:	4b0c      	ldr	r3, [pc, #48]	@ (8024bec <cleanup_stdio+0x34>)
 8024bbc:	4299      	cmp	r1, r3
 8024bbe:	b510      	push	{r4, lr}
 8024bc0:	4604      	mov	r4, r0
 8024bc2:	d001      	beq.n	8024bc8 <cleanup_stdio+0x10>
 8024bc4:	f001 fe38 	bl	8026838 <_fflush_r>
 8024bc8:	68a1      	ldr	r1, [r4, #8]
 8024bca:	4b09      	ldr	r3, [pc, #36]	@ (8024bf0 <cleanup_stdio+0x38>)
 8024bcc:	4299      	cmp	r1, r3
 8024bce:	d002      	beq.n	8024bd6 <cleanup_stdio+0x1e>
 8024bd0:	4620      	mov	r0, r4
 8024bd2:	f001 fe31 	bl	8026838 <_fflush_r>
 8024bd6:	68e1      	ldr	r1, [r4, #12]
 8024bd8:	4b06      	ldr	r3, [pc, #24]	@ (8024bf4 <cleanup_stdio+0x3c>)
 8024bda:	4299      	cmp	r1, r3
 8024bdc:	d004      	beq.n	8024be8 <cleanup_stdio+0x30>
 8024bde:	4620      	mov	r0, r4
 8024be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024be4:	f001 be28 	b.w	8026838 <_fflush_r>
 8024be8:	bd10      	pop	{r4, pc}
 8024bea:	bf00      	nop
 8024bec:	20019784 	.word	0x20019784
 8024bf0:	200197ec 	.word	0x200197ec
 8024bf4:	20019854 	.word	0x20019854

08024bf8 <global_stdio_init.part.0>:
 8024bf8:	b510      	push	{r4, lr}
 8024bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8024c28 <global_stdio_init.part.0+0x30>)
 8024bfc:	4c0b      	ldr	r4, [pc, #44]	@ (8024c2c <global_stdio_init.part.0+0x34>)
 8024bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8024c30 <global_stdio_init.part.0+0x38>)
 8024c00:	601a      	str	r2, [r3, #0]
 8024c02:	4620      	mov	r0, r4
 8024c04:	2200      	movs	r2, #0
 8024c06:	2104      	movs	r1, #4
 8024c08:	f7ff ff94 	bl	8024b34 <std>
 8024c0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8024c10:	2201      	movs	r2, #1
 8024c12:	2109      	movs	r1, #9
 8024c14:	f7ff ff8e 	bl	8024b34 <std>
 8024c18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8024c1c:	2202      	movs	r2, #2
 8024c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c22:	2112      	movs	r1, #18
 8024c24:	f7ff bf86 	b.w	8024b34 <std>
 8024c28:	200198bc 	.word	0x200198bc
 8024c2c:	20019784 	.word	0x20019784
 8024c30:	08024ba1 	.word	0x08024ba1

08024c34 <__sfp_lock_acquire>:
 8024c34:	4801      	ldr	r0, [pc, #4]	@ (8024c3c <__sfp_lock_acquire+0x8>)
 8024c36:	f000 b9f8 	b.w	802502a <__retarget_lock_acquire_recursive>
 8024c3a:	bf00      	nop
 8024c3c:	200198c5 	.word	0x200198c5

08024c40 <__sfp_lock_release>:
 8024c40:	4801      	ldr	r0, [pc, #4]	@ (8024c48 <__sfp_lock_release+0x8>)
 8024c42:	f000 b9f3 	b.w	802502c <__retarget_lock_release_recursive>
 8024c46:	bf00      	nop
 8024c48:	200198c5 	.word	0x200198c5

08024c4c <__sinit>:
 8024c4c:	b510      	push	{r4, lr}
 8024c4e:	4604      	mov	r4, r0
 8024c50:	f7ff fff0 	bl	8024c34 <__sfp_lock_acquire>
 8024c54:	6a23      	ldr	r3, [r4, #32]
 8024c56:	b11b      	cbz	r3, 8024c60 <__sinit+0x14>
 8024c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c5c:	f7ff bff0 	b.w	8024c40 <__sfp_lock_release>
 8024c60:	4b04      	ldr	r3, [pc, #16]	@ (8024c74 <__sinit+0x28>)
 8024c62:	6223      	str	r3, [r4, #32]
 8024c64:	4b04      	ldr	r3, [pc, #16]	@ (8024c78 <__sinit+0x2c>)
 8024c66:	681b      	ldr	r3, [r3, #0]
 8024c68:	2b00      	cmp	r3, #0
 8024c6a:	d1f5      	bne.n	8024c58 <__sinit+0xc>
 8024c6c:	f7ff ffc4 	bl	8024bf8 <global_stdio_init.part.0>
 8024c70:	e7f2      	b.n	8024c58 <__sinit+0xc>
 8024c72:	bf00      	nop
 8024c74:	08024bb9 	.word	0x08024bb9
 8024c78:	200198bc 	.word	0x200198bc

08024c7c <_fwalk_sglue>:
 8024c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024c80:	4607      	mov	r7, r0
 8024c82:	4688      	mov	r8, r1
 8024c84:	4614      	mov	r4, r2
 8024c86:	2600      	movs	r6, #0
 8024c88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024c8c:	f1b9 0901 	subs.w	r9, r9, #1
 8024c90:	d505      	bpl.n	8024c9e <_fwalk_sglue+0x22>
 8024c92:	6824      	ldr	r4, [r4, #0]
 8024c94:	2c00      	cmp	r4, #0
 8024c96:	d1f7      	bne.n	8024c88 <_fwalk_sglue+0xc>
 8024c98:	4630      	mov	r0, r6
 8024c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024c9e:	89ab      	ldrh	r3, [r5, #12]
 8024ca0:	2b01      	cmp	r3, #1
 8024ca2:	d907      	bls.n	8024cb4 <_fwalk_sglue+0x38>
 8024ca4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024ca8:	3301      	adds	r3, #1
 8024caa:	d003      	beq.n	8024cb4 <_fwalk_sglue+0x38>
 8024cac:	4629      	mov	r1, r5
 8024cae:	4638      	mov	r0, r7
 8024cb0:	47c0      	blx	r8
 8024cb2:	4306      	orrs	r6, r0
 8024cb4:	3568      	adds	r5, #104	@ 0x68
 8024cb6:	e7e9      	b.n	8024c8c <_fwalk_sglue+0x10>

08024cb8 <sniprintf>:
 8024cb8:	b40c      	push	{r2, r3}
 8024cba:	b530      	push	{r4, r5, lr}
 8024cbc:	4b17      	ldr	r3, [pc, #92]	@ (8024d1c <sniprintf+0x64>)
 8024cbe:	1e0c      	subs	r4, r1, #0
 8024cc0:	681d      	ldr	r5, [r3, #0]
 8024cc2:	b09d      	sub	sp, #116	@ 0x74
 8024cc4:	da08      	bge.n	8024cd8 <sniprintf+0x20>
 8024cc6:	238b      	movs	r3, #139	@ 0x8b
 8024cc8:	602b      	str	r3, [r5, #0]
 8024cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024cce:	b01d      	add	sp, #116	@ 0x74
 8024cd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024cd4:	b002      	add	sp, #8
 8024cd6:	4770      	bx	lr
 8024cd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8024cdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024ce0:	bf14      	ite	ne
 8024ce2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8024ce6:	4623      	moveq	r3, r4
 8024ce8:	9304      	str	r3, [sp, #16]
 8024cea:	9307      	str	r3, [sp, #28]
 8024cec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8024cf0:	9002      	str	r0, [sp, #8]
 8024cf2:	9006      	str	r0, [sp, #24]
 8024cf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024cf8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8024cfa:	ab21      	add	r3, sp, #132	@ 0x84
 8024cfc:	a902      	add	r1, sp, #8
 8024cfe:	4628      	mov	r0, r5
 8024d00:	9301      	str	r3, [sp, #4]
 8024d02:	f001 fc19 	bl	8026538 <_svfiprintf_r>
 8024d06:	1c43      	adds	r3, r0, #1
 8024d08:	bfbc      	itt	lt
 8024d0a:	238b      	movlt	r3, #139	@ 0x8b
 8024d0c:	602b      	strlt	r3, [r5, #0]
 8024d0e:	2c00      	cmp	r4, #0
 8024d10:	d0dd      	beq.n	8024cce <sniprintf+0x16>
 8024d12:	9b02      	ldr	r3, [sp, #8]
 8024d14:	2200      	movs	r2, #0
 8024d16:	701a      	strb	r2, [r3, #0]
 8024d18:	e7d9      	b.n	8024cce <sniprintf+0x16>
 8024d1a:	bf00      	nop
 8024d1c:	200001b4 	.word	0x200001b4

08024d20 <__sread>:
 8024d20:	b510      	push	{r4, lr}
 8024d22:	460c      	mov	r4, r1
 8024d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d28:	f000 f90c 	bl	8024f44 <_read_r>
 8024d2c:	2800      	cmp	r0, #0
 8024d2e:	bfab      	itete	ge
 8024d30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8024d32:	89a3      	ldrhlt	r3, [r4, #12]
 8024d34:	181b      	addge	r3, r3, r0
 8024d36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8024d3a:	bfac      	ite	ge
 8024d3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8024d3e:	81a3      	strhlt	r3, [r4, #12]
 8024d40:	bd10      	pop	{r4, pc}

08024d42 <__swrite>:
 8024d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d46:	461f      	mov	r7, r3
 8024d48:	898b      	ldrh	r3, [r1, #12]
 8024d4a:	05db      	lsls	r3, r3, #23
 8024d4c:	4605      	mov	r5, r0
 8024d4e:	460c      	mov	r4, r1
 8024d50:	4616      	mov	r6, r2
 8024d52:	d505      	bpl.n	8024d60 <__swrite+0x1e>
 8024d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d58:	2302      	movs	r3, #2
 8024d5a:	2200      	movs	r2, #0
 8024d5c:	f000 f8e0 	bl	8024f20 <_lseek_r>
 8024d60:	89a3      	ldrh	r3, [r4, #12]
 8024d62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024d66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8024d6a:	81a3      	strh	r3, [r4, #12]
 8024d6c:	4632      	mov	r2, r6
 8024d6e:	463b      	mov	r3, r7
 8024d70:	4628      	mov	r0, r5
 8024d72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024d76:	f000 b91b 	b.w	8024fb0 <_write_r>

08024d7a <__sseek>:
 8024d7a:	b510      	push	{r4, lr}
 8024d7c:	460c      	mov	r4, r1
 8024d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024d82:	f000 f8cd 	bl	8024f20 <_lseek_r>
 8024d86:	1c43      	adds	r3, r0, #1
 8024d88:	89a3      	ldrh	r3, [r4, #12]
 8024d8a:	bf15      	itete	ne
 8024d8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8024d8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8024d92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8024d96:	81a3      	strheq	r3, [r4, #12]
 8024d98:	bf18      	it	ne
 8024d9a:	81a3      	strhne	r3, [r4, #12]
 8024d9c:	bd10      	pop	{r4, pc}

08024d9e <__sclose>:
 8024d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024da2:	f000 b857 	b.w	8024e54 <_close_r>

08024da6 <memmove>:
 8024da6:	4288      	cmp	r0, r1
 8024da8:	b510      	push	{r4, lr}
 8024daa:	eb01 0402 	add.w	r4, r1, r2
 8024dae:	d902      	bls.n	8024db6 <memmove+0x10>
 8024db0:	4284      	cmp	r4, r0
 8024db2:	4623      	mov	r3, r4
 8024db4:	d807      	bhi.n	8024dc6 <memmove+0x20>
 8024db6:	1e43      	subs	r3, r0, #1
 8024db8:	42a1      	cmp	r1, r4
 8024dba:	d008      	beq.n	8024dce <memmove+0x28>
 8024dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024dc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024dc4:	e7f8      	b.n	8024db8 <memmove+0x12>
 8024dc6:	4402      	add	r2, r0
 8024dc8:	4601      	mov	r1, r0
 8024dca:	428a      	cmp	r2, r1
 8024dcc:	d100      	bne.n	8024dd0 <memmove+0x2a>
 8024dce:	bd10      	pop	{r4, pc}
 8024dd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024dd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024dd8:	e7f7      	b.n	8024dca <memmove+0x24>

08024dda <memset>:
 8024dda:	4402      	add	r2, r0
 8024ddc:	4603      	mov	r3, r0
 8024dde:	4293      	cmp	r3, r2
 8024de0:	d100      	bne.n	8024de4 <memset+0xa>
 8024de2:	4770      	bx	lr
 8024de4:	f803 1b01 	strb.w	r1, [r3], #1
 8024de8:	e7f9      	b.n	8024dde <memset+0x4>

08024dea <_raise_r>:
 8024dea:	291f      	cmp	r1, #31
 8024dec:	b538      	push	{r3, r4, r5, lr}
 8024dee:	4605      	mov	r5, r0
 8024df0:	460c      	mov	r4, r1
 8024df2:	d904      	bls.n	8024dfe <_raise_r+0x14>
 8024df4:	2316      	movs	r3, #22
 8024df6:	6003      	str	r3, [r0, #0]
 8024df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8024dfc:	bd38      	pop	{r3, r4, r5, pc}
 8024dfe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024e00:	b112      	cbz	r2, 8024e08 <_raise_r+0x1e>
 8024e02:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024e06:	b94b      	cbnz	r3, 8024e1c <_raise_r+0x32>
 8024e08:	4628      	mov	r0, r5
 8024e0a:	f000 f8bf 	bl	8024f8c <_getpid_r>
 8024e0e:	4622      	mov	r2, r4
 8024e10:	4601      	mov	r1, r0
 8024e12:	4628      	mov	r0, r5
 8024e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e18:	f000 b8a6 	b.w	8024f68 <_kill_r>
 8024e1c:	2b01      	cmp	r3, #1
 8024e1e:	d00a      	beq.n	8024e36 <_raise_r+0x4c>
 8024e20:	1c59      	adds	r1, r3, #1
 8024e22:	d103      	bne.n	8024e2c <_raise_r+0x42>
 8024e24:	2316      	movs	r3, #22
 8024e26:	6003      	str	r3, [r0, #0]
 8024e28:	2001      	movs	r0, #1
 8024e2a:	e7e7      	b.n	8024dfc <_raise_r+0x12>
 8024e2c:	2100      	movs	r1, #0
 8024e2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024e32:	4620      	mov	r0, r4
 8024e34:	4798      	blx	r3
 8024e36:	2000      	movs	r0, #0
 8024e38:	e7e0      	b.n	8024dfc <_raise_r+0x12>
	...

08024e3c <raise>:
 8024e3c:	4b02      	ldr	r3, [pc, #8]	@ (8024e48 <raise+0xc>)
 8024e3e:	4601      	mov	r1, r0
 8024e40:	6818      	ldr	r0, [r3, #0]
 8024e42:	f7ff bfd2 	b.w	8024dea <_raise_r>
 8024e46:	bf00      	nop
 8024e48:	200001b4 	.word	0x200001b4

08024e4c <_localeconv_r>:
 8024e4c:	4800      	ldr	r0, [pc, #0]	@ (8024e50 <_localeconv_r+0x4>)
 8024e4e:	4770      	bx	lr
 8024e50:	200002f4 	.word	0x200002f4

08024e54 <_close_r>:
 8024e54:	b538      	push	{r3, r4, r5, lr}
 8024e56:	4d06      	ldr	r5, [pc, #24]	@ (8024e70 <_close_r+0x1c>)
 8024e58:	2300      	movs	r3, #0
 8024e5a:	4604      	mov	r4, r0
 8024e5c:	4608      	mov	r0, r1
 8024e5e:	602b      	str	r3, [r5, #0]
 8024e60:	f7e3 ff66 	bl	8008d30 <_close>
 8024e64:	1c43      	adds	r3, r0, #1
 8024e66:	d102      	bne.n	8024e6e <_close_r+0x1a>
 8024e68:	682b      	ldr	r3, [r5, #0]
 8024e6a:	b103      	cbz	r3, 8024e6e <_close_r+0x1a>
 8024e6c:	6023      	str	r3, [r4, #0]
 8024e6e:	bd38      	pop	{r3, r4, r5, pc}
 8024e70:	200198c0 	.word	0x200198c0

08024e74 <_reclaim_reent>:
 8024e74:	4b29      	ldr	r3, [pc, #164]	@ (8024f1c <_reclaim_reent+0xa8>)
 8024e76:	681b      	ldr	r3, [r3, #0]
 8024e78:	4283      	cmp	r3, r0
 8024e7a:	b570      	push	{r4, r5, r6, lr}
 8024e7c:	4604      	mov	r4, r0
 8024e7e:	d04b      	beq.n	8024f18 <_reclaim_reent+0xa4>
 8024e80:	69c3      	ldr	r3, [r0, #28]
 8024e82:	b1ab      	cbz	r3, 8024eb0 <_reclaim_reent+0x3c>
 8024e84:	68db      	ldr	r3, [r3, #12]
 8024e86:	b16b      	cbz	r3, 8024ea4 <_reclaim_reent+0x30>
 8024e88:	2500      	movs	r5, #0
 8024e8a:	69e3      	ldr	r3, [r4, #28]
 8024e8c:	68db      	ldr	r3, [r3, #12]
 8024e8e:	5959      	ldr	r1, [r3, r5]
 8024e90:	2900      	cmp	r1, #0
 8024e92:	d13b      	bne.n	8024f0c <_reclaim_reent+0x98>
 8024e94:	3504      	adds	r5, #4
 8024e96:	2d80      	cmp	r5, #128	@ 0x80
 8024e98:	d1f7      	bne.n	8024e8a <_reclaim_reent+0x16>
 8024e9a:	69e3      	ldr	r3, [r4, #28]
 8024e9c:	4620      	mov	r0, r4
 8024e9e:	68d9      	ldr	r1, [r3, #12]
 8024ea0:	f000 ff22 	bl	8025ce8 <_free_r>
 8024ea4:	69e3      	ldr	r3, [r4, #28]
 8024ea6:	6819      	ldr	r1, [r3, #0]
 8024ea8:	b111      	cbz	r1, 8024eb0 <_reclaim_reent+0x3c>
 8024eaa:	4620      	mov	r0, r4
 8024eac:	f000 ff1c 	bl	8025ce8 <_free_r>
 8024eb0:	6961      	ldr	r1, [r4, #20]
 8024eb2:	b111      	cbz	r1, 8024eba <_reclaim_reent+0x46>
 8024eb4:	4620      	mov	r0, r4
 8024eb6:	f000 ff17 	bl	8025ce8 <_free_r>
 8024eba:	69e1      	ldr	r1, [r4, #28]
 8024ebc:	b111      	cbz	r1, 8024ec4 <_reclaim_reent+0x50>
 8024ebe:	4620      	mov	r0, r4
 8024ec0:	f000 ff12 	bl	8025ce8 <_free_r>
 8024ec4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8024ec6:	b111      	cbz	r1, 8024ece <_reclaim_reent+0x5a>
 8024ec8:	4620      	mov	r0, r4
 8024eca:	f000 ff0d 	bl	8025ce8 <_free_r>
 8024ece:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024ed0:	b111      	cbz	r1, 8024ed8 <_reclaim_reent+0x64>
 8024ed2:	4620      	mov	r0, r4
 8024ed4:	f000 ff08 	bl	8025ce8 <_free_r>
 8024ed8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8024eda:	b111      	cbz	r1, 8024ee2 <_reclaim_reent+0x6e>
 8024edc:	4620      	mov	r0, r4
 8024ede:	f000 ff03 	bl	8025ce8 <_free_r>
 8024ee2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8024ee4:	b111      	cbz	r1, 8024eec <_reclaim_reent+0x78>
 8024ee6:	4620      	mov	r0, r4
 8024ee8:	f000 fefe 	bl	8025ce8 <_free_r>
 8024eec:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8024eee:	b111      	cbz	r1, 8024ef6 <_reclaim_reent+0x82>
 8024ef0:	4620      	mov	r0, r4
 8024ef2:	f000 fef9 	bl	8025ce8 <_free_r>
 8024ef6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8024ef8:	b111      	cbz	r1, 8024f00 <_reclaim_reent+0x8c>
 8024efa:	4620      	mov	r0, r4
 8024efc:	f000 fef4 	bl	8025ce8 <_free_r>
 8024f00:	6a23      	ldr	r3, [r4, #32]
 8024f02:	b14b      	cbz	r3, 8024f18 <_reclaim_reent+0xa4>
 8024f04:	4620      	mov	r0, r4
 8024f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024f0a:	4718      	bx	r3
 8024f0c:	680e      	ldr	r6, [r1, #0]
 8024f0e:	4620      	mov	r0, r4
 8024f10:	f000 feea 	bl	8025ce8 <_free_r>
 8024f14:	4631      	mov	r1, r6
 8024f16:	e7bb      	b.n	8024e90 <_reclaim_reent+0x1c>
 8024f18:	bd70      	pop	{r4, r5, r6, pc}
 8024f1a:	bf00      	nop
 8024f1c:	200001b4 	.word	0x200001b4

08024f20 <_lseek_r>:
 8024f20:	b538      	push	{r3, r4, r5, lr}
 8024f22:	4d07      	ldr	r5, [pc, #28]	@ (8024f40 <_lseek_r+0x20>)
 8024f24:	4604      	mov	r4, r0
 8024f26:	4608      	mov	r0, r1
 8024f28:	4611      	mov	r1, r2
 8024f2a:	2200      	movs	r2, #0
 8024f2c:	602a      	str	r2, [r5, #0]
 8024f2e:	461a      	mov	r2, r3
 8024f30:	f7e3 ff25 	bl	8008d7e <_lseek>
 8024f34:	1c43      	adds	r3, r0, #1
 8024f36:	d102      	bne.n	8024f3e <_lseek_r+0x1e>
 8024f38:	682b      	ldr	r3, [r5, #0]
 8024f3a:	b103      	cbz	r3, 8024f3e <_lseek_r+0x1e>
 8024f3c:	6023      	str	r3, [r4, #0]
 8024f3e:	bd38      	pop	{r3, r4, r5, pc}
 8024f40:	200198c0 	.word	0x200198c0

08024f44 <_read_r>:
 8024f44:	b538      	push	{r3, r4, r5, lr}
 8024f46:	4d07      	ldr	r5, [pc, #28]	@ (8024f64 <_read_r+0x20>)
 8024f48:	4604      	mov	r4, r0
 8024f4a:	4608      	mov	r0, r1
 8024f4c:	4611      	mov	r1, r2
 8024f4e:	2200      	movs	r2, #0
 8024f50:	602a      	str	r2, [r5, #0]
 8024f52:	461a      	mov	r2, r3
 8024f54:	f7e3 feb3 	bl	8008cbe <_read>
 8024f58:	1c43      	adds	r3, r0, #1
 8024f5a:	d102      	bne.n	8024f62 <_read_r+0x1e>
 8024f5c:	682b      	ldr	r3, [r5, #0]
 8024f5e:	b103      	cbz	r3, 8024f62 <_read_r+0x1e>
 8024f60:	6023      	str	r3, [r4, #0]
 8024f62:	bd38      	pop	{r3, r4, r5, pc}
 8024f64:	200198c0 	.word	0x200198c0

08024f68 <_kill_r>:
 8024f68:	b538      	push	{r3, r4, r5, lr}
 8024f6a:	4d07      	ldr	r5, [pc, #28]	@ (8024f88 <_kill_r+0x20>)
 8024f6c:	2300      	movs	r3, #0
 8024f6e:	4604      	mov	r4, r0
 8024f70:	4608      	mov	r0, r1
 8024f72:	4611      	mov	r1, r2
 8024f74:	602b      	str	r3, [r5, #0]
 8024f76:	f7e3 fe87 	bl	8008c88 <_kill>
 8024f7a:	1c43      	adds	r3, r0, #1
 8024f7c:	d102      	bne.n	8024f84 <_kill_r+0x1c>
 8024f7e:	682b      	ldr	r3, [r5, #0]
 8024f80:	b103      	cbz	r3, 8024f84 <_kill_r+0x1c>
 8024f82:	6023      	str	r3, [r4, #0]
 8024f84:	bd38      	pop	{r3, r4, r5, pc}
 8024f86:	bf00      	nop
 8024f88:	200198c0 	.word	0x200198c0

08024f8c <_getpid_r>:
 8024f8c:	f7e3 be74 	b.w	8008c78 <_getpid>

08024f90 <_sbrk_r>:
 8024f90:	b538      	push	{r3, r4, r5, lr}
 8024f92:	4d06      	ldr	r5, [pc, #24]	@ (8024fac <_sbrk_r+0x1c>)
 8024f94:	2300      	movs	r3, #0
 8024f96:	4604      	mov	r4, r0
 8024f98:	4608      	mov	r0, r1
 8024f9a:	602b      	str	r3, [r5, #0]
 8024f9c:	f7e3 fefc 	bl	8008d98 <_sbrk>
 8024fa0:	1c43      	adds	r3, r0, #1
 8024fa2:	d102      	bne.n	8024faa <_sbrk_r+0x1a>
 8024fa4:	682b      	ldr	r3, [r5, #0]
 8024fa6:	b103      	cbz	r3, 8024faa <_sbrk_r+0x1a>
 8024fa8:	6023      	str	r3, [r4, #0]
 8024faa:	bd38      	pop	{r3, r4, r5, pc}
 8024fac:	200198c0 	.word	0x200198c0

08024fb0 <_write_r>:
 8024fb0:	b538      	push	{r3, r4, r5, lr}
 8024fb2:	4d07      	ldr	r5, [pc, #28]	@ (8024fd0 <_write_r+0x20>)
 8024fb4:	4604      	mov	r4, r0
 8024fb6:	4608      	mov	r0, r1
 8024fb8:	4611      	mov	r1, r2
 8024fba:	2200      	movs	r2, #0
 8024fbc:	602a      	str	r2, [r5, #0]
 8024fbe:	461a      	mov	r2, r3
 8024fc0:	f7e3 fe9a 	bl	8008cf8 <_write>
 8024fc4:	1c43      	adds	r3, r0, #1
 8024fc6:	d102      	bne.n	8024fce <_write_r+0x1e>
 8024fc8:	682b      	ldr	r3, [r5, #0]
 8024fca:	b103      	cbz	r3, 8024fce <_write_r+0x1e>
 8024fcc:	6023      	str	r3, [r4, #0]
 8024fce:	bd38      	pop	{r3, r4, r5, pc}
 8024fd0:	200198c0 	.word	0x200198c0

08024fd4 <__errno>:
 8024fd4:	4b01      	ldr	r3, [pc, #4]	@ (8024fdc <__errno+0x8>)
 8024fd6:	6818      	ldr	r0, [r3, #0]
 8024fd8:	4770      	bx	lr
 8024fda:	bf00      	nop
 8024fdc:	200001b4 	.word	0x200001b4

08024fe0 <__libc_init_array>:
 8024fe0:	b570      	push	{r4, r5, r6, lr}
 8024fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8025018 <__libc_init_array+0x38>)
 8024fe4:	4c0d      	ldr	r4, [pc, #52]	@ (802501c <__libc_init_array+0x3c>)
 8024fe6:	1b64      	subs	r4, r4, r5
 8024fe8:	10a4      	asrs	r4, r4, #2
 8024fea:	2600      	movs	r6, #0
 8024fec:	42a6      	cmp	r6, r4
 8024fee:	d109      	bne.n	8025004 <__libc_init_array+0x24>
 8024ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8025020 <__libc_init_array+0x40>)
 8024ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8025024 <__libc_init_array+0x44>)
 8024ff4:	f001 ff3c 	bl	8026e70 <_init>
 8024ff8:	1b64      	subs	r4, r4, r5
 8024ffa:	10a4      	asrs	r4, r4, #2
 8024ffc:	2600      	movs	r6, #0
 8024ffe:	42a6      	cmp	r6, r4
 8025000:	d105      	bne.n	802500e <__libc_init_array+0x2e>
 8025002:	bd70      	pop	{r4, r5, r6, pc}
 8025004:	f855 3b04 	ldr.w	r3, [r5], #4
 8025008:	4798      	blx	r3
 802500a:	3601      	adds	r6, #1
 802500c:	e7ee      	b.n	8024fec <__libc_init_array+0xc>
 802500e:	f855 3b04 	ldr.w	r3, [r5], #4
 8025012:	4798      	blx	r3
 8025014:	3601      	adds	r6, #1
 8025016:	e7f2      	b.n	8024ffe <__libc_init_array+0x1e>
 8025018:	08028320 	.word	0x08028320
 802501c:	08028320 	.word	0x08028320
 8025020:	08028320 	.word	0x08028320
 8025024:	08028328 	.word	0x08028328

08025028 <__retarget_lock_init_recursive>:
 8025028:	4770      	bx	lr

0802502a <__retarget_lock_acquire_recursive>:
 802502a:	4770      	bx	lr

0802502c <__retarget_lock_release_recursive>:
 802502c:	4770      	bx	lr

0802502e <memcpy>:
 802502e:	440a      	add	r2, r1
 8025030:	4291      	cmp	r1, r2
 8025032:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8025036:	d100      	bne.n	802503a <memcpy+0xc>
 8025038:	4770      	bx	lr
 802503a:	b510      	push	{r4, lr}
 802503c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025040:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025044:	4291      	cmp	r1, r2
 8025046:	d1f9      	bne.n	802503c <memcpy+0xe>
 8025048:	bd10      	pop	{r4, pc}

0802504a <quorem>:
 802504a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802504e:	6903      	ldr	r3, [r0, #16]
 8025050:	690c      	ldr	r4, [r1, #16]
 8025052:	42a3      	cmp	r3, r4
 8025054:	4607      	mov	r7, r0
 8025056:	db7e      	blt.n	8025156 <quorem+0x10c>
 8025058:	3c01      	subs	r4, #1
 802505a:	f101 0814 	add.w	r8, r1, #20
 802505e:	00a3      	lsls	r3, r4, #2
 8025060:	f100 0514 	add.w	r5, r0, #20
 8025064:	9300      	str	r3, [sp, #0]
 8025066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802506a:	9301      	str	r3, [sp, #4]
 802506c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025070:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025074:	3301      	adds	r3, #1
 8025076:	429a      	cmp	r2, r3
 8025078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802507c:	fbb2 f6f3 	udiv	r6, r2, r3
 8025080:	d32e      	bcc.n	80250e0 <quorem+0x96>
 8025082:	f04f 0a00 	mov.w	sl, #0
 8025086:	46c4      	mov	ip, r8
 8025088:	46ae      	mov	lr, r5
 802508a:	46d3      	mov	fp, sl
 802508c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8025090:	b298      	uxth	r0, r3
 8025092:	fb06 a000 	mla	r0, r6, r0, sl
 8025096:	0c02      	lsrs	r2, r0, #16
 8025098:	0c1b      	lsrs	r3, r3, #16
 802509a:	fb06 2303 	mla	r3, r6, r3, r2
 802509e:	f8de 2000 	ldr.w	r2, [lr]
 80250a2:	b280      	uxth	r0, r0
 80250a4:	b292      	uxth	r2, r2
 80250a6:	1a12      	subs	r2, r2, r0
 80250a8:	445a      	add	r2, fp
 80250aa:	f8de 0000 	ldr.w	r0, [lr]
 80250ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80250b2:	b29b      	uxth	r3, r3
 80250b4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80250b8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80250bc:	b292      	uxth	r2, r2
 80250be:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80250c2:	45e1      	cmp	r9, ip
 80250c4:	f84e 2b04 	str.w	r2, [lr], #4
 80250c8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80250cc:	d2de      	bcs.n	802508c <quorem+0x42>
 80250ce:	9b00      	ldr	r3, [sp, #0]
 80250d0:	58eb      	ldr	r3, [r5, r3]
 80250d2:	b92b      	cbnz	r3, 80250e0 <quorem+0x96>
 80250d4:	9b01      	ldr	r3, [sp, #4]
 80250d6:	3b04      	subs	r3, #4
 80250d8:	429d      	cmp	r5, r3
 80250da:	461a      	mov	r2, r3
 80250dc:	d32f      	bcc.n	802513e <quorem+0xf4>
 80250de:	613c      	str	r4, [r7, #16]
 80250e0:	4638      	mov	r0, r7
 80250e2:	f001 f8c5 	bl	8026270 <__mcmp>
 80250e6:	2800      	cmp	r0, #0
 80250e8:	db25      	blt.n	8025136 <quorem+0xec>
 80250ea:	4629      	mov	r1, r5
 80250ec:	2000      	movs	r0, #0
 80250ee:	f858 2b04 	ldr.w	r2, [r8], #4
 80250f2:	f8d1 c000 	ldr.w	ip, [r1]
 80250f6:	fa1f fe82 	uxth.w	lr, r2
 80250fa:	fa1f f38c 	uxth.w	r3, ip
 80250fe:	eba3 030e 	sub.w	r3, r3, lr
 8025102:	4403      	add	r3, r0
 8025104:	0c12      	lsrs	r2, r2, #16
 8025106:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 802510a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802510e:	b29b      	uxth	r3, r3
 8025110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025114:	45c1      	cmp	r9, r8
 8025116:	f841 3b04 	str.w	r3, [r1], #4
 802511a:	ea4f 4022 	mov.w	r0, r2, asr #16
 802511e:	d2e6      	bcs.n	80250ee <quorem+0xa4>
 8025120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025128:	b922      	cbnz	r2, 8025134 <quorem+0xea>
 802512a:	3b04      	subs	r3, #4
 802512c:	429d      	cmp	r5, r3
 802512e:	461a      	mov	r2, r3
 8025130:	d30b      	bcc.n	802514a <quorem+0x100>
 8025132:	613c      	str	r4, [r7, #16]
 8025134:	3601      	adds	r6, #1
 8025136:	4630      	mov	r0, r6
 8025138:	b003      	add	sp, #12
 802513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802513e:	6812      	ldr	r2, [r2, #0]
 8025140:	3b04      	subs	r3, #4
 8025142:	2a00      	cmp	r2, #0
 8025144:	d1cb      	bne.n	80250de <quorem+0x94>
 8025146:	3c01      	subs	r4, #1
 8025148:	e7c6      	b.n	80250d8 <quorem+0x8e>
 802514a:	6812      	ldr	r2, [r2, #0]
 802514c:	3b04      	subs	r3, #4
 802514e:	2a00      	cmp	r2, #0
 8025150:	d1ef      	bne.n	8025132 <quorem+0xe8>
 8025152:	3c01      	subs	r4, #1
 8025154:	e7ea      	b.n	802512c <quorem+0xe2>
 8025156:	2000      	movs	r0, #0
 8025158:	e7ee      	b.n	8025138 <quorem+0xee>
 802515a:	0000      	movs	r0, r0
 802515c:	0000      	movs	r0, r0
	...

08025160 <_dtoa_r>:
 8025160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025164:	69c7      	ldr	r7, [r0, #28]
 8025166:	b099      	sub	sp, #100	@ 0x64
 8025168:	ed8d 0b02 	vstr	d0, [sp, #8]
 802516c:	ec55 4b10 	vmov	r4, r5, d0
 8025170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8025172:	9109      	str	r1, [sp, #36]	@ 0x24
 8025174:	4683      	mov	fp, r0
 8025176:	920e      	str	r2, [sp, #56]	@ 0x38
 8025178:	9313      	str	r3, [sp, #76]	@ 0x4c
 802517a:	b97f      	cbnz	r7, 802519c <_dtoa_r+0x3c>
 802517c:	2010      	movs	r0, #16
 802517e:	f7fe ffc3 	bl	8024108 <malloc>
 8025182:	4602      	mov	r2, r0
 8025184:	f8cb 001c 	str.w	r0, [fp, #28]
 8025188:	b920      	cbnz	r0, 8025194 <_dtoa_r+0x34>
 802518a:	4ba7      	ldr	r3, [pc, #668]	@ (8025428 <_dtoa_r+0x2c8>)
 802518c:	21ef      	movs	r1, #239	@ 0xef
 802518e:	48a7      	ldr	r0, [pc, #668]	@ (802542c <_dtoa_r+0x2cc>)
 8025190:	f001 fb7a 	bl	8026888 <__assert_func>
 8025194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8025198:	6007      	str	r7, [r0, #0]
 802519a:	60c7      	str	r7, [r0, #12]
 802519c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80251a0:	6819      	ldr	r1, [r3, #0]
 80251a2:	b159      	cbz	r1, 80251bc <_dtoa_r+0x5c>
 80251a4:	685a      	ldr	r2, [r3, #4]
 80251a6:	604a      	str	r2, [r1, #4]
 80251a8:	2301      	movs	r3, #1
 80251aa:	4093      	lsls	r3, r2
 80251ac:	608b      	str	r3, [r1, #8]
 80251ae:	4658      	mov	r0, fp
 80251b0:	f000 fe24 	bl	8025dfc <_Bfree>
 80251b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80251b8:	2200      	movs	r2, #0
 80251ba:	601a      	str	r2, [r3, #0]
 80251bc:	1e2b      	subs	r3, r5, #0
 80251be:	bfb9      	ittee	lt
 80251c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80251c4:	9303      	strlt	r3, [sp, #12]
 80251c6:	2300      	movge	r3, #0
 80251c8:	6033      	strge	r3, [r6, #0]
 80251ca:	9f03      	ldr	r7, [sp, #12]
 80251cc:	4b98      	ldr	r3, [pc, #608]	@ (8025430 <_dtoa_r+0x2d0>)
 80251ce:	bfbc      	itt	lt
 80251d0:	2201      	movlt	r2, #1
 80251d2:	6032      	strlt	r2, [r6, #0]
 80251d4:	43bb      	bics	r3, r7
 80251d6:	d112      	bne.n	80251fe <_dtoa_r+0x9e>
 80251d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80251da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80251de:	6013      	str	r3, [r2, #0]
 80251e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80251e4:	4323      	orrs	r3, r4
 80251e6:	f000 854d 	beq.w	8025c84 <_dtoa_r+0xb24>
 80251ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80251ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8025444 <_dtoa_r+0x2e4>
 80251f0:	2b00      	cmp	r3, #0
 80251f2:	f000 854f 	beq.w	8025c94 <_dtoa_r+0xb34>
 80251f6:	f10a 0303 	add.w	r3, sl, #3
 80251fa:	f000 bd49 	b.w	8025c90 <_dtoa_r+0xb30>
 80251fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025202:	2200      	movs	r2, #0
 8025204:	ec51 0b17 	vmov	r0, r1, d7
 8025208:	2300      	movs	r3, #0
 802520a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 802520e:	f7db fc83 	bl	8000b18 <__aeabi_dcmpeq>
 8025212:	4680      	mov	r8, r0
 8025214:	b158      	cbz	r0, 802522e <_dtoa_r+0xce>
 8025216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8025218:	2301      	movs	r3, #1
 802521a:	6013      	str	r3, [r2, #0]
 802521c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802521e:	b113      	cbz	r3, 8025226 <_dtoa_r+0xc6>
 8025220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025222:	4b84      	ldr	r3, [pc, #528]	@ (8025434 <_dtoa_r+0x2d4>)
 8025224:	6013      	str	r3, [r2, #0]
 8025226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8025448 <_dtoa_r+0x2e8>
 802522a:	f000 bd33 	b.w	8025c94 <_dtoa_r+0xb34>
 802522e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8025232:	aa16      	add	r2, sp, #88	@ 0x58
 8025234:	a917      	add	r1, sp, #92	@ 0x5c
 8025236:	4658      	mov	r0, fp
 8025238:	f001 f8ca 	bl	80263d0 <__d2b>
 802523c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8025240:	4681      	mov	r9, r0
 8025242:	2e00      	cmp	r6, #0
 8025244:	d077      	beq.n	8025336 <_dtoa_r+0x1d6>
 8025246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8025248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 802524c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8025258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 802525c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8025260:	4619      	mov	r1, r3
 8025262:	2200      	movs	r2, #0
 8025264:	4b74      	ldr	r3, [pc, #464]	@ (8025438 <_dtoa_r+0x2d8>)
 8025266:	f7db f837 	bl	80002d8 <__aeabi_dsub>
 802526a:	a369      	add	r3, pc, #420	@ (adr r3, 8025410 <_dtoa_r+0x2b0>)
 802526c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025270:	f7db f9ea 	bl	8000648 <__aeabi_dmul>
 8025274:	a368      	add	r3, pc, #416	@ (adr r3, 8025418 <_dtoa_r+0x2b8>)
 8025276:	e9d3 2300 	ldrd	r2, r3, [r3]
 802527a:	f7db f82f 	bl	80002dc <__adddf3>
 802527e:	4604      	mov	r4, r0
 8025280:	4630      	mov	r0, r6
 8025282:	460d      	mov	r5, r1
 8025284:	f7db f976 	bl	8000574 <__aeabi_i2d>
 8025288:	a365      	add	r3, pc, #404	@ (adr r3, 8025420 <_dtoa_r+0x2c0>)
 802528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802528e:	f7db f9db 	bl	8000648 <__aeabi_dmul>
 8025292:	4602      	mov	r2, r0
 8025294:	460b      	mov	r3, r1
 8025296:	4620      	mov	r0, r4
 8025298:	4629      	mov	r1, r5
 802529a:	f7db f81f 	bl	80002dc <__adddf3>
 802529e:	4604      	mov	r4, r0
 80252a0:	460d      	mov	r5, r1
 80252a2:	f7db fc81 	bl	8000ba8 <__aeabi_d2iz>
 80252a6:	2200      	movs	r2, #0
 80252a8:	4607      	mov	r7, r0
 80252aa:	2300      	movs	r3, #0
 80252ac:	4620      	mov	r0, r4
 80252ae:	4629      	mov	r1, r5
 80252b0:	f7db fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80252b4:	b140      	cbz	r0, 80252c8 <_dtoa_r+0x168>
 80252b6:	4638      	mov	r0, r7
 80252b8:	f7db f95c 	bl	8000574 <__aeabi_i2d>
 80252bc:	4622      	mov	r2, r4
 80252be:	462b      	mov	r3, r5
 80252c0:	f7db fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 80252c4:	b900      	cbnz	r0, 80252c8 <_dtoa_r+0x168>
 80252c6:	3f01      	subs	r7, #1
 80252c8:	2f16      	cmp	r7, #22
 80252ca:	d851      	bhi.n	8025370 <_dtoa_r+0x210>
 80252cc:	4b5b      	ldr	r3, [pc, #364]	@ (802543c <_dtoa_r+0x2dc>)
 80252ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80252d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80252d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80252da:	f7db fc27 	bl	8000b2c <__aeabi_dcmplt>
 80252de:	2800      	cmp	r0, #0
 80252e0:	d048      	beq.n	8025374 <_dtoa_r+0x214>
 80252e2:	3f01      	subs	r7, #1
 80252e4:	2300      	movs	r3, #0
 80252e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80252e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80252ea:	1b9b      	subs	r3, r3, r6
 80252ec:	1e5a      	subs	r2, r3, #1
 80252ee:	bf44      	itt	mi
 80252f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80252f4:	2300      	movmi	r3, #0
 80252f6:	9208      	str	r2, [sp, #32]
 80252f8:	bf54      	ite	pl
 80252fa:	f04f 0800 	movpl.w	r8, #0
 80252fe:	9308      	strmi	r3, [sp, #32]
 8025300:	2f00      	cmp	r7, #0
 8025302:	db39      	blt.n	8025378 <_dtoa_r+0x218>
 8025304:	9b08      	ldr	r3, [sp, #32]
 8025306:	970f      	str	r7, [sp, #60]	@ 0x3c
 8025308:	443b      	add	r3, r7
 802530a:	9308      	str	r3, [sp, #32]
 802530c:	2300      	movs	r3, #0
 802530e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025312:	2b09      	cmp	r3, #9
 8025314:	d864      	bhi.n	80253e0 <_dtoa_r+0x280>
 8025316:	2b05      	cmp	r3, #5
 8025318:	bfc4      	itt	gt
 802531a:	3b04      	subgt	r3, #4
 802531c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 802531e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025320:	f1a3 0302 	sub.w	r3, r3, #2
 8025324:	bfcc      	ite	gt
 8025326:	2400      	movgt	r4, #0
 8025328:	2401      	movle	r4, #1
 802532a:	2b03      	cmp	r3, #3
 802532c:	d863      	bhi.n	80253f6 <_dtoa_r+0x296>
 802532e:	e8df f003 	tbb	[pc, r3]
 8025332:	372a      	.short	0x372a
 8025334:	5535      	.short	0x5535
 8025336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 802533a:	441e      	add	r6, r3
 802533c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8025340:	2b20      	cmp	r3, #32
 8025342:	bfc1      	itttt	gt
 8025344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8025348:	409f      	lslgt	r7, r3
 802534a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 802534e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8025352:	bfd6      	itet	le
 8025354:	f1c3 0320 	rsble	r3, r3, #32
 8025358:	ea47 0003 	orrgt.w	r0, r7, r3
 802535c:	fa04 f003 	lslle.w	r0, r4, r3
 8025360:	f7db f8f8 	bl	8000554 <__aeabi_ui2d>
 8025364:	2201      	movs	r2, #1
 8025366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 802536a:	3e01      	subs	r6, #1
 802536c:	9214      	str	r2, [sp, #80]	@ 0x50
 802536e:	e777      	b.n	8025260 <_dtoa_r+0x100>
 8025370:	2301      	movs	r3, #1
 8025372:	e7b8      	b.n	80252e6 <_dtoa_r+0x186>
 8025374:	9012      	str	r0, [sp, #72]	@ 0x48
 8025376:	e7b7      	b.n	80252e8 <_dtoa_r+0x188>
 8025378:	427b      	negs	r3, r7
 802537a:	930a      	str	r3, [sp, #40]	@ 0x28
 802537c:	2300      	movs	r3, #0
 802537e:	eba8 0807 	sub.w	r8, r8, r7
 8025382:	930f      	str	r3, [sp, #60]	@ 0x3c
 8025384:	e7c4      	b.n	8025310 <_dtoa_r+0x1b0>
 8025386:	2300      	movs	r3, #0
 8025388:	930b      	str	r3, [sp, #44]	@ 0x2c
 802538a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802538c:	2b00      	cmp	r3, #0
 802538e:	dc35      	bgt.n	80253fc <_dtoa_r+0x29c>
 8025390:	2301      	movs	r3, #1
 8025392:	9300      	str	r3, [sp, #0]
 8025394:	9307      	str	r3, [sp, #28]
 8025396:	461a      	mov	r2, r3
 8025398:	920e      	str	r2, [sp, #56]	@ 0x38
 802539a:	e00b      	b.n	80253b4 <_dtoa_r+0x254>
 802539c:	2301      	movs	r3, #1
 802539e:	e7f3      	b.n	8025388 <_dtoa_r+0x228>
 80253a0:	2300      	movs	r3, #0
 80253a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253a6:	18fb      	adds	r3, r7, r3
 80253a8:	9300      	str	r3, [sp, #0]
 80253aa:	3301      	adds	r3, #1
 80253ac:	2b01      	cmp	r3, #1
 80253ae:	9307      	str	r3, [sp, #28]
 80253b0:	bfb8      	it	lt
 80253b2:	2301      	movlt	r3, #1
 80253b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80253b8:	2100      	movs	r1, #0
 80253ba:	2204      	movs	r2, #4
 80253bc:	f102 0514 	add.w	r5, r2, #20
 80253c0:	429d      	cmp	r5, r3
 80253c2:	d91f      	bls.n	8025404 <_dtoa_r+0x2a4>
 80253c4:	6041      	str	r1, [r0, #4]
 80253c6:	4658      	mov	r0, fp
 80253c8:	f000 fcd8 	bl	8025d7c <_Balloc>
 80253cc:	4682      	mov	sl, r0
 80253ce:	2800      	cmp	r0, #0
 80253d0:	d13c      	bne.n	802544c <_dtoa_r+0x2ec>
 80253d2:	4b1b      	ldr	r3, [pc, #108]	@ (8025440 <_dtoa_r+0x2e0>)
 80253d4:	4602      	mov	r2, r0
 80253d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80253da:	e6d8      	b.n	802518e <_dtoa_r+0x2e>
 80253dc:	2301      	movs	r3, #1
 80253de:	e7e0      	b.n	80253a2 <_dtoa_r+0x242>
 80253e0:	2401      	movs	r4, #1
 80253e2:	2300      	movs	r3, #0
 80253e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80253e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80253e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80253ec:	9300      	str	r3, [sp, #0]
 80253ee:	9307      	str	r3, [sp, #28]
 80253f0:	2200      	movs	r2, #0
 80253f2:	2312      	movs	r3, #18
 80253f4:	e7d0      	b.n	8025398 <_dtoa_r+0x238>
 80253f6:	2301      	movs	r3, #1
 80253f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80253fa:	e7f5      	b.n	80253e8 <_dtoa_r+0x288>
 80253fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80253fe:	9300      	str	r3, [sp, #0]
 8025400:	9307      	str	r3, [sp, #28]
 8025402:	e7d7      	b.n	80253b4 <_dtoa_r+0x254>
 8025404:	3101      	adds	r1, #1
 8025406:	0052      	lsls	r2, r2, #1
 8025408:	e7d8      	b.n	80253bc <_dtoa_r+0x25c>
 802540a:	bf00      	nop
 802540c:	f3af 8000 	nop.w
 8025410:	636f4361 	.word	0x636f4361
 8025414:	3fd287a7 	.word	0x3fd287a7
 8025418:	8b60c8b3 	.word	0x8b60c8b3
 802541c:	3fc68a28 	.word	0x3fc68a28
 8025420:	509f79fb 	.word	0x509f79fb
 8025424:	3fd34413 	.word	0x3fd34413
 8025428:	08027fe9 	.word	0x08027fe9
 802542c:	08028000 	.word	0x08028000
 8025430:	7ff00000 	.word	0x7ff00000
 8025434:	08027fb9 	.word	0x08027fb9
 8025438:	3ff80000 	.word	0x3ff80000
 802543c:	080280f8 	.word	0x080280f8
 8025440:	08028058 	.word	0x08028058
 8025444:	08027fe5 	.word	0x08027fe5
 8025448:	08027fb8 	.word	0x08027fb8
 802544c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8025450:	6018      	str	r0, [r3, #0]
 8025452:	9b07      	ldr	r3, [sp, #28]
 8025454:	2b0e      	cmp	r3, #14
 8025456:	f200 80a4 	bhi.w	80255a2 <_dtoa_r+0x442>
 802545a:	2c00      	cmp	r4, #0
 802545c:	f000 80a1 	beq.w	80255a2 <_dtoa_r+0x442>
 8025460:	2f00      	cmp	r7, #0
 8025462:	dd33      	ble.n	80254cc <_dtoa_r+0x36c>
 8025464:	4bad      	ldr	r3, [pc, #692]	@ (802571c <_dtoa_r+0x5bc>)
 8025466:	f007 020f 	and.w	r2, r7, #15
 802546a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802546e:	ed93 7b00 	vldr	d7, [r3]
 8025472:	05f8      	lsls	r0, r7, #23
 8025474:	ed8d 7b04 	vstr	d7, [sp, #16]
 8025478:	ea4f 1427 	mov.w	r4, r7, asr #4
 802547c:	d516      	bpl.n	80254ac <_dtoa_r+0x34c>
 802547e:	4ba8      	ldr	r3, [pc, #672]	@ (8025720 <_dtoa_r+0x5c0>)
 8025480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8025484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8025488:	f7db fa08 	bl	800089c <__aeabi_ddiv>
 802548c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025490:	f004 040f 	and.w	r4, r4, #15
 8025494:	2603      	movs	r6, #3
 8025496:	4da2      	ldr	r5, [pc, #648]	@ (8025720 <_dtoa_r+0x5c0>)
 8025498:	b954      	cbnz	r4, 80254b0 <_dtoa_r+0x350>
 802549a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802549e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80254a2:	f7db f9fb 	bl	800089c <__aeabi_ddiv>
 80254a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254aa:	e028      	b.n	80254fe <_dtoa_r+0x39e>
 80254ac:	2602      	movs	r6, #2
 80254ae:	e7f2      	b.n	8025496 <_dtoa_r+0x336>
 80254b0:	07e1      	lsls	r1, r4, #31
 80254b2:	d508      	bpl.n	80254c6 <_dtoa_r+0x366>
 80254b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80254b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80254bc:	f7db f8c4 	bl	8000648 <__aeabi_dmul>
 80254c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80254c4:	3601      	adds	r6, #1
 80254c6:	1064      	asrs	r4, r4, #1
 80254c8:	3508      	adds	r5, #8
 80254ca:	e7e5      	b.n	8025498 <_dtoa_r+0x338>
 80254cc:	f000 80d2 	beq.w	8025674 <_dtoa_r+0x514>
 80254d0:	427c      	negs	r4, r7
 80254d2:	4b92      	ldr	r3, [pc, #584]	@ (802571c <_dtoa_r+0x5bc>)
 80254d4:	4d92      	ldr	r5, [pc, #584]	@ (8025720 <_dtoa_r+0x5c0>)
 80254d6:	f004 020f 	and.w	r2, r4, #15
 80254da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80254de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80254e6:	f7db f8af 	bl	8000648 <__aeabi_dmul>
 80254ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80254ee:	1124      	asrs	r4, r4, #4
 80254f0:	2300      	movs	r3, #0
 80254f2:	2602      	movs	r6, #2
 80254f4:	2c00      	cmp	r4, #0
 80254f6:	f040 80b2 	bne.w	802565e <_dtoa_r+0x4fe>
 80254fa:	2b00      	cmp	r3, #0
 80254fc:	d1d3      	bne.n	80254a6 <_dtoa_r+0x346>
 80254fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8025500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8025504:	2b00      	cmp	r3, #0
 8025506:	f000 80b7 	beq.w	8025678 <_dtoa_r+0x518>
 802550a:	4b86      	ldr	r3, [pc, #536]	@ (8025724 <_dtoa_r+0x5c4>)
 802550c:	2200      	movs	r2, #0
 802550e:	4620      	mov	r0, r4
 8025510:	4629      	mov	r1, r5
 8025512:	f7db fb0b 	bl	8000b2c <__aeabi_dcmplt>
 8025516:	2800      	cmp	r0, #0
 8025518:	f000 80ae 	beq.w	8025678 <_dtoa_r+0x518>
 802551c:	9b07      	ldr	r3, [sp, #28]
 802551e:	2b00      	cmp	r3, #0
 8025520:	f000 80aa 	beq.w	8025678 <_dtoa_r+0x518>
 8025524:	9b00      	ldr	r3, [sp, #0]
 8025526:	2b00      	cmp	r3, #0
 8025528:	dd37      	ble.n	802559a <_dtoa_r+0x43a>
 802552a:	1e7b      	subs	r3, r7, #1
 802552c:	9304      	str	r3, [sp, #16]
 802552e:	4620      	mov	r0, r4
 8025530:	4b7d      	ldr	r3, [pc, #500]	@ (8025728 <_dtoa_r+0x5c8>)
 8025532:	2200      	movs	r2, #0
 8025534:	4629      	mov	r1, r5
 8025536:	f7db f887 	bl	8000648 <__aeabi_dmul>
 802553a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802553e:	9c00      	ldr	r4, [sp, #0]
 8025540:	3601      	adds	r6, #1
 8025542:	4630      	mov	r0, r6
 8025544:	f7db f816 	bl	8000574 <__aeabi_i2d>
 8025548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802554c:	f7db f87c 	bl	8000648 <__aeabi_dmul>
 8025550:	4b76      	ldr	r3, [pc, #472]	@ (802572c <_dtoa_r+0x5cc>)
 8025552:	2200      	movs	r2, #0
 8025554:	f7da fec2 	bl	80002dc <__adddf3>
 8025558:	4605      	mov	r5, r0
 802555a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 802555e:	2c00      	cmp	r4, #0
 8025560:	f040 808d 	bne.w	802567e <_dtoa_r+0x51e>
 8025564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025568:	4b71      	ldr	r3, [pc, #452]	@ (8025730 <_dtoa_r+0x5d0>)
 802556a:	2200      	movs	r2, #0
 802556c:	f7da feb4 	bl	80002d8 <__aeabi_dsub>
 8025570:	4602      	mov	r2, r0
 8025572:	460b      	mov	r3, r1
 8025574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025578:	462a      	mov	r2, r5
 802557a:	4633      	mov	r3, r6
 802557c:	f7db faf4 	bl	8000b68 <__aeabi_dcmpgt>
 8025580:	2800      	cmp	r0, #0
 8025582:	f040 828b 	bne.w	8025a9c <_dtoa_r+0x93c>
 8025586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802558a:	462a      	mov	r2, r5
 802558c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8025590:	f7db facc 	bl	8000b2c <__aeabi_dcmplt>
 8025594:	2800      	cmp	r0, #0
 8025596:	f040 8128 	bne.w	80257ea <_dtoa_r+0x68a>
 802559a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 802559e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80255a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80255a4:	2b00      	cmp	r3, #0
 80255a6:	f2c0 815a 	blt.w	802585e <_dtoa_r+0x6fe>
 80255aa:	2f0e      	cmp	r7, #14
 80255ac:	f300 8157 	bgt.w	802585e <_dtoa_r+0x6fe>
 80255b0:	4b5a      	ldr	r3, [pc, #360]	@ (802571c <_dtoa_r+0x5bc>)
 80255b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80255b6:	ed93 7b00 	vldr	d7, [r3]
 80255ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80255bc:	2b00      	cmp	r3, #0
 80255be:	ed8d 7b00 	vstr	d7, [sp]
 80255c2:	da03      	bge.n	80255cc <_dtoa_r+0x46c>
 80255c4:	9b07      	ldr	r3, [sp, #28]
 80255c6:	2b00      	cmp	r3, #0
 80255c8:	f340 8101 	ble.w	80257ce <_dtoa_r+0x66e>
 80255cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80255d0:	4656      	mov	r6, sl
 80255d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80255d6:	4620      	mov	r0, r4
 80255d8:	4629      	mov	r1, r5
 80255da:	f7db f95f 	bl	800089c <__aeabi_ddiv>
 80255de:	f7db fae3 	bl	8000ba8 <__aeabi_d2iz>
 80255e2:	4680      	mov	r8, r0
 80255e4:	f7da ffc6 	bl	8000574 <__aeabi_i2d>
 80255e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80255ec:	f7db f82c 	bl	8000648 <__aeabi_dmul>
 80255f0:	4602      	mov	r2, r0
 80255f2:	460b      	mov	r3, r1
 80255f4:	4620      	mov	r0, r4
 80255f6:	4629      	mov	r1, r5
 80255f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80255fc:	f7da fe6c 	bl	80002d8 <__aeabi_dsub>
 8025600:	f806 4b01 	strb.w	r4, [r6], #1
 8025604:	9d07      	ldr	r5, [sp, #28]
 8025606:	eba6 040a 	sub.w	r4, r6, sl
 802560a:	42a5      	cmp	r5, r4
 802560c:	4602      	mov	r2, r0
 802560e:	460b      	mov	r3, r1
 8025610:	f040 8117 	bne.w	8025842 <_dtoa_r+0x6e2>
 8025614:	f7da fe62 	bl	80002dc <__adddf3>
 8025618:	e9dd 2300 	ldrd	r2, r3, [sp]
 802561c:	4604      	mov	r4, r0
 802561e:	460d      	mov	r5, r1
 8025620:	f7db faa2 	bl	8000b68 <__aeabi_dcmpgt>
 8025624:	2800      	cmp	r0, #0
 8025626:	f040 80f9 	bne.w	802581c <_dtoa_r+0x6bc>
 802562a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802562e:	4620      	mov	r0, r4
 8025630:	4629      	mov	r1, r5
 8025632:	f7db fa71 	bl	8000b18 <__aeabi_dcmpeq>
 8025636:	b118      	cbz	r0, 8025640 <_dtoa_r+0x4e0>
 8025638:	f018 0f01 	tst.w	r8, #1
 802563c:	f040 80ee 	bne.w	802581c <_dtoa_r+0x6bc>
 8025640:	4649      	mov	r1, r9
 8025642:	4658      	mov	r0, fp
 8025644:	f000 fbda 	bl	8025dfc <_Bfree>
 8025648:	2300      	movs	r3, #0
 802564a:	7033      	strb	r3, [r6, #0]
 802564c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 802564e:	3701      	adds	r7, #1
 8025650:	601f      	str	r7, [r3, #0]
 8025652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025654:	2b00      	cmp	r3, #0
 8025656:	f000 831d 	beq.w	8025c94 <_dtoa_r+0xb34>
 802565a:	601e      	str	r6, [r3, #0]
 802565c:	e31a      	b.n	8025c94 <_dtoa_r+0xb34>
 802565e:	07e2      	lsls	r2, r4, #31
 8025660:	d505      	bpl.n	802566e <_dtoa_r+0x50e>
 8025662:	e9d5 2300 	ldrd	r2, r3, [r5]
 8025666:	f7da ffef 	bl	8000648 <__aeabi_dmul>
 802566a:	3601      	adds	r6, #1
 802566c:	2301      	movs	r3, #1
 802566e:	1064      	asrs	r4, r4, #1
 8025670:	3508      	adds	r5, #8
 8025672:	e73f      	b.n	80254f4 <_dtoa_r+0x394>
 8025674:	2602      	movs	r6, #2
 8025676:	e742      	b.n	80254fe <_dtoa_r+0x39e>
 8025678:	9c07      	ldr	r4, [sp, #28]
 802567a:	9704      	str	r7, [sp, #16]
 802567c:	e761      	b.n	8025542 <_dtoa_r+0x3e2>
 802567e:	4b27      	ldr	r3, [pc, #156]	@ (802571c <_dtoa_r+0x5bc>)
 8025680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8025682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8025686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802568a:	4454      	add	r4, sl
 802568c:	2900      	cmp	r1, #0
 802568e:	d053      	beq.n	8025738 <_dtoa_r+0x5d8>
 8025690:	4928      	ldr	r1, [pc, #160]	@ (8025734 <_dtoa_r+0x5d4>)
 8025692:	2000      	movs	r0, #0
 8025694:	f7db f902 	bl	800089c <__aeabi_ddiv>
 8025698:	4633      	mov	r3, r6
 802569a:	462a      	mov	r2, r5
 802569c:	f7da fe1c 	bl	80002d8 <__aeabi_dsub>
 80256a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80256a4:	4656      	mov	r6, sl
 80256a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80256aa:	f7db fa7d 	bl	8000ba8 <__aeabi_d2iz>
 80256ae:	4605      	mov	r5, r0
 80256b0:	f7da ff60 	bl	8000574 <__aeabi_i2d>
 80256b4:	4602      	mov	r2, r0
 80256b6:	460b      	mov	r3, r1
 80256b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80256bc:	f7da fe0c 	bl	80002d8 <__aeabi_dsub>
 80256c0:	3530      	adds	r5, #48	@ 0x30
 80256c2:	4602      	mov	r2, r0
 80256c4:	460b      	mov	r3, r1
 80256c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80256ca:	f806 5b01 	strb.w	r5, [r6], #1
 80256ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80256d2:	f7db fa2b 	bl	8000b2c <__aeabi_dcmplt>
 80256d6:	2800      	cmp	r0, #0
 80256d8:	d171      	bne.n	80257be <_dtoa_r+0x65e>
 80256da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80256de:	4911      	ldr	r1, [pc, #68]	@ (8025724 <_dtoa_r+0x5c4>)
 80256e0:	2000      	movs	r0, #0
 80256e2:	f7da fdf9 	bl	80002d8 <__aeabi_dsub>
 80256e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80256ea:	f7db fa1f 	bl	8000b2c <__aeabi_dcmplt>
 80256ee:	2800      	cmp	r0, #0
 80256f0:	f040 8095 	bne.w	802581e <_dtoa_r+0x6be>
 80256f4:	42a6      	cmp	r6, r4
 80256f6:	f43f af50 	beq.w	802559a <_dtoa_r+0x43a>
 80256fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80256fe:	4b0a      	ldr	r3, [pc, #40]	@ (8025728 <_dtoa_r+0x5c8>)
 8025700:	2200      	movs	r2, #0
 8025702:	f7da ffa1 	bl	8000648 <__aeabi_dmul>
 8025706:	4b08      	ldr	r3, [pc, #32]	@ (8025728 <_dtoa_r+0x5c8>)
 8025708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 802570c:	2200      	movs	r2, #0
 802570e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025712:	f7da ff99 	bl	8000648 <__aeabi_dmul>
 8025716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802571a:	e7c4      	b.n	80256a6 <_dtoa_r+0x546>
 802571c:	080280f8 	.word	0x080280f8
 8025720:	080280d0 	.word	0x080280d0
 8025724:	3ff00000 	.word	0x3ff00000
 8025728:	40240000 	.word	0x40240000
 802572c:	401c0000 	.word	0x401c0000
 8025730:	40140000 	.word	0x40140000
 8025734:	3fe00000 	.word	0x3fe00000
 8025738:	4631      	mov	r1, r6
 802573a:	4628      	mov	r0, r5
 802573c:	f7da ff84 	bl	8000648 <__aeabi_dmul>
 8025740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8025744:	9415      	str	r4, [sp, #84]	@ 0x54
 8025746:	4656      	mov	r6, sl
 8025748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802574c:	f7db fa2c 	bl	8000ba8 <__aeabi_d2iz>
 8025750:	4605      	mov	r5, r0
 8025752:	f7da ff0f 	bl	8000574 <__aeabi_i2d>
 8025756:	4602      	mov	r2, r0
 8025758:	460b      	mov	r3, r1
 802575a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802575e:	f7da fdbb 	bl	80002d8 <__aeabi_dsub>
 8025762:	3530      	adds	r5, #48	@ 0x30
 8025764:	f806 5b01 	strb.w	r5, [r6], #1
 8025768:	4602      	mov	r2, r0
 802576a:	460b      	mov	r3, r1
 802576c:	42a6      	cmp	r6, r4
 802576e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8025772:	f04f 0200 	mov.w	r2, #0
 8025776:	d124      	bne.n	80257c2 <_dtoa_r+0x662>
 8025778:	4bac      	ldr	r3, [pc, #688]	@ (8025a2c <_dtoa_r+0x8cc>)
 802577a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 802577e:	f7da fdad 	bl	80002dc <__adddf3>
 8025782:	4602      	mov	r2, r0
 8025784:	460b      	mov	r3, r1
 8025786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802578a:	f7db f9ed 	bl	8000b68 <__aeabi_dcmpgt>
 802578e:	2800      	cmp	r0, #0
 8025790:	d145      	bne.n	802581e <_dtoa_r+0x6be>
 8025792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8025796:	49a5      	ldr	r1, [pc, #660]	@ (8025a2c <_dtoa_r+0x8cc>)
 8025798:	2000      	movs	r0, #0
 802579a:	f7da fd9d 	bl	80002d8 <__aeabi_dsub>
 802579e:	4602      	mov	r2, r0
 80257a0:	460b      	mov	r3, r1
 80257a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80257a6:	f7db f9c1 	bl	8000b2c <__aeabi_dcmplt>
 80257aa:	2800      	cmp	r0, #0
 80257ac:	f43f aef5 	beq.w	802559a <_dtoa_r+0x43a>
 80257b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80257b2:	1e73      	subs	r3, r6, #1
 80257b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80257b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80257ba:	2b30      	cmp	r3, #48	@ 0x30
 80257bc:	d0f8      	beq.n	80257b0 <_dtoa_r+0x650>
 80257be:	9f04      	ldr	r7, [sp, #16]
 80257c0:	e73e      	b.n	8025640 <_dtoa_r+0x4e0>
 80257c2:	4b9b      	ldr	r3, [pc, #620]	@ (8025a30 <_dtoa_r+0x8d0>)
 80257c4:	f7da ff40 	bl	8000648 <__aeabi_dmul>
 80257c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80257cc:	e7bc      	b.n	8025748 <_dtoa_r+0x5e8>
 80257ce:	d10c      	bne.n	80257ea <_dtoa_r+0x68a>
 80257d0:	4b98      	ldr	r3, [pc, #608]	@ (8025a34 <_dtoa_r+0x8d4>)
 80257d2:	2200      	movs	r2, #0
 80257d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80257d8:	f7da ff36 	bl	8000648 <__aeabi_dmul>
 80257dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80257e0:	f7db f9b8 	bl	8000b54 <__aeabi_dcmpge>
 80257e4:	2800      	cmp	r0, #0
 80257e6:	f000 8157 	beq.w	8025a98 <_dtoa_r+0x938>
 80257ea:	2400      	movs	r4, #0
 80257ec:	4625      	mov	r5, r4
 80257ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80257f0:	43db      	mvns	r3, r3
 80257f2:	9304      	str	r3, [sp, #16]
 80257f4:	4656      	mov	r6, sl
 80257f6:	2700      	movs	r7, #0
 80257f8:	4621      	mov	r1, r4
 80257fa:	4658      	mov	r0, fp
 80257fc:	f000 fafe 	bl	8025dfc <_Bfree>
 8025800:	2d00      	cmp	r5, #0
 8025802:	d0dc      	beq.n	80257be <_dtoa_r+0x65e>
 8025804:	b12f      	cbz	r7, 8025812 <_dtoa_r+0x6b2>
 8025806:	42af      	cmp	r7, r5
 8025808:	d003      	beq.n	8025812 <_dtoa_r+0x6b2>
 802580a:	4639      	mov	r1, r7
 802580c:	4658      	mov	r0, fp
 802580e:	f000 faf5 	bl	8025dfc <_Bfree>
 8025812:	4629      	mov	r1, r5
 8025814:	4658      	mov	r0, fp
 8025816:	f000 faf1 	bl	8025dfc <_Bfree>
 802581a:	e7d0      	b.n	80257be <_dtoa_r+0x65e>
 802581c:	9704      	str	r7, [sp, #16]
 802581e:	4633      	mov	r3, r6
 8025820:	461e      	mov	r6, r3
 8025822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025826:	2a39      	cmp	r2, #57	@ 0x39
 8025828:	d107      	bne.n	802583a <_dtoa_r+0x6da>
 802582a:	459a      	cmp	sl, r3
 802582c:	d1f8      	bne.n	8025820 <_dtoa_r+0x6c0>
 802582e:	9a04      	ldr	r2, [sp, #16]
 8025830:	3201      	adds	r2, #1
 8025832:	9204      	str	r2, [sp, #16]
 8025834:	2230      	movs	r2, #48	@ 0x30
 8025836:	f88a 2000 	strb.w	r2, [sl]
 802583a:	781a      	ldrb	r2, [r3, #0]
 802583c:	3201      	adds	r2, #1
 802583e:	701a      	strb	r2, [r3, #0]
 8025840:	e7bd      	b.n	80257be <_dtoa_r+0x65e>
 8025842:	4b7b      	ldr	r3, [pc, #492]	@ (8025a30 <_dtoa_r+0x8d0>)
 8025844:	2200      	movs	r2, #0
 8025846:	f7da feff 	bl	8000648 <__aeabi_dmul>
 802584a:	2200      	movs	r2, #0
 802584c:	2300      	movs	r3, #0
 802584e:	4604      	mov	r4, r0
 8025850:	460d      	mov	r5, r1
 8025852:	f7db f961 	bl	8000b18 <__aeabi_dcmpeq>
 8025856:	2800      	cmp	r0, #0
 8025858:	f43f aebb 	beq.w	80255d2 <_dtoa_r+0x472>
 802585c:	e6f0      	b.n	8025640 <_dtoa_r+0x4e0>
 802585e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025860:	2a00      	cmp	r2, #0
 8025862:	f000 80db 	beq.w	8025a1c <_dtoa_r+0x8bc>
 8025866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025868:	2a01      	cmp	r2, #1
 802586a:	f300 80bf 	bgt.w	80259ec <_dtoa_r+0x88c>
 802586e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8025870:	2a00      	cmp	r2, #0
 8025872:	f000 80b7 	beq.w	80259e4 <_dtoa_r+0x884>
 8025876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 802587a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802587c:	4646      	mov	r6, r8
 802587e:	9a08      	ldr	r2, [sp, #32]
 8025880:	2101      	movs	r1, #1
 8025882:	441a      	add	r2, r3
 8025884:	4658      	mov	r0, fp
 8025886:	4498      	add	r8, r3
 8025888:	9208      	str	r2, [sp, #32]
 802588a:	f000 fb6b 	bl	8025f64 <__i2b>
 802588e:	4605      	mov	r5, r0
 8025890:	b15e      	cbz	r6, 80258aa <_dtoa_r+0x74a>
 8025892:	9b08      	ldr	r3, [sp, #32]
 8025894:	2b00      	cmp	r3, #0
 8025896:	dd08      	ble.n	80258aa <_dtoa_r+0x74a>
 8025898:	42b3      	cmp	r3, r6
 802589a:	9a08      	ldr	r2, [sp, #32]
 802589c:	bfa8      	it	ge
 802589e:	4633      	movge	r3, r6
 80258a0:	eba8 0803 	sub.w	r8, r8, r3
 80258a4:	1af6      	subs	r6, r6, r3
 80258a6:	1ad3      	subs	r3, r2, r3
 80258a8:	9308      	str	r3, [sp, #32]
 80258aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258ac:	b1f3      	cbz	r3, 80258ec <_dtoa_r+0x78c>
 80258ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80258b0:	2b00      	cmp	r3, #0
 80258b2:	f000 80b7 	beq.w	8025a24 <_dtoa_r+0x8c4>
 80258b6:	b18c      	cbz	r4, 80258dc <_dtoa_r+0x77c>
 80258b8:	4629      	mov	r1, r5
 80258ba:	4622      	mov	r2, r4
 80258bc:	4658      	mov	r0, fp
 80258be:	f000 fc11 	bl	80260e4 <__pow5mult>
 80258c2:	464a      	mov	r2, r9
 80258c4:	4601      	mov	r1, r0
 80258c6:	4605      	mov	r5, r0
 80258c8:	4658      	mov	r0, fp
 80258ca:	f000 fb61 	bl	8025f90 <__multiply>
 80258ce:	4649      	mov	r1, r9
 80258d0:	9004      	str	r0, [sp, #16]
 80258d2:	4658      	mov	r0, fp
 80258d4:	f000 fa92 	bl	8025dfc <_Bfree>
 80258d8:	9b04      	ldr	r3, [sp, #16]
 80258da:	4699      	mov	r9, r3
 80258dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80258de:	1b1a      	subs	r2, r3, r4
 80258e0:	d004      	beq.n	80258ec <_dtoa_r+0x78c>
 80258e2:	4649      	mov	r1, r9
 80258e4:	4658      	mov	r0, fp
 80258e6:	f000 fbfd 	bl	80260e4 <__pow5mult>
 80258ea:	4681      	mov	r9, r0
 80258ec:	2101      	movs	r1, #1
 80258ee:	4658      	mov	r0, fp
 80258f0:	f000 fb38 	bl	8025f64 <__i2b>
 80258f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80258f6:	4604      	mov	r4, r0
 80258f8:	2b00      	cmp	r3, #0
 80258fa:	f000 81cf 	beq.w	8025c9c <_dtoa_r+0xb3c>
 80258fe:	461a      	mov	r2, r3
 8025900:	4601      	mov	r1, r0
 8025902:	4658      	mov	r0, fp
 8025904:	f000 fbee 	bl	80260e4 <__pow5mult>
 8025908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802590a:	2b01      	cmp	r3, #1
 802590c:	4604      	mov	r4, r0
 802590e:	f300 8095 	bgt.w	8025a3c <_dtoa_r+0x8dc>
 8025912:	9b02      	ldr	r3, [sp, #8]
 8025914:	2b00      	cmp	r3, #0
 8025916:	f040 8087 	bne.w	8025a28 <_dtoa_r+0x8c8>
 802591a:	9b03      	ldr	r3, [sp, #12]
 802591c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025920:	2b00      	cmp	r3, #0
 8025922:	f040 8089 	bne.w	8025a38 <_dtoa_r+0x8d8>
 8025926:	9b03      	ldr	r3, [sp, #12]
 8025928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802592c:	0d1b      	lsrs	r3, r3, #20
 802592e:	051b      	lsls	r3, r3, #20
 8025930:	b12b      	cbz	r3, 802593e <_dtoa_r+0x7de>
 8025932:	9b08      	ldr	r3, [sp, #32]
 8025934:	3301      	adds	r3, #1
 8025936:	9308      	str	r3, [sp, #32]
 8025938:	f108 0801 	add.w	r8, r8, #1
 802593c:	2301      	movs	r3, #1
 802593e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025942:	2b00      	cmp	r3, #0
 8025944:	f000 81b0 	beq.w	8025ca8 <_dtoa_r+0xb48>
 8025948:	6923      	ldr	r3, [r4, #16]
 802594a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802594e:	6918      	ldr	r0, [r3, #16]
 8025950:	f000 fabc 	bl	8025ecc <__hi0bits>
 8025954:	f1c0 0020 	rsb	r0, r0, #32
 8025958:	9b08      	ldr	r3, [sp, #32]
 802595a:	4418      	add	r0, r3
 802595c:	f010 001f 	ands.w	r0, r0, #31
 8025960:	d077      	beq.n	8025a52 <_dtoa_r+0x8f2>
 8025962:	f1c0 0320 	rsb	r3, r0, #32
 8025966:	2b04      	cmp	r3, #4
 8025968:	dd6b      	ble.n	8025a42 <_dtoa_r+0x8e2>
 802596a:	9b08      	ldr	r3, [sp, #32]
 802596c:	f1c0 001c 	rsb	r0, r0, #28
 8025970:	4403      	add	r3, r0
 8025972:	4480      	add	r8, r0
 8025974:	4406      	add	r6, r0
 8025976:	9308      	str	r3, [sp, #32]
 8025978:	f1b8 0f00 	cmp.w	r8, #0
 802597c:	dd05      	ble.n	802598a <_dtoa_r+0x82a>
 802597e:	4649      	mov	r1, r9
 8025980:	4642      	mov	r2, r8
 8025982:	4658      	mov	r0, fp
 8025984:	f000 fc08 	bl	8026198 <__lshift>
 8025988:	4681      	mov	r9, r0
 802598a:	9b08      	ldr	r3, [sp, #32]
 802598c:	2b00      	cmp	r3, #0
 802598e:	dd05      	ble.n	802599c <_dtoa_r+0x83c>
 8025990:	4621      	mov	r1, r4
 8025992:	461a      	mov	r2, r3
 8025994:	4658      	mov	r0, fp
 8025996:	f000 fbff 	bl	8026198 <__lshift>
 802599a:	4604      	mov	r4, r0
 802599c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802599e:	2b00      	cmp	r3, #0
 80259a0:	d059      	beq.n	8025a56 <_dtoa_r+0x8f6>
 80259a2:	4621      	mov	r1, r4
 80259a4:	4648      	mov	r0, r9
 80259a6:	f000 fc63 	bl	8026270 <__mcmp>
 80259aa:	2800      	cmp	r0, #0
 80259ac:	da53      	bge.n	8025a56 <_dtoa_r+0x8f6>
 80259ae:	1e7b      	subs	r3, r7, #1
 80259b0:	9304      	str	r3, [sp, #16]
 80259b2:	4649      	mov	r1, r9
 80259b4:	2300      	movs	r3, #0
 80259b6:	220a      	movs	r2, #10
 80259b8:	4658      	mov	r0, fp
 80259ba:	f000 fa41 	bl	8025e40 <__multadd>
 80259be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80259c0:	4681      	mov	r9, r0
 80259c2:	2b00      	cmp	r3, #0
 80259c4:	f000 8172 	beq.w	8025cac <_dtoa_r+0xb4c>
 80259c8:	2300      	movs	r3, #0
 80259ca:	4629      	mov	r1, r5
 80259cc:	220a      	movs	r2, #10
 80259ce:	4658      	mov	r0, fp
 80259d0:	f000 fa36 	bl	8025e40 <__multadd>
 80259d4:	9b00      	ldr	r3, [sp, #0]
 80259d6:	2b00      	cmp	r3, #0
 80259d8:	4605      	mov	r5, r0
 80259da:	dc67      	bgt.n	8025aac <_dtoa_r+0x94c>
 80259dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80259de:	2b02      	cmp	r3, #2
 80259e0:	dc41      	bgt.n	8025a66 <_dtoa_r+0x906>
 80259e2:	e063      	b.n	8025aac <_dtoa_r+0x94c>
 80259e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80259e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80259ea:	e746      	b.n	802587a <_dtoa_r+0x71a>
 80259ec:	9b07      	ldr	r3, [sp, #28]
 80259ee:	1e5c      	subs	r4, r3, #1
 80259f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80259f2:	42a3      	cmp	r3, r4
 80259f4:	bfbf      	itttt	lt
 80259f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80259f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80259fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80259fc:	1ae3      	sublt	r3, r4, r3
 80259fe:	bfb4      	ite	lt
 8025a00:	18d2      	addlt	r2, r2, r3
 8025a02:	1b1c      	subge	r4, r3, r4
 8025a04:	9b07      	ldr	r3, [sp, #28]
 8025a06:	bfbc      	itt	lt
 8025a08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8025a0a:	2400      	movlt	r4, #0
 8025a0c:	2b00      	cmp	r3, #0
 8025a0e:	bfb5      	itete	lt
 8025a10:	eba8 0603 	sublt.w	r6, r8, r3
 8025a14:	9b07      	ldrge	r3, [sp, #28]
 8025a16:	2300      	movlt	r3, #0
 8025a18:	4646      	movge	r6, r8
 8025a1a:	e730      	b.n	802587e <_dtoa_r+0x71e>
 8025a1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8025a1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8025a20:	4646      	mov	r6, r8
 8025a22:	e735      	b.n	8025890 <_dtoa_r+0x730>
 8025a24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8025a26:	e75c      	b.n	80258e2 <_dtoa_r+0x782>
 8025a28:	2300      	movs	r3, #0
 8025a2a:	e788      	b.n	802593e <_dtoa_r+0x7de>
 8025a2c:	3fe00000 	.word	0x3fe00000
 8025a30:	40240000 	.word	0x40240000
 8025a34:	40140000 	.word	0x40140000
 8025a38:	9b02      	ldr	r3, [sp, #8]
 8025a3a:	e780      	b.n	802593e <_dtoa_r+0x7de>
 8025a3c:	2300      	movs	r3, #0
 8025a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8025a40:	e782      	b.n	8025948 <_dtoa_r+0x7e8>
 8025a42:	d099      	beq.n	8025978 <_dtoa_r+0x818>
 8025a44:	9a08      	ldr	r2, [sp, #32]
 8025a46:	331c      	adds	r3, #28
 8025a48:	441a      	add	r2, r3
 8025a4a:	4498      	add	r8, r3
 8025a4c:	441e      	add	r6, r3
 8025a4e:	9208      	str	r2, [sp, #32]
 8025a50:	e792      	b.n	8025978 <_dtoa_r+0x818>
 8025a52:	4603      	mov	r3, r0
 8025a54:	e7f6      	b.n	8025a44 <_dtoa_r+0x8e4>
 8025a56:	9b07      	ldr	r3, [sp, #28]
 8025a58:	9704      	str	r7, [sp, #16]
 8025a5a:	2b00      	cmp	r3, #0
 8025a5c:	dc20      	bgt.n	8025aa0 <_dtoa_r+0x940>
 8025a5e:	9300      	str	r3, [sp, #0]
 8025a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025a62:	2b02      	cmp	r3, #2
 8025a64:	dd1e      	ble.n	8025aa4 <_dtoa_r+0x944>
 8025a66:	9b00      	ldr	r3, [sp, #0]
 8025a68:	2b00      	cmp	r3, #0
 8025a6a:	f47f aec0 	bne.w	80257ee <_dtoa_r+0x68e>
 8025a6e:	4621      	mov	r1, r4
 8025a70:	2205      	movs	r2, #5
 8025a72:	4658      	mov	r0, fp
 8025a74:	f000 f9e4 	bl	8025e40 <__multadd>
 8025a78:	4601      	mov	r1, r0
 8025a7a:	4604      	mov	r4, r0
 8025a7c:	4648      	mov	r0, r9
 8025a7e:	f000 fbf7 	bl	8026270 <__mcmp>
 8025a82:	2800      	cmp	r0, #0
 8025a84:	f77f aeb3 	ble.w	80257ee <_dtoa_r+0x68e>
 8025a88:	4656      	mov	r6, sl
 8025a8a:	2331      	movs	r3, #49	@ 0x31
 8025a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8025a90:	9b04      	ldr	r3, [sp, #16]
 8025a92:	3301      	adds	r3, #1
 8025a94:	9304      	str	r3, [sp, #16]
 8025a96:	e6ae      	b.n	80257f6 <_dtoa_r+0x696>
 8025a98:	9c07      	ldr	r4, [sp, #28]
 8025a9a:	9704      	str	r7, [sp, #16]
 8025a9c:	4625      	mov	r5, r4
 8025a9e:	e7f3      	b.n	8025a88 <_dtoa_r+0x928>
 8025aa0:	9b07      	ldr	r3, [sp, #28]
 8025aa2:	9300      	str	r3, [sp, #0]
 8025aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025aa6:	2b00      	cmp	r3, #0
 8025aa8:	f000 8104 	beq.w	8025cb4 <_dtoa_r+0xb54>
 8025aac:	2e00      	cmp	r6, #0
 8025aae:	dd05      	ble.n	8025abc <_dtoa_r+0x95c>
 8025ab0:	4629      	mov	r1, r5
 8025ab2:	4632      	mov	r2, r6
 8025ab4:	4658      	mov	r0, fp
 8025ab6:	f000 fb6f 	bl	8026198 <__lshift>
 8025aba:	4605      	mov	r5, r0
 8025abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025abe:	2b00      	cmp	r3, #0
 8025ac0:	d05a      	beq.n	8025b78 <_dtoa_r+0xa18>
 8025ac2:	6869      	ldr	r1, [r5, #4]
 8025ac4:	4658      	mov	r0, fp
 8025ac6:	f000 f959 	bl	8025d7c <_Balloc>
 8025aca:	4606      	mov	r6, r0
 8025acc:	b928      	cbnz	r0, 8025ada <_dtoa_r+0x97a>
 8025ace:	4b84      	ldr	r3, [pc, #528]	@ (8025ce0 <_dtoa_r+0xb80>)
 8025ad0:	4602      	mov	r2, r0
 8025ad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8025ad6:	f7ff bb5a 	b.w	802518e <_dtoa_r+0x2e>
 8025ada:	692a      	ldr	r2, [r5, #16]
 8025adc:	3202      	adds	r2, #2
 8025ade:	0092      	lsls	r2, r2, #2
 8025ae0:	f105 010c 	add.w	r1, r5, #12
 8025ae4:	300c      	adds	r0, #12
 8025ae6:	f7ff faa2 	bl	802502e <memcpy>
 8025aea:	2201      	movs	r2, #1
 8025aec:	4631      	mov	r1, r6
 8025aee:	4658      	mov	r0, fp
 8025af0:	f000 fb52 	bl	8026198 <__lshift>
 8025af4:	f10a 0301 	add.w	r3, sl, #1
 8025af8:	9307      	str	r3, [sp, #28]
 8025afa:	9b00      	ldr	r3, [sp, #0]
 8025afc:	4453      	add	r3, sl
 8025afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8025b00:	9b02      	ldr	r3, [sp, #8]
 8025b02:	f003 0301 	and.w	r3, r3, #1
 8025b06:	462f      	mov	r7, r5
 8025b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8025b0a:	4605      	mov	r5, r0
 8025b0c:	9b07      	ldr	r3, [sp, #28]
 8025b0e:	4621      	mov	r1, r4
 8025b10:	3b01      	subs	r3, #1
 8025b12:	4648      	mov	r0, r9
 8025b14:	9300      	str	r3, [sp, #0]
 8025b16:	f7ff fa98 	bl	802504a <quorem>
 8025b1a:	4639      	mov	r1, r7
 8025b1c:	9002      	str	r0, [sp, #8]
 8025b1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025b22:	4648      	mov	r0, r9
 8025b24:	f000 fba4 	bl	8026270 <__mcmp>
 8025b28:	462a      	mov	r2, r5
 8025b2a:	9008      	str	r0, [sp, #32]
 8025b2c:	4621      	mov	r1, r4
 8025b2e:	4658      	mov	r0, fp
 8025b30:	f000 fbba 	bl	80262a8 <__mdiff>
 8025b34:	68c2      	ldr	r2, [r0, #12]
 8025b36:	4606      	mov	r6, r0
 8025b38:	bb02      	cbnz	r2, 8025b7c <_dtoa_r+0xa1c>
 8025b3a:	4601      	mov	r1, r0
 8025b3c:	4648      	mov	r0, r9
 8025b3e:	f000 fb97 	bl	8026270 <__mcmp>
 8025b42:	4602      	mov	r2, r0
 8025b44:	4631      	mov	r1, r6
 8025b46:	4658      	mov	r0, fp
 8025b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8025b4a:	f000 f957 	bl	8025dfc <_Bfree>
 8025b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8025b52:	9e07      	ldr	r6, [sp, #28]
 8025b54:	ea43 0102 	orr.w	r1, r3, r2
 8025b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8025b5a:	4319      	orrs	r1, r3
 8025b5c:	d110      	bne.n	8025b80 <_dtoa_r+0xa20>
 8025b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025b62:	d029      	beq.n	8025bb8 <_dtoa_r+0xa58>
 8025b64:	9b08      	ldr	r3, [sp, #32]
 8025b66:	2b00      	cmp	r3, #0
 8025b68:	dd02      	ble.n	8025b70 <_dtoa_r+0xa10>
 8025b6a:	9b02      	ldr	r3, [sp, #8]
 8025b6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8025b70:	9b00      	ldr	r3, [sp, #0]
 8025b72:	f883 8000 	strb.w	r8, [r3]
 8025b76:	e63f      	b.n	80257f8 <_dtoa_r+0x698>
 8025b78:	4628      	mov	r0, r5
 8025b7a:	e7bb      	b.n	8025af4 <_dtoa_r+0x994>
 8025b7c:	2201      	movs	r2, #1
 8025b7e:	e7e1      	b.n	8025b44 <_dtoa_r+0x9e4>
 8025b80:	9b08      	ldr	r3, [sp, #32]
 8025b82:	2b00      	cmp	r3, #0
 8025b84:	db04      	blt.n	8025b90 <_dtoa_r+0xa30>
 8025b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8025b88:	430b      	orrs	r3, r1
 8025b8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8025b8c:	430b      	orrs	r3, r1
 8025b8e:	d120      	bne.n	8025bd2 <_dtoa_r+0xa72>
 8025b90:	2a00      	cmp	r2, #0
 8025b92:	dded      	ble.n	8025b70 <_dtoa_r+0xa10>
 8025b94:	4649      	mov	r1, r9
 8025b96:	2201      	movs	r2, #1
 8025b98:	4658      	mov	r0, fp
 8025b9a:	f000 fafd 	bl	8026198 <__lshift>
 8025b9e:	4621      	mov	r1, r4
 8025ba0:	4681      	mov	r9, r0
 8025ba2:	f000 fb65 	bl	8026270 <__mcmp>
 8025ba6:	2800      	cmp	r0, #0
 8025ba8:	dc03      	bgt.n	8025bb2 <_dtoa_r+0xa52>
 8025baa:	d1e1      	bne.n	8025b70 <_dtoa_r+0xa10>
 8025bac:	f018 0f01 	tst.w	r8, #1
 8025bb0:	d0de      	beq.n	8025b70 <_dtoa_r+0xa10>
 8025bb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025bb6:	d1d8      	bne.n	8025b6a <_dtoa_r+0xa0a>
 8025bb8:	9a00      	ldr	r2, [sp, #0]
 8025bba:	2339      	movs	r3, #57	@ 0x39
 8025bbc:	7013      	strb	r3, [r2, #0]
 8025bbe:	4633      	mov	r3, r6
 8025bc0:	461e      	mov	r6, r3
 8025bc2:	3b01      	subs	r3, #1
 8025bc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8025bc8:	2a39      	cmp	r2, #57	@ 0x39
 8025bca:	d052      	beq.n	8025c72 <_dtoa_r+0xb12>
 8025bcc:	3201      	adds	r2, #1
 8025bce:	701a      	strb	r2, [r3, #0]
 8025bd0:	e612      	b.n	80257f8 <_dtoa_r+0x698>
 8025bd2:	2a00      	cmp	r2, #0
 8025bd4:	dd07      	ble.n	8025be6 <_dtoa_r+0xa86>
 8025bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8025bda:	d0ed      	beq.n	8025bb8 <_dtoa_r+0xa58>
 8025bdc:	9a00      	ldr	r2, [sp, #0]
 8025bde:	f108 0301 	add.w	r3, r8, #1
 8025be2:	7013      	strb	r3, [r2, #0]
 8025be4:	e608      	b.n	80257f8 <_dtoa_r+0x698>
 8025be6:	9b07      	ldr	r3, [sp, #28]
 8025be8:	9a07      	ldr	r2, [sp, #28]
 8025bea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8025bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8025bf0:	4293      	cmp	r3, r2
 8025bf2:	d028      	beq.n	8025c46 <_dtoa_r+0xae6>
 8025bf4:	4649      	mov	r1, r9
 8025bf6:	2300      	movs	r3, #0
 8025bf8:	220a      	movs	r2, #10
 8025bfa:	4658      	mov	r0, fp
 8025bfc:	f000 f920 	bl	8025e40 <__multadd>
 8025c00:	42af      	cmp	r7, r5
 8025c02:	4681      	mov	r9, r0
 8025c04:	f04f 0300 	mov.w	r3, #0
 8025c08:	f04f 020a 	mov.w	r2, #10
 8025c0c:	4639      	mov	r1, r7
 8025c0e:	4658      	mov	r0, fp
 8025c10:	d107      	bne.n	8025c22 <_dtoa_r+0xac2>
 8025c12:	f000 f915 	bl	8025e40 <__multadd>
 8025c16:	4607      	mov	r7, r0
 8025c18:	4605      	mov	r5, r0
 8025c1a:	9b07      	ldr	r3, [sp, #28]
 8025c1c:	3301      	adds	r3, #1
 8025c1e:	9307      	str	r3, [sp, #28]
 8025c20:	e774      	b.n	8025b0c <_dtoa_r+0x9ac>
 8025c22:	f000 f90d 	bl	8025e40 <__multadd>
 8025c26:	4629      	mov	r1, r5
 8025c28:	4607      	mov	r7, r0
 8025c2a:	2300      	movs	r3, #0
 8025c2c:	220a      	movs	r2, #10
 8025c2e:	4658      	mov	r0, fp
 8025c30:	f000 f906 	bl	8025e40 <__multadd>
 8025c34:	4605      	mov	r5, r0
 8025c36:	e7f0      	b.n	8025c1a <_dtoa_r+0xaba>
 8025c38:	9b00      	ldr	r3, [sp, #0]
 8025c3a:	2b00      	cmp	r3, #0
 8025c3c:	bfcc      	ite	gt
 8025c3e:	461e      	movgt	r6, r3
 8025c40:	2601      	movle	r6, #1
 8025c42:	4456      	add	r6, sl
 8025c44:	2700      	movs	r7, #0
 8025c46:	4649      	mov	r1, r9
 8025c48:	2201      	movs	r2, #1
 8025c4a:	4658      	mov	r0, fp
 8025c4c:	f000 faa4 	bl	8026198 <__lshift>
 8025c50:	4621      	mov	r1, r4
 8025c52:	4681      	mov	r9, r0
 8025c54:	f000 fb0c 	bl	8026270 <__mcmp>
 8025c58:	2800      	cmp	r0, #0
 8025c5a:	dcb0      	bgt.n	8025bbe <_dtoa_r+0xa5e>
 8025c5c:	d102      	bne.n	8025c64 <_dtoa_r+0xb04>
 8025c5e:	f018 0f01 	tst.w	r8, #1
 8025c62:	d1ac      	bne.n	8025bbe <_dtoa_r+0xa5e>
 8025c64:	4633      	mov	r3, r6
 8025c66:	461e      	mov	r6, r3
 8025c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025c6c:	2a30      	cmp	r2, #48	@ 0x30
 8025c6e:	d0fa      	beq.n	8025c66 <_dtoa_r+0xb06>
 8025c70:	e5c2      	b.n	80257f8 <_dtoa_r+0x698>
 8025c72:	459a      	cmp	sl, r3
 8025c74:	d1a4      	bne.n	8025bc0 <_dtoa_r+0xa60>
 8025c76:	9b04      	ldr	r3, [sp, #16]
 8025c78:	3301      	adds	r3, #1
 8025c7a:	9304      	str	r3, [sp, #16]
 8025c7c:	2331      	movs	r3, #49	@ 0x31
 8025c7e:	f88a 3000 	strb.w	r3, [sl]
 8025c82:	e5b9      	b.n	80257f8 <_dtoa_r+0x698>
 8025c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8025c86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8025ce4 <_dtoa_r+0xb84>
 8025c8a:	b11b      	cbz	r3, 8025c94 <_dtoa_r+0xb34>
 8025c8c:	f10a 0308 	add.w	r3, sl, #8
 8025c90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8025c92:	6013      	str	r3, [r2, #0]
 8025c94:	4650      	mov	r0, sl
 8025c96:	b019      	add	sp, #100	@ 0x64
 8025c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c9e:	2b01      	cmp	r3, #1
 8025ca0:	f77f ae37 	ble.w	8025912 <_dtoa_r+0x7b2>
 8025ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8025ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8025ca8:	2001      	movs	r0, #1
 8025caa:	e655      	b.n	8025958 <_dtoa_r+0x7f8>
 8025cac:	9b00      	ldr	r3, [sp, #0]
 8025cae:	2b00      	cmp	r3, #0
 8025cb0:	f77f aed6 	ble.w	8025a60 <_dtoa_r+0x900>
 8025cb4:	4656      	mov	r6, sl
 8025cb6:	4621      	mov	r1, r4
 8025cb8:	4648      	mov	r0, r9
 8025cba:	f7ff f9c6 	bl	802504a <quorem>
 8025cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8025cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8025cc6:	9b00      	ldr	r3, [sp, #0]
 8025cc8:	eba6 020a 	sub.w	r2, r6, sl
 8025ccc:	4293      	cmp	r3, r2
 8025cce:	ddb3      	ble.n	8025c38 <_dtoa_r+0xad8>
 8025cd0:	4649      	mov	r1, r9
 8025cd2:	2300      	movs	r3, #0
 8025cd4:	220a      	movs	r2, #10
 8025cd6:	4658      	mov	r0, fp
 8025cd8:	f000 f8b2 	bl	8025e40 <__multadd>
 8025cdc:	4681      	mov	r9, r0
 8025cde:	e7ea      	b.n	8025cb6 <_dtoa_r+0xb56>
 8025ce0:	08028058 	.word	0x08028058
 8025ce4:	08027fdc 	.word	0x08027fdc

08025ce8 <_free_r>:
 8025ce8:	b538      	push	{r3, r4, r5, lr}
 8025cea:	4605      	mov	r5, r0
 8025cec:	2900      	cmp	r1, #0
 8025cee:	d041      	beq.n	8025d74 <_free_r+0x8c>
 8025cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025cf4:	1f0c      	subs	r4, r1, #4
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	bfb8      	it	lt
 8025cfa:	18e4      	addlt	r4, r4, r3
 8025cfc:	f7fe fab6 	bl	802426c <__malloc_lock>
 8025d00:	4a1d      	ldr	r2, [pc, #116]	@ (8025d78 <_free_r+0x90>)
 8025d02:	6813      	ldr	r3, [r2, #0]
 8025d04:	b933      	cbnz	r3, 8025d14 <_free_r+0x2c>
 8025d06:	6063      	str	r3, [r4, #4]
 8025d08:	6014      	str	r4, [r2, #0]
 8025d0a:	4628      	mov	r0, r5
 8025d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025d10:	f7fe bab2 	b.w	8024278 <__malloc_unlock>
 8025d14:	42a3      	cmp	r3, r4
 8025d16:	d908      	bls.n	8025d2a <_free_r+0x42>
 8025d18:	6820      	ldr	r0, [r4, #0]
 8025d1a:	1821      	adds	r1, r4, r0
 8025d1c:	428b      	cmp	r3, r1
 8025d1e:	bf01      	itttt	eq
 8025d20:	6819      	ldreq	r1, [r3, #0]
 8025d22:	685b      	ldreq	r3, [r3, #4]
 8025d24:	1809      	addeq	r1, r1, r0
 8025d26:	6021      	streq	r1, [r4, #0]
 8025d28:	e7ed      	b.n	8025d06 <_free_r+0x1e>
 8025d2a:	461a      	mov	r2, r3
 8025d2c:	685b      	ldr	r3, [r3, #4]
 8025d2e:	b10b      	cbz	r3, 8025d34 <_free_r+0x4c>
 8025d30:	42a3      	cmp	r3, r4
 8025d32:	d9fa      	bls.n	8025d2a <_free_r+0x42>
 8025d34:	6811      	ldr	r1, [r2, #0]
 8025d36:	1850      	adds	r0, r2, r1
 8025d38:	42a0      	cmp	r0, r4
 8025d3a:	d10b      	bne.n	8025d54 <_free_r+0x6c>
 8025d3c:	6820      	ldr	r0, [r4, #0]
 8025d3e:	4401      	add	r1, r0
 8025d40:	1850      	adds	r0, r2, r1
 8025d42:	4283      	cmp	r3, r0
 8025d44:	6011      	str	r1, [r2, #0]
 8025d46:	d1e0      	bne.n	8025d0a <_free_r+0x22>
 8025d48:	6818      	ldr	r0, [r3, #0]
 8025d4a:	685b      	ldr	r3, [r3, #4]
 8025d4c:	6053      	str	r3, [r2, #4]
 8025d4e:	4408      	add	r0, r1
 8025d50:	6010      	str	r0, [r2, #0]
 8025d52:	e7da      	b.n	8025d0a <_free_r+0x22>
 8025d54:	d902      	bls.n	8025d5c <_free_r+0x74>
 8025d56:	230c      	movs	r3, #12
 8025d58:	602b      	str	r3, [r5, #0]
 8025d5a:	e7d6      	b.n	8025d0a <_free_r+0x22>
 8025d5c:	6820      	ldr	r0, [r4, #0]
 8025d5e:	1821      	adds	r1, r4, r0
 8025d60:	428b      	cmp	r3, r1
 8025d62:	bf04      	itt	eq
 8025d64:	6819      	ldreq	r1, [r3, #0]
 8025d66:	685b      	ldreq	r3, [r3, #4]
 8025d68:	6063      	str	r3, [r4, #4]
 8025d6a:	bf04      	itt	eq
 8025d6c:	1809      	addeq	r1, r1, r0
 8025d6e:	6021      	streq	r1, [r4, #0]
 8025d70:	6054      	str	r4, [r2, #4]
 8025d72:	e7ca      	b.n	8025d0a <_free_r+0x22>
 8025d74:	bd38      	pop	{r3, r4, r5, pc}
 8025d76:	bf00      	nop
 8025d78:	20019780 	.word	0x20019780

08025d7c <_Balloc>:
 8025d7c:	b570      	push	{r4, r5, r6, lr}
 8025d7e:	69c6      	ldr	r6, [r0, #28]
 8025d80:	4604      	mov	r4, r0
 8025d82:	460d      	mov	r5, r1
 8025d84:	b976      	cbnz	r6, 8025da4 <_Balloc+0x28>
 8025d86:	2010      	movs	r0, #16
 8025d88:	f7fe f9be 	bl	8024108 <malloc>
 8025d8c:	4602      	mov	r2, r0
 8025d8e:	61e0      	str	r0, [r4, #28]
 8025d90:	b920      	cbnz	r0, 8025d9c <_Balloc+0x20>
 8025d92:	4b18      	ldr	r3, [pc, #96]	@ (8025df4 <_Balloc+0x78>)
 8025d94:	4818      	ldr	r0, [pc, #96]	@ (8025df8 <_Balloc+0x7c>)
 8025d96:	216b      	movs	r1, #107	@ 0x6b
 8025d98:	f000 fd76 	bl	8026888 <__assert_func>
 8025d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025da0:	6006      	str	r6, [r0, #0]
 8025da2:	60c6      	str	r6, [r0, #12]
 8025da4:	69e6      	ldr	r6, [r4, #28]
 8025da6:	68f3      	ldr	r3, [r6, #12]
 8025da8:	b183      	cbz	r3, 8025dcc <_Balloc+0x50>
 8025daa:	69e3      	ldr	r3, [r4, #28]
 8025dac:	68db      	ldr	r3, [r3, #12]
 8025dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025db2:	b9b8      	cbnz	r0, 8025de4 <_Balloc+0x68>
 8025db4:	2101      	movs	r1, #1
 8025db6:	fa01 f605 	lsl.w	r6, r1, r5
 8025dba:	1d72      	adds	r2, r6, #5
 8025dbc:	0092      	lsls	r2, r2, #2
 8025dbe:	4620      	mov	r0, r4
 8025dc0:	f000 fd80 	bl	80268c4 <_calloc_r>
 8025dc4:	b160      	cbz	r0, 8025de0 <_Balloc+0x64>
 8025dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025dca:	e00e      	b.n	8025dea <_Balloc+0x6e>
 8025dcc:	2221      	movs	r2, #33	@ 0x21
 8025dce:	2104      	movs	r1, #4
 8025dd0:	4620      	mov	r0, r4
 8025dd2:	f000 fd77 	bl	80268c4 <_calloc_r>
 8025dd6:	69e3      	ldr	r3, [r4, #28]
 8025dd8:	60f0      	str	r0, [r6, #12]
 8025dda:	68db      	ldr	r3, [r3, #12]
 8025ddc:	2b00      	cmp	r3, #0
 8025dde:	d1e4      	bne.n	8025daa <_Balloc+0x2e>
 8025de0:	2000      	movs	r0, #0
 8025de2:	bd70      	pop	{r4, r5, r6, pc}
 8025de4:	6802      	ldr	r2, [r0, #0]
 8025de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025dea:	2300      	movs	r3, #0
 8025dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025df0:	e7f7      	b.n	8025de2 <_Balloc+0x66>
 8025df2:	bf00      	nop
 8025df4:	08027fe9 	.word	0x08027fe9
 8025df8:	08028069 	.word	0x08028069

08025dfc <_Bfree>:
 8025dfc:	b570      	push	{r4, r5, r6, lr}
 8025dfe:	69c6      	ldr	r6, [r0, #28]
 8025e00:	4605      	mov	r5, r0
 8025e02:	460c      	mov	r4, r1
 8025e04:	b976      	cbnz	r6, 8025e24 <_Bfree+0x28>
 8025e06:	2010      	movs	r0, #16
 8025e08:	f7fe f97e 	bl	8024108 <malloc>
 8025e0c:	4602      	mov	r2, r0
 8025e0e:	61e8      	str	r0, [r5, #28]
 8025e10:	b920      	cbnz	r0, 8025e1c <_Bfree+0x20>
 8025e12:	4b09      	ldr	r3, [pc, #36]	@ (8025e38 <_Bfree+0x3c>)
 8025e14:	4809      	ldr	r0, [pc, #36]	@ (8025e3c <_Bfree+0x40>)
 8025e16:	218f      	movs	r1, #143	@ 0x8f
 8025e18:	f000 fd36 	bl	8026888 <__assert_func>
 8025e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025e20:	6006      	str	r6, [r0, #0]
 8025e22:	60c6      	str	r6, [r0, #12]
 8025e24:	b13c      	cbz	r4, 8025e36 <_Bfree+0x3a>
 8025e26:	69eb      	ldr	r3, [r5, #28]
 8025e28:	6862      	ldr	r2, [r4, #4]
 8025e2a:	68db      	ldr	r3, [r3, #12]
 8025e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025e30:	6021      	str	r1, [r4, #0]
 8025e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025e36:	bd70      	pop	{r4, r5, r6, pc}
 8025e38:	08027fe9 	.word	0x08027fe9
 8025e3c:	08028069 	.word	0x08028069

08025e40 <__multadd>:
 8025e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025e44:	690d      	ldr	r5, [r1, #16]
 8025e46:	4607      	mov	r7, r0
 8025e48:	460c      	mov	r4, r1
 8025e4a:	461e      	mov	r6, r3
 8025e4c:	f101 0c14 	add.w	ip, r1, #20
 8025e50:	2000      	movs	r0, #0
 8025e52:	f8dc 3000 	ldr.w	r3, [ip]
 8025e56:	b299      	uxth	r1, r3
 8025e58:	fb02 6101 	mla	r1, r2, r1, r6
 8025e5c:	0c1e      	lsrs	r6, r3, #16
 8025e5e:	0c0b      	lsrs	r3, r1, #16
 8025e60:	fb02 3306 	mla	r3, r2, r6, r3
 8025e64:	b289      	uxth	r1, r1
 8025e66:	3001      	adds	r0, #1
 8025e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025e6c:	4285      	cmp	r5, r0
 8025e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8025e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025e76:	dcec      	bgt.n	8025e52 <__multadd+0x12>
 8025e78:	b30e      	cbz	r6, 8025ebe <__multadd+0x7e>
 8025e7a:	68a3      	ldr	r3, [r4, #8]
 8025e7c:	42ab      	cmp	r3, r5
 8025e7e:	dc19      	bgt.n	8025eb4 <__multadd+0x74>
 8025e80:	6861      	ldr	r1, [r4, #4]
 8025e82:	4638      	mov	r0, r7
 8025e84:	3101      	adds	r1, #1
 8025e86:	f7ff ff79 	bl	8025d7c <_Balloc>
 8025e8a:	4680      	mov	r8, r0
 8025e8c:	b928      	cbnz	r0, 8025e9a <__multadd+0x5a>
 8025e8e:	4602      	mov	r2, r0
 8025e90:	4b0c      	ldr	r3, [pc, #48]	@ (8025ec4 <__multadd+0x84>)
 8025e92:	480d      	ldr	r0, [pc, #52]	@ (8025ec8 <__multadd+0x88>)
 8025e94:	21ba      	movs	r1, #186	@ 0xba
 8025e96:	f000 fcf7 	bl	8026888 <__assert_func>
 8025e9a:	6922      	ldr	r2, [r4, #16]
 8025e9c:	3202      	adds	r2, #2
 8025e9e:	f104 010c 	add.w	r1, r4, #12
 8025ea2:	0092      	lsls	r2, r2, #2
 8025ea4:	300c      	adds	r0, #12
 8025ea6:	f7ff f8c2 	bl	802502e <memcpy>
 8025eaa:	4621      	mov	r1, r4
 8025eac:	4638      	mov	r0, r7
 8025eae:	f7ff ffa5 	bl	8025dfc <_Bfree>
 8025eb2:	4644      	mov	r4, r8
 8025eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025eb8:	3501      	adds	r5, #1
 8025eba:	615e      	str	r6, [r3, #20]
 8025ebc:	6125      	str	r5, [r4, #16]
 8025ebe:	4620      	mov	r0, r4
 8025ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025ec4:	08028058 	.word	0x08028058
 8025ec8:	08028069 	.word	0x08028069

08025ecc <__hi0bits>:
 8025ecc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8025ed0:	4603      	mov	r3, r0
 8025ed2:	bf36      	itet	cc
 8025ed4:	0403      	lslcc	r3, r0, #16
 8025ed6:	2000      	movcs	r0, #0
 8025ed8:	2010      	movcc	r0, #16
 8025eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8025ede:	bf3c      	itt	cc
 8025ee0:	021b      	lslcc	r3, r3, #8
 8025ee2:	3008      	addcc	r0, #8
 8025ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8025ee8:	bf3c      	itt	cc
 8025eea:	011b      	lslcc	r3, r3, #4
 8025eec:	3004      	addcc	r0, #4
 8025eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8025ef2:	bf3c      	itt	cc
 8025ef4:	009b      	lslcc	r3, r3, #2
 8025ef6:	3002      	addcc	r0, #2
 8025ef8:	2b00      	cmp	r3, #0
 8025efa:	db05      	blt.n	8025f08 <__hi0bits+0x3c>
 8025efc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8025f00:	f100 0001 	add.w	r0, r0, #1
 8025f04:	bf08      	it	eq
 8025f06:	2020      	moveq	r0, #32
 8025f08:	4770      	bx	lr

08025f0a <__lo0bits>:
 8025f0a:	6803      	ldr	r3, [r0, #0]
 8025f0c:	4602      	mov	r2, r0
 8025f0e:	f013 0007 	ands.w	r0, r3, #7
 8025f12:	d00b      	beq.n	8025f2c <__lo0bits+0x22>
 8025f14:	07d9      	lsls	r1, r3, #31
 8025f16:	d421      	bmi.n	8025f5c <__lo0bits+0x52>
 8025f18:	0798      	lsls	r0, r3, #30
 8025f1a:	bf49      	itett	mi
 8025f1c:	085b      	lsrmi	r3, r3, #1
 8025f1e:	089b      	lsrpl	r3, r3, #2
 8025f20:	2001      	movmi	r0, #1
 8025f22:	6013      	strmi	r3, [r2, #0]
 8025f24:	bf5c      	itt	pl
 8025f26:	6013      	strpl	r3, [r2, #0]
 8025f28:	2002      	movpl	r0, #2
 8025f2a:	4770      	bx	lr
 8025f2c:	b299      	uxth	r1, r3
 8025f2e:	b909      	cbnz	r1, 8025f34 <__lo0bits+0x2a>
 8025f30:	0c1b      	lsrs	r3, r3, #16
 8025f32:	2010      	movs	r0, #16
 8025f34:	b2d9      	uxtb	r1, r3
 8025f36:	b909      	cbnz	r1, 8025f3c <__lo0bits+0x32>
 8025f38:	3008      	adds	r0, #8
 8025f3a:	0a1b      	lsrs	r3, r3, #8
 8025f3c:	0719      	lsls	r1, r3, #28
 8025f3e:	bf04      	itt	eq
 8025f40:	091b      	lsreq	r3, r3, #4
 8025f42:	3004      	addeq	r0, #4
 8025f44:	0799      	lsls	r1, r3, #30
 8025f46:	bf04      	itt	eq
 8025f48:	089b      	lsreq	r3, r3, #2
 8025f4a:	3002      	addeq	r0, #2
 8025f4c:	07d9      	lsls	r1, r3, #31
 8025f4e:	d403      	bmi.n	8025f58 <__lo0bits+0x4e>
 8025f50:	085b      	lsrs	r3, r3, #1
 8025f52:	f100 0001 	add.w	r0, r0, #1
 8025f56:	d003      	beq.n	8025f60 <__lo0bits+0x56>
 8025f58:	6013      	str	r3, [r2, #0]
 8025f5a:	4770      	bx	lr
 8025f5c:	2000      	movs	r0, #0
 8025f5e:	4770      	bx	lr
 8025f60:	2020      	movs	r0, #32
 8025f62:	4770      	bx	lr

08025f64 <__i2b>:
 8025f64:	b510      	push	{r4, lr}
 8025f66:	460c      	mov	r4, r1
 8025f68:	2101      	movs	r1, #1
 8025f6a:	f7ff ff07 	bl	8025d7c <_Balloc>
 8025f6e:	4602      	mov	r2, r0
 8025f70:	b928      	cbnz	r0, 8025f7e <__i2b+0x1a>
 8025f72:	4b05      	ldr	r3, [pc, #20]	@ (8025f88 <__i2b+0x24>)
 8025f74:	4805      	ldr	r0, [pc, #20]	@ (8025f8c <__i2b+0x28>)
 8025f76:	f240 1145 	movw	r1, #325	@ 0x145
 8025f7a:	f000 fc85 	bl	8026888 <__assert_func>
 8025f7e:	2301      	movs	r3, #1
 8025f80:	6144      	str	r4, [r0, #20]
 8025f82:	6103      	str	r3, [r0, #16]
 8025f84:	bd10      	pop	{r4, pc}
 8025f86:	bf00      	nop
 8025f88:	08028058 	.word	0x08028058
 8025f8c:	08028069 	.word	0x08028069

08025f90 <__multiply>:
 8025f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f94:	4614      	mov	r4, r2
 8025f96:	690a      	ldr	r2, [r1, #16]
 8025f98:	6923      	ldr	r3, [r4, #16]
 8025f9a:	429a      	cmp	r2, r3
 8025f9c:	bfa8      	it	ge
 8025f9e:	4623      	movge	r3, r4
 8025fa0:	460f      	mov	r7, r1
 8025fa2:	bfa4      	itt	ge
 8025fa4:	460c      	movge	r4, r1
 8025fa6:	461f      	movge	r7, r3
 8025fa8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8025fac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8025fb0:	68a3      	ldr	r3, [r4, #8]
 8025fb2:	6861      	ldr	r1, [r4, #4]
 8025fb4:	eb0a 0609 	add.w	r6, sl, r9
 8025fb8:	42b3      	cmp	r3, r6
 8025fba:	b085      	sub	sp, #20
 8025fbc:	bfb8      	it	lt
 8025fbe:	3101      	addlt	r1, #1
 8025fc0:	f7ff fedc 	bl	8025d7c <_Balloc>
 8025fc4:	b930      	cbnz	r0, 8025fd4 <__multiply+0x44>
 8025fc6:	4602      	mov	r2, r0
 8025fc8:	4b44      	ldr	r3, [pc, #272]	@ (80260dc <__multiply+0x14c>)
 8025fca:	4845      	ldr	r0, [pc, #276]	@ (80260e0 <__multiply+0x150>)
 8025fcc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8025fd0:	f000 fc5a 	bl	8026888 <__assert_func>
 8025fd4:	f100 0514 	add.w	r5, r0, #20
 8025fd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8025fdc:	462b      	mov	r3, r5
 8025fde:	2200      	movs	r2, #0
 8025fe0:	4543      	cmp	r3, r8
 8025fe2:	d321      	bcc.n	8026028 <__multiply+0x98>
 8025fe4:	f107 0114 	add.w	r1, r7, #20
 8025fe8:	f104 0214 	add.w	r2, r4, #20
 8025fec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8025ff0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8025ff4:	9302      	str	r3, [sp, #8]
 8025ff6:	1b13      	subs	r3, r2, r4
 8025ff8:	3b15      	subs	r3, #21
 8025ffa:	f023 0303 	bic.w	r3, r3, #3
 8025ffe:	3304      	adds	r3, #4
 8026000:	f104 0715 	add.w	r7, r4, #21
 8026004:	42ba      	cmp	r2, r7
 8026006:	bf38      	it	cc
 8026008:	2304      	movcc	r3, #4
 802600a:	9301      	str	r3, [sp, #4]
 802600c:	9b02      	ldr	r3, [sp, #8]
 802600e:	9103      	str	r1, [sp, #12]
 8026010:	428b      	cmp	r3, r1
 8026012:	d80c      	bhi.n	802602e <__multiply+0x9e>
 8026014:	2e00      	cmp	r6, #0
 8026016:	dd03      	ble.n	8026020 <__multiply+0x90>
 8026018:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802601c:	2b00      	cmp	r3, #0
 802601e:	d05b      	beq.n	80260d8 <__multiply+0x148>
 8026020:	6106      	str	r6, [r0, #16]
 8026022:	b005      	add	sp, #20
 8026024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026028:	f843 2b04 	str.w	r2, [r3], #4
 802602c:	e7d8      	b.n	8025fe0 <__multiply+0x50>
 802602e:	f8b1 a000 	ldrh.w	sl, [r1]
 8026032:	f1ba 0f00 	cmp.w	sl, #0
 8026036:	d024      	beq.n	8026082 <__multiply+0xf2>
 8026038:	f104 0e14 	add.w	lr, r4, #20
 802603c:	46a9      	mov	r9, r5
 802603e:	f04f 0c00 	mov.w	ip, #0
 8026042:	f85e 7b04 	ldr.w	r7, [lr], #4
 8026046:	f8d9 3000 	ldr.w	r3, [r9]
 802604a:	fa1f fb87 	uxth.w	fp, r7
 802604e:	b29b      	uxth	r3, r3
 8026050:	fb0a 330b 	mla	r3, sl, fp, r3
 8026054:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8026058:	f8d9 7000 	ldr.w	r7, [r9]
 802605c:	4463      	add	r3, ip
 802605e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8026062:	fb0a c70b 	mla	r7, sl, fp, ip
 8026066:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802606a:	b29b      	uxth	r3, r3
 802606c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8026070:	4572      	cmp	r2, lr
 8026072:	f849 3b04 	str.w	r3, [r9], #4
 8026076:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802607a:	d8e2      	bhi.n	8026042 <__multiply+0xb2>
 802607c:	9b01      	ldr	r3, [sp, #4]
 802607e:	f845 c003 	str.w	ip, [r5, r3]
 8026082:	9b03      	ldr	r3, [sp, #12]
 8026084:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8026088:	3104      	adds	r1, #4
 802608a:	f1b9 0f00 	cmp.w	r9, #0
 802608e:	d021      	beq.n	80260d4 <__multiply+0x144>
 8026090:	682b      	ldr	r3, [r5, #0]
 8026092:	f104 0c14 	add.w	ip, r4, #20
 8026096:	46ae      	mov	lr, r5
 8026098:	f04f 0a00 	mov.w	sl, #0
 802609c:	f8bc b000 	ldrh.w	fp, [ip]
 80260a0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80260a4:	fb09 770b 	mla	r7, r9, fp, r7
 80260a8:	4457      	add	r7, sl
 80260aa:	b29b      	uxth	r3, r3
 80260ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80260b0:	f84e 3b04 	str.w	r3, [lr], #4
 80260b4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80260b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80260bc:	f8be 3000 	ldrh.w	r3, [lr]
 80260c0:	fb09 330a 	mla	r3, r9, sl, r3
 80260c4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80260c8:	4562      	cmp	r2, ip
 80260ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80260ce:	d8e5      	bhi.n	802609c <__multiply+0x10c>
 80260d0:	9f01      	ldr	r7, [sp, #4]
 80260d2:	51eb      	str	r3, [r5, r7]
 80260d4:	3504      	adds	r5, #4
 80260d6:	e799      	b.n	802600c <__multiply+0x7c>
 80260d8:	3e01      	subs	r6, #1
 80260da:	e79b      	b.n	8026014 <__multiply+0x84>
 80260dc:	08028058 	.word	0x08028058
 80260e0:	08028069 	.word	0x08028069

080260e4 <__pow5mult>:
 80260e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80260e8:	4615      	mov	r5, r2
 80260ea:	f012 0203 	ands.w	r2, r2, #3
 80260ee:	4607      	mov	r7, r0
 80260f0:	460e      	mov	r6, r1
 80260f2:	d007      	beq.n	8026104 <__pow5mult+0x20>
 80260f4:	4c25      	ldr	r4, [pc, #148]	@ (802618c <__pow5mult+0xa8>)
 80260f6:	3a01      	subs	r2, #1
 80260f8:	2300      	movs	r3, #0
 80260fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80260fe:	f7ff fe9f 	bl	8025e40 <__multadd>
 8026102:	4606      	mov	r6, r0
 8026104:	10ad      	asrs	r5, r5, #2
 8026106:	d03d      	beq.n	8026184 <__pow5mult+0xa0>
 8026108:	69fc      	ldr	r4, [r7, #28]
 802610a:	b97c      	cbnz	r4, 802612c <__pow5mult+0x48>
 802610c:	2010      	movs	r0, #16
 802610e:	f7fd fffb 	bl	8024108 <malloc>
 8026112:	4602      	mov	r2, r0
 8026114:	61f8      	str	r0, [r7, #28]
 8026116:	b928      	cbnz	r0, 8026124 <__pow5mult+0x40>
 8026118:	4b1d      	ldr	r3, [pc, #116]	@ (8026190 <__pow5mult+0xac>)
 802611a:	481e      	ldr	r0, [pc, #120]	@ (8026194 <__pow5mult+0xb0>)
 802611c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8026120:	f000 fbb2 	bl	8026888 <__assert_func>
 8026124:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026128:	6004      	str	r4, [r0, #0]
 802612a:	60c4      	str	r4, [r0, #12]
 802612c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8026130:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026134:	b94c      	cbnz	r4, 802614a <__pow5mult+0x66>
 8026136:	f240 2171 	movw	r1, #625	@ 0x271
 802613a:	4638      	mov	r0, r7
 802613c:	f7ff ff12 	bl	8025f64 <__i2b>
 8026140:	2300      	movs	r3, #0
 8026142:	f8c8 0008 	str.w	r0, [r8, #8]
 8026146:	4604      	mov	r4, r0
 8026148:	6003      	str	r3, [r0, #0]
 802614a:	f04f 0900 	mov.w	r9, #0
 802614e:	07eb      	lsls	r3, r5, #31
 8026150:	d50a      	bpl.n	8026168 <__pow5mult+0x84>
 8026152:	4631      	mov	r1, r6
 8026154:	4622      	mov	r2, r4
 8026156:	4638      	mov	r0, r7
 8026158:	f7ff ff1a 	bl	8025f90 <__multiply>
 802615c:	4631      	mov	r1, r6
 802615e:	4680      	mov	r8, r0
 8026160:	4638      	mov	r0, r7
 8026162:	f7ff fe4b 	bl	8025dfc <_Bfree>
 8026166:	4646      	mov	r6, r8
 8026168:	106d      	asrs	r5, r5, #1
 802616a:	d00b      	beq.n	8026184 <__pow5mult+0xa0>
 802616c:	6820      	ldr	r0, [r4, #0]
 802616e:	b938      	cbnz	r0, 8026180 <__pow5mult+0x9c>
 8026170:	4622      	mov	r2, r4
 8026172:	4621      	mov	r1, r4
 8026174:	4638      	mov	r0, r7
 8026176:	f7ff ff0b 	bl	8025f90 <__multiply>
 802617a:	6020      	str	r0, [r4, #0]
 802617c:	f8c0 9000 	str.w	r9, [r0]
 8026180:	4604      	mov	r4, r0
 8026182:	e7e4      	b.n	802614e <__pow5mult+0x6a>
 8026184:	4630      	mov	r0, r6
 8026186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802618a:	bf00      	nop
 802618c:	080280c4 	.word	0x080280c4
 8026190:	08027fe9 	.word	0x08027fe9
 8026194:	08028069 	.word	0x08028069

08026198 <__lshift>:
 8026198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802619c:	460c      	mov	r4, r1
 802619e:	6849      	ldr	r1, [r1, #4]
 80261a0:	6923      	ldr	r3, [r4, #16]
 80261a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80261a6:	68a3      	ldr	r3, [r4, #8]
 80261a8:	4607      	mov	r7, r0
 80261aa:	4691      	mov	r9, r2
 80261ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80261b0:	f108 0601 	add.w	r6, r8, #1
 80261b4:	42b3      	cmp	r3, r6
 80261b6:	db0b      	blt.n	80261d0 <__lshift+0x38>
 80261b8:	4638      	mov	r0, r7
 80261ba:	f7ff fddf 	bl	8025d7c <_Balloc>
 80261be:	4605      	mov	r5, r0
 80261c0:	b948      	cbnz	r0, 80261d6 <__lshift+0x3e>
 80261c2:	4602      	mov	r2, r0
 80261c4:	4b28      	ldr	r3, [pc, #160]	@ (8026268 <__lshift+0xd0>)
 80261c6:	4829      	ldr	r0, [pc, #164]	@ (802626c <__lshift+0xd4>)
 80261c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80261cc:	f000 fb5c 	bl	8026888 <__assert_func>
 80261d0:	3101      	adds	r1, #1
 80261d2:	005b      	lsls	r3, r3, #1
 80261d4:	e7ee      	b.n	80261b4 <__lshift+0x1c>
 80261d6:	2300      	movs	r3, #0
 80261d8:	f100 0114 	add.w	r1, r0, #20
 80261dc:	f100 0210 	add.w	r2, r0, #16
 80261e0:	4618      	mov	r0, r3
 80261e2:	4553      	cmp	r3, sl
 80261e4:	db33      	blt.n	802624e <__lshift+0xb6>
 80261e6:	6920      	ldr	r0, [r4, #16]
 80261e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80261ec:	f104 0314 	add.w	r3, r4, #20
 80261f0:	f019 091f 	ands.w	r9, r9, #31
 80261f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80261f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80261fc:	d02b      	beq.n	8026256 <__lshift+0xbe>
 80261fe:	f1c9 0e20 	rsb	lr, r9, #32
 8026202:	468a      	mov	sl, r1
 8026204:	2200      	movs	r2, #0
 8026206:	6818      	ldr	r0, [r3, #0]
 8026208:	fa00 f009 	lsl.w	r0, r0, r9
 802620c:	4310      	orrs	r0, r2
 802620e:	f84a 0b04 	str.w	r0, [sl], #4
 8026212:	f853 2b04 	ldr.w	r2, [r3], #4
 8026216:	459c      	cmp	ip, r3
 8026218:	fa22 f20e 	lsr.w	r2, r2, lr
 802621c:	d8f3      	bhi.n	8026206 <__lshift+0x6e>
 802621e:	ebac 0304 	sub.w	r3, ip, r4
 8026222:	3b15      	subs	r3, #21
 8026224:	f023 0303 	bic.w	r3, r3, #3
 8026228:	3304      	adds	r3, #4
 802622a:	f104 0015 	add.w	r0, r4, #21
 802622e:	4584      	cmp	ip, r0
 8026230:	bf38      	it	cc
 8026232:	2304      	movcc	r3, #4
 8026234:	50ca      	str	r2, [r1, r3]
 8026236:	b10a      	cbz	r2, 802623c <__lshift+0xa4>
 8026238:	f108 0602 	add.w	r6, r8, #2
 802623c:	3e01      	subs	r6, #1
 802623e:	4638      	mov	r0, r7
 8026240:	612e      	str	r6, [r5, #16]
 8026242:	4621      	mov	r1, r4
 8026244:	f7ff fdda 	bl	8025dfc <_Bfree>
 8026248:	4628      	mov	r0, r5
 802624a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802624e:	f842 0f04 	str.w	r0, [r2, #4]!
 8026252:	3301      	adds	r3, #1
 8026254:	e7c5      	b.n	80261e2 <__lshift+0x4a>
 8026256:	3904      	subs	r1, #4
 8026258:	f853 2b04 	ldr.w	r2, [r3], #4
 802625c:	f841 2f04 	str.w	r2, [r1, #4]!
 8026260:	459c      	cmp	ip, r3
 8026262:	d8f9      	bhi.n	8026258 <__lshift+0xc0>
 8026264:	e7ea      	b.n	802623c <__lshift+0xa4>
 8026266:	bf00      	nop
 8026268:	08028058 	.word	0x08028058
 802626c:	08028069 	.word	0x08028069

08026270 <__mcmp>:
 8026270:	690a      	ldr	r2, [r1, #16]
 8026272:	4603      	mov	r3, r0
 8026274:	6900      	ldr	r0, [r0, #16]
 8026276:	1a80      	subs	r0, r0, r2
 8026278:	b530      	push	{r4, r5, lr}
 802627a:	d10e      	bne.n	802629a <__mcmp+0x2a>
 802627c:	3314      	adds	r3, #20
 802627e:	3114      	adds	r1, #20
 8026280:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8026284:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8026288:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802628c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8026290:	4295      	cmp	r5, r2
 8026292:	d003      	beq.n	802629c <__mcmp+0x2c>
 8026294:	d205      	bcs.n	80262a2 <__mcmp+0x32>
 8026296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802629a:	bd30      	pop	{r4, r5, pc}
 802629c:	42a3      	cmp	r3, r4
 802629e:	d3f3      	bcc.n	8026288 <__mcmp+0x18>
 80262a0:	e7fb      	b.n	802629a <__mcmp+0x2a>
 80262a2:	2001      	movs	r0, #1
 80262a4:	e7f9      	b.n	802629a <__mcmp+0x2a>
	...

080262a8 <__mdiff>:
 80262a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262ac:	4689      	mov	r9, r1
 80262ae:	4606      	mov	r6, r0
 80262b0:	4611      	mov	r1, r2
 80262b2:	4648      	mov	r0, r9
 80262b4:	4614      	mov	r4, r2
 80262b6:	f7ff ffdb 	bl	8026270 <__mcmp>
 80262ba:	1e05      	subs	r5, r0, #0
 80262bc:	d112      	bne.n	80262e4 <__mdiff+0x3c>
 80262be:	4629      	mov	r1, r5
 80262c0:	4630      	mov	r0, r6
 80262c2:	f7ff fd5b 	bl	8025d7c <_Balloc>
 80262c6:	4602      	mov	r2, r0
 80262c8:	b928      	cbnz	r0, 80262d6 <__mdiff+0x2e>
 80262ca:	4b3f      	ldr	r3, [pc, #252]	@ (80263c8 <__mdiff+0x120>)
 80262cc:	f240 2137 	movw	r1, #567	@ 0x237
 80262d0:	483e      	ldr	r0, [pc, #248]	@ (80263cc <__mdiff+0x124>)
 80262d2:	f000 fad9 	bl	8026888 <__assert_func>
 80262d6:	2301      	movs	r3, #1
 80262d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80262dc:	4610      	mov	r0, r2
 80262de:	b003      	add	sp, #12
 80262e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80262e4:	bfbc      	itt	lt
 80262e6:	464b      	movlt	r3, r9
 80262e8:	46a1      	movlt	r9, r4
 80262ea:	4630      	mov	r0, r6
 80262ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80262f0:	bfba      	itte	lt
 80262f2:	461c      	movlt	r4, r3
 80262f4:	2501      	movlt	r5, #1
 80262f6:	2500      	movge	r5, #0
 80262f8:	f7ff fd40 	bl	8025d7c <_Balloc>
 80262fc:	4602      	mov	r2, r0
 80262fe:	b918      	cbnz	r0, 8026308 <__mdiff+0x60>
 8026300:	4b31      	ldr	r3, [pc, #196]	@ (80263c8 <__mdiff+0x120>)
 8026302:	f240 2145 	movw	r1, #581	@ 0x245
 8026306:	e7e3      	b.n	80262d0 <__mdiff+0x28>
 8026308:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802630c:	6926      	ldr	r6, [r4, #16]
 802630e:	60c5      	str	r5, [r0, #12]
 8026310:	f109 0310 	add.w	r3, r9, #16
 8026314:	f109 0514 	add.w	r5, r9, #20
 8026318:	f104 0e14 	add.w	lr, r4, #20
 802631c:	f100 0b14 	add.w	fp, r0, #20
 8026320:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8026324:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8026328:	9301      	str	r3, [sp, #4]
 802632a:	46d9      	mov	r9, fp
 802632c:	f04f 0c00 	mov.w	ip, #0
 8026330:	9b01      	ldr	r3, [sp, #4]
 8026332:	f85e 0b04 	ldr.w	r0, [lr], #4
 8026336:	f853 af04 	ldr.w	sl, [r3, #4]!
 802633a:	9301      	str	r3, [sp, #4]
 802633c:	fa1f f38a 	uxth.w	r3, sl
 8026340:	4619      	mov	r1, r3
 8026342:	b283      	uxth	r3, r0
 8026344:	1acb      	subs	r3, r1, r3
 8026346:	0c00      	lsrs	r0, r0, #16
 8026348:	4463      	add	r3, ip
 802634a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802634e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8026352:	b29b      	uxth	r3, r3
 8026354:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026358:	4576      	cmp	r6, lr
 802635a:	f849 3b04 	str.w	r3, [r9], #4
 802635e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8026362:	d8e5      	bhi.n	8026330 <__mdiff+0x88>
 8026364:	1b33      	subs	r3, r6, r4
 8026366:	3b15      	subs	r3, #21
 8026368:	f023 0303 	bic.w	r3, r3, #3
 802636c:	3415      	adds	r4, #21
 802636e:	3304      	adds	r3, #4
 8026370:	42a6      	cmp	r6, r4
 8026372:	bf38      	it	cc
 8026374:	2304      	movcc	r3, #4
 8026376:	441d      	add	r5, r3
 8026378:	445b      	add	r3, fp
 802637a:	461e      	mov	r6, r3
 802637c:	462c      	mov	r4, r5
 802637e:	4544      	cmp	r4, r8
 8026380:	d30e      	bcc.n	80263a0 <__mdiff+0xf8>
 8026382:	f108 0103 	add.w	r1, r8, #3
 8026386:	1b49      	subs	r1, r1, r5
 8026388:	f021 0103 	bic.w	r1, r1, #3
 802638c:	3d03      	subs	r5, #3
 802638e:	45a8      	cmp	r8, r5
 8026390:	bf38      	it	cc
 8026392:	2100      	movcc	r1, #0
 8026394:	440b      	add	r3, r1
 8026396:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802639a:	b191      	cbz	r1, 80263c2 <__mdiff+0x11a>
 802639c:	6117      	str	r7, [r2, #16]
 802639e:	e79d      	b.n	80262dc <__mdiff+0x34>
 80263a0:	f854 1b04 	ldr.w	r1, [r4], #4
 80263a4:	46e6      	mov	lr, ip
 80263a6:	0c08      	lsrs	r0, r1, #16
 80263a8:	fa1c fc81 	uxtah	ip, ip, r1
 80263ac:	4471      	add	r1, lr
 80263ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80263b2:	b289      	uxth	r1, r1
 80263b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80263b8:	f846 1b04 	str.w	r1, [r6], #4
 80263bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80263c0:	e7dd      	b.n	802637e <__mdiff+0xd6>
 80263c2:	3f01      	subs	r7, #1
 80263c4:	e7e7      	b.n	8026396 <__mdiff+0xee>
 80263c6:	bf00      	nop
 80263c8:	08028058 	.word	0x08028058
 80263cc:	08028069 	.word	0x08028069

080263d0 <__d2b>:
 80263d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80263d4:	460f      	mov	r7, r1
 80263d6:	2101      	movs	r1, #1
 80263d8:	ec59 8b10 	vmov	r8, r9, d0
 80263dc:	4616      	mov	r6, r2
 80263de:	f7ff fccd 	bl	8025d7c <_Balloc>
 80263e2:	4604      	mov	r4, r0
 80263e4:	b930      	cbnz	r0, 80263f4 <__d2b+0x24>
 80263e6:	4602      	mov	r2, r0
 80263e8:	4b23      	ldr	r3, [pc, #140]	@ (8026478 <__d2b+0xa8>)
 80263ea:	4824      	ldr	r0, [pc, #144]	@ (802647c <__d2b+0xac>)
 80263ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80263f0:	f000 fa4a 	bl	8026888 <__assert_func>
 80263f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80263f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80263fc:	b10d      	cbz	r5, 8026402 <__d2b+0x32>
 80263fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8026402:	9301      	str	r3, [sp, #4]
 8026404:	f1b8 0300 	subs.w	r3, r8, #0
 8026408:	d023      	beq.n	8026452 <__d2b+0x82>
 802640a:	4668      	mov	r0, sp
 802640c:	9300      	str	r3, [sp, #0]
 802640e:	f7ff fd7c 	bl	8025f0a <__lo0bits>
 8026412:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026416:	b1d0      	cbz	r0, 802644e <__d2b+0x7e>
 8026418:	f1c0 0320 	rsb	r3, r0, #32
 802641c:	fa02 f303 	lsl.w	r3, r2, r3
 8026420:	430b      	orrs	r3, r1
 8026422:	40c2      	lsrs	r2, r0
 8026424:	6163      	str	r3, [r4, #20]
 8026426:	9201      	str	r2, [sp, #4]
 8026428:	9b01      	ldr	r3, [sp, #4]
 802642a:	61a3      	str	r3, [r4, #24]
 802642c:	2b00      	cmp	r3, #0
 802642e:	bf0c      	ite	eq
 8026430:	2201      	moveq	r2, #1
 8026432:	2202      	movne	r2, #2
 8026434:	6122      	str	r2, [r4, #16]
 8026436:	b1a5      	cbz	r5, 8026462 <__d2b+0x92>
 8026438:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 802643c:	4405      	add	r5, r0
 802643e:	603d      	str	r5, [r7, #0]
 8026440:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8026444:	6030      	str	r0, [r6, #0]
 8026446:	4620      	mov	r0, r4
 8026448:	b003      	add	sp, #12
 802644a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802644e:	6161      	str	r1, [r4, #20]
 8026450:	e7ea      	b.n	8026428 <__d2b+0x58>
 8026452:	a801      	add	r0, sp, #4
 8026454:	f7ff fd59 	bl	8025f0a <__lo0bits>
 8026458:	9b01      	ldr	r3, [sp, #4]
 802645a:	6163      	str	r3, [r4, #20]
 802645c:	3020      	adds	r0, #32
 802645e:	2201      	movs	r2, #1
 8026460:	e7e8      	b.n	8026434 <__d2b+0x64>
 8026462:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026466:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 802646a:	6038      	str	r0, [r7, #0]
 802646c:	6918      	ldr	r0, [r3, #16]
 802646e:	f7ff fd2d 	bl	8025ecc <__hi0bits>
 8026472:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026476:	e7e5      	b.n	8026444 <__d2b+0x74>
 8026478:	08028058 	.word	0x08028058
 802647c:	08028069 	.word	0x08028069

08026480 <__ssputs_r>:
 8026480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026484:	688e      	ldr	r6, [r1, #8]
 8026486:	461f      	mov	r7, r3
 8026488:	42be      	cmp	r6, r7
 802648a:	680b      	ldr	r3, [r1, #0]
 802648c:	4682      	mov	sl, r0
 802648e:	460c      	mov	r4, r1
 8026490:	4690      	mov	r8, r2
 8026492:	d82d      	bhi.n	80264f0 <__ssputs_r+0x70>
 8026494:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026498:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 802649c:	d026      	beq.n	80264ec <__ssputs_r+0x6c>
 802649e:	6965      	ldr	r5, [r4, #20]
 80264a0:	6909      	ldr	r1, [r1, #16]
 80264a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80264a6:	eba3 0901 	sub.w	r9, r3, r1
 80264aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80264ae:	1c7b      	adds	r3, r7, #1
 80264b0:	444b      	add	r3, r9
 80264b2:	106d      	asrs	r5, r5, #1
 80264b4:	429d      	cmp	r5, r3
 80264b6:	bf38      	it	cc
 80264b8:	461d      	movcc	r5, r3
 80264ba:	0553      	lsls	r3, r2, #21
 80264bc:	d527      	bpl.n	802650e <__ssputs_r+0x8e>
 80264be:	4629      	mov	r1, r5
 80264c0:	f7fd fe54 	bl	802416c <_malloc_r>
 80264c4:	4606      	mov	r6, r0
 80264c6:	b360      	cbz	r0, 8026522 <__ssputs_r+0xa2>
 80264c8:	6921      	ldr	r1, [r4, #16]
 80264ca:	464a      	mov	r2, r9
 80264cc:	f7fe fdaf 	bl	802502e <memcpy>
 80264d0:	89a3      	ldrh	r3, [r4, #12]
 80264d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80264d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80264da:	81a3      	strh	r3, [r4, #12]
 80264dc:	6126      	str	r6, [r4, #16]
 80264de:	6165      	str	r5, [r4, #20]
 80264e0:	444e      	add	r6, r9
 80264e2:	eba5 0509 	sub.w	r5, r5, r9
 80264e6:	6026      	str	r6, [r4, #0]
 80264e8:	60a5      	str	r5, [r4, #8]
 80264ea:	463e      	mov	r6, r7
 80264ec:	42be      	cmp	r6, r7
 80264ee:	d900      	bls.n	80264f2 <__ssputs_r+0x72>
 80264f0:	463e      	mov	r6, r7
 80264f2:	6820      	ldr	r0, [r4, #0]
 80264f4:	4632      	mov	r2, r6
 80264f6:	4641      	mov	r1, r8
 80264f8:	f7fe fc55 	bl	8024da6 <memmove>
 80264fc:	68a3      	ldr	r3, [r4, #8]
 80264fe:	1b9b      	subs	r3, r3, r6
 8026500:	60a3      	str	r3, [r4, #8]
 8026502:	6823      	ldr	r3, [r4, #0]
 8026504:	4433      	add	r3, r6
 8026506:	6023      	str	r3, [r4, #0]
 8026508:	2000      	movs	r0, #0
 802650a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802650e:	462a      	mov	r2, r5
 8026510:	f000 f9fe 	bl	8026910 <_realloc_r>
 8026514:	4606      	mov	r6, r0
 8026516:	2800      	cmp	r0, #0
 8026518:	d1e0      	bne.n	80264dc <__ssputs_r+0x5c>
 802651a:	6921      	ldr	r1, [r4, #16]
 802651c:	4650      	mov	r0, sl
 802651e:	f7ff fbe3 	bl	8025ce8 <_free_r>
 8026522:	230c      	movs	r3, #12
 8026524:	f8ca 3000 	str.w	r3, [sl]
 8026528:	89a3      	ldrh	r3, [r4, #12]
 802652a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802652e:	81a3      	strh	r3, [r4, #12]
 8026530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026534:	e7e9      	b.n	802650a <__ssputs_r+0x8a>
	...

08026538 <_svfiprintf_r>:
 8026538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802653c:	4698      	mov	r8, r3
 802653e:	898b      	ldrh	r3, [r1, #12]
 8026540:	061b      	lsls	r3, r3, #24
 8026542:	b09d      	sub	sp, #116	@ 0x74
 8026544:	4607      	mov	r7, r0
 8026546:	460d      	mov	r5, r1
 8026548:	4614      	mov	r4, r2
 802654a:	d510      	bpl.n	802656e <_svfiprintf_r+0x36>
 802654c:	690b      	ldr	r3, [r1, #16]
 802654e:	b973      	cbnz	r3, 802656e <_svfiprintf_r+0x36>
 8026550:	2140      	movs	r1, #64	@ 0x40
 8026552:	f7fd fe0b 	bl	802416c <_malloc_r>
 8026556:	6028      	str	r0, [r5, #0]
 8026558:	6128      	str	r0, [r5, #16]
 802655a:	b930      	cbnz	r0, 802656a <_svfiprintf_r+0x32>
 802655c:	230c      	movs	r3, #12
 802655e:	603b      	str	r3, [r7, #0]
 8026560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026564:	b01d      	add	sp, #116	@ 0x74
 8026566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802656a:	2340      	movs	r3, #64	@ 0x40
 802656c:	616b      	str	r3, [r5, #20]
 802656e:	2300      	movs	r3, #0
 8026570:	9309      	str	r3, [sp, #36]	@ 0x24
 8026572:	2320      	movs	r3, #32
 8026574:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026578:	f8cd 800c 	str.w	r8, [sp, #12]
 802657c:	2330      	movs	r3, #48	@ 0x30
 802657e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802671c <_svfiprintf_r+0x1e4>
 8026582:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026586:	f04f 0901 	mov.w	r9, #1
 802658a:	4623      	mov	r3, r4
 802658c:	469a      	mov	sl, r3
 802658e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026592:	b10a      	cbz	r2, 8026598 <_svfiprintf_r+0x60>
 8026594:	2a25      	cmp	r2, #37	@ 0x25
 8026596:	d1f9      	bne.n	802658c <_svfiprintf_r+0x54>
 8026598:	ebba 0b04 	subs.w	fp, sl, r4
 802659c:	d00b      	beq.n	80265b6 <_svfiprintf_r+0x7e>
 802659e:	465b      	mov	r3, fp
 80265a0:	4622      	mov	r2, r4
 80265a2:	4629      	mov	r1, r5
 80265a4:	4638      	mov	r0, r7
 80265a6:	f7ff ff6b 	bl	8026480 <__ssputs_r>
 80265aa:	3001      	adds	r0, #1
 80265ac:	f000 80a7 	beq.w	80266fe <_svfiprintf_r+0x1c6>
 80265b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80265b2:	445a      	add	r2, fp
 80265b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80265b6:	f89a 3000 	ldrb.w	r3, [sl]
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	f000 809f 	beq.w	80266fe <_svfiprintf_r+0x1c6>
 80265c0:	2300      	movs	r3, #0
 80265c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80265c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80265ca:	f10a 0a01 	add.w	sl, sl, #1
 80265ce:	9304      	str	r3, [sp, #16]
 80265d0:	9307      	str	r3, [sp, #28]
 80265d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80265d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80265d8:	4654      	mov	r4, sl
 80265da:	2205      	movs	r2, #5
 80265dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265e0:	484e      	ldr	r0, [pc, #312]	@ (802671c <_svfiprintf_r+0x1e4>)
 80265e2:	f7d9 fe1d 	bl	8000220 <memchr>
 80265e6:	9a04      	ldr	r2, [sp, #16]
 80265e8:	b9d8      	cbnz	r0, 8026622 <_svfiprintf_r+0xea>
 80265ea:	06d0      	lsls	r0, r2, #27
 80265ec:	bf44      	itt	mi
 80265ee:	2320      	movmi	r3, #32
 80265f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265f4:	0711      	lsls	r1, r2, #28
 80265f6:	bf44      	itt	mi
 80265f8:	232b      	movmi	r3, #43	@ 0x2b
 80265fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80265fe:	f89a 3000 	ldrb.w	r3, [sl]
 8026602:	2b2a      	cmp	r3, #42	@ 0x2a
 8026604:	d015      	beq.n	8026632 <_svfiprintf_r+0xfa>
 8026606:	9a07      	ldr	r2, [sp, #28]
 8026608:	4654      	mov	r4, sl
 802660a:	2000      	movs	r0, #0
 802660c:	f04f 0c0a 	mov.w	ip, #10
 8026610:	4621      	mov	r1, r4
 8026612:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026616:	3b30      	subs	r3, #48	@ 0x30
 8026618:	2b09      	cmp	r3, #9
 802661a:	d94b      	bls.n	80266b4 <_svfiprintf_r+0x17c>
 802661c:	b1b0      	cbz	r0, 802664c <_svfiprintf_r+0x114>
 802661e:	9207      	str	r2, [sp, #28]
 8026620:	e014      	b.n	802664c <_svfiprintf_r+0x114>
 8026622:	eba0 0308 	sub.w	r3, r0, r8
 8026626:	fa09 f303 	lsl.w	r3, r9, r3
 802662a:	4313      	orrs	r3, r2
 802662c:	9304      	str	r3, [sp, #16]
 802662e:	46a2      	mov	sl, r4
 8026630:	e7d2      	b.n	80265d8 <_svfiprintf_r+0xa0>
 8026632:	9b03      	ldr	r3, [sp, #12]
 8026634:	1d19      	adds	r1, r3, #4
 8026636:	681b      	ldr	r3, [r3, #0]
 8026638:	9103      	str	r1, [sp, #12]
 802663a:	2b00      	cmp	r3, #0
 802663c:	bfbb      	ittet	lt
 802663e:	425b      	neglt	r3, r3
 8026640:	f042 0202 	orrlt.w	r2, r2, #2
 8026644:	9307      	strge	r3, [sp, #28]
 8026646:	9307      	strlt	r3, [sp, #28]
 8026648:	bfb8      	it	lt
 802664a:	9204      	strlt	r2, [sp, #16]
 802664c:	7823      	ldrb	r3, [r4, #0]
 802664e:	2b2e      	cmp	r3, #46	@ 0x2e
 8026650:	d10a      	bne.n	8026668 <_svfiprintf_r+0x130>
 8026652:	7863      	ldrb	r3, [r4, #1]
 8026654:	2b2a      	cmp	r3, #42	@ 0x2a
 8026656:	d132      	bne.n	80266be <_svfiprintf_r+0x186>
 8026658:	9b03      	ldr	r3, [sp, #12]
 802665a:	1d1a      	adds	r2, r3, #4
 802665c:	681b      	ldr	r3, [r3, #0]
 802665e:	9203      	str	r2, [sp, #12]
 8026660:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026664:	3402      	adds	r4, #2
 8026666:	9305      	str	r3, [sp, #20]
 8026668:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802672c <_svfiprintf_r+0x1f4>
 802666c:	7821      	ldrb	r1, [r4, #0]
 802666e:	2203      	movs	r2, #3
 8026670:	4650      	mov	r0, sl
 8026672:	f7d9 fdd5 	bl	8000220 <memchr>
 8026676:	b138      	cbz	r0, 8026688 <_svfiprintf_r+0x150>
 8026678:	9b04      	ldr	r3, [sp, #16]
 802667a:	eba0 000a 	sub.w	r0, r0, sl
 802667e:	2240      	movs	r2, #64	@ 0x40
 8026680:	4082      	lsls	r2, r0
 8026682:	4313      	orrs	r3, r2
 8026684:	3401      	adds	r4, #1
 8026686:	9304      	str	r3, [sp, #16]
 8026688:	f814 1b01 	ldrb.w	r1, [r4], #1
 802668c:	4824      	ldr	r0, [pc, #144]	@ (8026720 <_svfiprintf_r+0x1e8>)
 802668e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026692:	2206      	movs	r2, #6
 8026694:	f7d9 fdc4 	bl	8000220 <memchr>
 8026698:	2800      	cmp	r0, #0
 802669a:	d036      	beq.n	802670a <_svfiprintf_r+0x1d2>
 802669c:	4b21      	ldr	r3, [pc, #132]	@ (8026724 <_svfiprintf_r+0x1ec>)
 802669e:	bb1b      	cbnz	r3, 80266e8 <_svfiprintf_r+0x1b0>
 80266a0:	9b03      	ldr	r3, [sp, #12]
 80266a2:	3307      	adds	r3, #7
 80266a4:	f023 0307 	bic.w	r3, r3, #7
 80266a8:	3308      	adds	r3, #8
 80266aa:	9303      	str	r3, [sp, #12]
 80266ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80266ae:	4433      	add	r3, r6
 80266b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80266b2:	e76a      	b.n	802658a <_svfiprintf_r+0x52>
 80266b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80266b8:	460c      	mov	r4, r1
 80266ba:	2001      	movs	r0, #1
 80266bc:	e7a8      	b.n	8026610 <_svfiprintf_r+0xd8>
 80266be:	2300      	movs	r3, #0
 80266c0:	3401      	adds	r4, #1
 80266c2:	9305      	str	r3, [sp, #20]
 80266c4:	4619      	mov	r1, r3
 80266c6:	f04f 0c0a 	mov.w	ip, #10
 80266ca:	4620      	mov	r0, r4
 80266cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80266d0:	3a30      	subs	r2, #48	@ 0x30
 80266d2:	2a09      	cmp	r2, #9
 80266d4:	d903      	bls.n	80266de <_svfiprintf_r+0x1a6>
 80266d6:	2b00      	cmp	r3, #0
 80266d8:	d0c6      	beq.n	8026668 <_svfiprintf_r+0x130>
 80266da:	9105      	str	r1, [sp, #20]
 80266dc:	e7c4      	b.n	8026668 <_svfiprintf_r+0x130>
 80266de:	fb0c 2101 	mla	r1, ip, r1, r2
 80266e2:	4604      	mov	r4, r0
 80266e4:	2301      	movs	r3, #1
 80266e6:	e7f0      	b.n	80266ca <_svfiprintf_r+0x192>
 80266e8:	ab03      	add	r3, sp, #12
 80266ea:	9300      	str	r3, [sp, #0]
 80266ec:	462a      	mov	r2, r5
 80266ee:	4b0e      	ldr	r3, [pc, #56]	@ (8026728 <_svfiprintf_r+0x1f0>)
 80266f0:	a904      	add	r1, sp, #16
 80266f2:	4638      	mov	r0, r7
 80266f4:	f7fd fe66 	bl	80243c4 <_printf_float>
 80266f8:	1c42      	adds	r2, r0, #1
 80266fa:	4606      	mov	r6, r0
 80266fc:	d1d6      	bne.n	80266ac <_svfiprintf_r+0x174>
 80266fe:	89ab      	ldrh	r3, [r5, #12]
 8026700:	065b      	lsls	r3, r3, #25
 8026702:	f53f af2d 	bmi.w	8026560 <_svfiprintf_r+0x28>
 8026706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026708:	e72c      	b.n	8026564 <_svfiprintf_r+0x2c>
 802670a:	ab03      	add	r3, sp, #12
 802670c:	9300      	str	r3, [sp, #0]
 802670e:	462a      	mov	r2, r5
 8026710:	4b05      	ldr	r3, [pc, #20]	@ (8026728 <_svfiprintf_r+0x1f0>)
 8026712:	a904      	add	r1, sp, #16
 8026714:	4638      	mov	r0, r7
 8026716:	f7fe f8ed 	bl	80248f4 <_printf_i>
 802671a:	e7ed      	b.n	80266f8 <_svfiprintf_r+0x1c0>
 802671c:	080281c0 	.word	0x080281c0
 8026720:	080281ca 	.word	0x080281ca
 8026724:	080243c5 	.word	0x080243c5
 8026728:	08026481 	.word	0x08026481
 802672c:	080281c6 	.word	0x080281c6

08026730 <__sflush_r>:
 8026730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026738:	0716      	lsls	r6, r2, #28
 802673a:	4605      	mov	r5, r0
 802673c:	460c      	mov	r4, r1
 802673e:	d454      	bmi.n	80267ea <__sflush_r+0xba>
 8026740:	684b      	ldr	r3, [r1, #4]
 8026742:	2b00      	cmp	r3, #0
 8026744:	dc02      	bgt.n	802674c <__sflush_r+0x1c>
 8026746:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8026748:	2b00      	cmp	r3, #0
 802674a:	dd48      	ble.n	80267de <__sflush_r+0xae>
 802674c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802674e:	2e00      	cmp	r6, #0
 8026750:	d045      	beq.n	80267de <__sflush_r+0xae>
 8026752:	2300      	movs	r3, #0
 8026754:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8026758:	682f      	ldr	r7, [r5, #0]
 802675a:	6a21      	ldr	r1, [r4, #32]
 802675c:	602b      	str	r3, [r5, #0]
 802675e:	d030      	beq.n	80267c2 <__sflush_r+0x92>
 8026760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026762:	89a3      	ldrh	r3, [r4, #12]
 8026764:	0759      	lsls	r1, r3, #29
 8026766:	d505      	bpl.n	8026774 <__sflush_r+0x44>
 8026768:	6863      	ldr	r3, [r4, #4]
 802676a:	1ad2      	subs	r2, r2, r3
 802676c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802676e:	b10b      	cbz	r3, 8026774 <__sflush_r+0x44>
 8026770:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026772:	1ad2      	subs	r2, r2, r3
 8026774:	2300      	movs	r3, #0
 8026776:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026778:	6a21      	ldr	r1, [r4, #32]
 802677a:	4628      	mov	r0, r5
 802677c:	47b0      	blx	r6
 802677e:	1c43      	adds	r3, r0, #1
 8026780:	89a3      	ldrh	r3, [r4, #12]
 8026782:	d106      	bne.n	8026792 <__sflush_r+0x62>
 8026784:	6829      	ldr	r1, [r5, #0]
 8026786:	291d      	cmp	r1, #29
 8026788:	d82b      	bhi.n	80267e2 <__sflush_r+0xb2>
 802678a:	4a2a      	ldr	r2, [pc, #168]	@ (8026834 <__sflush_r+0x104>)
 802678c:	410a      	asrs	r2, r1
 802678e:	07d6      	lsls	r6, r2, #31
 8026790:	d427      	bmi.n	80267e2 <__sflush_r+0xb2>
 8026792:	2200      	movs	r2, #0
 8026794:	6062      	str	r2, [r4, #4]
 8026796:	04d9      	lsls	r1, r3, #19
 8026798:	6922      	ldr	r2, [r4, #16]
 802679a:	6022      	str	r2, [r4, #0]
 802679c:	d504      	bpl.n	80267a8 <__sflush_r+0x78>
 802679e:	1c42      	adds	r2, r0, #1
 80267a0:	d101      	bne.n	80267a6 <__sflush_r+0x76>
 80267a2:	682b      	ldr	r3, [r5, #0]
 80267a4:	b903      	cbnz	r3, 80267a8 <__sflush_r+0x78>
 80267a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80267a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80267aa:	602f      	str	r7, [r5, #0]
 80267ac:	b1b9      	cbz	r1, 80267de <__sflush_r+0xae>
 80267ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80267b2:	4299      	cmp	r1, r3
 80267b4:	d002      	beq.n	80267bc <__sflush_r+0x8c>
 80267b6:	4628      	mov	r0, r5
 80267b8:	f7ff fa96 	bl	8025ce8 <_free_r>
 80267bc:	2300      	movs	r3, #0
 80267be:	6363      	str	r3, [r4, #52]	@ 0x34
 80267c0:	e00d      	b.n	80267de <__sflush_r+0xae>
 80267c2:	2301      	movs	r3, #1
 80267c4:	4628      	mov	r0, r5
 80267c6:	47b0      	blx	r6
 80267c8:	4602      	mov	r2, r0
 80267ca:	1c50      	adds	r0, r2, #1
 80267cc:	d1c9      	bne.n	8026762 <__sflush_r+0x32>
 80267ce:	682b      	ldr	r3, [r5, #0]
 80267d0:	2b00      	cmp	r3, #0
 80267d2:	d0c6      	beq.n	8026762 <__sflush_r+0x32>
 80267d4:	2b1d      	cmp	r3, #29
 80267d6:	d001      	beq.n	80267dc <__sflush_r+0xac>
 80267d8:	2b16      	cmp	r3, #22
 80267da:	d11e      	bne.n	802681a <__sflush_r+0xea>
 80267dc:	602f      	str	r7, [r5, #0]
 80267de:	2000      	movs	r0, #0
 80267e0:	e022      	b.n	8026828 <__sflush_r+0xf8>
 80267e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80267e6:	b21b      	sxth	r3, r3
 80267e8:	e01b      	b.n	8026822 <__sflush_r+0xf2>
 80267ea:	690f      	ldr	r7, [r1, #16]
 80267ec:	2f00      	cmp	r7, #0
 80267ee:	d0f6      	beq.n	80267de <__sflush_r+0xae>
 80267f0:	0793      	lsls	r3, r2, #30
 80267f2:	680e      	ldr	r6, [r1, #0]
 80267f4:	bf08      	it	eq
 80267f6:	694b      	ldreq	r3, [r1, #20]
 80267f8:	600f      	str	r7, [r1, #0]
 80267fa:	bf18      	it	ne
 80267fc:	2300      	movne	r3, #0
 80267fe:	eba6 0807 	sub.w	r8, r6, r7
 8026802:	608b      	str	r3, [r1, #8]
 8026804:	f1b8 0f00 	cmp.w	r8, #0
 8026808:	dde9      	ble.n	80267de <__sflush_r+0xae>
 802680a:	6a21      	ldr	r1, [r4, #32]
 802680c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802680e:	4643      	mov	r3, r8
 8026810:	463a      	mov	r2, r7
 8026812:	4628      	mov	r0, r5
 8026814:	47b0      	blx	r6
 8026816:	2800      	cmp	r0, #0
 8026818:	dc08      	bgt.n	802682c <__sflush_r+0xfc>
 802681a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802681e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026822:	81a3      	strh	r3, [r4, #12]
 8026824:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802682c:	4407      	add	r7, r0
 802682e:	eba8 0800 	sub.w	r8, r8, r0
 8026832:	e7e7      	b.n	8026804 <__sflush_r+0xd4>
 8026834:	dfbffffe 	.word	0xdfbffffe

08026838 <_fflush_r>:
 8026838:	b538      	push	{r3, r4, r5, lr}
 802683a:	690b      	ldr	r3, [r1, #16]
 802683c:	4605      	mov	r5, r0
 802683e:	460c      	mov	r4, r1
 8026840:	b913      	cbnz	r3, 8026848 <_fflush_r+0x10>
 8026842:	2500      	movs	r5, #0
 8026844:	4628      	mov	r0, r5
 8026846:	bd38      	pop	{r3, r4, r5, pc}
 8026848:	b118      	cbz	r0, 8026852 <_fflush_r+0x1a>
 802684a:	6a03      	ldr	r3, [r0, #32]
 802684c:	b90b      	cbnz	r3, 8026852 <_fflush_r+0x1a>
 802684e:	f7fe f9fd 	bl	8024c4c <__sinit>
 8026852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026856:	2b00      	cmp	r3, #0
 8026858:	d0f3      	beq.n	8026842 <_fflush_r+0xa>
 802685a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802685c:	07d0      	lsls	r0, r2, #31
 802685e:	d404      	bmi.n	802686a <_fflush_r+0x32>
 8026860:	0599      	lsls	r1, r3, #22
 8026862:	d402      	bmi.n	802686a <_fflush_r+0x32>
 8026864:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026866:	f7fe fbe0 	bl	802502a <__retarget_lock_acquire_recursive>
 802686a:	4628      	mov	r0, r5
 802686c:	4621      	mov	r1, r4
 802686e:	f7ff ff5f 	bl	8026730 <__sflush_r>
 8026872:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026874:	07da      	lsls	r2, r3, #31
 8026876:	4605      	mov	r5, r0
 8026878:	d4e4      	bmi.n	8026844 <_fflush_r+0xc>
 802687a:	89a3      	ldrh	r3, [r4, #12]
 802687c:	059b      	lsls	r3, r3, #22
 802687e:	d4e1      	bmi.n	8026844 <_fflush_r+0xc>
 8026880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026882:	f7fe fbd3 	bl	802502c <__retarget_lock_release_recursive>
 8026886:	e7dd      	b.n	8026844 <_fflush_r+0xc>

08026888 <__assert_func>:
 8026888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802688a:	4614      	mov	r4, r2
 802688c:	461a      	mov	r2, r3
 802688e:	4b09      	ldr	r3, [pc, #36]	@ (80268b4 <__assert_func+0x2c>)
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	4605      	mov	r5, r0
 8026894:	68d8      	ldr	r0, [r3, #12]
 8026896:	b954      	cbnz	r4, 80268ae <__assert_func+0x26>
 8026898:	4b07      	ldr	r3, [pc, #28]	@ (80268b8 <__assert_func+0x30>)
 802689a:	461c      	mov	r4, r3
 802689c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80268a0:	9100      	str	r1, [sp, #0]
 80268a2:	462b      	mov	r3, r5
 80268a4:	4905      	ldr	r1, [pc, #20]	@ (80268bc <__assert_func+0x34>)
 80268a6:	f000 f86f 	bl	8026988 <fiprintf>
 80268aa:	f7fd fc25 	bl	80240f8 <abort>
 80268ae:	4b04      	ldr	r3, [pc, #16]	@ (80268c0 <__assert_func+0x38>)
 80268b0:	e7f4      	b.n	802689c <__assert_func+0x14>
 80268b2:	bf00      	nop
 80268b4:	200001b4 	.word	0x200001b4
 80268b8:	08028216 	.word	0x08028216
 80268bc:	080281e8 	.word	0x080281e8
 80268c0:	080281db 	.word	0x080281db

080268c4 <_calloc_r>:
 80268c4:	b570      	push	{r4, r5, r6, lr}
 80268c6:	fba1 5402 	umull	r5, r4, r1, r2
 80268ca:	b93c      	cbnz	r4, 80268dc <_calloc_r+0x18>
 80268cc:	4629      	mov	r1, r5
 80268ce:	f7fd fc4d 	bl	802416c <_malloc_r>
 80268d2:	4606      	mov	r6, r0
 80268d4:	b928      	cbnz	r0, 80268e2 <_calloc_r+0x1e>
 80268d6:	2600      	movs	r6, #0
 80268d8:	4630      	mov	r0, r6
 80268da:	bd70      	pop	{r4, r5, r6, pc}
 80268dc:	220c      	movs	r2, #12
 80268de:	6002      	str	r2, [r0, #0]
 80268e0:	e7f9      	b.n	80268d6 <_calloc_r+0x12>
 80268e2:	462a      	mov	r2, r5
 80268e4:	4621      	mov	r1, r4
 80268e6:	f7fe fa78 	bl	8024dda <memset>
 80268ea:	e7f5      	b.n	80268d8 <_calloc_r+0x14>

080268ec <__ascii_mbtowc>:
 80268ec:	b082      	sub	sp, #8
 80268ee:	b901      	cbnz	r1, 80268f2 <__ascii_mbtowc+0x6>
 80268f0:	a901      	add	r1, sp, #4
 80268f2:	b142      	cbz	r2, 8026906 <__ascii_mbtowc+0x1a>
 80268f4:	b14b      	cbz	r3, 802690a <__ascii_mbtowc+0x1e>
 80268f6:	7813      	ldrb	r3, [r2, #0]
 80268f8:	600b      	str	r3, [r1, #0]
 80268fa:	7812      	ldrb	r2, [r2, #0]
 80268fc:	1e10      	subs	r0, r2, #0
 80268fe:	bf18      	it	ne
 8026900:	2001      	movne	r0, #1
 8026902:	b002      	add	sp, #8
 8026904:	4770      	bx	lr
 8026906:	4610      	mov	r0, r2
 8026908:	e7fb      	b.n	8026902 <__ascii_mbtowc+0x16>
 802690a:	f06f 0001 	mvn.w	r0, #1
 802690e:	e7f8      	b.n	8026902 <__ascii_mbtowc+0x16>

08026910 <_realloc_r>:
 8026910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026914:	4680      	mov	r8, r0
 8026916:	4615      	mov	r5, r2
 8026918:	460c      	mov	r4, r1
 802691a:	b921      	cbnz	r1, 8026926 <_realloc_r+0x16>
 802691c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026920:	4611      	mov	r1, r2
 8026922:	f7fd bc23 	b.w	802416c <_malloc_r>
 8026926:	b92a      	cbnz	r2, 8026934 <_realloc_r+0x24>
 8026928:	f7ff f9de 	bl	8025ce8 <_free_r>
 802692c:	2400      	movs	r4, #0
 802692e:	4620      	mov	r0, r4
 8026930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026934:	f000 f83a 	bl	80269ac <_malloc_usable_size_r>
 8026938:	4285      	cmp	r5, r0
 802693a:	4606      	mov	r6, r0
 802693c:	d802      	bhi.n	8026944 <_realloc_r+0x34>
 802693e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8026942:	d8f4      	bhi.n	802692e <_realloc_r+0x1e>
 8026944:	4629      	mov	r1, r5
 8026946:	4640      	mov	r0, r8
 8026948:	f7fd fc10 	bl	802416c <_malloc_r>
 802694c:	4607      	mov	r7, r0
 802694e:	2800      	cmp	r0, #0
 8026950:	d0ec      	beq.n	802692c <_realloc_r+0x1c>
 8026952:	42b5      	cmp	r5, r6
 8026954:	462a      	mov	r2, r5
 8026956:	4621      	mov	r1, r4
 8026958:	bf28      	it	cs
 802695a:	4632      	movcs	r2, r6
 802695c:	f7fe fb67 	bl	802502e <memcpy>
 8026960:	4621      	mov	r1, r4
 8026962:	4640      	mov	r0, r8
 8026964:	f7ff f9c0 	bl	8025ce8 <_free_r>
 8026968:	463c      	mov	r4, r7
 802696a:	e7e0      	b.n	802692e <_realloc_r+0x1e>

0802696c <__ascii_wctomb>:
 802696c:	4603      	mov	r3, r0
 802696e:	4608      	mov	r0, r1
 8026970:	b141      	cbz	r1, 8026984 <__ascii_wctomb+0x18>
 8026972:	2aff      	cmp	r2, #255	@ 0xff
 8026974:	d904      	bls.n	8026980 <__ascii_wctomb+0x14>
 8026976:	228a      	movs	r2, #138	@ 0x8a
 8026978:	601a      	str	r2, [r3, #0]
 802697a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802697e:	4770      	bx	lr
 8026980:	700a      	strb	r2, [r1, #0]
 8026982:	2001      	movs	r0, #1
 8026984:	4770      	bx	lr
	...

08026988 <fiprintf>:
 8026988:	b40e      	push	{r1, r2, r3}
 802698a:	b503      	push	{r0, r1, lr}
 802698c:	4601      	mov	r1, r0
 802698e:	ab03      	add	r3, sp, #12
 8026990:	4805      	ldr	r0, [pc, #20]	@ (80269a8 <fiprintf+0x20>)
 8026992:	f853 2b04 	ldr.w	r2, [r3], #4
 8026996:	6800      	ldr	r0, [r0, #0]
 8026998:	9301      	str	r3, [sp, #4]
 802699a:	f000 f839 	bl	8026a10 <_vfiprintf_r>
 802699e:	b002      	add	sp, #8
 80269a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80269a4:	b003      	add	sp, #12
 80269a6:	4770      	bx	lr
 80269a8:	200001b4 	.word	0x200001b4

080269ac <_malloc_usable_size_r>:
 80269ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80269b0:	1f18      	subs	r0, r3, #4
 80269b2:	2b00      	cmp	r3, #0
 80269b4:	bfbc      	itt	lt
 80269b6:	580b      	ldrlt	r3, [r1, r0]
 80269b8:	18c0      	addlt	r0, r0, r3
 80269ba:	4770      	bx	lr

080269bc <__sfputc_r>:
 80269bc:	6893      	ldr	r3, [r2, #8]
 80269be:	3b01      	subs	r3, #1
 80269c0:	2b00      	cmp	r3, #0
 80269c2:	b410      	push	{r4}
 80269c4:	6093      	str	r3, [r2, #8]
 80269c6:	da08      	bge.n	80269da <__sfputc_r+0x1e>
 80269c8:	6994      	ldr	r4, [r2, #24]
 80269ca:	42a3      	cmp	r3, r4
 80269cc:	db01      	blt.n	80269d2 <__sfputc_r+0x16>
 80269ce:	290a      	cmp	r1, #10
 80269d0:	d103      	bne.n	80269da <__sfputc_r+0x1e>
 80269d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80269d6:	f000 b933 	b.w	8026c40 <__swbuf_r>
 80269da:	6813      	ldr	r3, [r2, #0]
 80269dc:	1c58      	adds	r0, r3, #1
 80269de:	6010      	str	r0, [r2, #0]
 80269e0:	7019      	strb	r1, [r3, #0]
 80269e2:	4608      	mov	r0, r1
 80269e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80269e8:	4770      	bx	lr

080269ea <__sfputs_r>:
 80269ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269ec:	4606      	mov	r6, r0
 80269ee:	460f      	mov	r7, r1
 80269f0:	4614      	mov	r4, r2
 80269f2:	18d5      	adds	r5, r2, r3
 80269f4:	42ac      	cmp	r4, r5
 80269f6:	d101      	bne.n	80269fc <__sfputs_r+0x12>
 80269f8:	2000      	movs	r0, #0
 80269fa:	e007      	b.n	8026a0c <__sfputs_r+0x22>
 80269fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026a00:	463a      	mov	r2, r7
 8026a02:	4630      	mov	r0, r6
 8026a04:	f7ff ffda 	bl	80269bc <__sfputc_r>
 8026a08:	1c43      	adds	r3, r0, #1
 8026a0a:	d1f3      	bne.n	80269f4 <__sfputs_r+0xa>
 8026a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026a10 <_vfiprintf_r>:
 8026a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a14:	460d      	mov	r5, r1
 8026a16:	b09d      	sub	sp, #116	@ 0x74
 8026a18:	4614      	mov	r4, r2
 8026a1a:	4698      	mov	r8, r3
 8026a1c:	4606      	mov	r6, r0
 8026a1e:	b118      	cbz	r0, 8026a28 <_vfiprintf_r+0x18>
 8026a20:	6a03      	ldr	r3, [r0, #32]
 8026a22:	b90b      	cbnz	r3, 8026a28 <_vfiprintf_r+0x18>
 8026a24:	f7fe f912 	bl	8024c4c <__sinit>
 8026a28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a2a:	07d9      	lsls	r1, r3, #31
 8026a2c:	d405      	bmi.n	8026a3a <_vfiprintf_r+0x2a>
 8026a2e:	89ab      	ldrh	r3, [r5, #12]
 8026a30:	059a      	lsls	r2, r3, #22
 8026a32:	d402      	bmi.n	8026a3a <_vfiprintf_r+0x2a>
 8026a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a36:	f7fe faf8 	bl	802502a <__retarget_lock_acquire_recursive>
 8026a3a:	89ab      	ldrh	r3, [r5, #12]
 8026a3c:	071b      	lsls	r3, r3, #28
 8026a3e:	d501      	bpl.n	8026a44 <_vfiprintf_r+0x34>
 8026a40:	692b      	ldr	r3, [r5, #16]
 8026a42:	b99b      	cbnz	r3, 8026a6c <_vfiprintf_r+0x5c>
 8026a44:	4629      	mov	r1, r5
 8026a46:	4630      	mov	r0, r6
 8026a48:	f000 f938 	bl	8026cbc <__swsetup_r>
 8026a4c:	b170      	cbz	r0, 8026a6c <_vfiprintf_r+0x5c>
 8026a4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026a50:	07dc      	lsls	r4, r3, #31
 8026a52:	d504      	bpl.n	8026a5e <_vfiprintf_r+0x4e>
 8026a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026a58:	b01d      	add	sp, #116	@ 0x74
 8026a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a5e:	89ab      	ldrh	r3, [r5, #12]
 8026a60:	0598      	lsls	r0, r3, #22
 8026a62:	d4f7      	bmi.n	8026a54 <_vfiprintf_r+0x44>
 8026a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026a66:	f7fe fae1 	bl	802502c <__retarget_lock_release_recursive>
 8026a6a:	e7f3      	b.n	8026a54 <_vfiprintf_r+0x44>
 8026a6c:	2300      	movs	r3, #0
 8026a6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8026a70:	2320      	movs	r3, #32
 8026a72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8026a76:	f8cd 800c 	str.w	r8, [sp, #12]
 8026a7a:	2330      	movs	r3, #48	@ 0x30
 8026a7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8026c2c <_vfiprintf_r+0x21c>
 8026a80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8026a84:	f04f 0901 	mov.w	r9, #1
 8026a88:	4623      	mov	r3, r4
 8026a8a:	469a      	mov	sl, r3
 8026a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026a90:	b10a      	cbz	r2, 8026a96 <_vfiprintf_r+0x86>
 8026a92:	2a25      	cmp	r2, #37	@ 0x25
 8026a94:	d1f9      	bne.n	8026a8a <_vfiprintf_r+0x7a>
 8026a96:	ebba 0b04 	subs.w	fp, sl, r4
 8026a9a:	d00b      	beq.n	8026ab4 <_vfiprintf_r+0xa4>
 8026a9c:	465b      	mov	r3, fp
 8026a9e:	4622      	mov	r2, r4
 8026aa0:	4629      	mov	r1, r5
 8026aa2:	4630      	mov	r0, r6
 8026aa4:	f7ff ffa1 	bl	80269ea <__sfputs_r>
 8026aa8:	3001      	adds	r0, #1
 8026aaa:	f000 80a7 	beq.w	8026bfc <_vfiprintf_r+0x1ec>
 8026aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8026ab0:	445a      	add	r2, fp
 8026ab2:	9209      	str	r2, [sp, #36]	@ 0x24
 8026ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8026ab8:	2b00      	cmp	r3, #0
 8026aba:	f000 809f 	beq.w	8026bfc <_vfiprintf_r+0x1ec>
 8026abe:	2300      	movs	r3, #0
 8026ac0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8026ac4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026ac8:	f10a 0a01 	add.w	sl, sl, #1
 8026acc:	9304      	str	r3, [sp, #16]
 8026ace:	9307      	str	r3, [sp, #28]
 8026ad0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8026ad4:	931a      	str	r3, [sp, #104]	@ 0x68
 8026ad6:	4654      	mov	r4, sl
 8026ad8:	2205      	movs	r2, #5
 8026ada:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ade:	4853      	ldr	r0, [pc, #332]	@ (8026c2c <_vfiprintf_r+0x21c>)
 8026ae0:	f7d9 fb9e 	bl	8000220 <memchr>
 8026ae4:	9a04      	ldr	r2, [sp, #16]
 8026ae6:	b9d8      	cbnz	r0, 8026b20 <_vfiprintf_r+0x110>
 8026ae8:	06d1      	lsls	r1, r2, #27
 8026aea:	bf44      	itt	mi
 8026aec:	2320      	movmi	r3, #32
 8026aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026af2:	0713      	lsls	r3, r2, #28
 8026af4:	bf44      	itt	mi
 8026af6:	232b      	movmi	r3, #43	@ 0x2b
 8026af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8026afc:	f89a 3000 	ldrb.w	r3, [sl]
 8026b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8026b02:	d015      	beq.n	8026b30 <_vfiprintf_r+0x120>
 8026b04:	9a07      	ldr	r2, [sp, #28]
 8026b06:	4654      	mov	r4, sl
 8026b08:	2000      	movs	r0, #0
 8026b0a:	f04f 0c0a 	mov.w	ip, #10
 8026b0e:	4621      	mov	r1, r4
 8026b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026b14:	3b30      	subs	r3, #48	@ 0x30
 8026b16:	2b09      	cmp	r3, #9
 8026b18:	d94b      	bls.n	8026bb2 <_vfiprintf_r+0x1a2>
 8026b1a:	b1b0      	cbz	r0, 8026b4a <_vfiprintf_r+0x13a>
 8026b1c:	9207      	str	r2, [sp, #28]
 8026b1e:	e014      	b.n	8026b4a <_vfiprintf_r+0x13a>
 8026b20:	eba0 0308 	sub.w	r3, r0, r8
 8026b24:	fa09 f303 	lsl.w	r3, r9, r3
 8026b28:	4313      	orrs	r3, r2
 8026b2a:	9304      	str	r3, [sp, #16]
 8026b2c:	46a2      	mov	sl, r4
 8026b2e:	e7d2      	b.n	8026ad6 <_vfiprintf_r+0xc6>
 8026b30:	9b03      	ldr	r3, [sp, #12]
 8026b32:	1d19      	adds	r1, r3, #4
 8026b34:	681b      	ldr	r3, [r3, #0]
 8026b36:	9103      	str	r1, [sp, #12]
 8026b38:	2b00      	cmp	r3, #0
 8026b3a:	bfbb      	ittet	lt
 8026b3c:	425b      	neglt	r3, r3
 8026b3e:	f042 0202 	orrlt.w	r2, r2, #2
 8026b42:	9307      	strge	r3, [sp, #28]
 8026b44:	9307      	strlt	r3, [sp, #28]
 8026b46:	bfb8      	it	lt
 8026b48:	9204      	strlt	r2, [sp, #16]
 8026b4a:	7823      	ldrb	r3, [r4, #0]
 8026b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8026b4e:	d10a      	bne.n	8026b66 <_vfiprintf_r+0x156>
 8026b50:	7863      	ldrb	r3, [r4, #1]
 8026b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8026b54:	d132      	bne.n	8026bbc <_vfiprintf_r+0x1ac>
 8026b56:	9b03      	ldr	r3, [sp, #12]
 8026b58:	1d1a      	adds	r2, r3, #4
 8026b5a:	681b      	ldr	r3, [r3, #0]
 8026b5c:	9203      	str	r2, [sp, #12]
 8026b5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8026b62:	3402      	adds	r4, #2
 8026b64:	9305      	str	r3, [sp, #20]
 8026b66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8026c3c <_vfiprintf_r+0x22c>
 8026b6a:	7821      	ldrb	r1, [r4, #0]
 8026b6c:	2203      	movs	r2, #3
 8026b6e:	4650      	mov	r0, sl
 8026b70:	f7d9 fb56 	bl	8000220 <memchr>
 8026b74:	b138      	cbz	r0, 8026b86 <_vfiprintf_r+0x176>
 8026b76:	9b04      	ldr	r3, [sp, #16]
 8026b78:	eba0 000a 	sub.w	r0, r0, sl
 8026b7c:	2240      	movs	r2, #64	@ 0x40
 8026b7e:	4082      	lsls	r2, r0
 8026b80:	4313      	orrs	r3, r2
 8026b82:	3401      	adds	r4, #1
 8026b84:	9304      	str	r3, [sp, #16]
 8026b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b8a:	4829      	ldr	r0, [pc, #164]	@ (8026c30 <_vfiprintf_r+0x220>)
 8026b8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8026b90:	2206      	movs	r2, #6
 8026b92:	f7d9 fb45 	bl	8000220 <memchr>
 8026b96:	2800      	cmp	r0, #0
 8026b98:	d03f      	beq.n	8026c1a <_vfiprintf_r+0x20a>
 8026b9a:	4b26      	ldr	r3, [pc, #152]	@ (8026c34 <_vfiprintf_r+0x224>)
 8026b9c:	bb1b      	cbnz	r3, 8026be6 <_vfiprintf_r+0x1d6>
 8026b9e:	9b03      	ldr	r3, [sp, #12]
 8026ba0:	3307      	adds	r3, #7
 8026ba2:	f023 0307 	bic.w	r3, r3, #7
 8026ba6:	3308      	adds	r3, #8
 8026ba8:	9303      	str	r3, [sp, #12]
 8026baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8026bac:	443b      	add	r3, r7
 8026bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8026bb0:	e76a      	b.n	8026a88 <_vfiprintf_r+0x78>
 8026bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8026bb6:	460c      	mov	r4, r1
 8026bb8:	2001      	movs	r0, #1
 8026bba:	e7a8      	b.n	8026b0e <_vfiprintf_r+0xfe>
 8026bbc:	2300      	movs	r3, #0
 8026bbe:	3401      	adds	r4, #1
 8026bc0:	9305      	str	r3, [sp, #20]
 8026bc2:	4619      	mov	r1, r3
 8026bc4:	f04f 0c0a 	mov.w	ip, #10
 8026bc8:	4620      	mov	r0, r4
 8026bca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026bce:	3a30      	subs	r2, #48	@ 0x30
 8026bd0:	2a09      	cmp	r2, #9
 8026bd2:	d903      	bls.n	8026bdc <_vfiprintf_r+0x1cc>
 8026bd4:	2b00      	cmp	r3, #0
 8026bd6:	d0c6      	beq.n	8026b66 <_vfiprintf_r+0x156>
 8026bd8:	9105      	str	r1, [sp, #20]
 8026bda:	e7c4      	b.n	8026b66 <_vfiprintf_r+0x156>
 8026bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8026be0:	4604      	mov	r4, r0
 8026be2:	2301      	movs	r3, #1
 8026be4:	e7f0      	b.n	8026bc8 <_vfiprintf_r+0x1b8>
 8026be6:	ab03      	add	r3, sp, #12
 8026be8:	9300      	str	r3, [sp, #0]
 8026bea:	462a      	mov	r2, r5
 8026bec:	4b12      	ldr	r3, [pc, #72]	@ (8026c38 <_vfiprintf_r+0x228>)
 8026bee:	a904      	add	r1, sp, #16
 8026bf0:	4630      	mov	r0, r6
 8026bf2:	f7fd fbe7 	bl	80243c4 <_printf_float>
 8026bf6:	4607      	mov	r7, r0
 8026bf8:	1c78      	adds	r0, r7, #1
 8026bfa:	d1d6      	bne.n	8026baa <_vfiprintf_r+0x19a>
 8026bfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8026bfe:	07d9      	lsls	r1, r3, #31
 8026c00:	d405      	bmi.n	8026c0e <_vfiprintf_r+0x1fe>
 8026c02:	89ab      	ldrh	r3, [r5, #12]
 8026c04:	059a      	lsls	r2, r3, #22
 8026c06:	d402      	bmi.n	8026c0e <_vfiprintf_r+0x1fe>
 8026c08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8026c0a:	f7fe fa0f 	bl	802502c <__retarget_lock_release_recursive>
 8026c0e:	89ab      	ldrh	r3, [r5, #12]
 8026c10:	065b      	lsls	r3, r3, #25
 8026c12:	f53f af1f 	bmi.w	8026a54 <_vfiprintf_r+0x44>
 8026c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8026c18:	e71e      	b.n	8026a58 <_vfiprintf_r+0x48>
 8026c1a:	ab03      	add	r3, sp, #12
 8026c1c:	9300      	str	r3, [sp, #0]
 8026c1e:	462a      	mov	r2, r5
 8026c20:	4b05      	ldr	r3, [pc, #20]	@ (8026c38 <_vfiprintf_r+0x228>)
 8026c22:	a904      	add	r1, sp, #16
 8026c24:	4630      	mov	r0, r6
 8026c26:	f7fd fe65 	bl	80248f4 <_printf_i>
 8026c2a:	e7e4      	b.n	8026bf6 <_vfiprintf_r+0x1e6>
 8026c2c:	080281c0 	.word	0x080281c0
 8026c30:	080281ca 	.word	0x080281ca
 8026c34:	080243c5 	.word	0x080243c5
 8026c38:	080269eb 	.word	0x080269eb
 8026c3c:	080281c6 	.word	0x080281c6

08026c40 <__swbuf_r>:
 8026c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c42:	460e      	mov	r6, r1
 8026c44:	4614      	mov	r4, r2
 8026c46:	4605      	mov	r5, r0
 8026c48:	b118      	cbz	r0, 8026c52 <__swbuf_r+0x12>
 8026c4a:	6a03      	ldr	r3, [r0, #32]
 8026c4c:	b90b      	cbnz	r3, 8026c52 <__swbuf_r+0x12>
 8026c4e:	f7fd fffd 	bl	8024c4c <__sinit>
 8026c52:	69a3      	ldr	r3, [r4, #24]
 8026c54:	60a3      	str	r3, [r4, #8]
 8026c56:	89a3      	ldrh	r3, [r4, #12]
 8026c58:	071a      	lsls	r2, r3, #28
 8026c5a:	d501      	bpl.n	8026c60 <__swbuf_r+0x20>
 8026c5c:	6923      	ldr	r3, [r4, #16]
 8026c5e:	b943      	cbnz	r3, 8026c72 <__swbuf_r+0x32>
 8026c60:	4621      	mov	r1, r4
 8026c62:	4628      	mov	r0, r5
 8026c64:	f000 f82a 	bl	8026cbc <__swsetup_r>
 8026c68:	b118      	cbz	r0, 8026c72 <__swbuf_r+0x32>
 8026c6a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8026c6e:	4638      	mov	r0, r7
 8026c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026c72:	6823      	ldr	r3, [r4, #0]
 8026c74:	6922      	ldr	r2, [r4, #16]
 8026c76:	1a98      	subs	r0, r3, r2
 8026c78:	6963      	ldr	r3, [r4, #20]
 8026c7a:	b2f6      	uxtb	r6, r6
 8026c7c:	4283      	cmp	r3, r0
 8026c7e:	4637      	mov	r7, r6
 8026c80:	dc05      	bgt.n	8026c8e <__swbuf_r+0x4e>
 8026c82:	4621      	mov	r1, r4
 8026c84:	4628      	mov	r0, r5
 8026c86:	f7ff fdd7 	bl	8026838 <_fflush_r>
 8026c8a:	2800      	cmp	r0, #0
 8026c8c:	d1ed      	bne.n	8026c6a <__swbuf_r+0x2a>
 8026c8e:	68a3      	ldr	r3, [r4, #8]
 8026c90:	3b01      	subs	r3, #1
 8026c92:	60a3      	str	r3, [r4, #8]
 8026c94:	6823      	ldr	r3, [r4, #0]
 8026c96:	1c5a      	adds	r2, r3, #1
 8026c98:	6022      	str	r2, [r4, #0]
 8026c9a:	701e      	strb	r6, [r3, #0]
 8026c9c:	6962      	ldr	r2, [r4, #20]
 8026c9e:	1c43      	adds	r3, r0, #1
 8026ca0:	429a      	cmp	r2, r3
 8026ca2:	d004      	beq.n	8026cae <__swbuf_r+0x6e>
 8026ca4:	89a3      	ldrh	r3, [r4, #12]
 8026ca6:	07db      	lsls	r3, r3, #31
 8026ca8:	d5e1      	bpl.n	8026c6e <__swbuf_r+0x2e>
 8026caa:	2e0a      	cmp	r6, #10
 8026cac:	d1df      	bne.n	8026c6e <__swbuf_r+0x2e>
 8026cae:	4621      	mov	r1, r4
 8026cb0:	4628      	mov	r0, r5
 8026cb2:	f7ff fdc1 	bl	8026838 <_fflush_r>
 8026cb6:	2800      	cmp	r0, #0
 8026cb8:	d0d9      	beq.n	8026c6e <__swbuf_r+0x2e>
 8026cba:	e7d6      	b.n	8026c6a <__swbuf_r+0x2a>

08026cbc <__swsetup_r>:
 8026cbc:	b538      	push	{r3, r4, r5, lr}
 8026cbe:	4b29      	ldr	r3, [pc, #164]	@ (8026d64 <__swsetup_r+0xa8>)
 8026cc0:	4605      	mov	r5, r0
 8026cc2:	6818      	ldr	r0, [r3, #0]
 8026cc4:	460c      	mov	r4, r1
 8026cc6:	b118      	cbz	r0, 8026cd0 <__swsetup_r+0x14>
 8026cc8:	6a03      	ldr	r3, [r0, #32]
 8026cca:	b90b      	cbnz	r3, 8026cd0 <__swsetup_r+0x14>
 8026ccc:	f7fd ffbe 	bl	8024c4c <__sinit>
 8026cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026cd4:	0719      	lsls	r1, r3, #28
 8026cd6:	d422      	bmi.n	8026d1e <__swsetup_r+0x62>
 8026cd8:	06da      	lsls	r2, r3, #27
 8026cda:	d407      	bmi.n	8026cec <__swsetup_r+0x30>
 8026cdc:	2209      	movs	r2, #9
 8026cde:	602a      	str	r2, [r5, #0]
 8026ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026ce4:	81a3      	strh	r3, [r4, #12]
 8026ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8026cea:	e033      	b.n	8026d54 <__swsetup_r+0x98>
 8026cec:	0758      	lsls	r0, r3, #29
 8026cee:	d512      	bpl.n	8026d16 <__swsetup_r+0x5a>
 8026cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026cf2:	b141      	cbz	r1, 8026d06 <__swsetup_r+0x4a>
 8026cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026cf8:	4299      	cmp	r1, r3
 8026cfa:	d002      	beq.n	8026d02 <__swsetup_r+0x46>
 8026cfc:	4628      	mov	r0, r5
 8026cfe:	f7fe fff3 	bl	8025ce8 <_free_r>
 8026d02:	2300      	movs	r3, #0
 8026d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8026d06:	89a3      	ldrh	r3, [r4, #12]
 8026d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026d0c:	81a3      	strh	r3, [r4, #12]
 8026d0e:	2300      	movs	r3, #0
 8026d10:	6063      	str	r3, [r4, #4]
 8026d12:	6923      	ldr	r3, [r4, #16]
 8026d14:	6023      	str	r3, [r4, #0]
 8026d16:	89a3      	ldrh	r3, [r4, #12]
 8026d18:	f043 0308 	orr.w	r3, r3, #8
 8026d1c:	81a3      	strh	r3, [r4, #12]
 8026d1e:	6923      	ldr	r3, [r4, #16]
 8026d20:	b94b      	cbnz	r3, 8026d36 <__swsetup_r+0x7a>
 8026d22:	89a3      	ldrh	r3, [r4, #12]
 8026d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026d2c:	d003      	beq.n	8026d36 <__swsetup_r+0x7a>
 8026d2e:	4621      	mov	r1, r4
 8026d30:	4628      	mov	r0, r5
 8026d32:	f000 f83f 	bl	8026db4 <__smakebuf_r>
 8026d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026d3a:	f013 0201 	ands.w	r2, r3, #1
 8026d3e:	d00a      	beq.n	8026d56 <__swsetup_r+0x9a>
 8026d40:	2200      	movs	r2, #0
 8026d42:	60a2      	str	r2, [r4, #8]
 8026d44:	6962      	ldr	r2, [r4, #20]
 8026d46:	4252      	negs	r2, r2
 8026d48:	61a2      	str	r2, [r4, #24]
 8026d4a:	6922      	ldr	r2, [r4, #16]
 8026d4c:	b942      	cbnz	r2, 8026d60 <__swsetup_r+0xa4>
 8026d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026d52:	d1c5      	bne.n	8026ce0 <__swsetup_r+0x24>
 8026d54:	bd38      	pop	{r3, r4, r5, pc}
 8026d56:	0799      	lsls	r1, r3, #30
 8026d58:	bf58      	it	pl
 8026d5a:	6962      	ldrpl	r2, [r4, #20]
 8026d5c:	60a2      	str	r2, [r4, #8]
 8026d5e:	e7f4      	b.n	8026d4a <__swsetup_r+0x8e>
 8026d60:	2000      	movs	r0, #0
 8026d62:	e7f7      	b.n	8026d54 <__swsetup_r+0x98>
 8026d64:	200001b4 	.word	0x200001b4

08026d68 <__swhatbuf_r>:
 8026d68:	b570      	push	{r4, r5, r6, lr}
 8026d6a:	460c      	mov	r4, r1
 8026d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d70:	2900      	cmp	r1, #0
 8026d72:	b096      	sub	sp, #88	@ 0x58
 8026d74:	4615      	mov	r5, r2
 8026d76:	461e      	mov	r6, r3
 8026d78:	da0d      	bge.n	8026d96 <__swhatbuf_r+0x2e>
 8026d7a:	89a3      	ldrh	r3, [r4, #12]
 8026d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8026d80:	f04f 0100 	mov.w	r1, #0
 8026d84:	bf14      	ite	ne
 8026d86:	2340      	movne	r3, #64	@ 0x40
 8026d88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8026d8c:	2000      	movs	r0, #0
 8026d8e:	6031      	str	r1, [r6, #0]
 8026d90:	602b      	str	r3, [r5, #0]
 8026d92:	b016      	add	sp, #88	@ 0x58
 8026d94:	bd70      	pop	{r4, r5, r6, pc}
 8026d96:	466a      	mov	r2, sp
 8026d98:	f000 f848 	bl	8026e2c <_fstat_r>
 8026d9c:	2800      	cmp	r0, #0
 8026d9e:	dbec      	blt.n	8026d7a <__swhatbuf_r+0x12>
 8026da0:	9901      	ldr	r1, [sp, #4]
 8026da2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8026da6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8026daa:	4259      	negs	r1, r3
 8026dac:	4159      	adcs	r1, r3
 8026dae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8026db2:	e7eb      	b.n	8026d8c <__swhatbuf_r+0x24>

08026db4 <__smakebuf_r>:
 8026db4:	898b      	ldrh	r3, [r1, #12]
 8026db6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026db8:	079d      	lsls	r5, r3, #30
 8026dba:	4606      	mov	r6, r0
 8026dbc:	460c      	mov	r4, r1
 8026dbe:	d507      	bpl.n	8026dd0 <__smakebuf_r+0x1c>
 8026dc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8026dc4:	6023      	str	r3, [r4, #0]
 8026dc6:	6123      	str	r3, [r4, #16]
 8026dc8:	2301      	movs	r3, #1
 8026dca:	6163      	str	r3, [r4, #20]
 8026dcc:	b003      	add	sp, #12
 8026dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026dd0:	ab01      	add	r3, sp, #4
 8026dd2:	466a      	mov	r2, sp
 8026dd4:	f7ff ffc8 	bl	8026d68 <__swhatbuf_r>
 8026dd8:	9f00      	ldr	r7, [sp, #0]
 8026dda:	4605      	mov	r5, r0
 8026ddc:	4639      	mov	r1, r7
 8026dde:	4630      	mov	r0, r6
 8026de0:	f7fd f9c4 	bl	802416c <_malloc_r>
 8026de4:	b948      	cbnz	r0, 8026dfa <__smakebuf_r+0x46>
 8026de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026dea:	059a      	lsls	r2, r3, #22
 8026dec:	d4ee      	bmi.n	8026dcc <__smakebuf_r+0x18>
 8026dee:	f023 0303 	bic.w	r3, r3, #3
 8026df2:	f043 0302 	orr.w	r3, r3, #2
 8026df6:	81a3      	strh	r3, [r4, #12]
 8026df8:	e7e2      	b.n	8026dc0 <__smakebuf_r+0xc>
 8026dfa:	89a3      	ldrh	r3, [r4, #12]
 8026dfc:	6020      	str	r0, [r4, #0]
 8026dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026e02:	81a3      	strh	r3, [r4, #12]
 8026e04:	9b01      	ldr	r3, [sp, #4]
 8026e06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8026e0a:	b15b      	cbz	r3, 8026e24 <__smakebuf_r+0x70>
 8026e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026e10:	4630      	mov	r0, r6
 8026e12:	f000 f81d 	bl	8026e50 <_isatty_r>
 8026e16:	b128      	cbz	r0, 8026e24 <__smakebuf_r+0x70>
 8026e18:	89a3      	ldrh	r3, [r4, #12]
 8026e1a:	f023 0303 	bic.w	r3, r3, #3
 8026e1e:	f043 0301 	orr.w	r3, r3, #1
 8026e22:	81a3      	strh	r3, [r4, #12]
 8026e24:	89a3      	ldrh	r3, [r4, #12]
 8026e26:	431d      	orrs	r5, r3
 8026e28:	81a5      	strh	r5, [r4, #12]
 8026e2a:	e7cf      	b.n	8026dcc <__smakebuf_r+0x18>

08026e2c <_fstat_r>:
 8026e2c:	b538      	push	{r3, r4, r5, lr}
 8026e2e:	4d07      	ldr	r5, [pc, #28]	@ (8026e4c <_fstat_r+0x20>)
 8026e30:	2300      	movs	r3, #0
 8026e32:	4604      	mov	r4, r0
 8026e34:	4608      	mov	r0, r1
 8026e36:	4611      	mov	r1, r2
 8026e38:	602b      	str	r3, [r5, #0]
 8026e3a:	f7e1 ff85 	bl	8008d48 <_fstat>
 8026e3e:	1c43      	adds	r3, r0, #1
 8026e40:	d102      	bne.n	8026e48 <_fstat_r+0x1c>
 8026e42:	682b      	ldr	r3, [r5, #0]
 8026e44:	b103      	cbz	r3, 8026e48 <_fstat_r+0x1c>
 8026e46:	6023      	str	r3, [r4, #0]
 8026e48:	bd38      	pop	{r3, r4, r5, pc}
 8026e4a:	bf00      	nop
 8026e4c:	200198c0 	.word	0x200198c0

08026e50 <_isatty_r>:
 8026e50:	b538      	push	{r3, r4, r5, lr}
 8026e52:	4d06      	ldr	r5, [pc, #24]	@ (8026e6c <_isatty_r+0x1c>)
 8026e54:	2300      	movs	r3, #0
 8026e56:	4604      	mov	r4, r0
 8026e58:	4608      	mov	r0, r1
 8026e5a:	602b      	str	r3, [r5, #0]
 8026e5c:	f7e1 ff84 	bl	8008d68 <_isatty>
 8026e60:	1c43      	adds	r3, r0, #1
 8026e62:	d102      	bne.n	8026e6a <_isatty_r+0x1a>
 8026e64:	682b      	ldr	r3, [r5, #0]
 8026e66:	b103      	cbz	r3, 8026e6a <_isatty_r+0x1a>
 8026e68:	6023      	str	r3, [r4, #0]
 8026e6a:	bd38      	pop	{r3, r4, r5, pc}
 8026e6c:	200198c0 	.word	0x200198c0

08026e70 <_init>:
 8026e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e72:	bf00      	nop
 8026e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e76:	bc08      	pop	{r3}
 8026e78:	469e      	mov	lr, r3
 8026e7a:	4770      	bx	lr

08026e7c <_fini>:
 8026e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026e7e:	bf00      	nop
 8026e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026e82:	bc08      	pop	{r3}
 8026e84:	469e      	mov	lr, r3
 8026e86:	4770      	bx	lr
