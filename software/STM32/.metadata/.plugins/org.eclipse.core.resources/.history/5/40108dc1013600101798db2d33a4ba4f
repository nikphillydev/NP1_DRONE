/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : app_freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "Threads/sensor.hpp"
#include "usart.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticTask_t osStaticThreadDef_t;
typedef StaticSemaphore_t osStaticMutexDef_t;
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

uint8_t tx_buffer[1] = { 0x55 };
uint8_t rx_buffer[2] = { 0, 0 };

/* USER CODE END Variables */
/* Definitions for sensorFusionTask */
osThreadId_t sensorFusionTaskHandle;
uint32_t sensorFusionTaskBuffer[ 2048 ];
osStaticThreadDef_t sensorFusionTaskControlBlock;
const osThreadAttr_t sensorFusionTask_attributes = {
  .name = "sensorFusionTask",
  .stack_mem = &sensorFusionTaskBuffer[0],
  .stack_size = sizeof(sensorFusionTaskBuffer),
  .cb_mem = &sensorFusionTaskControlBlock,
  .cb_size = sizeof(sensorFusionTaskControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for accIRQTask */
osThreadId_t accIRQTaskHandle;
uint32_t accIRQTaskBuffer[ 256 ];
osStaticThreadDef_t accIRQTaskControlBlock;
const osThreadAttr_t accIRQTask_attributes = {
  .name = "accIRQTask",
  .stack_mem = &accIRQTaskBuffer[0],
  .stack_size = sizeof(accIRQTaskBuffer),
  .cb_mem = &accIRQTaskControlBlock,
  .cb_size = sizeof(accIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for gyroIRQTask */
osThreadId_t gyroIRQTaskHandle;
uint32_t gyroIRQTaskBuffer[ 256 ];
osStaticThreadDef_t gyroIRQTaskControlBlock;
const osThreadAttr_t gyroIRQTask_attributes = {
  .name = "gyroIRQTask",
  .stack_mem = &gyroIRQTaskBuffer[0],
  .stack_size = sizeof(gyroIRQTaskBuffer),
  .cb_mem = &gyroIRQTaskControlBlock,
  .cb_size = sizeof(gyroIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for baroIRQTask */
osThreadId_t baroIRQTaskHandle;
uint32_t baroIRQTaskBuffer[ 256 ];
osStaticThreadDef_t baroIRQTaskControlBlock;
const osThreadAttr_t baroIRQTask_attributes = {
  .name = "baroIRQTask",
  .stack_mem = &baroIRQTaskBuffer[0],
  .stack_size = sizeof(baroIRQTaskBuffer),
  .cb_mem = &baroIRQTaskControlBlock,
  .cb_size = sizeof(baroIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for magIRQTask */
osThreadId_t magIRQTaskHandle;
uint32_t magIRQTaskBuffer[ 256 ];
osStaticThreadDef_t magIRQTaskControlBlock;
const osThreadAttr_t magIRQTask_attributes = {
  .name = "magIRQTask",
  .stack_mem = &magIRQTaskBuffer[0],
  .stack_size = sizeof(magIRQTaskBuffer),
  .cb_mem = &magIRQTaskControlBlock,
  .cb_size = sizeof(magIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for fusionLoggingTask */
osThreadId_t fusionLoggingTaskHandle;
uint32_t fusionLoggingTaskBuffer[ 512 ];
osStaticThreadDef_t fusionLoggingTaskControlBlock;
const osThreadAttr_t fusionLoggingTask_attributes = {
  .name = "fusionLoggingTask",
  .stack_mem = &fusionLoggingTaskBuffer[0],
  .stack_size = sizeof(fusionLoggingTaskBuffer),
  .cb_mem = &fusionLoggingTaskControlBlock,
  .cb_size = sizeof(fusionLoggingTaskControlBlock),
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for ultrasonicPollingTask */
osThreadId_t ultrasonicPollingTaskHandle;
uint32_t ultrasonicPollingTaskBuffer[ 512 ];
osStaticThreadDef_t ultrasonicPollingTaskControlBlock;
const osThreadAttr_t ultrasonicPollingTask_attributes = {
  .name = "ultrasonicPollingTask",
  .stack_mem = &ultrasonicPollingTaskBuffer[0],
  .stack_size = sizeof(ultrasonicPollingTaskBuffer),
  .cb_mem = &ultrasonicPollingTaskControlBlock,
  .cb_size = sizeof(ultrasonicPollingTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for opticalFlowPollingTask */
osThreadId_t opticalFlowPollingTaskHandle;
uint32_t opticalFlowUpdateTaskBuffer[ 256 ];
osStaticThreadDef_t opticalFlowUpdateTaskControlBlock;
const osThreadAttr_t opticalFlowPollingTask_attributes = {
  .name = "opticalFlowPollingTask",
  .stack_mem = &opticalFlowUpdateTaskBuffer[0],
  .stack_size = sizeof(opticalFlowUpdateTaskBuffer),
  .cb_mem = &opticalFlowUpdateTaskControlBlock,
  .cb_size = sizeof(opticalFlowUpdateTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for spi1Mutex */
osMutexId_t spi1MutexHandle;
osStaticMutexDef_t spi1MutexControlBlock;
const osMutexAttr_t spi1Mutex_attributes = {
  .name = "spi1Mutex",
  .cb_mem = &spi1MutexControlBlock,
  .cb_size = sizeof(spi1MutexControlBlock),
};
/* Definitions for usbMutex */
osMutexId_t usbMutexHandle;
osStaticMutexDef_t usbMutexControlBlock;
const osMutexAttr_t usbMutex_attributes = {
  .name = "usbMutex",
  .cb_mem = &usbMutexControlBlock,
  .cb_size = sizeof(usbMutexControlBlock),
};
/* Definitions for i2c2Mutex */
osMutexId_t i2c2MutexHandle;
osStaticMutexDef_t i2c2MutexControlBlock;
const osMutexAttr_t i2c2Mutex_attributes = {
  .name = "i2c2Mutex",
  .cb_mem = &i2c2MutexControlBlock,
  .cb_size = sizeof(i2c2MutexControlBlock),
};
/* Definitions for accelDataMutex */
osMutexId_t accelDataMutexHandle;
osStaticMutexDef_t accelDataMutexControlBlock;
const osMutexAttr_t accelDataMutex_attributes = {
  .name = "accelDataMutex",
  .cb_mem = &accelDataMutexControlBlock,
  .cb_size = sizeof(accelDataMutexControlBlock),
};
/* Definitions for gyroDataMutex */
osMutexId_t gyroDataMutexHandle;
osStaticMutexDef_t gyroDataMutexControlBlock;
const osMutexAttr_t gyroDataMutex_attributes = {
  .name = "gyroDataMutex",
  .cb_mem = &gyroDataMutexControlBlock,
  .cb_size = sizeof(gyroDataMutexControlBlock),
};
/* Definitions for baroDataMutex */
osMutexId_t baroDataMutexHandle;
osStaticMutexDef_t baroDataMutexControlBlock;
const osMutexAttr_t baroDataMutex_attributes = {
  .name = "baroDataMutex",
  .cb_mem = &baroDataMutexControlBlock,
  .cb_size = sizeof(baroDataMutexControlBlock),
};
/* Definitions for magDataMutex */
osMutexId_t magDataMutexHandle;
osStaticMutexDef_t magDataMutexControlBlock;
const osMutexAttr_t magDataMutex_attributes = {
  .name = "magDataMutex",
  .cb_mem = &magDataMutexControlBlock,
  .cb_size = sizeof(magDataMutexControlBlock),
};
/* Definitions for stateMutex */
osMutexId_t stateMutexHandle;
osStaticMutexDef_t stateMutexControlBlock;
const osMutexAttr_t stateMutex_attributes = {
  .name = "stateMutex",
  .cb_mem = &stateMutexControlBlock,
  .cb_size = sizeof(stateMutexControlBlock),
};
/* Definitions for uart2Mutex */
osMutexId_t uart2MutexHandle;
osStaticMutexDef_t uart2MutexControlBlock;
const osMutexAttr_t uart2Mutex_attributes = {
  .name = "uart2Mutex",
  .cb_mem = &uart2MutexControlBlock,
  .cb_size = sizeof(uart2MutexControlBlock),
};
/* Definitions for ultrasonicDataMutex */
osMutexId_t ultrasonicDataMutexHandle;
osStaticMutexDef_t ultrasonicDataMutexControlBlock;
const osMutexAttr_t ultrasonicDataMutex_attributes = {
  .name = "ultrasonicDataMutex",
  .cb_mem = &ultrasonicDataMutexControlBlock,
  .cb_size = sizeof(ultrasonicDataMutexControlBlock),
};
/* Definitions for flowDataMutex */
osMutexId_t flowDataMutexHandle;
osStaticMutexDef_t flowDataMutexControlBlock;
const osMutexAttr_t flowDataMutex_attributes = {
  .name = "flowDataMutex",
  .cb_mem = &flowDataMutexControlBlock,
  .cb_size = sizeof(flowDataMutexControlBlock),
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void start_sensor_fusion_task(void *argument);
void start_acc_irq_task(void *argument);
void start_gyro_irq_task(void *argument);
void start_baro_irq_task(void *argument);
void start_mag_irq_task(void *argument);
void start_fusion_logging_task(void *argument);
void start_ultrasonic_polling_task(void *argument);
void start_optical_flow_polling_task(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) { }
__weak unsigned long getRunTimeCounterValue(void) { return 0; }
/* USER CODE END 1 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);

  /* creation of stateMutex */
  stateMutexHandle = osMutexNew(&stateMutex_attributes);

  /* creation of uart2Mutex */
  uart2MutexHandle = osMutexNew(&uart2Mutex_attributes);

  /* creation of ultrasonicDataMutex */
  ultrasonicDataMutexHandle = osMutexNew(&ultrasonicDataMutex_attributes);

  /* creation of flowDataMutex */
  flowDataMutexHandle = osMutexNew(&flowDataMutex_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);

  /* creation of fusionLoggingTask */
  fusionLoggingTaskHandle = osThreadNew(start_fusion_logging_task, NULL, &fusionLoggingTask_attributes);

  /* creation of ultrasonicPollingTask */
  ultrasonicPollingTaskHandle = osThreadNew(start_ultrasonic_polling_task, NULL, &ultrasonicPollingTask_attributes);

  /* creation of opticalFlowPollingTask */
  opticalFlowPollingTaskHandle = osThreadNew(start_optical_flow_polling_task, NULL, &opticalFlowPollingTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_start_sensor_fusion_task */
/**
  * @brief  Function implementing the sensorFusionTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
  /* init code for USB_Device */
  MX_USB_Device_Init();
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
  /* USER CODE END start_sensor_fusion_task */
}

/* USER CODE BEGIN Header_start_acc_irq_task */
/**
* @brief Deferred interrupt handling for BMI088 accelerometer.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMI088_Accel();
	}
  /* USER CODE END start_acc_irq_task */
}

/* USER CODE BEGIN Header_start_gyro_irq_task */
/**
* @brief Deferred interrupt handling for BMI088 gyroscope.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMI088_Gyro();
	}
  /* USER CODE END start_gyro_irq_task */
}

/* USER CODE BEGIN Header_start_baro_irq_task */
/**
* @brief Function implementing the baroIRQTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMP388();
	}
  /* USER CODE END start_baro_irq_task */
}

/* USER CODE BEGIN Header_start_mag_irq_task */
/**
* @brief Function implementing the magIRQTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_LIS3MDL();
	}
  /* USER CODE END start_mag_irq_task */
}

/* USER CODE BEGIN Header_start_fusion_logging_task */
/**
* @brief Function implementing the fusionLoggingTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_fusion_logging_task */
void start_fusion_logging_task(void *argument)
{
  /* USER CODE BEGIN start_fusion_logging_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END start_fusion_logging_task */
}

/* USER CODE BEGIN Header_start_ultrasonic_polling_task */
/**
* @brief Function implementing the ultrasonicPollingTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_ultrasonic_polling_task */
void start_ultrasonic_polling_task(void *argument)
{
  /* USER CODE BEGIN start_ultrasonic_polling_task */
	/* Infinite loop */
	uint32_t last_wake_time = osKernelGetTickCount();
	for(;;)
	{
		poll_US100_Ultrasonic( 1 );
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		poll_US100_Ultrasonic( 0 );

		last_wake_time += 100;			// 100ms delay, update distance at 10Hz
		osDelayUntil(last_wake_time);
	}
  /* USER CODE END start_ultrasonic_polling_task */
}

/* USER CODE BEGIN Header_start_optical_flow_polling_task */
/**
* @brief Function implementing the opticalFlowPollingTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_optical_flow_polling_task */
void start_optical_flow_polling_task(void *argument)
{
  /* USER CODE BEGIN start_optical_flow_polling_task */
	/* Infinite loop */
	uint32_t last_wake_time = osKernelGetTickCount();
	for(;;)
	{
		poll_PMW3901();

		last_wake_time += 10;			// 10ms delay, update delta x,y at 100 Hz
		osDelayUntil(last_wake_time);
	}
  /* USER CODE END start_optical_flow_polling_task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == ACCEL_INT_Pin)
	{
		osThreadFlagsSet(accIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == GYRO_INT_Pin)
	{
		osThreadFlagsSet(gyroIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == BMP_INT_Pin)
	{
		osThreadFlagsSet(baroIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	osThreadFlagsSet(ultrasonicPollingTaskHandle, 0x00000001U);
}

/* USER CODE END Application */

