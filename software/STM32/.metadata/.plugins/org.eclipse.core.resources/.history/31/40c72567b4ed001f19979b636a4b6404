/*
 * sensor.cpp
 *
 *  Created on: Dec 15, 2024
 *      Author: Nikolai Philipenko
 *
 *      Using ENU coordinate system.
 */

#include "Threads/sensor.hpp"
#include "main.h"
#include "spi.h"
#include "i2c.h"
#include "Drivers/usb.hpp"
#include "Drivers/BMI088.hpp"
#include "Drivers/BMP388.hpp"
#include "Drivers/LIS3MDL.hpp"

#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

#include "motion_fx.h"

#define STATE_SIZE			(size_t)2450
#define TIMER_PERIOD		(size_t)1700 			// cycles per count
#define TIMER_FREQUENCY		(size_t)170000000		// cycles per second
#define COUNTS_TO_SECONDS	(float)TIMER_PERIOD / TIMER_FREQUENCY

/*
 * Sensor drivers
 */
BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);

std::array<float, 3> linear_accelerations {};
std::array<float, 3> angular_velocities {};
std::array<float, 3> mag_intensities {};

/*
 * MotionFX instance
 */
static uint8_t mfxstate[STATE_SIZE];
MFX_knobs_t iKnobs;
MFX_input_t data_in;
MFX_output_t data_out;

/*
 * Counter for delta time between MotionFX updates
 */
extern volatile unsigned long ulHighFrequencyTimerCounts;
float last_time = 0;
float current_time = 0;
float dT = 0;

/*
 * THREADS
 */
void sensor_fusion_thread()
{
	osDelay(400);
	USB_Log("------------ APPLICATION STARTING ------------", CRITICAL);
	osDelay(100);

	// Initialize sensors
	bool imu_init = imu.init();
	bool baro_init = barometer.init();
	bool mag_init = magnetometer.init();

	if (imu_init && baro_init && mag_init)
	{
		USB_Log("ALL SENSORS INITIALIZED", CRITICAL);

		/*
		 * Initialize MotionFX Sensor Fusion library
		 */
		if (STATE_SIZE < MotionFX_GetStateSize())
		{
			USB_Log("MotionFX algorithm state not enough memory", ERR);
			osDelay(500);
			Error_Handler();
		}
		MotionFX_initialize((MFXState_t *)mfxstate);
		MotionFX_getKnobs(mfxstate, &iKnobs);
		iKnobs.LMode = 2;
		iKnobs.output_type = MFX_ENGINE_OUTPUT_ENU;
		MotionFX_setKnobs(mfxstate, &iKnobs);
		MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);

		USB_Log("STARTING SENSOR FUSION", CRITICAL);

		while (1)
		{
			imu.log_data_to_gcs();
			osDelay(2);
			barometer.log_data_to_gcs();
			osDelay(2);
			magnetometer.log_data_to_gcs();
			osDelay(2);

			linear_accelerations = imu.get_linear_accelerations();
			angular_velocities = imu.get_angular_velocities();
			mag_intensities = magnetometer.get_axis_intensities();

			data_in.acc[0] = linear_accelerations[0];
			data_in.acc[1] = linear_accelerations[1];
			data_in.acc[2] = linear_accelerations[2];
			data_in.gyro[0] = angular_velocities[0];
			data_in.gyro[1] = angular_velocities[1];
			data_in.gyro[2] = angular_velocities[2];
			data_in.mag[0] = mag_intensities[0];
			data_in.mag[1] = mag_intensities[1];
			data_in.mag[2] = mag_intensities[2];

			current_time = ulHighFrequencyTimerCounts * COUNTS_TO_SECONDS;
			dT = current_time - last_time;
			last_time = current_time;


			asm("NOP");

			// --------------------------------
			// --- MAGNETOMETER CALIBRATION ---
			// --------------------------------
//			std::array<float, 3> mag_data = magnetometer.get_axis_intensities();
//			osDelay(100);
//			char str[256];
//			int x = static_cast<int>(mag_data[0] * 1000.0);
//			int y = static_cast<int>(mag_data[1] * 1000.0);
//			int z = static_cast<int>(mag_data[2] * 1000.0);
//			snprintf(str, 256, "Raw:0,0,0,0,0,0,%d,%d,%d\r", x,y,z);
//			USB_Log(str, RAW);
		}
	}
	vTaskDelete( NULL );
}

/*
 * FUNCTIONS
 */
void service_BMI088_Accel(){ imu.service_irq_accelerometer(); imu.service_irq_temperature(); }
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
void service_BMP388() { barometer.service_irq(); }
void service_LIS3MDL() { magnetometer.service_irq(); }


