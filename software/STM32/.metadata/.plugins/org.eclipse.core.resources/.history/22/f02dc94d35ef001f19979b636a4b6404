/*
 * sensor.cpp
 *
 *  Created on: Dec 15, 2024
 *      Author: Nikolai Philipenko
 *
 *      Using NED coordinate system.
 */

#include "Threads/sensor.hpp"
#include "main.h"
#include "spi.h"
#include "i2c.h"
#include "Drivers/usb.hpp"
#include "Drivers/BMI088.hpp"
#include "Drivers/BMP388.hpp"
#include "Drivers/LIS3MDL.hpp"

#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include "motion_fx.h"
#include <cstdio>
#include <cmath>

#define TIMER_PERIOD			(size_t)1700 							// cycles per count
#define TIMER_FREQUENCY			(size_t)170000000						// cycles per second
#define COUNTS_TO_SECONDS		(float)TIMER_PERIOD / TIMER_FREQUENCY

#define STATE_SIZE				(size_t)2432
#define MS2_TO_G				(float)1 / 9.80665
#define RADIANS_TO_DEGREES		(float)180 / M_PI
#define GAUSS_TO_uTESLA			(float)100
#define GBIAS_ACC_TH_SC         (float)2 * 0.000765
#define GBIAS_GYRO_TH_SC        (float)2 * 0.002
#define GBIAS_MAG_TH_SC         (float)2 * 0.001500

/*
 * Sensor drivers
 */
BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);

std::array<float, 3> linear_accelerations {};
std::array<float, 3> angular_velocities {};
std::array<float, 3> mag_intensities {};

/*
 * MotionFX instance
 */
static uint8_t mfxstate[STATE_SIZE];
MFX_knobs_t iKnobs;
MFX_input_t data_in;
MFX_output_t data_out;

/*
 * Counter for delta time between MotionFX updates
 */
extern volatile unsigned long ulHighFrequencyTimerCounts;
float last_time = 0;
float current_time = 0;
float dT = 0;

/*
 * THREAD
 */
void sensor_fusion_thread()
{
	osDelay(400);
	USB_Log("--- SENSOR FUSION THREAD STARTING ---", CRITICAL);
	osDelay(100);

	/*
	 * Initialize sensors
	 */
	bool imu_init = imu.init();
	bool baro_init = barometer.init();
	bool mag_init = magnetometer.init();

	if (imu_init && baro_init && mag_init)
	{
		USB_Log("All sensors initialized successfully.", CRITICAL);

		/*
		 * Initialize MotionFX Sensor Fusion library
		 */
		if (STATE_SIZE < MotionFX_GetStateSize())
		{
			USB_Log("MotionFX algorithm state not enough memory", ERR);
			osDelay(500);
			Error_Handler();
		}
		MotionFX_initialize((MFXState_t *)mfxstate);

		// Turn library knobs...
		MotionFX_getKnobs(mfxstate, &iKnobs);

		iKnobs.acc_orientation[0] = 'w';	// positive orientation to the
		iKnobs.acc_orientation[1] = 's';	// 	board's reference frame
		iKnobs.acc_orientation[2] = 'u';
		iKnobs.gyro_orientation[0] = 'w';
		iKnobs.gyro_orientation[1] = 's';
		iKnobs.gyro_orientation[2] = 'u';
		iKnobs.mag_orientation[0] = 'n';
		iKnobs.mag_orientation[1] = 'w';
		iKnobs.mag_orientation[2] = 'u';

		iKnobs.gbias_acc_th_sc = GBIAS_ACC_TH_SC;
		iKnobs.gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
		iKnobs.gbias_mag_th_sc = GBIAS_MAG_TH_SC;

		iKnobs.output_type = MFX_ENGINE_OUTPUT_NED;	// NED output orientation
		iKnobs.LMode = 1;							// static learning
		iKnobs.modx = 1;							// decimation of MotionFX_update call frequency

		MotionFX_setKnobs(mfxstate, &iKnobs);

		// Enable 9-axis sensor fusion
		MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
		MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);

		USB_Log("Starting sensor fusion.", CRITICAL);

		bool mag_calibrated = false;
		bool calibrate_mag = true;

		while (1)
		{
			/*
			 * Run Sensor Fusion algorithm
			 */

			osDelay(4);		// ~250 Hz update rate

			// Get sensor data
			linear_accelerations = imu.get_linear_accelerations();
			angular_velocities = imu.get_angular_velocities();
			mag_intensities = magnetometer.get_axis_intensities();

			data_in.acc[0] = linear_accelerations[0] * MS2_TO_G;
			data_in.acc[1] = linear_accelerations[1] * MS2_TO_G;
			data_in.acc[2] = linear_accelerations[2] * MS2_TO_G;
			data_in.gyro[0] = angular_velocities[0] * RADIANS_TO_DEGREES;
			data_in.gyro[1] = angular_velocities[1] * RADIANS_TO_DEGREES;
			data_in.gyro[2] = angular_velocities[2] * RADIANS_TO_DEGREES;
			data_in.mag[0] = mag_intensities[0] * GAUSS_TO_uTESLA / 50;
			data_in.mag[1] = mag_intensities[1] * GAUSS_TO_uTESLA / 50;
			data_in.mag[2] = mag_intensities[2] * GAUSS_TO_uTESLA / 50;

			// Compute delta time since last update
			current_time = ulHighFrequencyTimerCounts * COUNTS_TO_SECONDS;
			dT = current_time - last_time;
			last_time = current_time;

			// Kalman filter predict and update
			MotionFX_propagate(mfxstate, &data_out, &data_in, &dT);
			MotionFX_update(mfxstate, &data_out, &data_in, &dT, NULL);

			char str[100];
			snprintf(str, 100, "ROLL: %f, PITCH: %f, YAW: %f", data_out.rotation[2], data_out.rotation[1], data_out.rotation[0]);
			USB_Log(str, RAW);

			// Log sensor data
//			imu.log_data_to_gcs();
//			osDelay(2);
//			barometer.log_data_to_gcs();
//			osDelay(2);
//			magnetometer.log_data_to_gcs();
//			osDelay(2);

			// --------------------------------
			// --- MAGNETOMETER CALIBRATION ---
			// --------------------------------
//			std::array<float, 3> mag_data = magnetometer.get_axis_intensities();
//			osDelay(100);
//			char str[256];
//			int x = static_cast<int>(mag_data[0] * 1000.0);
//			int y = static_cast<int>(mag_data[1] * 1000.0);
//			int z = static_cast<int>(mag_data[2] * 1000.0);
//			snprintf(str, 256, "Raw:0,0,0,0,0,0,%d,%d,%d\r", x,y,z);
//			USB_Log(str, RAW);
		}
	}
	vTaskDelete( NULL );
}

/*
 * FUNCTIONS
 */
void service_BMI088_Accel(){ imu.service_irq_accelerometer(); imu.service_irq_temperature(); }
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
void service_BMP388() { barometer.service_irq(); }
void service_LIS3MDL() { magnetometer.service_irq(); }


