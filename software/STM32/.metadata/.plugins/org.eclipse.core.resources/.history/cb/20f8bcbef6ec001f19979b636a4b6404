/*
 * sensor.cpp
 *
 *  Created on: Dec 15, 2024
 *      Author: Nikolai Philipenko
 *
 *      Using ENU coordinate system.
 */

#include "Threads/sensor.hpp"
#include "main.h"
#include "spi.h"
#include "i2c.h"
#include "Drivers/usb.hpp"
#include "Drivers/BMI088.hpp"
#include "Drivers/BMP388.hpp"
#include "Drivers/LIS3MDL.hpp"

#include "usbd_cdc_if.h"
#include "usbd_def.h"
#include <cstdio>

#include "motion_fx.h"

#define STATE_SIZE		(size_t)2450

BMI088 imu(hspi1, spi1MutexHandle, ACCEL_CS_GPIO_Port, GYRO_CS_GPIO_Port, ACCEL_CS_Pin,
		GYRO_CS_Pin, accelDataMutexHandle, gyroDataMutexHandle);
BMP388 barometer(hi2c2, i2c2MutexHandle, baroDataMutexHandle);
LIS3MDL magnetometer(hi2c2, i2c2MutexHandle, magDataMutexHandle);

// MotionFX instance
static uint8_t mfxstate[STATE_SIZE];
MFX_knobs_t iKnobs;

/*
 * THREADS
 */
void sensor_fusion_thread()
{
	osDelay(400);
	USB_Log("------------ APPLICATION STARTING ------------", CRITICAL);
	osDelay(100);

	bool imu_init = imu.init();
	bool baro_init = barometer.init();
	bool mag_init = magnetometer.init();

	if (imu_init && baro_init && mag_init)
	{
		USB_Log("ALL SENSORS INITIALIZED", CRITICAL);

		// Initialize MotionFX Sensor Fusion Library
		size_t size = MotionFX_GetStateSize();

		while (1)
		{
			imu.log_data_to_gcs();
			osDelay(3);
			barometer.log_data_to_gcs();
			osDelay(3);
			magnetometer.log_data_to_gcs();
			osDelay(3);

			// --------------------------------
			// --- MAGNETOMETER CALIBRATION ---
			// --------------------------------
//			std::array<float, 3> mag_data = magnetometer.get_axis_intensities();
//			osDelay(100);
//			char str[256];
//			int x = static_cast<int>(mag_data[0] * 1000.0);
//			int y = static_cast<int>(mag_data[1] * 1000.0);
//			int z = static_cast<int>(mag_data[2] * 1000.0);
//			snprintf(str, 256, "Raw:0,0,0,0,0,0,%d,%d,%d\r", x,y,z);
//			USB_Log(str, RAW);
		}
	}
	vTaskDelete( NULL );
}

/*
 * FUNCTIONS
 */
void service_BMI088_Accel(){ imu.service_irq_accelerometer(); imu.service_irq_temperature(); }
void service_BMI088_Gyro() { imu.service_irq_gyroscope(); }
void service_BMP388() { barometer.service_irq(); }
void service_LIS3MDL() { magnetometer.service_irq(); }


