/*
 * IIRFilter.cpp
 *
 *  Created on: Jan 31, 2025
 *      Author: Nikolai Philipenko
 */
#include "Utility/IIRFilter.hpp"
#include <cmath>


IIRFilter::IIRFilter(float cutoff_frequency, float sampling_frequency)
	: cutoff_frequency{cutoff_frequency},
	  sampling_frequency{sampling_frequency},
	  K{tanf(M_PI * (cutoff_frequency / sampling_frequency))},
	  Q{0.7071}
{
	a[0] = (K * K) / (K * K + K / Q + 1);
	a[1] = 2 * a[0];
	a[2] = a[0];

	b[0] = (2 * (K * K - 1)) / (K * K + K / Q + 1);


	float sampling_period = 1.0f / sampling_frequency;
	float time_constant = 1.0f / (2 * M_2_PI * cutoff_frequency);

	a0 = sampling_period / (sampling_period + time_constant);
	b1 = time_constant / (sampling_period + time_constant);
}

float IIRFilter::update(float input)
{
	output = a0 * input + b1 * output;
	return output;
}



