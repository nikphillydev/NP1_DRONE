/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : app_freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "Threads/sensor.hpp"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
typedef StaticTask_t osStaticThreadDef_t;
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
/* Definitions for sensorFusionTask */
osThreadId_t sensorFusionTaskHandle;
uint32_t sensorFusionTaskBuffer[ 2048 ];
osStaticThreadDef_t sensorFusionTaskControlBlock;
const osThreadAttr_t sensorFusionTask_attributes = {
  .name = "sensorFusionTask",
  .stack_mem = &sensorFusionTaskBuffer[0],
  .stack_size = sizeof(sensorFusionTaskBuffer),
  .cb_mem = &sensorFusionTaskControlBlock,
  .cb_size = sizeof(sensorFusionTaskControlBlock),
  .priority = (osPriority_t) osPriorityNormal,
};
/* Definitions for accIRQTask */
osThreadId_t accIRQTaskHandle;
uint32_t accIRQTaskBuffer[ 256 ];
osStaticThreadDef_t accIRQTaskControlBlock;
const osThreadAttr_t accIRQTask_attributes = {
  .name = "accIRQTask",
  .stack_mem = &accIRQTaskBuffer[0],
  .stack_size = sizeof(accIRQTaskBuffer),
  .cb_mem = &accIRQTaskControlBlock,
  .cb_size = sizeof(accIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for gyroIRQTask */
osThreadId_t gyroIRQTaskHandle;
uint32_t gyroIRQTaskBuffer[ 256 ];
osStaticThreadDef_t gyroIRQTaskControlBlock;
const osThreadAttr_t gyroIRQTask_attributes = {
  .name = "gyroIRQTask",
  .stack_mem = &gyroIRQTaskBuffer[0],
  .stack_size = sizeof(gyroIRQTaskBuffer),
  .cb_mem = &gyroIRQTaskControlBlock,
  .cb_size = sizeof(gyroIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for baroIRQTask */
osThreadId_t baroIRQTaskHandle;
uint32_t baroIRQTaskBuffer[ 256 ];
osStaticThreadDef_t baroIRQTaskControlBlock;
const osThreadAttr_t baroIRQTask_attributes = {
  .name = "baroIRQTask",
  .stack_mem = &baroIRQTaskBuffer[0],
  .stack_size = sizeof(baroIRQTaskBuffer),
  .cb_mem = &baroIRQTaskControlBlock,
  .cb_size = sizeof(baroIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for magIRQTask */
osThreadId_t magIRQTaskHandle;
uint32_t magIRQTaskBuffer[ 256 ];
osStaticThreadDef_t magIRQTaskControlBlock;
const osThreadAttr_t magIRQTask_attributes = {
  .name = "magIRQTask",
  .stack_mem = &magIRQTaskBuffer[0],
  .stack_size = sizeof(magIRQTaskBuffer),
  .cb_mem = &magIRQTaskControlBlock,
  .cb_size = sizeof(magIRQTaskControlBlock),
  .priority = (osPriority_t) osPriorityHigh,
};
/* Definitions for loggingTask */
osThreadId_t loggingTaskHandle;
uint32_t loggingTaskBuffer[ 256 ];
osStaticThreadDef_t loggingTaskControlBlock;
const osThreadAttr_t loggingTask_attributes = {
  .name = "loggingTask",
  .stack_mem = &loggingTaskBuffer[0],
  .stack_size = sizeof(loggingTaskBuffer),
  .cb_mem = &loggingTaskControlBlock,
  .cb_size = sizeof(loggingTaskControlBlock),
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for spi1Mutex */
osMutexId_t spi1MutexHandle;
const osMutexAttr_t spi1Mutex_attributes = {
  .name = "spi1Mutex"
};
/* Definitions for usbMutex */
osMutexId_t usbMutexHandle;
const osMutexAttr_t usbMutex_attributes = {
  .name = "usbMutex"
};
/* Definitions for i2c2Mutex */
osMutexId_t i2c2MutexHandle;
const osMutexAttr_t i2c2Mutex_attributes = {
  .name = "i2c2Mutex"
};
/* Definitions for accelDataMutex */
osMutexId_t accelDataMutexHandle;
const osMutexAttr_t accelDataMutex_attributes = {
  .name = "accelDataMutex"
};
/* Definitions for gyroDataMutex */
osMutexId_t gyroDataMutexHandle;
const osMutexAttr_t gyroDataMutex_attributes = {
  .name = "gyroDataMutex"
};
/* Definitions for baroDataMutex */
osMutexId_t baroDataMutexHandle;
const osMutexAttr_t baroDataMutex_attributes = {
  .name = "baroDataMutex"
};
/* Definitions for magDataMutex */
osMutexId_t magDataMutexHandle;
const osMutexAttr_t magDataMutex_attributes = {
  .name = "magDataMutex"
};
/* Definitions for stateMutex */
osMutexId_t stateMutexHandle;
const osMutexAttr_t stateMutex_attributes = {
  .name = "stateMutex"
};

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void start_sensor_fusion_task(void *argument);
void start_acc_irq_task(void *argument);
void start_gyro_irq_task(void *argument);
void start_baro_irq_task(void *argument);
void start_mag_irq_task(void *argument);
void start_logging_task(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* Hook prototypes */
void configureTimerForRunTimeStats(void);
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void) { }
__weak unsigned long getRunTimeCounterValue(void) { return 0; }
/* USER CODE END 1 */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of spi1Mutex */
  spi1MutexHandle = osMutexNew(&spi1Mutex_attributes);

  /* creation of usbMutex */
  usbMutexHandle = osMutexNew(&usbMutex_attributes);

  /* creation of i2c2Mutex */
  i2c2MutexHandle = osMutexNew(&i2c2Mutex_attributes);

  /* creation of accelDataMutex */
  accelDataMutexHandle = osMutexNew(&accelDataMutex_attributes);

  /* creation of gyroDataMutex */
  gyroDataMutexHandle = osMutexNew(&gyroDataMutex_attributes);

  /* creation of baroDataMutex */
  baroDataMutexHandle = osMutexNew(&baroDataMutex_attributes);

  /* creation of magDataMutex */
  magDataMutexHandle = osMutexNew(&magDataMutex_attributes);

  /* creation of stateMutex */
  stateMutexHandle = osMutexNew(&stateMutex_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensorFusionTask */
  sensorFusionTaskHandle = osThreadNew(start_sensor_fusion_task, NULL, &sensorFusionTask_attributes);

  /* creation of accIRQTask */
  accIRQTaskHandle = osThreadNew(start_acc_irq_task, NULL, &accIRQTask_attributes);

  /* creation of gyroIRQTask */
  gyroIRQTaskHandle = osThreadNew(start_gyro_irq_task, NULL, &gyroIRQTask_attributes);

  /* creation of baroIRQTask */
  baroIRQTaskHandle = osThreadNew(start_baro_irq_task, NULL, &baroIRQTask_attributes);

  /* creation of magIRQTask */
  magIRQTaskHandle = osThreadNew(start_mag_irq_task, NULL, &magIRQTask_attributes);

  /* creation of loggingTask */
  loggingTaskHandle = osThreadNew(start_logging_task, NULL, &loggingTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_start_sensor_fusion_task */
/**
  * @brief  Function implementing the sensorFusionTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_sensor_fusion_task */
void start_sensor_fusion_task(void *argument)
{
  /* init code for USB_Device */
  MX_USB_Device_Init();
  /* USER CODE BEGIN start_sensor_fusion_task */
  /* Infinite loop */
  sensor_fusion_thread();
  /* USER CODE END start_sensor_fusion_task */
}

/* USER CODE BEGIN Header_start_acc_irq_task */
/**
* @brief Deferred interrupt handling for BMI088 accelerometer.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_acc_irq_task */
void start_acc_irq_task(void *argument)
{
  /* USER CODE BEGIN start_acc_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMI088_Accel();
	}
  /* USER CODE END start_acc_irq_task */
}

/* USER CODE BEGIN Header_start_gyro_irq_task */
/**
* @brief Deferred interrupt handling for BMI088 gyroscope.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_gyro_irq_task */
void start_gyro_irq_task(void *argument)
{
  /* USER CODE BEGIN start_gyro_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMI088_Gyro();
	}
  /* USER CODE END start_gyro_irq_task */
}

/* USER CODE BEGIN Header_start_baro_irq_task */
/**
* @brief Function implementing the baroIRQTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_baro_irq_task */
void start_baro_irq_task(void *argument)
{
  /* USER CODE BEGIN start_baro_irq_task */
  /* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_BMP388();
	}
  /* USER CODE END start_baro_irq_task */
}

/* USER CODE BEGIN Header_start_mag_irq_task */
/**
* @brief Function implementing the magIRQTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_mag_irq_task */
void start_mag_irq_task(void *argument)
{
  /* USER CODE BEGIN start_mag_irq_task */
	/* Infinite loop */
	for(;;)
	{
		osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
		service_LIS3MDL();
	}
  /* USER CODE END start_mag_irq_task */
}

/* USER CODE BEGIN Header_start_logging_task */
/**
* @brief Function implementing the loggingTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_logging_task */
void start_logging_task(void *argument)
{
  /* USER CODE BEGIN start_logging_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
  }
  /* USER CODE END start_logging_task */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == ACCEL_INT_Pin)
	{
		osThreadFlagsSet(accIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == GYRO_INT_Pin)
	{
		osThreadFlagsSet(gyroIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == BMP_INT_Pin)
	{
		osThreadFlagsSet(baroIRQTaskHandle, 0x00000001U);
	}
	else if (GPIO_Pin == MAG_DRDY_Pin)
	{
		osThreadFlagsSet(magIRQTaskHandle, 0x00000001U);
	}
}

/* USER CODE END Application */

