/*
 * lis3mdl.c
 *
 *  Created on: Dec 3, 2024
 *      Author: Nikolai Philipenko
 */

#include "Drivers/lis3mdl.h"
#include "Drivers/usb.h"

/*
 *
 * LIS3MDL INTERFACE
 *
 */
uint8_t LIS3MDL_Init(LIS3MDL* sensor, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
	sensor->i2c_handle = i2c_handle;
	sensor->i2c_mutex = i2c_mutex;
	sensor->irq_pin = irq_pin;

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	return 1;
}

/*
 *
 * LIS3MDL LOW-LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t LIS3MDL_ReadRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
	osMutexAcquire(sensor->i2c_mutex, osWaitForever);
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, SLAVE_ADDRESS << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
	osMutexRelease(sensor->i2c_mutex);

	if (!status)
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
	}

	return status;
}

uint8_t LIS3MDL_WriteRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
	osMutexAcquire(sensor->i2c_mutex, osWaitForever);
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, SLAVE_ADDRESS << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
	osMutexRelease(sensor->i2c_mutex);

	if (!status)
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
	}

	return status;
}
