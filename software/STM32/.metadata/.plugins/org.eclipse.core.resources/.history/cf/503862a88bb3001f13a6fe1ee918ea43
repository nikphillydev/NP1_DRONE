/*
 * lis3mdl.c
 *
 *  Created on: Dec 3, 2024
 *      Author: Nikolai Philipenko
 */

#include "Drivers/lis3mdl.h"
#include "Drivers/usb.h"

/*
 *
 * LIS3MDL INTERFACE
 *
 */
uint8_t LIS3MDL_Init(LIS3MDL* sensor, I2C_HandleTypeDef* i2c_handle, osMutexId_t* i2c_mutex, uint16_t irq_pin)
{
	sensor->i2c_handle = i2c_handle;
	sensor->i2c_mutex = i2c_mutex;
	sensor->irq_pin = irq_pin;

	// Temporary buffers
	uint8_t tx_data[4];
	uint8_t rx_data[4];

	// Check chip ID
	rx_data[0] = 0x00;
	LIS3MDL_ReadRegister(sensor, WHO_AM_I, rx_data, 1);
	if (rx_data[0] == 0x3D)
	{
		USB_Log("Found LIS3MDL, starting initialization.", WARN);
	}
	else
	{
		USB_Log("Failed to find BMP388. Initialization failed.", ERR);
		return 0;
	}
	osDelay(10);

	// Perform soft-reset of device
	tx_data[0] = 0x04;
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
	osDelay(10);

	// Set +-4G range
	tx_data[0] = 0x00;
	LIS3MDL_WriteRegister(sensor, CTRL_REG2, tx_data, 1);
	osDelay(10);

//	1. Write 40h in CTRL_REG2. Sets full scale Â±12 Hz.
//	2. Write FCh in CTRL_REG1. Sets UHP mode on the X/Y axes, ODR at 80 Hz and
//	activates temperature sensor.
//	3. Write 0Ch in CTRL_REG4. Sets UHP mode on the Z-axis.
//	4. Write 00h in CTRL_REG3. Sets continuous-measurement mode.

	USB_Log("LIS3MDL initialized OK.", WARN);
	osDelay(100);

	return 1;
}

/*
 *
 * LIS3MDL LOW-LEVEL REGISTER FUNCTIONS
 *
 */
uint8_t LIS3MDL_ReadRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len)
{
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
	uint8_t status = (HAL_I2C_Mem_Read(sensor->i2c_handle, (SLAVE_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, rx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
	osMutexRelease(*sensor->i2c_mutex);

	if (!status)
	{
		USB_Log("LIS3MDL register read failed.\n", ERR);
	}

	return status;
}

uint8_t LIS3MDL_WriteRegister(LIS3MDL* sensor, uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len)
{
	osMutexAcquire(*sensor->i2c_mutex, osWaitForever);
	uint8_t status = (HAL_I2C_Mem_Write(sensor->i2c_handle, (SLAVE_ADDRESS << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, tx_data, data_len, HAL_MAX_DELAY) == HAL_OK);
	osMutexRelease(*sensor->i2c_mutex);

	if (!status)
	{
		USB_Log("LIS3MDL register write failed.\n", ERR);
	}

	return status;
}
