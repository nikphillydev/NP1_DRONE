/*
 * BMP388.hpp
 *
 *  Created on: Dec 16, 2024
 *      Author: Nikolai Philipenko
 */

#pragma once

#include "stm32g4xx_hal.h"
#include "cmsis_os.h"
#include "Utility/MovingAverageFilter.hpp"


/* BMP388 REGISTERS */
#define REG_CHIP_ID			    0x00
#define REG_ERR_REG			    0x02
#define REG_STATUS			    0x03
#define REG_DATA_0			    0x04
#define REG_DATA_1			    0x05
#define REG_DATA_2			    0x06
#define REG_DATA_3			    0x07
#define REG_DATA_4			    0x08
#define REG_DATA_5			    0x09
#define REG_SENSORTIME_0	    0x0C
#define REG_SENSORTIME_1	    0x0D
#define REG_SENSORTIME_2	    0x0E
#define REG_EVENT			    0x10
#define REG_INT_STATUS		    0x11
#define REG_FIFO_LENGTH_0	    0x12
#define REG_FIFO_LENGTH_1	    0x13
#define REG_FIFO_DATA		    0x14
#define REG_FIFO_WTM_0		    0x15
#define REG_FIFO_WTM_1		    0x16
#define REG_FIFO_CONFIG_1	    0x17
#define REG_FIFO_CONFIG_2	    0x18
#define REG_INT_CTRL		    0x19
#define REG_IF_CONF			    0x1A
#define REG_PWR_CTRL		    0x1B
#define REG_OSR				    0x1C
#define REG_ODR				    0x1D
#define REG_CONFIG			    0x1F
#define REG_CMD				    0x7E

/* BMP388 CALIBRATION REGISTERS
 * 		Non-volatile memory trimming coefficient registers */
#define REG_NVM_PAR_T1_LSB		0x31
#define REG_NVM_PAR_T1_MSB		0x32
#define REG_NVM_PAR_T2_LSB		0x33
#define REG_NVM_PAR_T2_MSB		0x34
#define REG_NVM_PAR_T3			0x35
#define REG_NVM_PAR_P1_LSB		0x36
#define REG_NVM_PAR_P1_MSB		0x37
#define REG_NVM_PAR_P2_LSB		0x38
#define REG_NVM_PAR_P2_MSB		0x39
#define REG_NVM_PAR_P3			0x3A
#define REG_NVM_PAR_P4			0x3B
#define REG_NVM_PAR_P5_LSB		0x3C
#define REG_NVM_PAR_P5_MSB		0x3D
#define REG_NVM_PAR_P6_LSB		0x3E
#define REG_NVM_PAR_P6_MSB		0x3F
#define REG_NVM_PAR_P7			0x40
#define REG_NVM_PAR_P8			0x41
#define REG_NVM_PAR_P9_LSB		0x42
#define REG_NVM_PAR_P9_MSB		0x43
#define REG_NVM_PAR_P10			0x44
#define REG_NVM_PAR_P11			0x45

#define BMP388_ADDRESS			0x76

struct BMP388_CalibrationData
{
	float par_t1;
	float par_t2;
	float par_t3;
	float par_p1;
	float par_p2;
	float par_p3;
	float par_p4;
	float par_p5;
	float par_p6;
	float par_p7;
	float par_p8;
	float par_p9;
	float par_p10;
	float par_p11;
};

class BMP388
{
public:
	BMP388(I2C_HandleTypeDef* i2c_handle, osMutexId_t& i2c_mutex, osMutexId_t& baro_data_mutex);

	// Initialization after startup
	[[nodiscard]] bool init();

	// IRQ service and logging
	bool service_irq();
	void log_data_to_gcs();

	// Getters
	float get_pressure();
	float get_altitude();
	float get_temperature();

private:
	// Low-level register read / write
	[[nodiscard]] bool read_register(uint8_t reg_addr, uint8_t* rx_data, uint16_t data_len);
	[[nodiscard]] bool write_register(uint8_t reg_addr, uint8_t* tx_data, uint16_t data_len);

	// On init helpers
	[[nodiscard]] bool read_calibration_nvm();
	[[nodiscard]] bool compute_startup_pressure();

	// I2C communication
	I2C_HandleTypeDef* i2c_handle;
	osMutexId_t& i2c_mutex;

	// Calibration
	BMP388_CalibrationData calib_data;

	// Barometer data mutex
	osMutexId_t& baro_data_mutex;

	// Barometer data
	float pressure;				// Current atmospheric pressure (Pa)
	float startup_pressure;
	float altitude; 			// Based on startup_pressure (meters)
	float temperature;			// Current temperature (degC)

	// Filter

};

















